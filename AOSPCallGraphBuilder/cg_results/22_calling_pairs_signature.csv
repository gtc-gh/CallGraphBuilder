"Caller","Callee"
"android.widget.QuickContactBadge.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.QuickContactBadge.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.QuickContactBadge.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.QuickContactBadge.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.QuickContactBadge.onQueryComplete(int, Object, Cursor)","android.os.BaseBundle.remove(java.lang.String)"
"android.widget.QuickContactBadge.onQueryComplete(int, Object, Cursor)","android.os.BaseBundle.getString(java.lang.String)"
"android.widget.QuickContactBadge.onQueryComplete(int, Object, Cursor)","android.provider.ContactsContract.Contacts.getLookupUri(long, java.lang.String)"
"android.widget.QuickContactBadge.onQueryComplete(int, Object, Cursor)","android.content.Intent.putExtras(android.os.Bundle)"
"android.widget.QuickContactBadge.onQueryComplete(int, Object, Cursor)","android.database.Cursor.getLong(int)"
"android.widget.QuickContactBadge.onQueryComplete(int, Object, Cursor)","android.database.Cursor.getString(int)"
"android.widget.QuickContactBadge.onQueryComplete(int, Object, Cursor)","android.net.Uri.fromParts(java.lang.String, java.lang.String, null)"
"android.widget.QuickContactBadge.onQueryComplete(int, Object, Cursor)","android.database.Cursor.moveToFirst()"
"android.widget.QuickContactBadge.onQueryComplete(int, Object, Cursor)","android.database.Cursor.close()"
"android.widget.QuickContactBadge.onClick(View)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.widget.QuickContactBadge.onClick(View)","android.net.Uri.withAppendedPath(android.net.Uri, java.lang.String)"
"android.widget.QuickContactBadge.onClick(View)","android.net.Uri.encode(java.lang.String)"
"android.widget.QuickContactBadge.onClick(View)","android.content.AsyncQueryHandler.startQuery(int, android.os.Bundle, android.net.Uri, java.lang.String[], null, null, null)"
"android.widget.QuickContactBadge.assignContactFromPhone(String, boolean, Bundle)","android.content.AsyncQueryHandler.startQuery(int, null, android.net.Uri, java.lang.String[], null, null, null)"
"android.widget.QuickContactBadge.assignContactFromPhone(String, boolean, Bundle)","android.net.Uri.withAppendedPath(android.net.Uri, java.lang.String)"
"android.widget.QuickContactBadge.assignContactFromEmail(String, boolean, Bundle)","android.content.AsyncQueryHandler.startQuery(int, null, android.net.Uri, java.lang.String[], null, null, null)"
"android.widget.QuickContactBadge.assignContactFromEmail(String, boolean, Bundle)","android.net.Uri.withAppendedPath(android.net.Uri, java.lang.String)"
"android.widget.QuickContactBadge.assignContactFromEmail(String, boolean, Bundle)","android.net.Uri.encode(java.lang.String)"
"android.animation.IntKeyframeSet.clone()","java.util.List.size()"
"android.animation.IntKeyframeSet.clone()","android.animation.Keyframe.clone()"
"android.animation.IntKeyframeSet.clone()","java.util.List.get(int)"
"android.animation.IntKeyframeSet.getValue(float)","android.animation.IntKeyframeSet.getIntValue(float)"
"android.animation.IntKeyframeSet.getIntValue(float)","android.animation.Keyframe.IntKeyframe.getIntValue()"
"android.animation.IntKeyframeSet.getIntValue(float)","java.lang.Number.intValue()"
"android.animation.IntKeyframeSet.getIntValue(float)","android.animation.Keyframe.getValue()"
"android.animation.IntKeyframeSet.getIntValue(float)","android.animation.Keyframe.getFraction()"
"android.animation.IntKeyframeSet.getIntValue(float)","android.animation.Keyframe.getInterpolator()"
"android.animation.IntKeyframeSet.getIntValue(float)","android.animation.TimeInterpolator.getInterpolation(float)"
"android.animation.IntKeyframeSet.getIntValue(float)","android.animation.TypeEvaluator.evaluate(float, int, int)"
"android.animation.IntKeyframeSet.getIntValue(float)","java.util.List.get(int)"
"android.util.Base64.encodeToString(byte[], int, int, int)","android.util.Base64.encode(byte[], int, int, int)"
"android.util.Base64.encodeToString(byte[], int)","android.util.Base64.encode(byte[], int)"
"android.util.Base64.encode(byte[], int, int, int)","android.util.Base64.Encoder.process(byte[], int, int, boolean)"
"android.util.Base64.decode(String, int)","java.lang.String.getBytes()"
"android.util.Base64.decode(String, int)","android.util.Base64.decode(byte[], int)"
"android.util.Base64.decode(byte[], int, int, int)","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"android.util.Base64.decode(byte[], int, int, int)","android.util.Base64.Decoder.process(byte[], int, int, boolean)"
"android.util.Base64.decode(byte[], int)","android.util.Base64.decode(byte[], int, int, int)"
"android.util.Base64.encode(byte[], int)","android.util.Base64.encode(byte[], int, int, int)"
"android.widget.TextView.getTextForAccessibility()","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.widget.TextView.getBottomVerticalOffset(boolean)","android.text.Layout.getHeight()"
"android.widget.TextView.getBottomVerticalOffset(boolean)","java.lang.CharSequence.length()"
"android.widget.TextView.getExtendedPaddingTop()","android.text.Layout.getLineCount()"
"android.widget.TextView.getExtendedPaddingTop()","android.text.Layout.getLineTop(int)"
"android.widget.TextView.shouldSpeakPasswordsForAccessibility()","android.provider.Settings.Secure.getIntForUser(android.content.ContentResolver, java.lang.String, int, int)"
"android.widget.TextView.shouldSpeakPasswordsForAccessibility()","android.content.Context.getContentResolver()"
"android.widget.TextView.deleteText_internal(int, int)","android.text.Editable.delete(int, int)"
"android.widget.TextView.getBaseline()","android.view.View.getBaseline()"
"android.widget.TextView.getBaseline()","android.text.Layout.getLineBaseline(int)"
"android.widget.TextView.setInputType(int)","android.text.method.PasswordTransformationMethod.getInstance()"
"android.widget.TextView.setInputType(int)","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.TextView.endBatchEdit()","android.widget.Editor.endBatchEdit()"
"android.widget.TextView.selectAllText()","android.text.Selection.setSelection(android.text.Spannable, int, int)"
"android.widget.TextView.selectAllText()","java.lang.CharSequence.length()"
"android.widget.TextView.makeSingleLayout(int, BoringLayout.Metrics, int, Layout.Alignment, boolean, TruncateAt, boolean)","android.text.BoringLayout.replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout.Alignment, float, float, android.text.BoringLayout.Metrics, boolean, android.text.TextUtils.TruncateAt, int)"
"android.widget.TextView.makeSingleLayout(int, BoringLayout.Metrics, int, Layout.Alignment, boolean, TruncateAt, boolean)","android.text.BoringLayout.make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout.Alignment, float, float, android.text.BoringLayout.Metrics, boolean, android.text.TextUtils.TruncateAt, int)"
"android.widget.TextView.makeSingleLayout(int, BoringLayout.Metrics, int, Layout.Alignment, boolean, TruncateAt, boolean)","android.text.BoringLayout.make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout.Alignment, float, float, android.text.BoringLayout.Metrics, boolean)"
"android.widget.TextView.makeSingleLayout(int, BoringLayout.Metrics, int, Layout.Alignment, boolean, TruncateAt, boolean)","android.text.BoringLayout.isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic, android.text.BoringLayout.Metrics)"
"android.widget.TextView.makeSingleLayout(int, BoringLayout.Metrics, int, Layout.Alignment, boolean, TruncateAt, boolean)","java.lang.CharSequence.length()"
"android.widget.TextView.makeSingleLayout(int, BoringLayout.Metrics, int, Layout.Alignment, boolean, TruncateAt, boolean)","android.text.BoringLayout.replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout.Alignment, float, float, android.text.BoringLayout.Metrics, boolean)"
"android.widget.TextView.setMovementMethod(MovementMethod)","android.widget.Editor.prepareCursorControllers()"
"android.widget.TextView.onTextContextMenuItem(int)","java.lang.Math.max(int, int)"
"android.widget.TextView.onTextContextMenuItem(int)","java.lang.CharSequence.length()"
"android.widget.TextView.onTextContextMenuItem(int)","java.lang.Math.min(int, int)"
"android.widget.TextView.getLineAtCoordinate(float)","java.lang.Math.max(float, float)"
"android.widget.TextView.setLinkTextColor(int)","android.content.res.ColorStateList.valueOf(int)"
"android.widget.TextView.setPrimaryClip(ClipData)","android.os.SystemClock.uptimeMillis()"
"android.widget.TextView.setPrimaryClip(ClipData)","android.content.ClipboardManager.setPrimaryClip(android.content.ClipData)"
"android.widget.TextView.writeToParcel(Parcel, int)","android.text.TextUtils.writeToParcel(java.lang.CharSequence, android.os.Parcel, int)"
"android.widget.TextView.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"android.widget.TextView.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.widget.TextView.onResolveDrawables(int)","android.widget.TextView.Drawables.resolveWithLayoutDirection(int)"
"android.widget.TextView.handleTextChanged(CharSequence, int, int, int)","java.lang.Math.max(int, int)"
"android.widget.TextView.handleTextChanged(CharSequence, int, int, int)","java.lang.Math.min(int, int)"
"android.widget.TextView.setTextAppearance(Context, int)","android.content.res.TypedArray.recycle()"
"android.widget.TextView.replaceText_internal(int, int, CharSequence)","android.text.Editable.replace(int, int, java.lang.CharSequence)"
"android.widget.TextView.startMarquee()","android.widget.TextView.Marquee.isStopped()"
"android.widget.TextView.startMarquee()","android.widget.TextView.Marquee.start(int)"
"android.widget.TextView.addTextChangedListener(TextWatcher)","java.util.ArrayList.add(android.text.TextWatcher)"
"android.widget.TextView.getTextColor(Context, TypedArray, int)","android.content.res.ColorStateList.getDefaultColor()"
"android.widget.TextView.setCursorVisible(boolean)","android.widget.Editor.prepareCursorControllers()"
"android.widget.TextView.setCursorVisible(boolean)","android.widget.Editor.makeBlink()"
"android.widget.TextView.onScrollChanged(int, int, int, int)","android.view.View.onScrollChanged(int, int, int, int)"
"android.widget.TextView.onScrollChanged(int, int, int, int)","android.widget.Editor.onScrollChanged()"
"android.widget.TextView.onTrackballEvent(MotionEvent)","android.text.method.MovementMethod.onTrackballEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent)"
"android.widget.TextView.onTrackballEvent(MotionEvent)","android.view.View.onTrackballEvent(android.view.MotionEvent)"
"android.widget.TextView.onPopulateAccessibilityEvent(AccessibilityEvent)","android.view.View.onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.widget.TextView.onPopulateAccessibilityEvent(AccessibilityEvent)","java.util.List.add(java.lang.CharSequence)"
"android.widget.TextView.onPopulateAccessibilityEvent(AccessibilityEvent)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.widget.TextView.onPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.getText()"
"android.widget.TextView.getWordIterator()","android.widget.Editor.getWordIterator()"
"android.widget.TextView.setTextSize(int, float)","android.content.Context.getResources()"
"android.widget.TextView.setTextSize(int, float)","android.content.res.Resources.getSystem()"
"android.widget.TextView.setImeActionLabel(CharSequence, int)","android.widget.Editor.createInputContentTypeIfNeeded()"
"android.widget.TextView.onRestoreInstanceState(Parcelable)","android.view.AbsSavedState.getSuperState()"
"android.widget.TextView.onRestoreInstanceState(Parcelable)","android.view.View.onRestoreInstanceState(android.os.Parcelable)"
"android.widget.TextView.onRestoreInstanceState(Parcelable)","android.text.Selection.setSelection(android.text.Spannable, int, int)"
"android.widget.TextView.onRestoreInstanceState(Parcelable)","java.lang.CharSequence.length()"
"android.widget.TextView.getDesiredHeight(Layout, boolean)","android.text.Layout.getLineCount()"
"android.widget.TextView.getDesiredHeight(Layout, boolean)","android.text.Layout.getLineTop(int)"
"android.widget.TextView.getDesiredHeight(Layout, boolean)","java.lang.Math.max(int, int)"
"android.widget.TextView.getDesiredHeight(Layout, boolean)","java.lang.Math.min(int, int)"
"android.widget.TextView.getVerticalOffset(boolean)","android.text.Layout.getHeight()"
"android.widget.TextView.getVerticalOffset(boolean)","java.lang.CharSequence.length()"
"android.widget.TextView.onWindowFocusChanged(boolean)","android.view.View.onWindowFocusChanged(boolean)"
"android.widget.TextView.onWindowFocusChanged(boolean)","android.widget.Editor.onWindowFocusChanged(boolean)"
"android.widget.TextView.onGenericMotionEvent(MotionEvent)","android.text.method.MovementMethod.onGenericMotionEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent)"
"android.widget.TextView.onGenericMotionEvent(MotionEvent)","android.view.View.onGenericMotionEvent(android.view.MotionEvent)"
"android.widget.TextView.invalidateRegion(int, int, boolean)","android.text.Layout.getLineBottom(int)"
"android.widget.TextView.invalidateRegion(int, int, boolean)","android.text.Layout.getLineTop(int)"
"android.widget.TextView.invalidateRegion(int, int, boolean)","android.text.Layout.getLineDescent(int)"
"android.widget.TextView.invalidateRegion(int, int, boolean)","android.text.Layout.getPrimaryHorizontal(int)"
"android.widget.TextView.invalidateRegion(int, int, boolean)","android.text.Layout.getLineForOffset(int)"
"android.widget.TextView.onPreDraw()","android.widget.Editor.SelectionModifierCursorController.isSelectionStartDragged()"
"android.widget.TextView.onPreDraw()","android.widget.Editor.startSelectionActionMode()"
"android.widget.TextView.onPreDraw()","java.lang.CharSequence.length()"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.getEventType()"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.text.Selection.getSelectionStart(java.lang.CharSequence)"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setFromIndex(int)"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setItemCount(int)"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setPassword(boolean)"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.text.Selection.getSelectionEnd(java.lang.CharSequence)"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.View.onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setToIndex(int)"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.CharSequence.length()"
"android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.TextView.onRtlPropertiesChanged(int)","android.view.View.onRtlPropertiesChanged(int)"
"android.widget.TextView.compressText(float)","android.text.Layout.getLineWidth(int)"
"android.widget.TextView.getUrls()","java.lang.CharSequence.length()"
"android.widget.TextView.getUrls()","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.URLSpan>)"
"android.widget.TextView.bringPointIntoView(int)","android.text.Layout.getHeight()"
"android.widget.TextView.bringPointIntoView(int)","android.widget.Scroller.abortAnimation()"
"android.widget.TextView.bringPointIntoView(int)","android.text.Layout.getParagraphDirection(int)"
"android.widget.TextView.bringPointIntoView(int)","android.widget.Scroller.startScroll(int, int, int, int)"
"android.widget.TextView.bringPointIntoView(int)","android.util.FloatMath.ceil(float)"
"android.widget.TextView.bringPointIntoView(int)","android.text.Layout.getParagraphAlignment(int)"
"android.widget.TextView.bringPointIntoView(int)","android.text.Layout.getLineLeft(int)"
"android.widget.TextView.bringPointIntoView(int)","android.text.Layout.getLineForOffset(int)"
"android.widget.TextView.bringPointIntoView(int)","android.util.FloatMath.floor(float)"
"android.widget.TextView.bringPointIntoView(int)","android.text.Layout.getLineRight(int)"
"android.widget.TextView.bringPointIntoView(int)","android.widget.Scroller.isFinished()"
"android.widget.TextView.bringPointIntoView(int)","android.text.Layout.getLineTop(int)"
"android.widget.TextView.bringPointIntoView(int)","android.text.Layout.getPrimaryHorizontal(int, boolean)"
"android.widget.TextView.bringPointIntoView(int)","java.lang.Math.max(int, int)"
"android.widget.TextView.bringPointIntoView(int)","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.widget.TextView.onFinishTemporaryDetach()","android.view.View.onFinishTemporaryDetach()"
"android.widget.TextView.setInputExtras(int)","android.widget.Editor.createInputContentTypeIfNeeded()"
"android.widget.TextView.canCut()","java.lang.CharSequence.length()"
"android.widget.TextView.drawableHotspotChanged(float, float)","android.view.View.drawableHotspotChanged(float, float)"
"android.widget.TextView.doFrame(long)","android.widget.TextView.Marquee.start(int)"
"android.widget.TextView.computeScroll()","android.widget.Scroller.computeScrollOffset()"
"android.widget.TextView.computeScroll()","android.widget.Scroller.getCurrY()"
"android.widget.TextView.computeScroll()","android.widget.Scroller.getCurrX()"
"android.widget.TextView.setTextColor(int)","android.content.res.ColorStateList.valueOf(int)"
"android.widget.TextView.onKeyShortcut(int, KeyEvent)","android.view.View.onKeyShortcut(int, android.view.KeyEvent)"
"android.widget.TextView.onKeyShortcut(int, KeyEvent)","android.view.KeyEvent.metaStateHasNoModifiers(int)"
"android.widget.TextView.onKeyShortcut(int, KeyEvent)","android.view.KeyEvent.getMetaState()"
"android.widget.TextView.textCanBeSelected()","android.text.method.MovementMethod.canSelectArbitrarily()"
"android.widget.TextView.removeParcelableSpans(Spannable, int, int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.ParcelableSpan>)"
"android.widget.TextView.removeParcelableSpans(Spannable, int, int)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.widget.TextView.onCommitCorrection(CorrectionInfo)","android.widget.Editor.onCommitCorrection(android.view.inputmethod.CorrectionInfo)"
"android.widget.TextView.sendAfterTextChanged(Editable)","java.util.ArrayList.size()"
"android.widget.TextView.sendAfterTextChanged(Editable)","android.text.TextWatcher.afterTextChanged(android.text.Editable)"
"android.widget.TextView.sendAfterTextChanged(Editable)","java.util.ArrayList.get(int)"
"android.widget.TextView.getFocusedRect(Rect)","android.text.Layout.getLineBottom(int)"
"android.widget.TextView.getFocusedRect(Rect)","android.text.Layout.getLineTop(int)"
"android.widget.TextView.getFocusedRect(Rect)","android.text.Layout.getPrimaryHorizontal(int)"
"android.widget.TextView.getFocusedRect(Rect)","android.text.Layout.getLineForOffset(int)"
"android.widget.TextView.setImeOptions(int)","android.widget.Editor.createInputContentTypeIfNeeded()"
"android.widget.TextView.stopMarquee()","android.widget.TextView.Marquee.isStopped()"
"android.widget.TextView.stopMarquee()","android.widget.TextView.Marquee.stop()"
"android.widget.TextView.beginBatchEdit()","android.widget.Editor.beginBatchEdit()"
"android.widget.TextView.sendBeforeTextChanged(CharSequence, int, int, int)","java.util.ArrayList.size()"
"android.widget.TextView.sendBeforeTextChanged(CharSequence, int, int, int)","android.text.TextWatcher.beforeTextChanged(java.lang.CharSequence, int, int, int)"
"android.widget.TextView.sendBeforeTextChanged(CharSequence, int, int, int)","java.util.ArrayList.get(int)"
"android.widget.TextView.removeIntersectingNonAdjacentSpans(int, int, Class)","android.text.Spanned.getSpanStart(T)"
"android.widget.TextView.removeIntersectingNonAdjacentSpans(int, int, Class)","android.text.Spanned.getSpanEnd(T)"
"android.widget.TextView.removeIntersectingNonAdjacentSpans(int, int, Class)","android.text.Spannable.removeSpan(T)"
"android.widget.TextView.removeIntersectingNonAdjacentSpans(int, int, Class)","android.text.Spanned.getSpans(int, int, java.lang.Class<T>)"
"android.widget.TextView.setCursorPosition_internal(int, int)","android.text.Selection.setSelection(android.text.Editable, int, int)"
"android.widget.TextView.stop()","android.view.Choreographer.removeFrameCallback(android.view.Choreographer.FrameCallback)"
"android.widget.TextView.stop()","android.widget.TextView.Marquee.resetScroll()"
"android.widget.TextView.setFilters(Editable, InputFilter[])","android.text.Editable.setFilters(android.text.InputFilter[])"
"android.widget.TextView.setFilters(Editable, InputFilter[])","java.lang.System.arraycopy(android.text.InputFilter[], int, android.text.InputFilter[], int, int)"
"android.widget.TextView.setSpan_internal(Object, int, int, int)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.widget.TextView.clearComposingText()","android.view.inputmethod.BaseInputConnection.removeComposingSpans(android.text.Spannable)"
"android.widget.TextView.onAttachedToWindow()","android.view.View.onAttachedToWindow()"
"android.widget.TextView.onAttachedToWindow()","android.widget.Editor.onAttachedToWindow()"
"android.widget.TextView.sendAccessibilityEvent(int)","android.view.View.sendAccessibilityEvent(int)"
"android.widget.TextView.bringTextIntoView()","android.text.Layout.getLineCount()"
"android.widget.TextView.bringTextIntoView()","android.text.Layout.getHeight()"
"android.widget.TextView.bringTextIntoView()","android.text.Layout.getLineRight(int)"
"android.widget.TextView.bringTextIntoView()","android.text.Layout.getParagraphDirection(int)"
"android.widget.TextView.bringTextIntoView()","android.util.FloatMath.ceil(float)"
"android.widget.TextView.bringTextIntoView()","android.text.Layout.getParagraphAlignment(int)"
"android.widget.TextView.bringTextIntoView()","android.text.Layout.getLineLeft(int)"
"android.widget.TextView.bringTextIntoView()","android.util.FloatMath.floor(float)"
"android.widget.TextView.setPrivateImeOptions(String)","android.widget.Editor.createInputContentTypeIfNeeded()"
"android.widget.TextView.setHintTextColor(int)","android.content.res.ColorStateList.valueOf(int)"
"android.widget.TextView.getTextColors(Context, TypedArray)","android.content.res.TypedArray.recycle()"
"android.widget.TextView.findViewsWithText(ArrayList, CharSequence, int)","java.util.ArrayList.add(android.widget.TextView)"
"android.widget.TextView.findViewsWithText(ArrayList, CharSequence, int)","java.lang.CharSequence.toString()"
"android.widget.TextView.findViewsWithText(ArrayList, CharSequence, int)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.widget.TextView.findViewsWithText(ArrayList, CharSequence, int)","android.view.View.findViewsWithText(java.util.ArrayList<android.view.View>, java.lang.CharSequence, int)"
"android.widget.TextView.findViewsWithText(ArrayList, CharSequence, int)","java.util.ArrayList.contains(android.widget.TextView)"
"android.widget.TextView.findViewsWithText(ArrayList, CharSequence, int)","java.lang.String.toLowerCase()"
"android.widget.TextView.findViewsWithText(ArrayList, CharSequence, int)","java.lang.String.contains(java.lang.String)"
"android.widget.TextView.onDragEvent(DragEvent)","android.text.Selection.setSelection(android.text.Spannable, int)"
"android.widget.TextView.onDragEvent(DragEvent)","android.widget.Editor.onDrop(android.view.DragEvent)"
"android.widget.TextView.onDragEvent(DragEvent)","android.view.DragEvent.getAction()"
"android.widget.TextView.onDragEvent(DragEvent)","android.widget.Editor.hasInsertionController()"
"android.widget.TextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.isTracking()"
"android.widget.TextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"android.widget.TextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.isCanceled()"
"android.widget.TextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.DispatcherState.startTracking(android.view.KeyEvent, android.widget.TextView)"
"android.widget.TextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.DispatcherState.handleUpEvent(android.view.KeyEvent)"
"android.widget.TextView.onKeyPreIme(int, KeyEvent)","android.view.View.onKeyPreIme(int, android.view.KeyEvent)"
"android.widget.TextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.getAction()"
"android.widget.TextView.onFocusChanged(boolean, int, Rect)","android.widget.Editor.onFocusChanged(boolean, int)"
"android.widget.TextView.onFocusChanged(boolean, int, Rect)","android.text.method.MetaKeyKeyListener.resetMetaState(android.text.Spannable)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.Spanned.getSpanStart(android.text.TextUtils.TruncateAt)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.Spannable.setSpan(android.widget.TextView.ChangeWatcher, int, int, int)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.widget.Editor.prepareCursorControllers()"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.Editable.Factory.newEditable(java.lang.CharSequence)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.widget.TextView.ChangeWatcher>)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.InputFilter.filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","java.util.ArrayList.size()"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.widget.Editor.addSpanWatchers(android.text.Spannable)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.method.MovementMethod.initialize(android.widget.TextView, android.text.Spannable)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.Spannable.Factory.newSpannable(java.lang.CharSequence)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.view.ViewConfiguration.get(android.content.Context)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.util.Linkify.addLinks(android.text.Spannable, int)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.view.ViewConfiguration.isFadingMarqueeEnabled()"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.Spannable.setSpan(android.text.method.TransformationMethod, int, int, int)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.TextUtils.stringOrSpannedString(java.lang.CharSequence)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","android.text.Spannable.removeSpan(android.widget.TextView.ChangeWatcher)"
"android.widget.TextView.setText(CharSequence, BufferType, boolean, int)","java.lang.CharSequence.length()"
"android.widget.TextView.onVisibilityChanged(View, int)","android.view.View.onVisibilityChanged(android.view.View, int)"
"android.widget.TextView.onVisibilityChanged(View, int)","android.widget.Editor.hideControllers()"
"android.widget.TextView.canPaste()","android.content.ClipboardManager.hasPrimaryClip()"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.View.onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.text.InputFilter.LengthFilter.getMax()"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setError(java.lang.CharSequence)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setPassword(boolean)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.addAction(int)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setMultiLine(boolean)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setMovementGranularities(int)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setInputType(int)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setContentInvalid(boolean)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setEditable(boolean)"
"android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setMaxTextLength(int)"
"android.widget.TextView.setKeyListener(KeyListener)","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.TextView.setKeyListener(KeyListener)","android.text.method.KeyListener.getInputType()"
"android.widget.TextView.jumpDrawablesToCurrentState()","android.view.View.jumpDrawablesToCurrentState()"
"android.widget.TextView.onScreenStateChanged(int)","android.widget.Editor.onScreenStateChanged(int)"
"android.widget.TextView.onScreenStateChanged(int)","android.view.View.onScreenStateChanged(int)"
"android.widget.TextView.canSelectText()","android.widget.Editor.hasSelectionController()"
"android.widget.TextView.canSelectText()","java.lang.CharSequence.length()"
"android.widget.TextView.resetResolvedDrawables()","android.view.View.resetResolvedDrawables()"
"android.widget.TextView.beforeTextChanged(CharSequence, int, int, int)","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.widget.TextView.beforeTextChanged(CharSequence, int, int, int)","android.view.accessibility.AccessibilityManager.getInstance(android.content.Context)"
"android.widget.TextView.beforeTextChanged(CharSequence, int, int, int)","java.lang.CharSequence.toString()"
"android.widget.TextView.setFrame(int, int, int, int)","android.widget.Editor.setFrame()"
"android.widget.TextView.setFrame(int, int, int, int)","android.view.View.setFrame(int, int, int, int)"
"android.widget.TextView.paste(int, int)","android.text.Selection.setSelection(android.text.Spannable, int)"
"android.widget.TextView.paste(int, int)","android.text.Editable.replace(int, int, java.lang.CharSequence)"
"android.widget.TextView.paste(int, int)","android.content.ClipData.getItemCount()"
"android.widget.TextView.paste(int, int)","android.content.ClipboardManager.getPrimaryClip()"
"android.widget.TextView.tick()","java.lang.ref.Reference.get()"
"android.widget.TextView.tick()","android.view.Choreographer.removeFrameCallback(android.view.Choreographer.FrameCallback)"
"android.widget.TextView.tick()","android.view.Choreographer.getFrameTime()"
"android.widget.TextView.tick()","android.view.Choreographer.postFrameCallbackDelayed(android.view.Choreographer.FrameCallback, int)"
"android.widget.TextView.tick()","android.view.Choreographer.postFrameCallback(android.view.Choreographer.FrameCallback)"
"android.widget.TextView.onCreateInputConnection(EditorInfo)","android.widget.Editor.createInputMethodStateIfNeeded()"
"android.widget.TextView.onCreateDrawableState(int)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.widget.TextView.onCreateDrawableState(int)","android.view.View.onCreateDrawableState(int)"
"android.widget.TextView.append(CharSequence, int, int)","android.text.Editable.append(java.lang.CharSequence, int, int)"
"android.widget.TextView.getLeftPaddingOffset()","java.lang.Math.min(int, float)"
"android.widget.TextView.start(int)","java.lang.ref.Reference.get()"
"android.widget.TextView.start(int)","android.widget.TextView.Marquee.stop()"
"android.widget.TextView.start(int)","android.text.Layout.getLineWidth(int)"
"android.widget.TextView.start(int)","android.view.Choreographer.postFrameCallback(android.view.Choreographer.FrameCallback)"
"android.widget.TextView.setPadding(int, int, int, int)","android.view.View.setPadding(int, int, int, int)"
"android.widget.TextView.getTopPaddingOffset()","java.lang.Math.min(int, float)"
"android.widget.TextView.desired(Layout)","android.text.Layout.getLineCount()"
"android.widget.TextView.desired(Layout)","java.lang.CharSequence.charAt(int)"
"android.widget.TextView.desired(Layout)","java.lang.Math.max(float, float)"
"android.widget.TextView.desired(Layout)","android.text.Layout.getText()"
"android.widget.TextView.desired(Layout)","android.util.FloatMath.ceil(float)"
"android.widget.TextView.desired(Layout)","android.text.Layout.getLineEnd(int)"
"android.widget.TextView.desired(Layout)","android.text.Layout.getLineWidth(int)"
"android.widget.TextView.invalidateCursor(int, int, int)","java.lang.Math.max(int, int)"
"android.widget.TextView.invalidateCursor(int, int, int)","java.lang.Math.min(int, int)"
"android.widget.TextView.convertToLocalHorizontalCoordinate(float)","java.lang.Math.max(float, float)"
"android.widget.TextView.removeMisspelledSpans(Spannable)","android.text.Spannable.removeSpan(android.text.style.SuggestionSpan)"
"android.widget.TextView.removeMisspelledSpans(Spannable)","android.text.style.SuggestionSpan.getFlags()"
"android.widget.TextView.removeMisspelledSpans(Spannable)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.SuggestionSpan>)"
"android.widget.TextView.removeMisspelledSpans(Spannable)","java.lang.CharSequence.length()"
"android.widget.TextView.setTextKeepState(CharSequence, BufferType)","android.text.Selection.setSelection(android.text.Spannable, int, int)"
"android.widget.TextView.setTextKeepState(CharSequence, BufferType)","java.lang.Math.max(int, int)"
"android.widget.TextView.setTextKeepState(CharSequence, BufferType)","java.lang.CharSequence.length()"
"android.widget.TextView.setTextKeepState(CharSequence, BufferType)","java.lang.Math.min(int, int)"
"android.widget.TextView.onDraw(Canvas)","android.text.Layout.getHeight()"
"android.widget.TextView.onDraw(Canvas)","android.text.Layout.getLineRight(int)"
"android.widget.TextView.onDraw(Canvas)","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.widget.TextView.onDraw(Canvas)","android.widget.TextView.Marquee.getScroll()"
"android.widget.TextView.onDraw(Canvas)","android.widget.TextView.Marquee.getGhostOffset()"
"android.widget.TextView.onDraw(Canvas)","android.widget.TextView.Marquee.isRunning()"
"android.widget.TextView.onDraw(Canvas)","java.lang.Math.max(int, float)"
"android.widget.TextView.onDraw(Canvas)","java.lang.Math.min(int, float)"
"android.widget.TextView.onDraw(Canvas)","java.lang.CharSequence.length()"
"android.widget.TextView.onDraw(Canvas)","android.widget.TextView.Marquee.shouldDrawGhost()"
"android.widget.TextView.sendAccessibilityEventTypeViewTextChanged(CharSequence, int, int, int)","android.view.accessibility.AccessibilityRecord.setAddedCount(int)"
"android.widget.TextView.sendAccessibilityEventTypeViewTextChanged(CharSequence, int, int, int)","android.view.accessibility.AccessibilityRecord.setBeforeText(java.lang.CharSequence)"
"android.widget.TextView.sendAccessibilityEventTypeViewTextChanged(CharSequence, int, int, int)","android.view.accessibility.AccessibilityRecord.setFromIndex(int)"
"android.widget.TextView.sendAccessibilityEventTypeViewTextChanged(CharSequence, int, int, int)","android.view.accessibility.AccessibilityEvent.obtain(int)"
"android.widget.TextView.sendAccessibilityEventTypeViewTextChanged(CharSequence, int, int, int)","android.view.accessibility.AccessibilityRecord.setRemovedCount(int)"
"android.widget.TextView.setText(char[], int, int)","android.widget.TextView.CharWrapper.set(char[], int, int)"
"android.widget.TextView.setText(char[], int, int)","java.lang.CharSequence.length()"
"android.widget.TextView.makeNewLayout(int, int, BoringLayout.Metrics, BoringLayout.Metrics, int, boolean)","android.text.BoringLayout.replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout.Alignment, float, float, android.text.BoringLayout.Metrics, boolean, android.text.TextUtils.TruncateAt, int)"
"android.widget.TextView.makeNewLayout(int, int, BoringLayout.Metrics, BoringLayout.Metrics, int, boolean)","android.text.Layout.getParagraphDirection(int)"
"android.widget.TextView.makeNewLayout(int, int, BoringLayout.Metrics, BoringLayout.Metrics, int, boolean)","android.text.BoringLayout.make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout.Alignment, float, float, android.text.BoringLayout.Metrics, boolean, android.text.TextUtils.TruncateAt, int)"
"android.widget.TextView.makeNewLayout(int, int, BoringLayout.Metrics, BoringLayout.Metrics, int, boolean)","android.text.BoringLayout.make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout.Alignment, float, float, android.text.BoringLayout.Metrics, boolean)"
"android.widget.TextView.makeNewLayout(int, int, BoringLayout.Metrics, BoringLayout.Metrics, int, boolean)","android.widget.Editor.prepareCursorControllers()"
"android.widget.TextView.makeNewLayout(int, int, BoringLayout.Metrics, BoringLayout.Metrics, int, boolean)","android.text.BoringLayout.isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic, android.text.BoringLayout.Metrics)"
"android.widget.TextView.makeNewLayout(int, int, BoringLayout.Metrics, BoringLayout.Metrics, int, boolean)","java.lang.CharSequence.length()"
"android.widget.TextView.makeNewLayout(int, int, BoringLayout.Metrics, BoringLayout.Metrics, int, boolean)","android.text.BoringLayout.replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout.Alignment, float, float, android.text.BoringLayout.Metrics, boolean)"
"android.widget.TextView.removeAdjacentSuggestionSpans(int)","android.widget.SpellChecker.haveWordBoundariesChanged(android.text.Editable, int, int, int, int)"
"android.widget.TextView.removeAdjacentSuggestionSpans(int)","android.text.Spannable.removeSpan(android.text.style.SuggestionSpan)"
"android.widget.TextView.removeAdjacentSuggestionSpans(int)","android.text.Spanned.getSpanEnd(android.text.style.SuggestionSpan)"
"android.widget.TextView.removeAdjacentSuggestionSpans(int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.SuggestionSpan>)"
"android.widget.TextView.removeAdjacentSuggestionSpans(int)","android.text.Spanned.getSpanStart(android.text.style.SuggestionSpan)"
"android.widget.TextView.setAccessibilitySelection(int, int)","android.text.Selection.removeSelection(android.text.Spannable)"
"android.widget.TextView.setAccessibilitySelection(int, int)","android.text.Selection.setSelection(android.text.Spannable, int, int)"
"android.widget.TextView.setAccessibilitySelection(int, int)","java.lang.Math.max(int, int)"
"android.widget.TextView.setAccessibilitySelection(int, int)","android.widget.Editor.hideControllers()"
"android.widget.TextView.setAccessibilitySelection(int, int)","java.lang.CharSequence.length()"
"android.widget.TextView.setAccessibilitySelection(int, int)","java.lang.Math.min(int, int)"
"android.widget.TextView.getIteratorForGranularity(int)","android.widget.AccessibilityIterators.PageTextSegmentIterator.getInstance()"
"android.widget.TextView.getIteratorForGranularity(int)","android.view.View.getIteratorForGranularity(int)"
"android.widget.TextView.getIteratorForGranularity(int)","android.text.TextUtils.isEmpty(android.text.Spannable)"
"android.widget.TextView.getIteratorForGranularity(int)","android.widget.AccessibilityIterators.LineTextSegmentIterator.getInstance()"
"android.widget.TextView.onKeyMultiple(int, int, KeyEvent)","android.view.View.onKeyMultiple(int, int, android.view.KeyEvent)"
"android.widget.TextView.onKeyMultiple(int, int, KeyEvent)","android.text.method.MovementMethod.onKeyDown(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent)"
"android.widget.TextView.onKeyMultiple(int, int, KeyEvent)","android.text.method.MovementMethod.onKeyUp(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent)"
"android.widget.TextView.onKeyMultiple(int, int, KeyEvent)","android.view.KeyEvent.changeAction(android.view.KeyEvent, int)"
"android.widget.TextView.updateAfterEdit()","android.widget.Editor.makeBlink()"
"android.widget.TextView.setExtracting(ExtractedTextRequest)","android.widget.Editor.hideControllers()"
"android.widget.TextView.setOnEditorActionListener(OnEditorActionListener)","android.widget.Editor.createInputContentTypeIfNeeded()"
"android.widget.TextView.isShowingHint()","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.widget.TextView.onMeasure(int, int)","android.text.Layout.getDesiredWidth(java.lang.CharSequence, android.text.TextPaint)"
"android.widget.TextView.onMeasure(int, int)","android.text.Layout.getLineCount()"
"android.widget.TextView.onMeasure(int, int)","android.text.Layout.getHeight()"
"android.widget.TextView.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.TextView.onMeasure(int, int)","android.util.FloatMath.ceil(float)"
"android.widget.TextView.onMeasure(int, int)","android.text.Layout.increaseWidthTo(int)"
"android.widget.TextView.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.widget.TextView.onMeasure(int, int)","java.lang.Math.min(int, int)"
"android.widget.TextView.onMeasure(int, int)","android.text.Layout.getLineTop(int)"
"android.widget.TextView.onMeasure(int, int)","java.lang.Math.max(int, int)"
"android.widget.TextView.onMeasure(int, int)","android.text.BoringLayout.isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic, android.text.BoringLayout.Metrics)"
"android.widget.TextView.onMeasure(int, int)","android.text.Layout.getWidth()"
"android.widget.TextView.onMeasure(int, int)","android.text.Layout.getEllipsizedWidth()"
"android.widget.TextView.getInputExtras(boolean)","android.widget.Editor.createInputContentTypeIfNeeded()"
"android.widget.TextView.performAccessibilityActionInternal(int, Bundle)","android.text.Selection.removeSelection(android.text.Spannable)"
"android.widget.TextView.performAccessibilityActionInternal(int, Bundle)","android.text.Selection.setSelection(android.text.Spannable, int, int)"
"android.widget.TextView.performAccessibilityActionInternal(int, Bundle)","android.widget.Editor.startSelectionActionMode()"
"android.widget.TextView.performAccessibilityActionInternal(int, Bundle)","android.view.View.performAccessibilityActionInternal(int, android.os.Bundle)"
"android.widget.TextView.performAccessibilityActionInternal(int, Bundle)","android.os.BaseBundle.getInt(java.lang.String, int)"
"android.widget.TextView.performAccessibilityActionInternal(int, Bundle)","java.lang.CharSequence.length()"
"android.widget.TextView.performAccessibilityActionInternal(int, Bundle)","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.TextView.debug(int)","android.text.Layout.getHeight()"
"android.widget.TextView.debug(int)","android.view.View.debug(int)"
"android.widget.TextView.debug(int)","android.text.Layout.getWidth()"
"android.widget.TextView.getRightFadingEdgeStrength()","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.widget.TextView.getRightFadingEdgeStrength()","android.widget.TextView.Marquee.getScroll()"
"android.widget.TextView.getRightFadingEdgeStrength()","android.widget.TextView.Marquee.isStopped()"
"android.widget.TextView.getRightFadingEdgeStrength()","android.widget.TextView.Marquee.getMaxFadeScroll()"
"android.widget.TextView.getRightFadingEdgeStrength()","android.view.View.getRightFadingEdgeStrength()"
"android.widget.TextView.getRightFadingEdgeStrength()","android.text.Layout.getParagraphDirection(int)"
"android.widget.TextView.getRightFadingEdgeStrength()","android.text.Layout.getLineWidth(int)"
"android.widget.TextView.getUpdatedHighlightPath()","android.os.SystemClock.uptimeMillis()"
"android.widget.TextView.getUpdatedHighlightPath()","android.widget.Editor.updateCursorsPositions()"
"android.widget.TextView.getUpdatedHighlightPath()","android.widget.Editor.isCursorVisible()"
"android.widget.TextView.onTouchEvent(MotionEvent)","android.view.View.onTouchEvent(android.view.MotionEvent)"
"android.widget.TextView.onTouchEvent(MotionEvent)","android.widget.Editor.onTouchUpEvent(android.view.MotionEvent)"
"android.widget.TextView.onTouchEvent(MotionEvent)","android.widget.Editor.onTouchEvent(android.view.MotionEvent)"
"android.widget.TextView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.widget.TextView.onTouchEvent(MotionEvent)","android.text.method.MovementMethod.onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent)"
"android.widget.TextView.onTouchEvent(MotionEvent)","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.TextView.setExtractedText(ExtractedText)","android.text.Editable.replace(int, int, java.lang.CharSequence)"
"android.widget.TextView.setExtractedText(ExtractedText)","android.text.Selection.setSelection(android.text.Spannable, int, int)"
"android.widget.TextView.setExtractedText(ExtractedText)","java.lang.CharSequence.length()"
"android.widget.TextView.setEnabled(boolean)","android.view.View.setEnabled(boolean)"
"android.widget.TextView.setEnabled(boolean)","android.widget.Editor.invalidateTextDisplayList()"
"android.widget.TextView.setEnabled(boolean)","android.widget.Editor.prepareCursorControllers()"
"android.widget.TextView.setEnabled(boolean)","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.TextView.setEnabled(boolean)","android.widget.Editor.makeBlink()"
"android.widget.TextView.updateTextServicesLocaleAsync()","android.os.AsyncTask.execute(java.lang.Runnable)"
"android.widget.TextView.getInterestingRect(Rect, int)","android.text.Layout.getLineCount()"
"android.widget.TextView.getBottomPaddingOffset()","java.lang.Math.max(int, float)"
"android.widget.TextView.canMarquee()","android.text.Layout.getLineWidth(int)"
"android.widget.TextView.setPaddingRelative(int, int, int, int)","android.view.View.setPaddingRelative(int, int, int, int)"
"android.widget.TextView.getChars(int, int, char[], int)","java.lang.System.arraycopy(char[], int, char[], int, int)"
"android.widget.TextView.onKeyUp(int, KeyEvent)","android.widget.TextView.OnEditorActionListener.onEditorAction(android.widget.TextView, int, android.view.KeyEvent)"
"android.widget.TextView.onKeyUp(int, KeyEvent)","android.text.method.MovementMethod.onKeyUp(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent)"
"android.widget.TextView.onKeyUp(int, KeyEvent)","android.view.View.onKeyUp(int, android.view.KeyEvent)"
"android.widget.TextView.onKeyUp(int, KeyEvent)","android.view.KeyEvent.hasNoModifiers()"
"android.widget.TextView.onKeyUp(int, KeyEvent)","android.view.KeyEvent.getFlags()"
"android.widget.TextView.onKeyUp(int, KeyEvent)","android.view.KeyEvent.isModifierKey(int)"
"android.widget.TextView.onKeyUp(int, KeyEvent)","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.TextView.checkForRelayout()","android.text.Layout.getHeight()"
"android.widget.TextView.checkForRelayout()","android.text.Layout.getWidth()"
"android.widget.TextView.updateTextServicesLocaleLocked()","android.view.textservice.TextServicesManager.getCurrentSpellCheckerSubtype(boolean)"
"android.widget.TextView.updateTextServicesLocaleLocked()","android.view.textservice.SpellCheckerSubtype.getLocale()"
"android.widget.TextView.updateTextServicesLocaleLocked()","android.content.Context.getSystemService(java.lang.String)"
"android.widget.TextView.updateTextServicesLocaleLocked()","android.view.textservice.SpellCheckerSubtype.constructLocaleFromString(java.lang.String)"
"android.widget.TextView.onStartTemporaryDetach()","android.view.View.onStartTemporaryDetach()"
"android.widget.TextView.performLongClick()","android.widget.Editor.performLongClick(boolean)"
"android.widget.TextView.performLongClick()","android.view.View.performLongClick()"
"android.widget.TextView.canCopy()","java.lang.CharSequence.length()"
"android.widget.TextView.getLeftFadingEdgeStrength()","android.text.Layout.getLineRight(int)"
"android.widget.TextView.getLeftFadingEdgeStrength()","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.widget.TextView.getLeftFadingEdgeStrength()","android.widget.TextView.Marquee.getScroll()"
"android.widget.TextView.getLeftFadingEdgeStrength()","android.widget.TextView.Marquee.isStopped()"
"android.widget.TextView.getLeftFadingEdgeStrength()","android.view.View.getLeftFadingEdgeStrength()"
"android.widget.TextView.getLeftFadingEdgeStrength()","android.text.Layout.getParagraphDirection(int)"
"android.widget.TextView.getLeftFadingEdgeStrength()","android.widget.TextView.Marquee.shouldDrawLeftFade()"
"android.widget.TextView.getLeftFadingEdgeStrength()","android.text.Layout.getLineLeft(int)"
"android.widget.TextView.isInputMethodTarget()","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.TextView.spanChange(Spanned, Object, int, int, int, int)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.widget.TextView.spanChange(Spanned, Object, int, int, int, int)","android.text.method.MetaKeyKeyListener.isMetaTracker(android.text.Spanned, java.lang.Object)"
"android.widget.TextView.spanChange(Spanned, Object, int, int, int, int)","android.text.Selection.getSelectionEnd(android.text.Spanned)"
"android.widget.TextView.spanChange(Spanned, Object, int, int, int, int)","android.widget.SpellChecker.onSpellCheckSpanRemoved(android.text.style.SpellCheckSpan)"
"android.widget.TextView.spanChange(Spanned, Object, int, int, int, int)","android.text.method.MetaKeyKeyListener.isSelectingMetaTracker(android.text.Spanned, java.lang.Object)"
"android.widget.TextView.spanChange(Spanned, Object, int, int, int, int)","android.text.Selection.getSelectionStart(android.text.Spanned)"
"android.widget.TextView.spanChange(Spanned, Object, int, int, int, int)","android.widget.Editor.invalidateTextDisplayList(android.text.Layout, int, int)"
"android.widget.TextView.spanChange(Spanned, Object, int, int, int, int)","android.widget.Editor.makeBlink()"
"android.widget.TextView.resolveWithLayoutDirection(int)","android.widget.TextView.Drawables.applyErrorDrawableIfNeeded(int)"
"android.widget.TextView.resolveWithLayoutDirection(int)","android.widget.TextView.Drawables.updateDrawablesLayoutDirection(int)"
"android.widget.TextView.computeVerticalScrollRange()","android.text.Layout.getHeight()"
"android.widget.TextView.computeVerticalScrollRange()","android.view.View.computeVerticalScrollRange()"
"android.widget.TextView.getLineCount()","android.text.Layout.getLineCount()"
"android.widget.TextView.drawableStateChanged()","android.view.View.drawableStateChanged()"
"android.widget.TextView.drawableStateChanged()","android.content.res.ColorStateList.isStateful()"
"android.widget.TextView.setGravity(int)","android.text.Layout.getWidth()"
"android.widget.TextView.setTextIsSelectable(boolean)","android.widget.Editor.prepareCursorControllers()"
"android.widget.TextView.sendOnTextChanged(CharSequence, int, int, int)","java.util.ArrayList.size()"
"android.widget.TextView.sendOnTextChanged(CharSequence, int, int, int)","android.text.TextWatcher.onTextChanged(java.lang.CharSequence, int, int, int)"
"android.widget.TextView.sendOnTextChanged(CharSequence, int, int, int)","android.widget.Editor.sendOnTextChanged(int, int)"
"android.widget.TextView.sendOnTextChanged(CharSequence, int, int, int)","java.util.ArrayList.get(int)"
"android.widget.TextView.onKeyDown(int, KeyEvent)","android.view.View.onKeyDown(int, android.view.KeyEvent)"
"android.widget.TextView.moveCursorToVisibleOffset()","android.text.Selection.setSelection(android.text.Spannable, int)"
"android.widget.TextView.moveCursorToVisibleOffset()","android.text.Layout.getLineTop(int)"
"android.widget.TextView.moveCursorToVisibleOffset()","android.text.Layout.getOffsetForHorizontal(int, int)"
"android.widget.TextView.moveCursorToVisibleOffset()","android.text.Layout.getLineForVertical(int)"
"android.widget.TextView.moveCursorToVisibleOffset()","android.text.Layout.getLineForOffset(int)"
"android.widget.TextView.getExtendedPaddingBottom()","android.text.Layout.getLineCount()"
"android.widget.TextView.getExtendedPaddingBottom()","android.text.Layout.getLineTop(int)"
"android.widget.TextView.stopSelectionActionMode()","android.widget.Editor.stopSelectionActionMode()"
"android.widget.TextView.setShadowLayer(float, float, float, int)","android.widget.Editor.invalidateTextDisplayList()"
"android.widget.TextView.onDetachedFromWindowInternal()","android.view.View.onDetachedFromWindowInternal()"
"android.widget.TextView.onDetachedFromWindowInternal()","android.widget.Editor.onDetachedFromWindow()"
"android.widget.TextView.getFadeHeight(boolean)","android.text.Layout.getHeight()"
"android.widget.TextView.cancelLongPress()","android.view.View.cancelLongPress()"
"android.widget.TextView.computeHorizontalScrollRange()","android.view.View.computeHorizontalScrollRange()"
"android.widget.TextView.computeHorizontalScrollRange()","android.text.Layout.getWidth()"
"android.widget.TextView.computeHorizontalScrollRange()","android.text.Layout.getLineWidth(int)"
"android.widget.TextView.setTransformationMethod(TransformationMethod)","android.text.Spannable.removeSpan(android.text.method.TransformationMethod)"
"android.widget.TextView.setTransformationMethod(TransformationMethod)","android.text.method.TransformationMethod2.setLengthChangesAllowed(boolean)"
"android.widget.TextView.updateTextColors()","android.widget.Editor.invalidateTextDisplayList()"
"android.widget.TextView.updateTextColors()","java.lang.CharSequence.length()"
"android.widget.TextView.onSaveInstanceState()","android.text.Spannable.removeSpan(android.text.style.SuggestionRangeSpan)"
"android.widget.TextView.onSaveInstanceState()","android.view.View.onSaveInstanceState()"
"android.widget.TextView.onSaveInstanceState()","java.lang.CharSequence.toString()"
"android.widget.TextView.nullLayouts()","android.widget.Editor.prepareCursorControllers()"
"android.widget.TextView.afterTextChanged(Editable)","android.text.method.MetaKeyKeyListener.getMetaState(android.text.Editable, int)"
"android.widget.TextView.removeSuggestionSpans(CharSequence)","android.text.Spannable.removeSpan(android.text.style.SuggestionSpan)"
"android.widget.TextView.removeSuggestionSpans(CharSequence)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.SuggestionSpan>)"
"android.widget.TextView.removeSuggestionSpans(CharSequence)","java.lang.CharSequence.length()"
"android.widget.TextView.setInputType(int, boolean)","android.text.method.DateKeyListener.getInstance()"
"android.widget.TextView.setInputType(int, boolean)","android.text.method.TimeKeyListener.getInstance()"
"android.widget.TextView.setInputType(int, boolean)","android.text.method.TextKeyListener.getInstance()"
"android.widget.TextView.setInputType(int, boolean)","android.text.method.DialerKeyListener.getInstance()"
"android.widget.TextView.setInputType(int, boolean)","android.text.method.DateTimeKeyListener.getInstance()"
"android.widget.TextView.setInputType(int, boolean)","android.text.method.DigitsKeyListener.getInstance(boolean, boolean)"
"android.widget.TextView.setInputType(int, boolean)","android.text.method.TextKeyListener.getInstance(boolean, android.text.method.TextKeyListener.Capitalize)"
"android.widget.TextView.onLayout(boolean, int, int, int, int)","android.view.View.onLayout(boolean, int, int, int, int)"
"android.widget.TextView.getTextServicesLocale(boolean)","java.util.Locale.getDefault()"
"android.widget.TextView.resetScroll()","java.lang.ref.Reference.get()"
"android.widget.TextView.extractText(ExtractedTextRequest, ExtractedText)","android.widget.Editor.extractText(android.view.inputmethod.ExtractedTextRequest, android.view.inputmethod.ExtractedText)"
"android.widget.TextView.doKeyDown(int, KeyEvent, KeyEvent)","android.text.method.MovementMethod.onKeyDown(android.widget.TextView, android.text.Spannable, int, android.view.KeyEvent)"
"android.widget.TextView.doKeyDown(int, KeyEvent, KeyEvent)","android.widget.TextView.OnEditorActionListener.onEditorAction(android.widget.TextView, int, android.view.KeyEvent)"
"android.widget.TextView.doKeyDown(int, KeyEvent, KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"android.widget.TextView.doKeyDown(int, KeyEvent, KeyEvent)","android.text.method.MovementMethod.onKeyOther(android.widget.TextView, android.text.Spannable, android.view.KeyEvent)"
"android.widget.TextView.doKeyDown(int, KeyEvent, KeyEvent)","android.view.KeyEvent.hasModifiers(int)"
"android.widget.TextView.doKeyDown(int, KeyEvent, KeyEvent)","android.view.KeyEvent.hasNoModifiers()"
"android.widget.TextView.doKeyDown(int, KeyEvent, KeyEvent)","android.view.KeyEvent.getFlags()"
"android.widget.TextView.doKeyDown(int, KeyEvent, KeyEvent)","android.view.KeyEvent.isModifierKey(int)"
"android.widget.TextView.onTextChanged(CharSequence, int, int, int)","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.widget.TextView.onTextChanged(CharSequence, int, int, int)","android.view.accessibility.AccessibilityManager.getInstance(android.content.Context)"
"android.widget.TextView.dispatchFinishTemporaryDetach()","android.view.View.dispatchFinishTemporaryDetach()"
"android.widget.TextView.setSelected(boolean)","android.view.View.setSelected(boolean)"
"android.widget.TextView.setUndoManager(UndoManager, String)","android.content.UndoManager.getOwner(java.lang.String, android.widget.TextView)"
"android.widget.TextView.setHint(CharSequence)","android.text.TextUtils.stringOrSpannedString(java.lang.CharSequence)"
"android.widget.TextView.setHint(CharSequence)","android.widget.Editor.invalidateTextDisplayList()"
"android.widget.TextView.setHint(CharSequence)","java.lang.CharSequence.length()"
"android.widget.TextView.removeTextChangedListener(TextWatcher)","java.util.ArrayList.indexOf(android.text.TextWatcher)"
"android.widget.TextView.removeTextChangedListener(TextWatcher)","java.util.ArrayList.remove(int)"
"android.widget.TextView.getRightPaddingOffset()","java.lang.Math.max(int, float)"
"android.widget.TextView.onEditorAction(int)","android.os.SystemClock.uptimeMillis()"
"android.widget.TextView.onEditorAction(int)","android.view.ViewRootImpl.dispatchKeyFromIme(android.view.KeyEvent)"
"android.widget.TextView.onEditorAction(int)","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.TextView.onEditorAction(int)","android.widget.TextView.OnEditorActionListener.onEditorAction(android.widget.TextView, int, null)"
"android.bluetooth.BluetoothGattCharacteristic.bytesToFloat(byte, byte, byte, byte)","android.bluetooth.BluetoothGattCharacteristic.unsignedToSigned(int, int)"
"android.bluetooth.BluetoothGattCharacteristic.bytesToFloat(byte, byte, byte, byte)","java.lang.Math.pow(int, byte)"
"android.bluetooth.BluetoothGattCharacteristic.bytesToFloat(byte, byte, byte, byte)","android.bluetooth.BluetoothGattCharacteristic.unsignedByteToInt(byte)"
"android.bluetooth.BluetoothGattCharacteristic.getDescriptor(UUID)","android.bluetooth.BluetoothGattDescriptor.getUuid()"
"android.bluetooth.BluetoothGattCharacteristic.getDescriptor(UUID)","java.util.UUID.equals(java.util.UUID)"
"android.bluetooth.BluetoothGattCharacteristic.setValue(int, int, int)","android.bluetooth.BluetoothGattCharacteristic.getTypeLen(int)"
"android.bluetooth.BluetoothGattCharacteristic.setValue(int, int, int)","android.bluetooth.BluetoothGattCharacteristic.intToSignedBits(int, int)"
"android.bluetooth.BluetoothGattCharacteristic.bytesToFloat(byte, byte)","android.bluetooth.BluetoothGattCharacteristic.unsignedToSigned(int, int)"
"android.bluetooth.BluetoothGattCharacteristic.bytesToFloat(byte, byte)","android.bluetooth.BluetoothGattCharacteristic.unsignedByteToInt(byte)"
"android.bluetooth.BluetoothGattCharacteristic.bytesToFloat(byte, byte)","java.lang.Math.pow(int, int)"
"android.bluetooth.BluetoothGattCharacteristic.setValue(String)","java.lang.String.getBytes()"
"android.bluetooth.BluetoothGattCharacteristic.addDescriptor(BluetoothGattDescriptor)","java.util.List.add(android.bluetooth.BluetoothGattDescriptor)"
"android.bluetooth.BluetoothGattCharacteristic.addDescriptor(BluetoothGattDescriptor)","android.bluetooth.BluetoothGattDescriptor.setCharacteristic(android.bluetooth.BluetoothGattCharacteristic)"
"android.bluetooth.BluetoothGattCharacteristic.getDescriptor(UUID, int)","android.bluetooth.BluetoothGattDescriptor.getUuid()"
"android.bluetooth.BluetoothGattCharacteristic.getDescriptor(UUID, int)","android.bluetooth.BluetoothGattDescriptor.getInstanceId()"
"android.bluetooth.BluetoothGattCharacteristic.getDescriptor(UUID, int)","java.util.UUID.equals(java.util.UUID)"
"android.bluetooth.BluetoothGattCharacteristic.unsignedBytesToInt(byte, byte)","android.bluetooth.BluetoothGattCharacteristic.unsignedByteToInt(byte)"
"android.bluetooth.BluetoothGattCharacteristic.getIntValue(int, int)","android.bluetooth.BluetoothGattCharacteristic.unsignedToSigned(int, int)"
"android.bluetooth.BluetoothGattCharacteristic.getIntValue(int, int)","android.bluetooth.BluetoothGattCharacteristic.unsignedBytesToInt(byte, byte, byte, byte)"
"android.bluetooth.BluetoothGattCharacteristic.getIntValue(int, int)","android.bluetooth.BluetoothGattCharacteristic.getTypeLen(int)"
"android.bluetooth.BluetoothGattCharacteristic.getIntValue(int, int)","android.bluetooth.BluetoothGattCharacteristic.unsignedByteToInt(byte)"
"android.bluetooth.BluetoothGattCharacteristic.getIntValue(int, int)","android.bluetooth.BluetoothGattCharacteristic.unsignedBytesToInt(byte, byte)"
"android.bluetooth.BluetoothGattCharacteristic.unsignedBytesToInt(byte, byte, byte, byte)","android.bluetooth.BluetoothGattCharacteristic.unsignedByteToInt(byte)"
"android.bluetooth.BluetoothGattCharacteristic.getFloatValue(int, int)","android.bluetooth.BluetoothGattCharacteristic.bytesToFloat(byte, byte, byte, byte)"
"android.bluetooth.BluetoothGattCharacteristic.getFloatValue(int, int)","android.bluetooth.BluetoothGattCharacteristic.bytesToFloat(byte, byte)"
"android.bluetooth.BluetoothGattCharacteristic.getFloatValue(int, int)","android.bluetooth.BluetoothGattCharacteristic.getTypeLen(int)"
"android.bluetooth.BluetoothGattCharacteristic.setValue(int, int, int, int)","android.bluetooth.BluetoothGattCharacteristic.getTypeLen(int)"
"android.bluetooth.BluetoothGattCharacteristic.setValue(int, int, int, int)","android.bluetooth.BluetoothGattCharacteristic.intToSignedBits(int, int)"
"android.util.TimeUtils.formatUptime(long)","android.os.SystemClock.uptimeMillis()"
"android.util.TimeUtils.getTimeZones(String)","java.util.ArrayList.add(java.util.TimeZone)"
"android.util.TimeUtils.getTimeZones(String)","java.lang.String.startsWith(java.lang.String)"
"android.util.TimeUtils.getTimeZones(String)","java.util.TimeZone.getTimeZone(java.lang.String)"
"android.util.TimeUtils.getTimeZones(String)","android.util.AttributeSet.getAttributeValue(null, java.lang.String)"
"android.util.TimeUtils.getTimeZones(String)","java.lang.String.equals(java.lang.String)"
"android.util.TimeUtils.getTimeZones(String)","android.content.res.XmlResourceParser.close()"
"android.util.TimeUtils.getTimeZones(String)","android.content.res.Resources.getSystem()"
"android.util.TimeUtils.getTimeZones(String)","java.util.TimeZone.getID()"
"android.util.TimeUtils.formatDuration(long, PrintWriter, int)","android.util.TimeUtils.formatDurationLocked(long, int)"
"android.util.TimeUtils.formatDuration(long, PrintWriter, int)","java.io.PrintWriter.print(java.lang.String)"
"android.util.TimeUtils.getTimeZonesWithUniqueOffsets(String)","java.util.ArrayList.add(java.util.TimeZone)"
"android.util.TimeUtils.getTimeZonesWithUniqueOffsets(String)","java.util.ArrayList.size()"
"android.util.TimeUtils.getTimeZonesWithUniqueOffsets(String)","android.util.TimeUtils.getTimeZones(java.lang.String)"
"android.util.TimeUtils.getTimeZonesWithUniqueOffsets(String)","java.lang.String.equals(java.lang.String)"
"android.util.TimeUtils.getTimeZonesWithUniqueOffsets(String)","java.util.ArrayList.get(int)"
"android.util.TimeUtils.getTimeZonesWithUniqueOffsets(String)","java.util.TimeZone.getRawOffset()"
"android.util.TimeUtils.formatDuration(long, StringBuilder)","android.util.TimeUtils.formatDurationLocked(long, int)"
"android.util.TimeUtils.formatDuration(long, StringBuilder)","java.lang.StringBuilder.append(char[], int, int)"
"android.util.TimeUtils.getTimeZone(int, boolean, long, String)","java.util.TimeZone.getDefault()"
"android.util.TimeUtils.getTimeZone(int, boolean, long, String)","java.util.TimeZone.inDaylightTime(java.util.Date)"
"android.util.TimeUtils.getTimeZone(int, boolean, long, String)","java.util.TimeZone.getOffset(long)"
"android.util.TimeUtils.getTimeZone(int, boolean, long, String)","android.util.TimeUtils.getTimeZones(java.lang.String)"
"android.util.TimeUtils.getTimeZone(int, boolean, long, String)","java.lang.String.equals(java.lang.String)"
"android.util.TimeUtils.getTimeZone(int, boolean, long, String)","java.util.TimeZone.getID()"
"android.util.TimeUtils.formatDurationLocked(long, int)","java.lang.Math.floor(long)"
"android.util.TimeUtils.formatDurationLocked(long, int)","android.util.TimeUtils.printField(char[], int, char, int, boolean, int)"
"android.util.TimeUtils.formatDurationLocked(long, int)","android.util.TimeUtils.accumField(int, int, boolean, int)"
"android.util.TimeUtils.logTimeOfDay(long)","java.lang.Long.toString(long)"
"android.util.TimeUtils.logTimeOfDay(long)","java.util.Calendar.setTimeInMillis(long)"
"android.util.TimeUtils.logTimeOfDay(long)","java.util.Calendar.getInstance()"
"android.util.TimeUtils.logTimeOfDay(long)","java.lang.String.format(java.lang.String, java.util.Calendar, java.util.Calendar, java.util.Calendar, java.util.Calendar, java.util.Calendar, java.util.Calendar)"
"android.util.TimeUtils.formatDuration(long, PrintWriter)","android.util.TimeUtils.formatDuration(long, java.io.PrintWriter, int)"
"android.util.TimeUtils.formatDuration(long, long, PrintWriter)","android.util.TimeUtils.formatDuration(long, java.io.PrintWriter, int)"
"android.util.TimeUtils.formatDuration(long, long, PrintWriter)","java.io.PrintWriter.print(java.lang.String)"
"com.android.server.AppWidgetBackupBridge.restoreStarting(int)","com.android.server.WidgetBackupProvider.restoreStarting(int)"
"com.android.server.AppWidgetBackupBridge.restoreFinished(int)","com.android.server.WidgetBackupProvider.restoreFinished(int)"
"com.android.server.AppWidgetBackupBridge.getWidgetParticipants(int)","com.android.server.WidgetBackupProvider.getWidgetParticipants(int)"
"com.android.server.AppWidgetBackupBridge.getWidgetState(String, int)","com.android.server.WidgetBackupProvider.getWidgetState(java.lang.String, int)"
"com.android.server.AppWidgetBackupBridge.restoreWidgetState(String, byte[], int)","com.android.server.WidgetBackupProvider.restoreWidgetState(java.lang.String, byte[], int)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.abortCaptures()","android.hardware.camera2.impl.CameraCaptureSessionImpl.checkNotClosed()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.abortCaptures()","android.hardware.camera2.utils.TaskSingleDrainer.taskStarted()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.abortCaptures()","android.hardware.camera2.impl.CameraDeviceImpl.flush()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.finalize()","android.hardware.camera2.impl.CameraCaptureSessionImpl.close()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.finalize()","java.lang.Object.finalize()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.captureBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.createCaptureCallbackProxy(android.os.Handler, android.hardware.camera2.CameraCaptureSession.CaptureCallback)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.captureBurst(List, CaptureCallback, Handler)","java.util.List.isEmpty()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.captureBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.checkHandler(android.os.Handler, android.hardware.camera2.CameraCaptureSession.CaptureCallback)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.captureBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.captureBurst(java.util.List<android.hardware.camera2.CaptureRequest>, android.hardware.camera2.impl.CameraDeviceImpl.CaptureCallback, android.os.Handler)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.captureBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.checkNotClosed()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.captureBurst(List, CaptureCallback, Handler)","java.util.List.toArray(android.hardware.camera2.CaptureRequest[])"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.captureBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.addPendingSequence(int)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.onDrained()","android.hardware.camera2.CameraCaptureSession.StateCallback.onClosed(android.hardware.camera2.impl.CameraCaptureSessionImpl)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingRequest(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.createCaptureCallbackProxy(android.os.Handler, android.hardware.camera2.CameraCaptureSession.CaptureCallback)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingRequest(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.checkHandler(android.os.Handler, android.hardware.camera2.CameraCaptureSession.CaptureCallback)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingRequest(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.checkNotClosed()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingRequest(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.addPendingSequence(int)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingRequest(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.setRepeatingRequest(android.hardware.camera2.CaptureRequest, android.hardware.camera2.impl.CameraDeviceImpl.CaptureCallback, android.os.Handler)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.finishPendingSequence(int)","android.hardware.camera2.utils.TaskDrainer.taskFinished(int)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.createCaptureCallbackProxy(android.os.Handler, android.hardware.camera2.CameraCaptureSession.CaptureCallback)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingBurst(List, CaptureCallback, Handler)","java.util.List.isEmpty()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.checkHandler(android.os.Handler, android.hardware.camera2.CameraCaptureSession.CaptureCallback)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.setRepeatingBurst(java.util.List<android.hardware.camera2.CaptureRequest>, android.hardware.camera2.impl.CameraDeviceImpl.CaptureCallback, android.os.Handler)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.checkNotClosed()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingBurst(List, CaptureCallback, Handler)","java.util.List.toArray(android.hardware.camera2.CaptureRequest[])"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingBurst(List, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.addPendingSequence(int)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.close()","android.hardware.camera2.impl.CameraDeviceImpl.stopRepeating()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.close()","android.hardware.camera2.CameraCaptureSession.StateCallback.onClosed(android.hardware.camera2.impl.CameraCaptureSessionImpl)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.close()","android.hardware.camera2.utils.TaskDrainer.beginDrain()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.replaceSessionClose()","android.hardware.camera2.impl.CameraCaptureSessionImpl.close()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.capture(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.createCaptureCallbackProxy(android.os.Handler, android.hardware.camera2.CameraCaptureSession.CaptureCallback)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.capture(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.checkHandler(android.os.Handler, android.hardware.camera2.CameraCaptureSession.CaptureCallback)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.capture(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.checkNotClosed()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.capture(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.capture(android.hardware.camera2.CaptureRequest, android.hardware.camera2.impl.CameraDeviceImpl.CaptureCallback, android.os.Handler)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.capture(CaptureRequest, CaptureCallback, Handler)","android.hardware.camera2.impl.CameraCaptureSessionImpl.addPendingSequence(int)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.stopRepeating()","android.hardware.camera2.impl.CameraDeviceImpl.stopRepeating()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.stopRepeating()","android.hardware.camera2.impl.CameraCaptureSessionImpl.checkNotClosed()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.addPendingSequence(int)","android.hardware.camera2.utils.TaskDrainer.taskStarted(int)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.getDeviceStateCallback()","android.hardware.camera2.utils.TaskSingleDrainer.taskFinished()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.getDeviceStateCallback()","android.hardware.camera2.CameraDevice.close()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.getDeviceStateCallback()","android.hardware.camera2.utils.TaskSingleDrainer.taskStarted()"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.getDeviceStateCallback()","android.hardware.camera2.CameraCaptureSession.StateCallback.onActive(android.hardware.camera2.CameraCaptureSession)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.getDeviceStateCallback()","android.hardware.camera2.CameraCaptureSession.StateCallback.onReady(android.hardware.camera2.CameraCaptureSession)"
"android.hardware.camera2.impl.CameraCaptureSessionImpl.createCaptureCallbackProxy(Handler, CaptureCallback)","android.hardware.camera2.impl.CameraCaptureSessionImpl.finishPendingSequence(int)"
"android.content.pm.Signature.getChainSignatures()","java.security.cert.Certificate.getEncoded()"
"android.content.pm.Signature.bounce(CertificateFactory, Signature)","java.security.cert.Certificate.getEncoded()"
"android.content.pm.Signature.bounce(CertificateFactory, Signature)","java.lang.Math.abs(int)"
"android.content.pm.Signature.bounce(CertificateFactory, Signature)","java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)"
"android.content.pm.Signature.toCharsString()","android.content.pm.Signature.toChars()"
"android.content.pm.Signature.toCharsString()","java.lang.ref.SoftReference.get()"
"android.content.pm.Signature.getPublicKey()","java.security.cert.CertificateFactory.getInstance(java.lang.String)"
"android.content.pm.Signature.getPublicKey()","java.security.cert.CertificateFactory.generateCertificate(java.io.ByteArrayInputStream)"
"android.content.pm.Signature.getPublicKey()","java.security.cert.Certificate.getPublicKey()"
"android.content.pm.Signature.writeToParcel(Parcel, int)","android.os.Parcel.writeByteArray(byte[])"
"android.content.pm.Signature.hashCode()","java.util.Arrays.hashCode(byte[])"
"android.content.pm.Signature.areEffectiveMatch(Signature[], Signature[])","java.security.cert.CertificateFactory.getInstance(java.lang.String)"
"android.content.pm.Signature.areEffectiveMatch(Signature[], Signature[])","android.content.pm.Signature.areExactMatch(android.content.pm.Signature[], android.content.pm.Signature[])"
"android.content.pm.Signature.areEffectiveMatch(Signature[], Signature[])","android.content.pm.Signature.bounce(java.security.cert.CertificateFactory, android.content.pm.Signature)"
"android.content.pm.Signature.areExactMatch(Signature[], Signature[])","com.android.internal.util.ArrayUtils.containsAll(android.content.pm.Signature[], android.content.pm.Signature[])"
"android.content.pm.Signature.equals(Object)","java.util.Arrays.equals(byte[], byte[])"
"android.content.pm.Signature.toByteArray()","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"android.content.pm.Signature.toChars()","android.content.pm.Signature.toChars(null, null)"
"android.text.method.ArrowKeyMovementMethod.top(TextView, Spannable)","android.text.Selection.setSelection(android.text.Spannable, int)"
"android.text.method.ArrowKeyMovementMethod.top(TextView, Spannable)","android.text.Selection.extendSelection(android.text.Spannable, int)"
"android.text.method.ArrowKeyMovementMethod.top(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.pageDown(TextView, Spannable)","android.text.Selection.moveDown(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.pageDown(TextView, Spannable)","android.text.Selection.extendDown(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.pageDown(TextView, Spannable)","android.text.Selection.getSelectionEnd(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.pageDown(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.getPageHeight(android.widget.TextView)"
"android.text.method.ArrowKeyMovementMethod.pageDown(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.getCurrentLineTop(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.pageDown(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.onTakeFocus(TextView, Spannable, int)","android.text.Selection.setSelection(android.text.Spannable, int)"
"android.text.method.ArrowKeyMovementMethod.onTakeFocus(TextView, Spannable, int)","java.lang.CharSequence.length()"
"android.text.method.ArrowKeyMovementMethod.getCurrentLineTop(Spannable, Layout)","android.text.Layout.getLineTop(int)"
"android.text.method.ArrowKeyMovementMethod.getCurrentLineTop(Spannable, Layout)","android.text.Selection.getSelectionEnd(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.getCurrentLineTop(Spannable, Layout)","android.text.Layout.getLineForOffset(int)"
"android.text.method.ArrowKeyMovementMethod.up(TextView, Spannable)","android.text.Selection.extendUp(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.up(TextView, Spannable)","android.text.Selection.moveUp(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.up(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.home(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.lineStart(android.widget.TextView, android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.lineEnd(TextView, Spannable)","android.text.Selection.extendToRightEdge(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.lineEnd(TextView, Spannable)","android.text.Selection.moveToRightEdge(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.lineEnd(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.pageUp(TextView, Spannable)","android.text.Selection.extendUp(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.pageUp(TextView, Spannable)","android.text.Selection.getSelectionEnd(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.pageUp(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.getPageHeight(android.widget.TextView)"
"android.text.method.ArrowKeyMovementMethod.pageUp(TextView, Spannable)","android.text.Selection.moveUp(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.pageUp(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.getCurrentLineTop(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.pageUp(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.rightWord(TextView, Spannable)","android.text.method.WordIterator.setCharSequence(android.text.Spannable, int, int)"
"android.text.method.ArrowKeyMovementMethod.rightWord(TextView, Spannable)","android.text.Selection.moveToFollowing(android.text.Spannable, android.text.method.WordIterator, boolean)"
"android.text.method.ArrowKeyMovementMethod.rightWord(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.isTouchSelecting(boolean, Spannable)","android.text.method.Touch.isActivelySelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.isTouchSelecting(boolean, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.down(TextView, Spannable)","android.text.Selection.moveDown(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.down(TextView, Spannable)","android.text.Selection.extendDown(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.down(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.right(TextView, Spannable)","android.text.Selection.extendRight(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.right(TextView, Spannable)","android.text.Selection.moveRight(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.right(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.leftWord(TextView, Spannable)","android.text.method.WordIterator.setCharSequence(android.text.Spannable, int, int)"
"android.text.method.ArrowKeyMovementMethod.leftWord(TextView, Spannable)","android.text.Selection.moveToPreceding(android.text.Spannable, android.text.method.WordIterator, boolean)"
"android.text.method.ArrowKeyMovementMethod.leftWord(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.isSelecting(Spannable)","android.text.method.MetaKeyKeyListener.getMetaState(android.text.Spannable, int)"
"android.text.method.ArrowKeyMovementMethod.initialize(TextView, Spannable)","android.text.Selection.setSelection(android.text.Spannable, int)"
"android.text.method.ArrowKeyMovementMethod.left(TextView, Spannable)","android.text.Selection.moveLeft(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.left(TextView, Spannable)","android.text.Selection.extendLeft(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.left(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.method.MetaKeyKeyListener.resetLockedMeta(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.Selection.setSelection(android.text.Spannable, int)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.method.Touch.isSelectionStarted(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.method.Touch.onTouchEvent(android.widget.TextView, android.text.Spannable, android.view.MotionEvent)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.method.Touch.getInitialScrollX(android.widget.TextView, android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.view.InputEvent.isFromSource(int)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.method.MetaKeyKeyListener.adjustMetaAfterKeypress(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.method.Touch.getInitialScrollY(android.widget.TextView, android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.method.ArrowKeyMovementMethod.isTouchSelecting(boolean, android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.view.MotionEvent.getAction()"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.Selection.extendSelection(android.text.Spannable, int)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.text.method.ArrowKeyMovementMethod.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.ArrowKeyMovementMethod.bottom(TextView, Spannable)","android.text.Selection.setSelection(android.text.Spannable, int)"
"android.text.method.ArrowKeyMovementMethod.bottom(TextView, Spannable)","android.text.Selection.extendSelection(android.text.Spannable, int)"
"android.text.method.ArrowKeyMovementMethod.bottom(TextView, Spannable)","java.lang.CharSequence.length()"
"android.text.method.ArrowKeyMovementMethod.bottom(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.handleMovementKey(TextView, Spannable, int, int, KeyEvent)","android.text.method.MetaKeyKeyListener.getMetaState(android.text.Spannable, int, android.view.KeyEvent)"
"android.text.method.ArrowKeyMovementMethod.handleMovementKey(TextView, Spannable, int, int, KeyEvent)","android.text.method.BaseMovementMethod.handleMovementKey(android.widget.TextView, android.text.Spannable, int, int, android.view.KeyEvent)"
"android.text.method.ArrowKeyMovementMethod.handleMovementKey(TextView, Spannable, int, int, KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"android.text.method.ArrowKeyMovementMethod.handleMovementKey(TextView, Spannable, int, int, KeyEvent)","android.view.KeyEvent.getAction()"
"android.text.method.ArrowKeyMovementMethod.handleMovementKey(TextView, Spannable, int, int, KeyEvent)","android.view.KeyEvent.metaStateHasNoModifiers(int)"
"android.text.method.ArrowKeyMovementMethod.lineStart(TextView, Spannable)","android.text.Selection.extendToLeftEdge(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.lineStart(TextView, Spannable)","android.text.Selection.moveToLeftEdge(android.text.Spannable, android.text.Layout)"
"android.text.method.ArrowKeyMovementMethod.lineStart(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.isSelecting(android.text.Spannable)"
"android.text.method.ArrowKeyMovementMethod.end(TextView, Spannable)","android.text.method.ArrowKeyMovementMethod.lineEnd(android.widget.TextView, android.text.Spannable)"
"com.android.server.net.NetlinkTracker.addServers(long, String[])","java.util.ArrayList.add(com.android.server.net.DnsServerEntry)"
"com.android.server.net.NetlinkTracker.addServers(long, String[])","java.lang.System.currentTimeMillis()"
"com.android.server.net.NetlinkTracker.addServers(long, String[])","com.android.server.net.DnsServerRepository.updateExistingEntry(java.net.InetAddress, long)"
"com.android.server.net.NetlinkTracker.addServers(long, String[])","java.util.HashMap.put(java.net.InetAddress, com.android.server.net.DnsServerEntry)"
"com.android.server.net.NetlinkTracker.addServers(long, String[])","com.android.server.net.DnsServerRepository.updateCurrentServers()"
"com.android.server.net.NetlinkTracker.addServers(long, String[])","java.util.Collections.sort(java.util.ArrayList<com.android.server.net.DnsServerEntry>)"
"com.android.server.net.NetlinkTracker.addressUpdated(String, LinkAddress)","com.android.server.net.NetlinkTracker.Callback.update()"
"com.android.server.net.NetlinkTracker.addressUpdated(String, LinkAddress)","java.lang.String.equals(java.lang.String)"
"com.android.server.net.NetlinkTracker.addressUpdated(String, LinkAddress)","android.net.LinkProperties.addLinkAddress(android.net.LinkAddress)"
"com.android.server.net.NetlinkTracker.compareTo(DnsServerEntry)","java.lang.Long.compare(long, long)"
"com.android.server.net.NetlinkTracker.updateCurrentServers()","java.util.ArrayList.size()"
"com.android.server.net.NetlinkTracker.updateCurrentServers()","java.util.HashMap.remove(java.net.InetAddress)"
"com.android.server.net.NetlinkTracker.updateCurrentServers()","java.util.Set.remove(java.net.InetAddress)"
"com.android.server.net.NetlinkTracker.updateCurrentServers()","java.lang.System.currentTimeMillis()"
"com.android.server.net.NetlinkTracker.updateCurrentServers()","java.util.Set.size()"
"com.android.server.net.NetlinkTracker.updateCurrentServers()","java.util.ArrayList.remove(int)"
"com.android.server.net.NetlinkTracker.updateCurrentServers()","java.util.ArrayList.get(int)"
"com.android.server.net.NetlinkTracker.updateCurrentServers()","java.util.Set.add(java.net.InetAddress)"
"com.android.server.net.NetlinkTracker.addressRemoved(String, LinkAddress)","com.android.server.net.NetlinkTracker.Callback.update()"
"com.android.server.net.NetlinkTracker.addressRemoved(String, LinkAddress)","android.net.LinkProperties.removeLinkAddress(android.net.LinkAddress)"
"com.android.server.net.NetlinkTracker.addressRemoved(String, LinkAddress)","java.lang.String.equals(java.lang.String)"
"com.android.server.net.NetlinkTracker.routeUpdated(RouteInfo)","com.android.server.net.NetlinkTracker.Callback.update()"
"com.android.server.net.NetlinkTracker.routeUpdated(RouteInfo)","android.net.LinkProperties.addRoute(android.net.RouteInfo)"
"com.android.server.net.NetlinkTracker.routeUpdated(RouteInfo)","java.lang.String.equals(java.lang.String)"
"com.android.server.net.NetlinkTracker.routeUpdated(RouteInfo)","android.net.RouteInfo.getInterface()"
"com.android.server.net.NetlinkTracker.clearLinkProperties()","android.net.LinkProperties.clear()"
"com.android.server.net.NetlinkTracker.clearLinkProperties()","android.net.LinkProperties.setInterfaceName(java.lang.String)"
"com.android.server.net.NetlinkTracker.setDnsServersOn(LinkProperties)","android.net.LinkProperties.setDnsServers(java.util.Set<java.net.InetAddress>)"
"com.android.server.net.NetlinkTracker.interfaceDnsServerInfo(String, long, String[])","com.android.server.net.DnsServerRepository.addServers(long, java.lang.String[])"
"com.android.server.net.NetlinkTracker.interfaceDnsServerInfo(String, long, String[])","com.android.server.net.NetlinkTracker.Callback.update()"
"com.android.server.net.NetlinkTracker.interfaceDnsServerInfo(String, long, String[])","com.android.server.net.DnsServerRepository.setDnsServersOn(android.net.LinkProperties)"
"com.android.server.net.NetlinkTracker.interfaceDnsServerInfo(String, long, String[])","java.lang.String.equals(java.lang.String)"
"com.android.server.net.NetlinkTracker.routeRemoved(RouteInfo)","com.android.server.net.NetlinkTracker.Callback.update()"
"com.android.server.net.NetlinkTracker.routeRemoved(RouteInfo)","android.net.LinkProperties.removeRoute(android.net.RouteInfo)"
"com.android.server.net.NetlinkTracker.routeRemoved(RouteInfo)","java.lang.String.equals(java.lang.String)"
"com.android.server.net.NetlinkTracker.routeRemoved(RouteInfo)","android.net.RouteInfo.getInterface()"
"com.android.server.net.NetlinkTracker.updateExistingEntry(InetAddress, long)","java.util.HashMap.get(java.net.InetAddress)"
"android.accounts.GrantCredentialsPermissionActivity.getAccountLabel(Account)","android.content.Context.getString(int)"
"android.accounts.GrantCredentialsPermissionActivity.getAccountLabel(Account)","android.content.ContextWrapper.createPackageContext(java.lang.String, int)"
"android.accounts.GrantCredentialsPermissionActivity.getAccountLabel(Account)","android.accounts.AccountManager.get(android.accounts.GrantCredentialsPermissionActivity)"
"android.accounts.GrantCredentialsPermissionActivity.getAccountLabel(Account)","android.accounts.AccountManager.getAuthenticatorTypes()"
"android.accounts.GrantCredentialsPermissionActivity.getAccountLabel(Account)","java.lang.String.equals(java.lang.String)"
"android.accounts.GrantCredentialsPermissionActivity.finish()","android.app.Activity.finish()"
"android.accounts.GrantCredentialsPermissionActivity.finish()","android.accounts.AccountAuthenticatorResponse.onError(int, java.lang.String)"
"android.accounts.GrantCredentialsPermissionActivity.finish()","android.content.Intent.getParcelableExtra(java.lang.String)"
"android.accounts.GrantCredentialsPermissionActivity.finish()","android.accounts.AccountAuthenticatorResponse.onResult(android.os.Bundle)"
"android.accounts.GrantCredentialsPermissionActivity.finish()","android.app.Activity.getIntent()"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.os.BaseBundle.getInt(java.lang.String)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","java.lang.CharSequence.toString()"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.content.pm.PackageManager.getApplicationInfo(java.lang.String, int)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.content.pm.PackageManager.getPackagesForUid(int)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.app.Activity.runOnUiThread(java.lang.Runnable)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.accounts.AccountManager.getAuthTokenLabel(java.lang.String, java.lang.String, android.accounts.AccountManagerCallback<java.lang.String>, null)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.os.Bundle.getParcelable(java.lang.String)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.content.pm.PackageManager.getApplicationLabel(android.content.pm.ApplicationInfo)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.os.BaseBundle.getString(java.lang.String)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.accounts.GrantCredentialsPermissionActivity.getAccountLabel(android.accounts.Account)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.app.Activity.setResult(int)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.app.Activity.isFinishing()"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.accounts.AccountManager.get(android.accounts.GrantCredentialsPermissionActivity)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.content.Intent.getExtras()"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.accounts.GrantCredentialsPermissionActivity.finish()"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.content.ContextWrapper.getPackageManager()"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.app.Activity.getSystemService(java.lang.String)"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.accounts.AccountManagerFuture.getResult()"
"android.accounts.GrantCredentialsPermissionActivity.onCreate(Bundle)","android.app.Activity.getIntent()"
"android.accounts.GrantCredentialsPermissionActivity.onClick(View)","android.accounts.GrantCredentialsPermissionActivity.setAccountAuthenticatorResult(android.os.Bundle)"
"android.accounts.GrantCredentialsPermissionActivity.onClick(View)","android.content.Intent.putExtra(java.lang.String, boolean)"
"android.accounts.GrantCredentialsPermissionActivity.onClick(View)","android.app.Activity.setResult(int)"
"android.accounts.GrantCredentialsPermissionActivity.onClick(View)","android.accounts.AccountManager.get(android.accounts.GrantCredentialsPermissionActivity)"
"android.accounts.GrantCredentialsPermissionActivity.onClick(View)","android.app.Activity.setResult(int, android.content.Intent)"
"android.accounts.GrantCredentialsPermissionActivity.onClick(View)","android.content.Intent.getExtras()"
"android.accounts.GrantCredentialsPermissionActivity.onClick(View)","android.accounts.GrantCredentialsPermissionActivity.finish()"
"android.accounts.GrantCredentialsPermissionActivity.onClick(View)","android.accounts.AccountManager.updateAppPermission(android.accounts.Account, java.lang.String, int, boolean)"
"android.accounts.GrantCredentialsPermissionActivity.onClick(View)","android.view.View.getId()"
"android.net.InterfaceConfiguration.validateFlag(String)","java.lang.String.indexOf(char)"
"android.net.InterfaceConfiguration.setInterfaceDown()","java.util.HashSet.add(java.lang.String)"
"android.net.InterfaceConfiguration.setInterfaceDown()","java.util.HashSet.remove(java.lang.String)"
"android.net.InterfaceConfiguration.createFromParcel(Parcel)","java.util.HashSet.add(java.lang.String)"
"android.net.InterfaceConfiguration.createFromParcel(Parcel)","android.os.Parcel.readParcelable(null)"
"android.net.InterfaceConfiguration.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.net.InterfaceConfiguration.createFromParcel(Parcel)","android.os.Parcel.readByte()"
"android.net.InterfaceConfiguration.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.net.InterfaceConfiguration.clearFlag(String)","android.net.InterfaceConfiguration.validateFlag(java.lang.String)"
"android.net.InterfaceConfiguration.clearFlag(String)","java.util.HashSet.remove(java.lang.String)"
"android.net.InterfaceConfiguration.setInterfaceUp()","java.util.HashSet.add(java.lang.String)"
"android.net.InterfaceConfiguration.setInterfaceUp()","java.util.HashSet.remove(java.lang.String)"
"android.net.InterfaceConfiguration.toString()","java.lang.String.valueOf(android.net.LinkAddress)"
"android.net.InterfaceConfiguration.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.net.InterfaceConfiguration.toString()","java.lang.StringBuilder.toString()"
"android.net.InterfaceConfiguration.toString()","java.lang.StringBuilder.append(java.lang.Iterable<java.lang.String>)"
"android.net.InterfaceConfiguration.toString()","android.net.InterfaceConfiguration.getFlags()"
"android.net.InterfaceConfiguration.isActive()","android.net.LinkAddress.getAddress()"
"android.net.InterfaceConfiguration.isActive()","java.net.InetAddress.getAddress()"
"android.net.InterfaceConfiguration.isActive()","android.net.InterfaceConfiguration.hasFlag(java.lang.String)"
"android.net.InterfaceConfiguration.writeToParcel(Parcel, int)","android.os.Parcel.writeByte(byte)"
"android.net.InterfaceConfiguration.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.net.InterfaceConfiguration.writeToParcel(Parcel, int)","java.util.HashSet.size()"
"android.net.InterfaceConfiguration.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.net.LinkAddress, int)"
"android.net.InterfaceConfiguration.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.InterfaceConfiguration.hasFlag(String)","java.util.HashSet.contains(java.lang.String)"
"android.net.InterfaceConfiguration.hasFlag(String)","android.net.InterfaceConfiguration.validateFlag(java.lang.String)"
"android.net.InterfaceConfiguration.setFlag(String)","java.util.HashSet.add(java.lang.String)"
"android.net.InterfaceConfiguration.setFlag(String)","android.net.InterfaceConfiguration.validateFlag(java.lang.String)"
"android.widget.RemoteViewsService.onDataSetChanged()","java.lang.Thread.getDefaultUncaughtExceptionHandler()"
"android.widget.RemoteViewsService.onDataSetChanged()","java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Exception)"
"android.widget.RemoteViewsService.onDataSetChanged()","java.lang.Thread.currentThread()"
"android.widget.RemoteViewsService.onDataSetChanged()","android.widget.RemoteViewsService.RemoteViewsFactory.onDataSetChanged()"
"android.widget.RemoteViewsService.getItemId(int)","android.widget.RemoteViewsService.RemoteViewsFactory.getItemId(int)"
"android.widget.RemoteViewsService.getItemId(int)","java.lang.Thread.getDefaultUncaughtExceptionHandler()"
"android.widget.RemoteViewsService.getItemId(int)","java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Exception)"
"android.widget.RemoteViewsService.getItemId(int)","java.lang.Thread.currentThread()"
"android.widget.RemoteViewsService.onDataSetChangedAsync()","android.widget.RemoteViewsService.RemoteViewsFactoryAdapter.onDataSetChanged()"
"android.widget.RemoteViewsService.getLoadingView()","android.widget.RemoteViewsService.RemoteViewsFactory.getLoadingView()"
"android.widget.RemoteViewsService.getLoadingView()","java.lang.Thread.getDefaultUncaughtExceptionHandler()"
"android.widget.RemoteViewsService.getLoadingView()","java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Exception)"
"android.widget.RemoteViewsService.getLoadingView()","java.lang.Thread.currentThread()"
"android.widget.RemoteViewsService.getViewAt(int)","android.widget.RemoteViews.setIsWidgetCollectionChild(boolean)"
"android.widget.RemoteViewsService.getViewAt(int)","android.widget.RemoteViewsService.RemoteViewsFactory.getViewAt(int)"
"android.widget.RemoteViewsService.getViewAt(int)","java.lang.Thread.getDefaultUncaughtExceptionHandler()"
"android.widget.RemoteViewsService.getViewAt(int)","java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Exception)"
"android.widget.RemoteViewsService.getViewAt(int)","java.lang.Thread.currentThread()"
"android.widget.RemoteViewsService.onDestroy(Intent)","java.lang.Thread.getDefaultUncaughtExceptionHandler()"
"android.widget.RemoteViewsService.onDestroy(Intent)","java.util.HashMap.remove(android.content.Intent.FilterComparison)"
"android.widget.RemoteViewsService.onDestroy(Intent)","java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Exception)"
"android.widget.RemoteViewsService.onDestroy(Intent)","android.widget.RemoteViewsService.RemoteViewsFactory.onDestroy()"
"android.widget.RemoteViewsService.onDestroy(Intent)","java.util.HashMap.containsKey(android.content.Intent.FilterComparison)"
"android.widget.RemoteViewsService.onDestroy(Intent)","java.lang.Thread.currentThread()"
"android.widget.RemoteViewsService.onDestroy(Intent)","java.util.HashMap.get(android.content.Intent.FilterComparison)"
"android.widget.RemoteViewsService.getViewTypeCount()","java.lang.Thread.getDefaultUncaughtExceptionHandler()"
"android.widget.RemoteViewsService.getViewTypeCount()","java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Exception)"
"android.widget.RemoteViewsService.getViewTypeCount()","java.lang.Thread.currentThread()"
"android.widget.RemoteViewsService.getViewTypeCount()","android.widget.RemoteViewsService.RemoteViewsFactory.getViewTypeCount()"
"android.widget.RemoteViewsService.hasStableIds()","android.widget.RemoteViewsService.RemoteViewsFactory.hasStableIds()"
"android.widget.RemoteViewsService.hasStableIds()","java.lang.Thread.getDefaultUncaughtExceptionHandler()"
"android.widget.RemoteViewsService.hasStableIds()","java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Exception)"
"android.widget.RemoteViewsService.hasStableIds()","java.lang.Thread.currentThread()"
"android.widget.RemoteViewsService.onBind(Intent)","android.widget.RemoteViewsService.onGetViewFactory(android.content.Intent)"
"android.widget.RemoteViewsService.onBind(Intent)","android.widget.RemoteViewsService.RemoteViewsFactory.onCreate()"
"android.widget.RemoteViewsService.onBind(Intent)","java.util.HashMap.containsKey(android.content.Intent.FilterComparison)"
"android.widget.RemoteViewsService.onBind(Intent)","java.util.HashMap.get(android.content.Intent.FilterComparison)"
"android.widget.RemoteViewsService.onBind(Intent)","java.util.HashMap.put(android.content.Intent.FilterComparison, android.widget.RemoteViewsService.RemoteViewsFactory)"
"android.widget.RemoteViewsService.getCount()","android.widget.RemoteViewsService.RemoteViewsFactory.getCount()"
"android.widget.RemoteViewsService.getCount()","java.lang.Thread.getDefaultUncaughtExceptionHandler()"
"android.widget.RemoteViewsService.getCount()","java.lang.Thread.UncaughtExceptionHandler.uncaughtException(java.lang.Thread, java.lang.Exception)"
"android.widget.RemoteViewsService.getCount()","java.lang.Thread.currentThread()"
"android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, UserHandle, ComponentName, Bundle)","android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, int, android.content.ComponentName, android.os.Bundle)"
"android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, UserHandle, ComponentName, Bundle)","android.os.UserHandle.getIdentifier()"
"android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, ComponentName, Bundle)","android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, int, android.content.ComponentName, android.os.Bundle)"
"android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, ComponentName, Bundle)","android.os.UserHandle.myUserId()"
"android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, ComponentName)","android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, int, android.content.ComponentName, null)"
"android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, ComponentName)","android.os.UserHandle.myUserId()"
"android.appwidget.AppWidgetManager.getInstalledProvidersForProfile(UserHandle)","java.util.Collections.emptyList()"
"android.appwidget.AppWidgetManager.getInstalledProvidersForProfile(UserHandle)","android.appwidget.AppWidgetManager.getInstalledProvidersForProfile(int, android.os.UserHandle)"
"android.appwidget.AppWidgetManager.getInstalledProvidersForProfile(int, UserHandle)","android.appwidget.AppWidgetManager.convertSizesToPixels(android.appwidget.AppWidgetProviderInfo)"
"android.appwidget.AppWidgetManager.getInstalledProvidersForProfile(int, UserHandle)","android.os.Process.myUserHandle()"
"android.appwidget.AppWidgetManager.getInstalledProvidersForProfile(int, UserHandle)","java.util.Collections.emptyList()"
"android.appwidget.AppWidgetManager.setBindAppWidgetPermission(String, boolean)","android.appwidget.AppWidgetManager.setBindAppWidgetPermission(java.lang.String, int, boolean)"
"android.appwidget.AppWidgetManager.setBindAppWidgetPermission(String, boolean)","android.os.UserHandle.myUserId()"
"android.appwidget.AppWidgetManager.updateAppWidget(int, RemoteViews)","android.appwidget.AppWidgetManager.updateAppWidget(int[], android.widget.RemoteViews)"
"android.appwidget.AppWidgetManager.getAppWidgetInfo(int)","android.appwidget.AppWidgetManager.convertSizesToPixels(android.appwidget.AppWidgetProviderInfo)"
"android.appwidget.AppWidgetManager.partiallyUpdateAppWidget(int, RemoteViews)","android.appwidget.AppWidgetManager.partiallyUpdateAppWidget(int[], android.widget.RemoteViews)"
"android.appwidget.AppWidgetManager.bindAppWidgetId(int, ComponentName)","android.appwidget.AppWidgetManager.bindAppWidgetId(int, android.content.ComponentName, null)"
"android.appwidget.AppWidgetManager.getInstance(Context)","android.content.Context.getSystemService(java.lang.String)"
"android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged(int, int)","android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged(int[], int)"
"android.appwidget.AppWidgetManager.getInstalledProviders(int)","java.util.Collections.emptyList()"
"android.appwidget.AppWidgetManager.getInstalledProviders(int)","android.appwidget.AppWidgetManager.getInstalledProvidersForProfile(int, null)"
"android.appwidget.AppWidgetManager.convertSizesToPixels(AppWidgetProviderInfo)","android.util.TypedValue.complexToDimensionPixelSize(int, android.util.DisplayMetrics)"
"android.appwidget.AppWidgetManager.getInstalledProviders()","java.util.Collections.emptyList()"
"android.appwidget.AppWidgetManager.getInstalledProviders()","android.appwidget.AppWidgetManager.getInstalledProvidersForProfile(int, null)"
"android.appwidget.AppWidgetManager.bindAppWidgetId(int, ComponentName, Bundle)","android.os.Process.myUserHandle()"
"android.appwidget.AppWidgetManager.bindAppWidgetId(int, ComponentName, Bundle)","android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, android.os.UserHandle, android.content.ComponentName, android.os.Bundle)"
"android.bluetooth.BluetoothAudioConfig.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.bluetooth.BluetoothAudioConfig.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.camera2.params.ReprocessFormatsMap.getInputs()","android.hardware.camera2.params.StreamConfigurationMap.imageFormatToPublic(int[])"
"android.hardware.camera2.params.ReprocessFormatsMap.getInputs()","java.lang.String.format(java.lang.String, int, int, int)"
"android.hardware.camera2.params.ReprocessFormatsMap.getInputs()","java.lang.String.format(java.lang.String, int)"
"android.hardware.camera2.params.ReprocessFormatsMap.equals(Object)","java.util.Arrays.equals(int[], int[])"
"android.hardware.camera2.params.ReprocessFormatsMap.getOutputs(int)","android.hardware.camera2.params.StreamConfigurationMap.imageFormatToPublic(int[])"
"android.hardware.camera2.params.ReprocessFormatsMap.getOutputs(int)","java.lang.String.format(java.lang.String, int, int, int)"
"android.hardware.camera2.params.ReprocessFormatsMap.getOutputs(int)","java.lang.String.format(java.lang.String, int)"
"android.hardware.camera2.params.ReprocessFormatsMap.hashCode()","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int[])"
"android.util.ExceptionUtils.maybeUnwrapIOException(RuntimeException)","java.lang.String.substring(int)"
"android.util.ExceptionUtils.maybeUnwrapIOException(RuntimeException)","java.lang.String.startsWith(java.lang.String)"
"android.util.ExceptionUtils.maybeUnwrapIOException(RuntimeException)","java.lang.Throwable.getMessage()"
"android.util.ExceptionUtils.maybeUnwrapIOException(RuntimeException)","java.lang.String.length()"
"android.util.ExceptionUtils.getCompleteMessage(Throwable)","android.util.ExceptionUtils.getCompleteMessage(null, java.lang.Throwable)"
"android.util.ExceptionUtils.getCompleteMessage(String, Throwable)","java.lang.Throwable.getCause()"
"android.util.ExceptionUtils.getCompleteMessage(String, Throwable)","java.lang.Throwable.getMessage()"
"android.util.ExceptionUtils.getCompleteMessage(String, Throwable)","java.lang.StringBuilder.append(java.lang.String)"
"android.util.ExceptionUtils.getCompleteMessage(String, Throwable)","java.lang.StringBuilder.toString()"
"android.util.ExceptionUtils.wrap(IOException)","java.lang.Throwable.getMessage()"
"android.os.Environment.buildExternalStorageAppDataDirsForVold(String)","android.os.Environment.buildPaths(java.io.File[], java.lang.String, java.lang.String, java.lang.String)"
"android.os.Environment.getLegacyExternalStorageObbDirectory()","android.os.Environment.buildPath(java.io.File, java.lang.String, java.lang.String)"
"android.os.Environment.getLegacyExternalStorageObbDirectory()","android.os.Environment.getLegacyExternalStorageDirectory()"
"android.os.Environment.buildExternalStorageAppFilesDirs(String)","android.os.Environment.throwIfUserRequired()"
"android.os.Environment.buildExternalStorageAppFilesDirs(String)","android.os.Environment.UserEnvironment.buildExternalStorageAppFilesDirs(java.lang.String)"
"android.os.Environment.isExternalStorageEmulated()","android.os.Environment.isExternalStorageEmulated(java.io.File)"
"android.os.Environment.isExternalStorageEmulated()","android.os.Environment.UserEnvironment.getExternalDirsForApp()"
"android.os.Environment.isExternalStorageEmulated()","android.os.Environment.isStorageDisabled()"
"android.os.Environment.getStorageState(File)","android.os.Environment.getExternalStorageState(java.io.File)"
"android.os.Environment.isExternalStorageRemovable()","android.os.Environment.UserEnvironment.getExternalDirsForApp()"
"android.os.Environment.isExternalStorageRemovable()","android.os.Environment.isExternalStorageRemovable(java.io.File)"
"android.os.Environment.isExternalStorageRemovable()","android.os.Environment.isStorageDisabled()"
"android.os.Environment.isExternalStorageRemovable(File)","android.os.storage.StorageVolume.isRemovable()"
"android.os.Environment.isExternalStorageRemovable(File)","android.os.Environment.getStorageVolume(java.io.File)"
"android.os.Environment.buildExternalStorageAppObbDirsForVold(String)","android.os.Environment.buildPaths(java.io.File[], java.lang.String, java.lang.String, java.lang.String)"
"android.os.Environment.isEncryptedFilesystemEnabled()","android.os.SystemProperties.getBoolean(java.lang.String, boolean)"
"android.os.Environment.getCanonicalPathOrNull(String)","java.lang.System.getenv(java.lang.String)"
"android.os.Environment.getCanonicalPathOrNull(String)","java.io.File.getCanonicalPath()"
"android.os.Environment.buildExternalStorageAndroidDataDirs()","android.os.Environment.throwIfUserRequired()"
"android.os.Environment.buildExternalStorageAndroidDataDirs()","android.os.Environment.UserEnvironment.buildExternalStorageAndroidDataDirs()"
"android.os.Environment.buildExternalStoragePublicDirs(String)","android.os.Environment.buildPaths(java.io.File[], java.lang.String)"
"android.os.Environment.isExternalStorageEmulated(File)","android.os.storage.StorageVolume.isEmulated()"
"android.os.Environment.isExternalStorageEmulated(File)","android.os.Environment.getStorageVolume(java.io.File)"
"android.os.Environment.getEmulatedStorageSource(int)","java.lang.System.getenv(java.lang.String)"
"android.os.Environment.getEmulatedStorageSource(int)","java.lang.String.valueOf(int)"
"android.os.Environment.getMediaStorageDirectory()","android.os.Environment.UserEnvironment.getMediaDir()"
"android.os.Environment.getMediaStorageDirectory()","android.os.Environment.throwIfUserRequired()"
"android.os.Environment.buildExternalStorageAndroidObbDirs()","android.os.Environment.buildPaths(java.io.File[], java.lang.String, java.lang.String)"
"android.os.Environment.getLegacyExternalStorageDirectory()","java.lang.System.getenv(java.lang.String)"
"android.os.Environment.getExternalStorageDirectory()","android.os.Environment.UserEnvironment.getExternalDirsForApp()"
"android.os.Environment.getExternalStorageDirectory()","android.os.Environment.throwIfUserRequired()"
"android.os.Environment.getSecureDataDirectory()","android.os.Environment.isEncryptedFilesystemEnabled()"
"android.os.Environment.getSystemSecureDirectory()","android.os.Environment.isEncryptedFilesystemEnabled()"
"android.os.Environment.buildExternalStorageAppObbDirs(String)","android.os.Environment.UserEnvironment.buildExternalStorageAppObbDirs(java.lang.String)"
"android.os.Environment.buildExternalStorageAppObbDirs(String)","android.os.Environment.throwIfUserRequired()"
"android.os.Environment.getExternalStorageState(File)","android.os.storage.IMountService.Stub.asInterface(android.os.IBinder)"
"android.os.Environment.getExternalStorageState(File)","android.os.ServiceManager.getService(java.lang.String)"
"android.os.Environment.getExternalStorageState(File)","android.os.storage.IMountService.getVolumeState(java.lang.String)"
"android.os.Environment.getExternalStorageState(File)","android.os.Environment.getStorageVolume(java.io.File)"
"android.os.Environment.getExternalStorageState(File)","android.os.storage.StorageVolume.getPath()"
"android.os.Environment.getExternalStorageState()","android.os.Environment.UserEnvironment.getExternalDirsForApp()"
"android.os.Environment.getExternalStorageState()","android.os.Environment.getExternalStorageState(java.io.File)"
"android.os.Environment.getUserConfigDirectory(int)","java.lang.Integer.toString(int)"
"android.os.Environment.getUserConfigDirectory(int)","android.os.Environment.getDataDirectory()"
"android.os.Environment.isStorageDisabled()","android.os.SystemProperties.getBoolean(java.lang.String, boolean)"
"android.os.Environment.getUserSystemDirectory(int)","java.lang.Integer.toString(int)"
"android.os.Environment.getUserSystemDirectory(int)","android.os.Environment.getSystemSecureDirectory()"
"android.os.Environment.getDirectory(String, String)","java.lang.System.getenv(java.lang.String)"
"android.os.Environment.buildExternalStorageAppDataDirs(String)","android.os.Environment.throwIfUserRequired()"
"android.os.Environment.buildExternalStorageAppDataDirs(String)","android.os.Environment.UserEnvironment.buildExternalStorageAppDataDirs(java.lang.String)"
"android.os.Environment.getStorageVolume(File)","java.io.File.getCanonicalFile()"
"android.os.Environment.getStorageVolume(File)","android.os.storage.IMountService.Stub.asInterface(android.os.IBinder)"
"android.os.Environment.getStorageVolume(File)","android.os.storage.StorageVolume.getPathFile()"
"android.os.Environment.getStorageVolume(File)","android.os.ServiceManager.getService(java.lang.String)"
"android.os.Environment.getStorageVolume(File)","android.os.FileUtils.contains(java.io.File, java.io.File)"
"android.os.Environment.getStorageVolume(File)","android.os.storage.IMountService.getVolumeList()"
"android.os.Environment.initForCurrentUser()","android.os.UserHandle.myUserId()"
"android.os.Environment.buildPaths(File[], String[])","android.os.Environment.buildPath(java.io.File, java.lang.String[])"
"android.os.Environment.buildExternalStorageAppCacheDirs(String)","android.os.Environment.UserEnvironment.buildExternalStorageAppCacheDirs(java.lang.String)"
"android.os.Environment.buildExternalStorageAppCacheDirs(String)","android.os.Environment.throwIfUserRequired()"
"android.os.Environment.getEmulatedStorageObbSource()","java.lang.System.getenv(java.lang.String)"
"android.os.Environment.getExternalStoragePublicDirectory(String)","android.os.Environment.throwIfUserRequired()"
"android.os.Environment.getExternalStoragePublicDirectory(String)","android.os.Environment.UserEnvironment.buildExternalStoragePublicDirs(java.lang.String)"
"android.os.Environment.maybeTranslateEmulatedPathToInternal(File)","java.lang.String.substring(int)"
"android.os.Environment.maybeTranslateEmulatedPathToInternal(File)","android.os.Environment.isExternalStorageEmulated()"
"android.os.Environment.maybeTranslateEmulatedPathToInternal(File)","java.lang.String.startsWith(java.lang.String)"
"android.os.Environment.maybeTranslateEmulatedPathToInternal(File)","java.io.File.exists()"
"android.os.Environment.maybeTranslateEmulatedPathToInternal(File)","java.io.File.getCanonicalPath()"
"android.os.Environment.maybeTranslateEmulatedPathToInternal(File)","java.lang.String.length()"
"android.os.Environment.buildExternalStorageAppMediaDirsForVold(String)","android.os.Environment.buildPaths(java.io.File[], java.lang.String, java.lang.String, java.lang.String)"
"android.os.Environment.buildExternalStorageAppMediaDirs(String)","android.os.Environment.UserEnvironment.buildExternalStorageAppMediaDirs(java.lang.String)"
"android.os.Environment.buildExternalStorageAppMediaDirs(String)","android.os.Environment.throwIfUserRequired()"
"android.view.InputEvent.recycle()","java.lang.Object.toString()"
"android.view.InputEvent.getDevice()","android.view.InputDevice.getDevice(int)"
"android.view.InputEvent.getDevice()","android.view.InputEvent.getDeviceId()"
"android.view.InputEvent.recycleIfNeededAfterDispatch()","android.view.InputEvent.recycle()"
"android.view.InputEvent.createFromParcel(Parcel)","android.view.MotionEvent.createFromParcelBody(android.os.Parcel)"
"android.view.InputEvent.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.view.InputEvent.createFromParcel(Parcel)","android.view.KeyEvent.createFromParcelBody(android.os.Parcel)"
"android.view.InputEvent.isFromSource(int)","android.view.InputEvent.getSource()"
"android.view.InputEvent.prepareForReuse()","java.util.concurrent.atomic.AtomicInteger.getAndIncrement()"
"android.hardware.camera2.dispatch.HandlerDispatcher.dispatch(Method, Object[])","java.lang.reflect.InvocationTargetException.getTargetException()"
"android.hardware.camera2.dispatch.HandlerDispatcher.dispatch(Method, Object[])","android.os.Handler.post(java.lang.Runnable)"
"android.hardware.camera2.dispatch.HandlerDispatcher.dispatch(Method, Object[])","android.hardware.camera2.utils.UncheckedThrow.throwAnyException(java.lang.Throwable)"
"android.hardware.camera2.dispatch.HandlerDispatcher.dispatch(Method, Object[])","android.hardware.camera2.dispatch.Dispatchable.dispatch(java.lang.reflect.Method, java.lang.Object[])"
"android.widget.TimePicker.onValidationChanged(boolean)","android.widget.TimePicker.ValidationCallback.onValidationChanged(boolean)"
"android.widget.TimePicker.onSaveInstanceState()","android.widget.TimePicker.TimePickerDelegate.onSaveInstanceState(android.os.Parcelable)"
"android.widget.TimePicker.setCurrentLocale(Locale)","java.util.Locale.equals(java.util.Locale)"
"com.android.internal.view.InputConnectionWrapper.getCursorCapsMode(int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.getInstance()"
"com.android.internal.view.InputConnectionWrapper.getCursorCapsMode(int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.dispose()"
"com.android.internal.view.InputConnectionWrapper.getCursorCapsMode(int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.waitForResultLocked()"
"com.android.internal.view.InputConnectionWrapper.getExtractedText(ExtractedTextRequest, int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.getInstance()"
"com.android.internal.view.InputConnectionWrapper.getExtractedText(ExtractedTextRequest, int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.dispose()"
"com.android.internal.view.InputConnectionWrapper.getExtractedText(ExtractedTextRequest, int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.waitForResultLocked()"
"com.android.internal.view.InputConnectionWrapper.requestCursorUpdates(int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.getInstance()"
"com.android.internal.view.InputConnectionWrapper.requestCursorUpdates(int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.dispose()"
"com.android.internal.view.InputConnectionWrapper.requestCursorUpdates(int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.waitForResultLocked()"
"com.android.internal.view.InputConnectionWrapper.getTextAfterCursor(int, int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.getInstance()"
"com.android.internal.view.InputConnectionWrapper.getTextAfterCursor(int, int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.dispose()"
"com.android.internal.view.InputConnectionWrapper.getTextAfterCursor(int, int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.waitForResultLocked()"
"com.android.internal.view.InputConnectionWrapper.getSelectedText(int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.getInstance()"
"com.android.internal.view.InputConnectionWrapper.getSelectedText(int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.dispose()"
"com.android.internal.view.InputConnectionWrapper.getSelectedText(int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.waitForResultLocked()"
"com.android.internal.view.InputConnectionWrapper.setRequestUpdateCursorAnchorInfoResult(boolean, int)","java.lang.Object.notifyAll()"
"com.android.internal.view.InputConnectionWrapper.setTextAfterCursor(CharSequence, int)","java.lang.Object.notifyAll()"
"com.android.internal.view.InputConnectionWrapper.setCursorCapsMode(int, int)","java.lang.Object.notifyAll()"
"com.android.internal.view.InputConnectionWrapper.setExtractedText(ExtractedText, int)","java.lang.Object.notifyAll()"
"com.android.internal.view.InputConnectionWrapper.getTextBeforeCursor(int, int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.getInstance()"
"com.android.internal.view.InputConnectionWrapper.getTextBeforeCursor(int, int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.dispose()"
"com.android.internal.view.InputConnectionWrapper.getTextBeforeCursor(int, int)","com.android.internal.view.InputConnectionWrapper.InputContextCallback.waitForResultLocked()"
"com.android.internal.view.InputConnectionWrapper.waitForResultLocked()","android.os.SystemClock.uptimeMillis()"
"com.android.internal.view.InputConnectionWrapper.waitForResultLocked()","java.lang.Object.wait(long)"
"com.android.internal.view.InputConnectionWrapper.setSelectedText(CharSequence, int)","java.lang.Object.notifyAll()"
"com.android.internal.view.InputConnectionWrapper.setTextBeforeCursor(CharSequence, int)","java.lang.Object.notifyAll()"
"android.content.ClipDescription.hasMimeType(String)","android.content.ClipDescription.compareMimeTypes(java.lang.String, java.lang.String)"
"android.content.ClipDescription.compareMimeTypes(String, String)","java.lang.String.charAt(int)"
"android.content.ClipDescription.compareMimeTypes(String, String)","java.lang.String.regionMatches(int, java.lang.String, int, int)"
"android.content.ClipDescription.compareMimeTypes(String, String)","java.lang.String.equals(java.lang.String)"
"android.content.ClipDescription.compareMimeTypes(String, String)","java.lang.String.indexOf(char)"
"android.content.ClipDescription.compareMimeTypes(String, String)","java.lang.String.length()"
"android.content.ClipDescription.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.content.ClipDescription.toString()","android.content.ClipDescription.toShortString(java.lang.StringBuilder)"
"android.content.ClipDescription.toString()","java.lang.StringBuilder.toString()"
"android.content.ClipDescription.writeToParcel(Parcel, int)","android.os.Parcel.writeStringArray(java.lang.String[])"
"android.content.ClipDescription.writeToParcel(Parcel, int)","android.text.TextUtils.writeToParcel(java.lang.CharSequence, android.os.Parcel, int)"
"android.content.ClipDescription.filterMimeTypes(String)","java.util.ArrayList.size()"
"android.content.ClipDescription.filterMimeTypes(String)","java.util.ArrayList.add(java.lang.String)"
"android.content.ClipDescription.filterMimeTypes(String)","android.content.ClipDescription.compareMimeTypes(java.lang.String, java.lang.String)"
"android.content.ClipDescription.filterMimeTypes(String)","java.util.ArrayList.toArray(java.lang.String[])"
"android.content.ClipDescription.toShortString(StringBuilder)","java.lang.StringBuilder.append(java.lang.CharSequence)"
"android.content.ClipDescription.toShortString(StringBuilder)","java.lang.StringBuilder.append(java.lang.String)"
"android.content.ClipDescription.toShortString(StringBuilder)","java.lang.StringBuilder.append(char)"
"android.app.ActivityGroup.onRetainNonConfigurationChildInstances()","android.app.LocalActivityManager.dispatchRetainNonConfigurationInstance()"
"android.app.ActivityGroup.dispatchActivityResult(String, int, int, Intent)","android.app.Activity.dispatchActivityResult(java.lang.String, int, int, android.content.Intent)"
"android.app.ActivityGroup.dispatchActivityResult(String, int, int, Intent)","android.app.LocalActivityManager.getActivity(java.lang.String)"
"android.app.ActivityGroup.dispatchActivityResult(String, int, int, Intent)","android.app.Activity.onActivityResult(int, int, android.content.Intent)"
"android.app.ActivityGroup.onStop()","android.app.Activity.onStop()"
"android.app.ActivityGroup.onStop()","android.app.LocalActivityManager.dispatchStop()"
"android.app.ActivityGroup.onResume()","android.app.LocalActivityManager.dispatchResume()"
"android.app.ActivityGroup.onResume()","android.app.Activity.onResume()"
"android.app.ActivityGroup.getCurrentActivity()","android.app.LocalActivityManager.getCurrentActivity()"
"android.app.ActivityGroup.onDestroy()","android.app.LocalActivityManager.dispatchDestroy(boolean)"
"android.app.ActivityGroup.onDestroy()","android.app.Activity.onDestroy()"
"android.app.ActivityGroup.onDestroy()","android.app.Activity.isFinishing()"
"android.app.ActivityGroup.onPause()","android.app.Activity.onPause()"
"android.app.ActivityGroup.onPause()","android.app.Activity.isFinishing()"
"android.app.ActivityGroup.onPause()","android.app.LocalActivityManager.dispatchPause(boolean)"
"android.app.ActivityGroup.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.app.ActivityGroup.onCreate(Bundle)","android.os.Bundle.getBundle(java.lang.String)"
"android.app.ActivityGroup.onCreate(Bundle)","android.app.LocalActivityManager.dispatchCreate(android.os.Bundle)"
"android.app.ActivityGroup.onSaveInstanceState(Bundle)","android.app.Activity.onSaveInstanceState(android.os.Bundle)"
"android.app.ActivityGroup.onSaveInstanceState(Bundle)","android.app.LocalActivityManager.saveInstanceState()"
"android.app.ActivityGroup.onSaveInstanceState(Bundle)","android.os.Bundle.putBundle(java.lang.String, android.os.Bundle)"
"android.hardware.location.GeofenceHardwareRequest.createCircularGeofence(double, double, double)","android.hardware.location.GeofenceHardwareRequest.setCircularGeofence(double, double, double)"
"com.android.internal.view.menu.ActionMenu.performIdentifierAction(int, int)","com.android.internal.view.menu.ActionMenuItem.invoke()"
"com.android.internal.view.menu.ActionMenu.performIdentifierAction(int, int)","com.android.internal.view.menu.ActionMenu.findItemIndex(int)"
"com.android.internal.view.menu.ActionMenu.performIdentifierAction(int, int)","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.ActionMenu.size()","java.util.ArrayList.size()"
"com.android.internal.view.menu.ActionMenu.isShortcutKey(int, KeyEvent)","com.android.internal.view.menu.ActionMenu.findItemWithShortcut(int, android.view.KeyEvent)"
"com.android.internal.view.menu.ActionMenu.add(CharSequence)","com.android.internal.view.menu.ActionMenu.add(int, int, int, java.lang.CharSequence)"
"com.android.internal.view.menu.ActionMenu.findItemIndex(int)","java.util.ArrayList.size()"
"com.android.internal.view.menu.ActionMenu.findItemIndex(int)","com.android.internal.view.menu.ActionMenuItem.getItemId()"
"com.android.internal.view.menu.ActionMenu.findItemIndex(int)","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.ActionMenu.setGroupCheckable(int, boolean, boolean)","java.util.ArrayList.size()"
"com.android.internal.view.menu.ActionMenu.setGroupCheckable(int, boolean, boolean)","com.android.internal.view.menu.ActionMenuItem.setExclusiveCheckable(boolean)"
"com.android.internal.view.menu.ActionMenu.setGroupCheckable(int, boolean, boolean)","com.android.internal.view.menu.ActionMenuItem.setCheckable(boolean)"
"com.android.internal.view.menu.ActionMenu.setGroupCheckable(int, boolean, boolean)","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.ActionMenu.setGroupCheckable(int, boolean, boolean)","com.android.internal.view.menu.ActionMenuItem.getGroupId()"
"com.android.internal.view.menu.ActionMenu.add(int)","com.android.internal.view.menu.ActionMenu.add(int, int, int, int)"
"com.android.internal.view.menu.ActionMenu.addIntentOptions(int, int, int, ComponentName, Intent[], Intent, int, MenuItem[])","com.android.internal.view.menu.ActionMenu.removeGroup(int)"
"com.android.internal.view.menu.ActionMenu.addIntentOptions(int, int, int, ComponentName, Intent[], Intent, int, MenuItem[])","android.content.Context.getPackageManager()"
"com.android.internal.view.menu.ActionMenu.addIntentOptions(int, int, int, ComponentName, Intent[], Intent, int, MenuItem[])","android.content.Intent.setComponent(android.content.ComponentName)"
"com.android.internal.view.menu.ActionMenu.addIntentOptions(int, int, int, ComponentName, Intent[], Intent, int, MenuItem[])","java.util.List.size()"
"com.android.internal.view.menu.ActionMenu.addIntentOptions(int, int, int, ComponentName, Intent[], Intent, int, MenuItem[])","android.content.pm.PackageManager.queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int)"
"com.android.internal.view.menu.ActionMenu.addIntentOptions(int, int, int, ComponentName, Intent[], Intent, int, MenuItem[])","java.util.List.get(int)"
"com.android.internal.view.menu.ActionMenu.findItem(int)","com.android.internal.view.menu.ActionMenu.findItemIndex(int)"
"com.android.internal.view.menu.ActionMenu.findItem(int)","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.ActionMenu.setGroupVisible(int, boolean)","java.util.ArrayList.size()"
"com.android.internal.view.menu.ActionMenu.setGroupVisible(int, boolean)","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.ActionMenu.setGroupVisible(int, boolean)","com.android.internal.view.menu.ActionMenuItem.getGroupId()"
"com.android.internal.view.menu.ActionMenu.setGroupVisible(int, boolean)","com.android.internal.view.menu.ActionMenuItem.setVisible(boolean)"
"com.android.internal.view.menu.ActionMenu.removeItem(int)","java.util.ArrayList.remove(int)"
"com.android.internal.view.menu.ActionMenu.removeItem(int)","com.android.internal.view.menu.ActionMenu.findItemIndex(int)"
"com.android.internal.view.menu.ActionMenu.add(int, int, int, CharSequence)","java.util.ArrayList.add(int, com.android.internal.view.menu.ActionMenuItem)"
"com.android.internal.view.menu.ActionMenu.add(int, int, int, CharSequence)","com.android.internal.view.menu.ActionMenu.getContext()"
"com.android.internal.view.menu.ActionMenu.clear()","java.util.ArrayList.clear()"
"com.android.internal.view.menu.ActionMenu.setGroupEnabled(int, boolean)","java.util.ArrayList.size()"
"com.android.internal.view.menu.ActionMenu.setGroupEnabled(int, boolean)","com.android.internal.view.menu.ActionMenuItem.setEnabled(boolean)"
"com.android.internal.view.menu.ActionMenu.setGroupEnabled(int, boolean)","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.ActionMenu.setGroupEnabled(int, boolean)","com.android.internal.view.menu.ActionMenuItem.getGroupId()"
"com.android.internal.view.menu.ActionMenu.getItem(int)","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.ActionMenu.removeGroup(int)","java.util.ArrayList.size()"
"com.android.internal.view.menu.ActionMenu.removeGroup(int)","java.util.ArrayList.remove(int)"
"com.android.internal.view.menu.ActionMenu.removeGroup(int)","com.android.internal.view.menu.ActionMenuItem.getGroupId()"
"com.android.internal.view.menu.ActionMenu.removeGroup(int)","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.ActionMenu.hasVisibleItems()","java.util.ArrayList.size()"
"com.android.internal.view.menu.ActionMenu.hasVisibleItems()","com.android.internal.view.menu.ActionMenuItem.isVisible()"
"com.android.internal.view.menu.ActionMenu.hasVisibleItems()","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.ActionMenu.add(int, int, int, int)","android.content.Context.getResources()"
"com.android.internal.view.menu.ActionMenu.add(int, int, int, int)","android.content.res.Resources.getString(int)"
"com.android.internal.view.menu.ActionMenu.add(int, int, int, int)","com.android.internal.view.menu.ActionMenu.add(int, int, int, java.lang.String)"
"com.android.internal.view.menu.ActionMenu.performShortcut(int, KeyEvent, int)","com.android.internal.view.menu.ActionMenu.findItemWithShortcut(int, android.view.KeyEvent)"
"com.android.internal.view.menu.ActionMenu.performShortcut(int, KeyEvent, int)","com.android.internal.view.menu.ActionMenuItem.invoke()"
"com.android.internal.view.menu.ActionMenu.findItemWithShortcut(int, KeyEvent)","java.util.ArrayList.size()"
"com.android.internal.view.menu.ActionMenu.findItemWithShortcut(int, KeyEvent)","com.android.internal.view.menu.ActionMenuItem.getNumericShortcut()"
"com.android.internal.view.menu.ActionMenu.findItemWithShortcut(int, KeyEvent)","com.android.internal.view.menu.ActionMenuItem.getAlphabeticShortcut()"
"com.android.internal.view.menu.ActionMenu.findItemWithShortcut(int, KeyEvent)","java.util.ArrayList.get(int)"
"android.hardware.camera2.utils.TaskDrainer.taskFinished(T)","java.util.Set.remove(T)"
"android.hardware.camera2.utils.TaskDrainer.taskFinished(T)","android.hardware.camera2.utils.TaskDrainer.checkIfDrainFinished()"
"android.hardware.camera2.utils.TaskDrainer.taskStarted(T)","java.util.Set.add(T)"
"android.hardware.camera2.utils.TaskDrainer.postDrained()","android.hardware.camera2.utils.TaskDrainer.DrainListener.onDrained()"
"android.hardware.camera2.utils.TaskDrainer.postDrained()","android.os.Handler.post(java.lang.Runnable)"
"android.hardware.camera2.utils.TaskDrainer.beginDrain()","android.hardware.camera2.utils.TaskDrainer.checkIfDrainFinished()"
"android.hardware.camera2.utils.TaskDrainer.checkIfDrainFinished()","android.hardware.camera2.utils.TaskDrainer.postDrained()"
"android.hardware.camera2.utils.TaskDrainer.checkIfDrainFinished()","java.util.Set.isEmpty()"
"com.android.internal.util.BitwiseInputStream.readByteArray(int)","com.android.internal.util.BitwiseInputStream.read(int)"
"com.android.internal.util.BitwiseInputStream.readByteArray(int)","java.lang.Math.min(int, int)"
"android.content.pm.LauncherActivityInfo.getLabel()","android.content.pm.ComponentInfo.loadLabel(android.content.pm.PackageManager)"
"android.content.pm.LauncherActivityInfo.getBadgedIcon(int)","android.content.res.Resources.getDrawableForDensity(int, int)"
"android.content.pm.LauncherActivityInfo.getBadgedIcon(int)","android.content.pm.PackageItemInfo.loadIcon(android.content.pm.PackageManager)"
"android.content.pm.LauncherActivityInfo.getBadgedIcon(int)","android.content.pm.ComponentInfo.getIconResource()"
"android.content.pm.LauncherActivityInfo.getBadgedIcon(int)","android.content.pm.PackageManager.getResourcesForApplication(android.content.pm.ApplicationInfo)"
"android.content.pm.LauncherActivityInfo.getIcon(int)","android.content.pm.PackageItemInfo.loadIcon(android.content.pm.PackageManager)"
"android.widget.ExpandableListConnector.obtain(int, int, int, int, GroupMetadata, int)","android.widget.ExpandableListConnector.PositionMetadata.getRecycledOrCreate()"
"android.widget.ExpandableListConnector.obtain(int, int, int, int, GroupMetadata, int)","android.widget.ExpandableListPosition.obtain(int, int, int, int)"
"android.widget.ExpandableListConnector.getFilter()","android.widget.ExpandableListConnector.getAdapter()"
"android.widget.ExpandableListConnector.getFilter()","android.widget.Filterable.getFilter()"
"android.widget.ExpandableListConnector.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.widget.ExpandableListConnector.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","android.widget.ExpandableListConnector.GroupMetadata.obtain(int, int, int, long)"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","java.util.ArrayList.size()"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","android.widget.ExpandableListConnector.collapseGroup(int)"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","android.widget.ExpandableListAdapter.getGroupId(int)"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","java.util.ArrayList.indexOf(android.widget.ExpandableListConnector.GroupMetadata)"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","java.util.ArrayList.add(int, android.widget.ExpandableListConnector.GroupMetadata)"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","android.widget.ExpandableListAdapter.onGroupExpanded(int)"
"android.widget.ExpandableListConnector.expandGroup(PositionMetadata)","java.util.ArrayList.get(int)"
"android.widget.ExpandableListConnector.isEnabled(int)","android.widget.ExpandableListAdapter.isChildSelectable(int, int)"
"android.widget.ExpandableListConnector.isEnabled(int)","android.widget.ExpandableListConnector.getUnflattenedPos(int)"
"android.widget.ExpandableListConnector.isEnabled(int)","android.widget.ExpandableListConnector.PositionMetadata.recycle()"
"android.widget.ExpandableListConnector.collapseGroup(PositionMetadata)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.ExpandableListConnector.collapseGroup(PositionMetadata)","android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)"
"android.widget.ExpandableListConnector.collapseGroup(PositionMetadata)","java.util.ArrayList.remove(android.widget.ExpandableListConnector.GroupMetadata)"
"android.widget.ExpandableListConnector.collapseGroup(PositionMetadata)","android.widget.ExpandableListAdapter.onGroupCollapsed(int)"
"android.widget.ExpandableListConnector.recycle()","java.util.ArrayList.size()"
"android.widget.ExpandableListConnector.recycle()","android.widget.ExpandableListConnector.PositionMetadata.resetState()"
"android.widget.ExpandableListConnector.recycle()","java.util.ArrayList.add(android.widget.ExpandableListConnector.PositionMetadata)"
"android.widget.ExpandableListConnector.collapseGroup(int)","android.widget.ExpandableListConnector.getFlattenedPos(android.widget.ExpandableListPosition)"
"android.widget.ExpandableListConnector.collapseGroup(int)","android.widget.ExpandableListConnector.collapseGroup(android.widget.ExpandableListConnector.PositionMetadata)"
"android.widget.ExpandableListConnector.collapseGroup(int)","android.widget.ExpandableListConnector.PositionMetadata.recycle()"
"android.widget.ExpandableListConnector.collapseGroup(int)","android.widget.ExpandableListPosition.recycle()"
"android.widget.ExpandableListConnector.collapseGroup(int)","android.widget.ExpandableListPosition.obtain(int, int, int, int)"
"android.widget.ExpandableListConnector.getView(int, View, ViewGroup)","android.widget.ExpandableListConnector.PositionMetadata.isExpanded()"
"android.widget.ExpandableListConnector.getView(int, View, ViewGroup)","android.widget.ExpandableListAdapter.getChildView(int, int, boolean, android.view.View, android.view.ViewGroup)"
"android.widget.ExpandableListConnector.getView(int, View, ViewGroup)","android.widget.ExpandableListConnector.getUnflattenedPos(int)"
"android.widget.ExpandableListConnector.getView(int, View, ViewGroup)","android.widget.ExpandableListAdapter.getGroupView(int, boolean, android.view.View, android.view.ViewGroup)"
"android.widget.ExpandableListConnector.getView(int, View, ViewGroup)","android.widget.ExpandableListConnector.PositionMetadata.recycle()"
"android.widget.ExpandableListConnector.setExpandableListAdapter(ExpandableListAdapter)","android.widget.ExpandableListAdapter.unregisterDataSetObserver(android.database.DataSetObserver)"
"android.widget.ExpandableListConnector.setExpandableListAdapter(ExpandableListAdapter)","android.widget.ExpandableListAdapter.registerDataSetObserver(android.database.DataSetObserver)"
"android.widget.ExpandableListConnector.getViewTypeCount()","android.widget.HeterogeneousExpandableList.getChildTypeCount()"
"android.widget.ExpandableListConnector.getViewTypeCount()","android.widget.HeterogeneousExpandableList.getGroupTypeCount()"
"android.widget.ExpandableListConnector.onInvalidated()","android.widget.BaseAdapter.notifyDataSetInvalidated()"
"android.widget.ExpandableListConnector.onInvalidated()","android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)"
"android.widget.ExpandableListConnector.createFromParcel(Parcel)","android.widget.ExpandableListConnector.GroupMetadata.obtain(int, int, int, long)"
"android.widget.ExpandableListConnector.createFromParcel(Parcel)","android.os.Parcel.readLong()"
"android.widget.ExpandableListConnector.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.widget.ExpandableListConnector.findGroupPosition(long, int)","android.widget.ExpandableListConnector.getAdapter()"
"android.widget.ExpandableListConnector.findGroupPosition(long, int)","android.widget.ExpandableListAdapter.getGroupId(int)"
"android.widget.ExpandableListConnector.findGroupPosition(long, int)","android.os.SystemClock.uptimeMillis()"
"android.widget.ExpandableListConnector.findGroupPosition(long, int)","java.lang.Math.max(int, int)"
"android.widget.ExpandableListConnector.findGroupPosition(long, int)","android.widget.ExpandableListAdapter.getGroupCount()"
"android.widget.ExpandableListConnector.findGroupPosition(long, int)","java.lang.Math.min(int, int)"
"android.widget.ExpandableListConnector.onChanged()","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.ExpandableListConnector.onChanged()","android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)"
"android.widget.ExpandableListConnector.isGroupExpanded(int)","java.util.ArrayList.size()"
"android.widget.ExpandableListConnector.isGroupExpanded(int)","java.util.ArrayList.get(int)"
"android.widget.ExpandableListConnector.getItem(int)","android.widget.ExpandableListAdapter.getGroup(int)"
"android.widget.ExpandableListConnector.getItem(int)","android.widget.ExpandableListAdapter.getChild(int, int)"
"android.widget.ExpandableListConnector.getItem(int)","android.widget.ExpandableListConnector.getUnflattenedPos(int)"
"android.widget.ExpandableListConnector.getItem(int)","android.widget.ExpandableListConnector.PositionMetadata.recycle()"
"android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)","java.util.ArrayList.size()"
"android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)","java.util.Collections.sort(java.util.ArrayList<android.widget.ExpandableListConnector.GroupMetadata>)"
"android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)","android.widget.ExpandableListConnector.findGroupPosition(long, int)"
"android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)","java.util.ArrayList.remove(int)"
"android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)","java.util.ArrayList.get(int)"
"android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)","android.widget.ExpandableListAdapter.getChildrenCount(int)"
"android.widget.ExpandableListConnector.isEmpty()","android.widget.ExpandableListAdapter.isEmpty()"
"android.widget.ExpandableListConnector.isEmpty()","android.widget.ExpandableListConnector.getAdapter()"
"android.widget.ExpandableListConnector.setExpandedGroupMetadataList(ArrayList)","java.util.ArrayList.size()"
"android.widget.ExpandableListConnector.setExpandedGroupMetadataList(ArrayList)","android.widget.ExpandableListConnector.refreshExpGroupMetadataList(boolean, boolean)"
"android.widget.ExpandableListConnector.setExpandedGroupMetadataList(ArrayList)","android.widget.ExpandableListAdapter.getGroupCount()"
"android.widget.ExpandableListConnector.setExpandedGroupMetadataList(ArrayList)","java.util.ArrayList.get(int)"
"android.widget.ExpandableListConnector.getUnflattenedPos(int)","android.widget.ExpandableListConnector.PositionMetadata.obtain(int, int, int, int, android.widget.ExpandableListConnector.GroupMetadata, int)"
"android.widget.ExpandableListConnector.getUnflattenedPos(int)","android.widget.ExpandableListConnector.PositionMetadata.obtain(int, int, int, int, null, int)"
"android.widget.ExpandableListConnector.getUnflattenedPos(int)","java.util.ArrayList.size()"
"android.widget.ExpandableListConnector.getUnflattenedPos(int)","java.util.ArrayList.get(int)"
"android.widget.ExpandableListConnector.getItemId(int)","android.widget.ExpandableListAdapter.getCombinedGroupId(long)"
"android.widget.ExpandableListConnector.getItemId(int)","android.widget.ExpandableListAdapter.getGroupId(int)"
"android.widget.ExpandableListConnector.getItemId(int)","android.widget.ExpandableListAdapter.getChildId(int, int)"
"android.widget.ExpandableListConnector.getItemId(int)","android.widget.ExpandableListAdapter.getCombinedChildId(long, long)"
"android.widget.ExpandableListConnector.getItemId(int)","android.widget.ExpandableListConnector.getUnflattenedPos(int)"
"android.widget.ExpandableListConnector.getItemId(int)","android.widget.ExpandableListConnector.PositionMetadata.recycle()"
"android.widget.ExpandableListConnector.expandGroup(int)","android.widget.ExpandableListConnector.getFlattenedPos(android.widget.ExpandableListPosition)"
"android.widget.ExpandableListConnector.expandGroup(int)","android.widget.ExpandableListConnector.PositionMetadata.recycle()"
"android.widget.ExpandableListConnector.expandGroup(int)","android.widget.ExpandableListPosition.recycle()"
"android.widget.ExpandableListConnector.expandGroup(int)","android.widget.ExpandableListPosition.obtain(int, int, int, int)"
"android.widget.ExpandableListConnector.expandGroup(int)","android.widget.ExpandableListConnector.expandGroup(android.widget.ExpandableListConnector.PositionMetadata)"
"android.widget.ExpandableListConnector.getCount()","android.widget.ExpandableListAdapter.getGroupCount()"
"android.widget.ExpandableListConnector.getItemViewType(int)","android.widget.HeterogeneousExpandableList.getGroupType(int)"
"android.widget.ExpandableListConnector.getItemViewType(int)","android.widget.ExpandableListConnector.getUnflattenedPos(int)"
"android.widget.ExpandableListConnector.getItemViewType(int)","android.widget.ExpandableListConnector.PositionMetadata.recycle()"
"android.widget.ExpandableListConnector.getItemViewType(int)","android.widget.HeterogeneousExpandableList.getGroupTypeCount()"
"android.widget.ExpandableListConnector.getItemViewType(int)","android.widget.HeterogeneousExpandableList.getChildType(int, int)"
"android.widget.ExpandableListConnector.areAllItemsEnabled()","android.widget.ExpandableListAdapter.areAllItemsEnabled()"
"android.widget.ExpandableListConnector.getRecycledOrCreate()","java.util.ArrayList.size()"
"android.widget.ExpandableListConnector.getRecycledOrCreate()","android.widget.ExpandableListConnector.PositionMetadata.resetState()"
"android.widget.ExpandableListConnector.getRecycledOrCreate()","java.util.ArrayList.remove(int)"
"android.widget.ExpandableListConnector.resetState()","android.widget.ExpandableListPosition.recycle()"
"android.widget.ExpandableListConnector.getFlattenedPos(ExpandableListPosition)","android.widget.ExpandableListConnector.PositionMetadata.obtain(int, int, int, int, android.widget.ExpandableListConnector.GroupMetadata, int)"
"android.widget.ExpandableListConnector.getFlattenedPos(ExpandableListPosition)","android.widget.ExpandableListConnector.PositionMetadata.obtain(int, int, int, int, null, int)"
"android.widget.ExpandableListConnector.getFlattenedPos(ExpandableListPosition)","java.util.ArrayList.size()"
"android.widget.ExpandableListConnector.getFlattenedPos(ExpandableListPosition)","java.util.ArrayList.get(int)"
"android.widget.ExpandableListConnector.hasStableIds()","android.widget.ExpandableListAdapter.hasStableIds()"
"android.widget.DigitalClock.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.DigitalClock.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.DigitalClock.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.DigitalClock.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.DigitalClock.onAttachedToWindow()","java.lang.Runnable.run()"
"android.widget.DigitalClock.onAttachedToWindow()","java.util.Calendar.setTimeInMillis(long)"
"android.widget.DigitalClock.onAttachedToWindow()","android.os.SystemClock.uptimeMillis()"
"android.widget.DigitalClock.onAttachedToWindow()","java.lang.System.currentTimeMillis()"
"android.widget.DigitalClock.onAttachedToWindow()","android.os.Handler.postAtTime(java.lang.Runnable, long)"
"android.widget.DigitalClock.initClock()","java.util.Calendar.getInstance()"
"android.widget.PopupMenu.onCloseMenu(MenuBuilder, boolean)","android.widget.PopupMenu.OnDismissListener.onDismiss(android.widget.PopupMenu)"
"android.widget.PopupMenu.onOpenSubMenu(MenuBuilder)","com.android.internal.view.menu.MenuBuilder.hasVisibleItems()"
"android.widget.PopupMenu.getDragToOpenListener()","android.widget.ListPopupWindow.dismiss()"
"android.widget.PopupMenu.getDragToOpenListener()","android.widget.ListPopupWindow.show()"
"android.widget.PopupMenu.onMenuItemSelected(MenuBuilder, MenuItem)","android.widget.PopupMenu.OnMenuItemClickListener.onMenuItemClick(android.view.MenuItem)"
"android.widget.PopupMenu.inflate(int)","android.widget.PopupMenu.getMenuInflater()"
"android.widget.PopupMenu.inflate(int)","android.view.MenuInflater.inflate(int, com.android.internal.view.menu.MenuBuilder)"
"com.android.internal.util.SizedInputStream.close()","java.io.InputStream.close()"
"com.android.internal.util.SizedInputStream.read(byte[], int, int)","java.io.InputStream.read(byte[], int, int)"
"android.app.ListActivity.onRestoreInstanceState(Bundle)","android.app.Activity.onRestoreInstanceState(android.os.Bundle)"
"android.app.ListActivity.onRestoreInstanceState(Bundle)","android.app.ListActivity.ensureList()"
"android.app.ListActivity.onContentChanged()","android.app.Activity.onContentChanged()"
"android.app.ListActivity.onContentChanged()","android.os.Handler.post(java.lang.Runnable)"
"android.app.ListActivity.onContentChanged()","android.app.ListActivity.setListAdapter(android.widget.ListAdapter)"
"android.app.ListActivity.getListView()","android.app.ListActivity.ensureList()"
"android.app.ListActivity.setListAdapter(ListAdapter)","android.app.ListActivity.ensureList()"
"android.app.ListActivity.onDestroy()","android.os.Handler.removeCallbacks(java.lang.Runnable)"
"android.app.ListActivity.onDestroy()","android.app.Activity.onDestroy()"
"android.hardware.camera2.TotalCaptureResult.getPartialResults()","java.util.Collections.unmodifiableList(java.util.List<android.hardware.camera2.CaptureResult>)"
"android.database.sqlite.SQLiteDatabase.queryWithFactory(CursorFactory, boolean, String, String[], String, String[], String, String, String, String)","android.database.sqlite.SQLiteDatabase.queryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.query(String, String[], String, String[], String, String, String, String)","android.database.sqlite.SQLiteDatabase.query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.database.sqlite.SQLiteDatabase.reopenReadWrite()","android.database.sqlite.SQLiteDatabase.isReadOnlyLocked()"
"android.database.sqlite.SQLiteDatabase.reopenReadWrite()","android.database.sqlite.SQLiteConnectionPool.reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteDatabase.reopenReadWrite()","android.database.sqlite.SQLiteDatabase.throwIfNotOpenLocked()"
"android.database.sqlite.SQLiteDatabase.needUpgrade(int)","android.database.sqlite.SQLiteDatabase.getVersion()"
"android.database.sqlite.SQLiteDatabase.beginTransactionWithListenerNonExclusive(SQLiteTransactionListener)","android.database.sqlite.SQLiteDatabase.beginTransaction(android.database.sqlite.SQLiteTransactionListener, boolean)"
"android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread()","android.database.sqlite.SQLiteSession.hasConnection()"
"android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread()","android.database.sqlite.SQLiteDatabase.getThreadSession()"
"android.database.sqlite.SQLiteDatabase.finalize()","android.database.sqlite.SQLiteDatabase.dispose(boolean)"
"android.database.sqlite.SQLiteDatabase.finalize()","java.lang.Object.finalize()"
"android.database.sqlite.SQLiteDatabase.getPageSize()","android.database.DatabaseUtils.longForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(CursorFactory, String, String[], String, CancellationSignal)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(CursorFactory, String, String[], String, CancellationSignal)","android.database.sqlite.SQLiteCursorDriver.query(android.database.sqlite.SQLiteDatabase.CursorFactory, java.lang.String[])"
"android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(CursorFactory, String, String[], String, CancellationSignal)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.dispose(boolean)","java.util.WeakHashMap.remove(android.database.sqlite.SQLiteDatabase)"
"android.database.sqlite.SQLiteDatabase.dispose(boolean)","android.database.sqlite.SQLiteConnectionPool.close()"
"android.database.sqlite.SQLiteDatabase.setMaxSqlCacheSize(int)","android.database.sqlite.SQLiteConnectionPool.reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteDatabase.setMaxSqlCacheSize(int)","android.database.sqlite.SQLiteDatabase.throwIfNotOpenLocked()"
"android.database.sqlite.SQLiteDatabase.disableWriteAheadLogging()","android.database.sqlite.SQLiteConnectionPool.reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteDatabase.disableWriteAheadLogging()","android.database.sqlite.SQLiteDatabase.throwIfNotOpenLocked()"
"android.database.sqlite.SQLiteDatabase.query(boolean, String, String[], String, String[], String, String, String, String, CancellationSignal)","android.database.sqlite.SQLiteDatabase.queryWithFactory(null, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.os.CancellationSignal)"
"android.database.sqlite.SQLiteDatabase.getThreadDefaultConnectionFlags(boolean)","android.database.sqlite.SQLiteDatabase.isMainThread()"
"android.database.sqlite.SQLiteDatabase.isMainThread()","android.os.Looper.getMainLooper()"
"android.database.sqlite.SQLiteDatabase.isMainThread()","android.os.Looper.myLooper()"
"android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive()","android.database.sqlite.SQLiteDatabase.beginTransaction(null, boolean)"
"android.database.sqlite.SQLiteDatabase.query(boolean, String, String[], String, String[], String, String, String, String)","android.database.sqlite.SQLiteDatabase.queryWithFactory(null, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","java.lang.StringBuilder.append(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","android.content.ContentValues.size()"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","android.content.ContentValues.keySet()"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","android.content.ContentValues.get(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","java.lang.StringBuilder.toString()"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","java.lang.StringBuilder.append(char)"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","android.database.sqlite.SQLiteClosable.close()"
"android.database.sqlite.SQLiteDatabase.insertWithOnConflict(String, String, ContentValues, int)","android.database.sqlite.SQLiteStatement.executeInsert()"
"android.database.sqlite.SQLiteDatabase.createSession()","android.database.sqlite.SQLiteDatabase.throwIfNotOpenLocked()"
"android.database.sqlite.SQLiteDatabase.execSQL(String, Object[])","android.database.sqlite.SQLiteDatabase.executeSql(java.lang.String, java.lang.Object[])"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","android.database.sqlite.SQLiteDatabase.getPath()"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","android.database.sqlite.SQLiteDatabase.getAttachedDbs()"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","java.util.List.size()"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","java.util.List.add(android.util.Pair<java.lang.String, java.lang.String>)"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","android.database.sqlite.SQLiteDatabase.compileStatement(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","android.database.sqlite.SQLiteStatement.simpleQueryForString()"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","android.database.sqlite.SQLiteClosable.close()"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk()","java.util.List.get(int)"
"android.database.sqlite.SQLiteDatabase.replaceOrThrow(String, String, ContentValues)","android.database.sqlite.SQLiteDatabase.insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int)"
"android.database.sqlite.SQLiteDatabase.findEditTable(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.findEditTable(String)","java.lang.String.substring(int, int)"
"android.database.sqlite.SQLiteDatabase.findEditTable(String)","java.lang.String.indexOf(char)"
"android.database.sqlite.SQLiteDatabase.delete(String, String, String[])","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.delete(String, String, String[])","android.text.TextUtils.isEmpty(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.delete(String, String, String[])","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.delete(String, String, String[])","android.database.sqlite.SQLiteStatement.executeUpdateDelete()"
"android.database.sqlite.SQLiteDatabase.delete(String, String, String[])","android.database.sqlite.SQLiteClosable.close()"
"android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(String, CursorFactory)","android.database.sqlite.SQLiteDatabase.openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, null)"
"android.database.sqlite.SQLiteDatabase.compileStatement(String)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.compileStatement(String)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.getDbStats()","android.database.sqlite.SQLiteDatabase.getActiveDatabases()"
"android.database.sqlite.SQLiteDatabase.getDbStats()","android.database.sqlite.SQLiteDatabase.collectDbStats(java.util.ArrayList<android.database.sqlite.SQLiteDebug.DbStats>)"
"android.database.sqlite.SQLiteDatabase.openInner()","android.database.sqlite.SQLiteConnectionPool.open(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteDatabase.openInner()","java.util.WeakHashMap.put(android.database.sqlite.SQLiteDatabase, null)"
"android.database.sqlite.SQLiteDatabase.yieldIfContendedHelper(boolean, long)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.yieldIfContendedHelper(boolean, long)","android.database.sqlite.SQLiteSession.yieldTransaction(long, boolean, null)"
"android.database.sqlite.SQLiteDatabase.yieldIfContendedHelper(boolean, long)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.yieldIfContendedHelper(boolean, long)","android.database.sqlite.SQLiteDatabase.getThreadSession()"
"android.database.sqlite.SQLiteDatabase.setVersion(int)","android.database.sqlite.SQLiteDatabase.execSQL(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.beginTransaction(SQLiteTransactionListener, boolean)","android.database.sqlite.SQLiteSession.beginTransaction(int, android.database.sqlite.SQLiteTransactionListener, int, null)"
"android.database.sqlite.SQLiteDatabase.beginTransaction(SQLiteTransactionListener, boolean)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.beginTransaction(SQLiteTransactionListener, boolean)","android.database.sqlite.SQLiteDatabase.getThreadDefaultConnectionFlags(boolean)"
"android.database.sqlite.SQLiteDatabase.beginTransaction(SQLiteTransactionListener, boolean)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.beginTransaction(SQLiteTransactionListener, boolean)","android.database.sqlite.SQLiteDatabase.getThreadSession()"
"android.database.sqlite.SQLiteDatabase.releaseMemory()","android.database.sqlite.SQLiteGlobal.releaseMemory()"
"android.database.sqlite.SQLiteDatabase.executeSql(String, Object[])","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.executeSql(String, Object[])","android.database.DatabaseUtils.getSqlStatementType(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.executeSql(String, Object[])","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.executeSql(String, Object[])","android.database.sqlite.SQLiteStatement.executeUpdateDelete()"
"android.database.sqlite.SQLiteDatabase.executeSql(String, Object[])","android.database.sqlite.SQLiteDatabase.disableWriteAheadLogging()"
"android.database.sqlite.SQLiteDatabase.executeSql(String, Object[])","android.database.sqlite.SQLiteClosable.close()"
"android.database.sqlite.SQLiteDatabase.setForeignKeyConstraintsEnabled(boolean)","android.database.sqlite.SQLiteConnectionPool.reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteDatabase.setForeignKeyConstraintsEnabled(boolean)","android.database.sqlite.SQLiteDatabase.throwIfNotOpenLocked()"
"android.database.sqlite.SQLiteDatabase.initialValue()","android.database.sqlite.SQLiteDatabase.createSession()"
"android.database.sqlite.SQLiteDatabase.insert(String, String, ContentValues)","android.database.sqlite.SQLiteDatabase.insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int)"
"android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(File, CursorFactory)","android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory)"
"android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(File, CursorFactory)","java.io.File.getPath()"
"android.database.sqlite.SQLiteDatabase.replace(String, String, ContentValues)","android.database.sqlite.SQLiteDatabase.insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int)"
"android.database.sqlite.SQLiteDatabase.openOrCreateDatabase(String, CursorFactory, DatabaseErrorHandler)","android.database.sqlite.SQLiteDatabase.openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, android.database.DatabaseErrorHandler)"
"android.database.sqlite.SQLiteDatabase.setMaximumSize(long)","android.database.DatabaseUtils.longForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.setMaximumSize(long)","android.database.sqlite.SQLiteDatabase.getPageSize()"
"android.database.sqlite.SQLiteDatabase.rawQuery(String, String[])","android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(null, java.lang.String, java.lang.String[], null, null)"
"android.database.sqlite.SQLiteDatabase.isWriteAheadLoggingEnabled()","android.database.sqlite.SQLiteDatabase.throwIfNotOpenLocked()"
"android.database.sqlite.SQLiteDatabase.dump(Printer, boolean)","android.database.sqlite.SQLiteConnectionPool.dump(android.util.Printer, boolean)"
"android.database.sqlite.SQLiteDatabase.dump(Printer, boolean)","android.util.Printer.println(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(CursorFactory, String, String[], String)","android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory, java.lang.String, java.lang.String[], java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.collectDbStats(ArrayList)","android.database.sqlite.SQLiteConnectionPool.collectDbStats(java.util.ArrayList<android.database.sqlite.SQLiteDebug.DbStats>)"
"android.database.sqlite.SQLiteDatabase.getVersion()","java.lang.Long.intValue()"
"android.database.sqlite.SQLiteDatabase.getVersion()","android.database.DatabaseUtils.longForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.yieldIfContended()","android.database.sqlite.SQLiteDatabase.yieldIfContendedHelper(boolean, int)"
"android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely(long)","android.database.sqlite.SQLiteDatabase.yieldIfContendedHelper(boolean, long)"
"android.database.sqlite.SQLiteDatabase.insertOrThrow(String, String, ContentValues)","android.database.sqlite.SQLiteDatabase.insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, int)"
"android.database.sqlite.SQLiteDatabase.getAttachedDbs()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.getAttachedDbs()","java.util.ArrayList.add(android.util.Pair<java.lang.String, java.lang.String>)"
"android.database.sqlite.SQLiteDatabase.getAttachedDbs()","android.database.Cursor.getString(int)"
"android.database.sqlite.SQLiteDatabase.getAttachedDbs()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.getAttachedDbs()","android.database.Cursor.moveToNext()"
"android.database.sqlite.SQLiteDatabase.getAttachedDbs()","android.database.sqlite.SQLiteDatabase.rawQuery(java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.getAttachedDbs()","android.database.Cursor.close()"
"android.database.sqlite.SQLiteDatabase.update(String, ContentValues, String, String[])","android.database.sqlite.SQLiteDatabase.updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int)"
"android.database.sqlite.SQLiteDatabase.getMaximumSize()","android.database.DatabaseUtils.longForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.getMaximumSize()","android.database.sqlite.SQLiteDatabase.getPageSize()"
"android.database.sqlite.SQLiteDatabase.toString()","android.database.sqlite.SQLiteDatabase.getPath()"
"android.database.sqlite.SQLiteDatabase.queryWithFactory(CursorFactory, boolean, String, String[], String, String[], String, String, String, String, CancellationSignal)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.queryWithFactory(CursorFactory, boolean, String, String[], String, String[], String, String, String, String, CancellationSignal)","android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(android.database.sqlite.SQLiteDatabase.CursorFactory, java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)"
"android.database.sqlite.SQLiteDatabase.queryWithFactory(CursorFactory, boolean, String, String[], String, String[], String, String, String, String, CancellationSignal)","android.database.sqlite.SQLiteDatabase.findEditTable(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.queryWithFactory(CursorFactory, boolean, String, String[], String, String[], String, String, String, String, CancellationSignal)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.queryWithFactory(CursorFactory, boolean, String, String[], String, String[], String, String, String, String, CancellationSignal)","android.database.sqlite.SQLiteQueryBuilder.buildQueryString(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.database.sqlite.SQLiteDatabase.addCustomFunction(String, int, CustomFunction)","java.util.ArrayList.remove(android.database.sqlite.SQLiteCustomFunction)"
"android.database.sqlite.SQLiteDatabase.addCustomFunction(String, int, CustomFunction)","java.util.ArrayList.add(android.database.sqlite.SQLiteCustomFunction)"
"android.database.sqlite.SQLiteDatabase.addCustomFunction(String, int, CustomFunction)","android.database.sqlite.SQLiteConnectionPool.reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteDatabase.addCustomFunction(String, int, CustomFunction)","android.database.sqlite.SQLiteDatabase.throwIfNotOpenLocked()"
"android.database.sqlite.SQLiteDatabase.isInMemoryDatabase()","android.database.sqlite.SQLiteDatabaseConfiguration.isInMemoryDb()"
"android.database.sqlite.SQLiteDatabase.setLocale(Locale)","android.database.sqlite.SQLiteConnectionPool.reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteDatabase.setLocale(Locale)","android.database.sqlite.SQLiteDatabase.throwIfNotOpenLocked()"
"android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()","android.database.sqlite.SQLiteSession.setTransactionSuccessful()"
"android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()","android.database.sqlite.SQLiteDatabase.getThreadSession()"
"android.database.sqlite.SQLiteDatabase.create(CursorFactory)","android.database.sqlite.SQLiteDatabase.openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int)"
"android.database.sqlite.SQLiteDatabase.enableWriteAheadLogging()","android.database.sqlite.SQLiteDatabaseConfiguration.isInMemoryDb()"
"android.database.sqlite.SQLiteDatabase.enableWriteAheadLogging()","android.database.sqlite.SQLiteDatabase.isReadOnlyLocked()"
"android.database.sqlite.SQLiteDatabase.enableWriteAheadLogging()","android.util.Log.isLoggable(java.lang.String, int)"
"android.database.sqlite.SQLiteDatabase.enableWriteAheadLogging()","android.database.sqlite.SQLiteConnectionPool.reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteDatabase.enableWriteAheadLogging()","android.database.sqlite.SQLiteDatabase.throwIfNotOpenLocked()"
"android.database.sqlite.SQLiteDatabase.openDatabase(String, CursorFactory, int, DatabaseErrorHandler)","android.database.sqlite.SQLiteDatabase.open()"
"android.database.sqlite.SQLiteDatabase.beginTransactionWithListener(SQLiteTransactionListener)","android.database.sqlite.SQLiteDatabase.beginTransaction(android.database.sqlite.SQLiteTransactionListener, boolean)"
"android.database.sqlite.SQLiteDatabase.endTransaction()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.endTransaction()","android.database.sqlite.SQLiteSession.endTransaction(null)"
"android.database.sqlite.SQLiteDatabase.endTransaction()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.endTransaction()","android.database.sqlite.SQLiteDatabase.getThreadSession()"
"android.database.sqlite.SQLiteDatabase.setPageSize(long)","android.database.sqlite.SQLiteDatabase.execSQL(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","android.content.ContentValues.size()"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","java.lang.StringBuilder.append(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","android.content.ContentValues.keySet()"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","android.content.ContentValues.get(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","java.lang.StringBuilder.toString()"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","android.database.sqlite.SQLiteStatement.executeUpdateDelete()"
"android.database.sqlite.SQLiteDatabase.updateWithOnConflict(String, ContentValues, String, String[], int)","android.database.sqlite.SQLiteClosable.close()"
"android.database.sqlite.SQLiteDatabase.onCorruption()","android.database.DatabaseErrorHandler.onCorruption(android.database.sqlite.SQLiteDatabase)"
"android.database.sqlite.SQLiteDatabase.onCorruption()","android.util.EventLog.writeEvent(int, java.lang.String)"
"android.database.sqlite.SQLiteDatabase.onCorruption()","android.database.sqlite.SQLiteDatabase.getLabel()"
"android.database.sqlite.SQLiteDatabase.beginTransaction()","android.database.sqlite.SQLiteDatabase.beginTransaction(null, boolean)"
"android.database.sqlite.SQLiteDatabase.getActiveDatabases()","java.util.ArrayList.addAll(java.util.Set<android.database.sqlite.SQLiteDatabase>)"
"android.database.sqlite.SQLiteDatabase.getActiveDatabases()","java.util.WeakHashMap.keySet()"
"android.database.sqlite.SQLiteDatabase.inTransaction()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteDatabase.inTransaction()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteDatabase.inTransaction()","android.database.sqlite.SQLiteSession.hasTransaction()"
"android.database.sqlite.SQLiteDatabase.inTransaction()","android.database.sqlite.SQLiteDatabase.getThreadSession()"
"android.database.sqlite.SQLiteDatabase.query(String, String[], String, String[], String, String, String)","android.database.sqlite.SQLiteDatabase.query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.onAllReferencesReleased()","android.database.sqlite.SQLiteDatabase.dispose(boolean)"
"android.database.sqlite.SQLiteDatabase.getThreadSession()","java.lang.ThreadLocal.get()"
"android.database.sqlite.SQLiteDatabase.openDatabase(String, CursorFactory, int)","android.database.sqlite.SQLiteDatabase.openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, null)"
"android.database.sqlite.SQLiteDatabase.deleteDatabase(File)","java.io.File.getParentFile()"
"android.database.sqlite.SQLiteDatabase.deleteDatabase(File)","java.lang.String.startsWith(java.lang.String)"
"android.database.sqlite.SQLiteDatabase.deleteDatabase(File)","java.io.File.getPath()"
"android.database.sqlite.SQLiteDatabase.deleteDatabase(File)","java.io.File.listFiles(java.io.FileFilter)"
"android.database.sqlite.SQLiteDatabase.deleteDatabase(File)","java.io.File.delete()"
"android.database.sqlite.SQLiteDatabase.deleteDatabase(File)","java.io.File.getName()"
"android.database.sqlite.SQLiteDatabase.isReadOnly()","android.database.sqlite.SQLiteDatabase.isReadOnlyLocked()"
"android.database.sqlite.SQLiteDatabase.rawQuery(String, String[], CancellationSignal)","android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(null, java.lang.String, java.lang.String[], null, android.os.CancellationSignal)"
"android.database.sqlite.SQLiteDatabase.dumpAll(Printer, boolean)","android.database.sqlite.SQLiteDatabase.getActiveDatabases()"
"android.database.sqlite.SQLiteDatabase.dumpAll(Printer, boolean)","android.database.sqlite.SQLiteDatabase.dump(android.util.Printer, boolean)"
"android.database.sqlite.SQLiteDatabase.execSQL(String)","android.database.sqlite.SQLiteDatabase.executeSql(java.lang.String, null)"
"android.database.sqlite.SQLiteDatabase.open()","android.database.sqlite.SQLiteDatabase.onCorruption()"
"android.database.sqlite.SQLiteDatabase.open()","android.database.sqlite.SQLiteDatabase.openInner()"
"android.database.sqlite.SQLiteDatabase.open()","android.database.sqlite.SQLiteClosable.close()"
"android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely()","android.database.sqlite.SQLiteDatabase.yieldIfContendedHelper(boolean, int)"
"android.database.sqlite.SQLiteDatabaseConfiguration.updateParametersFrom(SQLiteDatabaseConfiguration)","java.util.ArrayList.addAll(java.util.ArrayList<android.database.sqlite.SQLiteCustomFunction>)"
"android.database.sqlite.SQLiteDatabaseConfiguration.updateParametersFrom(SQLiteDatabaseConfiguration)","java.lang.String.equals(java.lang.String)"
"android.database.sqlite.SQLiteDatabaseConfiguration.updateParametersFrom(SQLiteDatabaseConfiguration)","java.util.ArrayList.clear()"
"android.database.sqlite.SQLiteDatabaseConfiguration.stripPathForLogs(String)","java.util.regex.Matcher.replaceAll(java.lang.String)"
"android.database.sqlite.SQLiteDatabaseConfiguration.stripPathForLogs(String)","java.lang.String.indexOf(char)"
"android.database.sqlite.SQLiteDatabaseConfiguration.stripPathForLogs(String)","java.util.regex.Pattern.matcher(java.lang.String)"
"android.database.sqlite.SQLiteDatabaseConfiguration.isInMemoryDb()","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.bluetooth.le.ScanRecord.toString()","android.bluetooth.le.BluetoothLeUtils.toString(android.util.SparseArray<byte[]>)"
"android.bluetooth.le.ScanRecord.toString()","android.bluetooth.le.BluetoothLeUtils.toString(java.util.Map<android.os.ParcelUuid, byte[]>)"
"android.bluetooth.le.ScanRecord.parseFromBytes(byte[])","android.bluetooth.BluetoothUuid.parseUuidFrom(byte[])"
"android.bluetooth.le.ScanRecord.parseFromBytes(byte[])","java.util.List.isEmpty()"
"android.bluetooth.le.ScanRecord.parseFromBytes(byte[])","java.util.Map.put(android.os.ParcelUuid, byte[])"
"android.bluetooth.le.ScanRecord.parseFromBytes(byte[])","android.bluetooth.le.ScanRecord.parseServiceUuid(byte[], int, int, int, java.util.List<android.os.ParcelUuid>)"
"android.bluetooth.le.ScanRecord.parseFromBytes(byte[])","android.bluetooth.le.ScanRecord.extractBytes(byte[], int, int)"
"android.bluetooth.le.ScanRecord.parseFromBytes(byte[])","android.util.SparseArray.put(int, byte[])"
"android.bluetooth.le.ScanRecord.getManufacturerSpecificData(int)","android.util.SparseArray.get(int)"
"android.bluetooth.le.ScanRecord.extractBytes(byte[], int, int)","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"android.bluetooth.le.ScanRecord.parseServiceUuid(byte[], int, int, int, List)","java.util.List.add(android.os.ParcelUuid)"
"android.bluetooth.le.ScanRecord.parseServiceUuid(byte[], int, int, int, List)","android.bluetooth.BluetoothUuid.parseUuidFrom(byte[])"
"android.bluetooth.le.ScanRecord.parseServiceUuid(byte[], int, int, int, List)","android.bluetooth.le.ScanRecord.extractBytes(byte[], int, int)"
"android.bluetooth.le.ScanRecord.getServiceData(ParcelUuid)","java.util.Map.get(android.os.ParcelUuid)"
"android.database.sqlite.SQLiteConnectionPool.onConnectionLeaked()","java.util.concurrent.atomic.AtomicBoolean.set(boolean)"
"android.database.sqlite.SQLiteConnectionPool.tryAcquirePrimaryConnectionLocked(int)","android.database.sqlite.SQLiteConnection.isPrimaryConnection()"
"android.database.sqlite.SQLiteConnectionPool.tryAcquirePrimaryConnectionLocked(int)","android.database.sqlite.SQLiteConnectionPool.finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection, int)"
"android.database.sqlite.SQLiteConnectionPool.tryAcquirePrimaryConnectionLocked(int)","java.util.WeakHashMap.keySet()"
"android.database.sqlite.SQLiteConnectionPool.tryAcquirePrimaryConnectionLocked(int)","android.database.sqlite.SQLiteConnectionPool.openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration, boolean)"
"android.database.sqlite.SQLiteConnectionPool.open(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.open()"
"android.database.sqlite.SQLiteConnectionPool.recycleConnectionLocked(SQLiteConnection, AcquiredConnectionStatus)","android.database.sqlite.SQLiteConnection.reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteConnectionPool.recycleConnectionLocked(SQLiteConnection, AcquiredConnectionStatus)","android.database.sqlite.SQLiteConnectionPool.closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.cancelConnectionWaiterLocked(ConnectionWaiter)","android.database.sqlite.SQLiteConnectionPool.wakeConnectionWaitersLocked()"
"android.database.sqlite.SQLiteConnectionPool.cancelConnectionWaiterLocked(ConnectionWaiter)","java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread)"
"android.database.sqlite.SQLiteConnectionPool.closeExcessConnectionsAndLogExceptionsLocked()","java.util.ArrayList.size()"
"android.database.sqlite.SQLiteConnectionPool.closeExcessConnectionsAndLogExceptionsLocked()","android.database.sqlite.SQLiteConnectionPool.closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.closeExcessConnectionsAndLogExceptionsLocked()","java.util.ArrayList.remove(int)"
"android.database.sqlite.SQLiteConnectionPool.close()","android.database.sqlite.SQLiteConnectionPool.dispose(boolean)"
"android.database.sqlite.SQLiteConnectionPool.setMaxConnectionPoolSizeLocked()","android.database.sqlite.SQLiteGlobal.getWALConnectionPoolSize()"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","java.util.ArrayList.size()"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","java.util.Map.Entry.getValue()"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","java.util.ArrayList.isEmpty()"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","java.util.WeakHashMap.entrySet()"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","android.os.SystemClock.uptimeMillis()"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","java.util.WeakHashMap.isEmpty()"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","android.database.sqlite.SQLiteConnection.dump(android.util.Printer, boolean)"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","android.database.sqlite.SQLiteConnection.dumpUnsafe(android.util.Printer, boolean)"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","android.util.Printer.println(java.lang.String)"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","java.util.Map.Entry.getKey()"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","java.util.ArrayList.get(int)"
"android.database.sqlite.SQLiteConnectionPool.dump(Printer, boolean)","android.util.PrefixPrinter.create(android.util.Printer, java.lang.String)"
"android.database.sqlite.SQLiteConnectionPool.finalize()","java.lang.Object.finalize()"
"android.database.sqlite.SQLiteConnectionPool.finalize()","android.database.sqlite.SQLiteConnectionPool.dispose(boolean)"
"android.database.sqlite.SQLiteConnectionPool.discardAcquiredConnectionsLocked()","android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool.AcquiredConnectionStatus)"
"android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(AcquiredConnectionStatus)","java.util.ArrayList.size()"
"android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(AcquiredConnectionStatus)","java.util.Map.Entry.getValue()"
"android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(AcquiredConnectionStatus)","java.util.WeakHashMap.size()"
"android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(AcquiredConnectionStatus)","java.util.WeakHashMap.entrySet()"
"android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(AcquiredConnectionStatus)","java.util.WeakHashMap.isEmpty()"
"android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(AcquiredConnectionStatus)","java.util.ArrayList.add(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(AcquiredConnectionStatus)","java.util.WeakHashMap.put(android.database.sqlite.SQLiteConnection, android.database.sqlite.SQLiteConnectionPool.AcquiredConnectionStatus)"
"android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(AcquiredConnectionStatus)","java.util.Map.Entry.getKey()"
"android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(AcquiredConnectionStatus)","java.util.ArrayList.get(int)"
"android.database.sqlite.SQLiteConnectionPool.shouldYieldConnection(SQLiteConnection, int)","java.util.WeakHashMap.containsKey(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.shouldYieldConnection(SQLiteConnection, int)","android.database.sqlite.SQLiteConnectionPool.isSessionBlockingImportantConnectionWaitersLocked(boolean, int)"
"android.database.sqlite.SQLiteConnectionPool.shouldYieldConnection(SQLiteConnection, int)","android.database.sqlite.SQLiteConnection.isPrimaryConnection()"
"android.database.sqlite.SQLiteConnectionPool.openConnectionLocked(SQLiteDatabaseConfiguration, boolean)","android.database.sqlite.SQLiteConnection.open(android.database.sqlite.SQLiteConnectionPool, android.database.sqlite.SQLiteDatabaseConfiguration, int, boolean)"
"android.database.sqlite.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(String, int)","java.util.ArrayList.size()"
"android.database.sqlite.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(String, int)","java.util.WeakHashMap.size()"
"android.database.sqlite.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(String, int)","android.database.sqlite.SQLiteConnection.isPreparedStatementInCache(java.lang.String)"
"android.database.sqlite.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(String, int)","android.database.sqlite.SQLiteConnectionPool.finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection, int)"
"android.database.sqlite.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(String, int)","java.util.ArrayList.remove(int)"
"android.database.sqlite.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(String, int)","android.database.sqlite.SQLiteConnectionPool.openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration, boolean)"
"android.database.sqlite.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(String, int)","java.util.ArrayList.get(int)"
"android.database.sqlite.SQLiteConnectionPool.finishAcquireConnectionLocked(SQLiteConnection, int)","android.database.sqlite.SQLiteConnectionPool.closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.finishAcquireConnectionLocked(SQLiteConnection, int)","java.util.WeakHashMap.put(android.database.sqlite.SQLiteConnection, android.database.sqlite.SQLiteConnectionPool.AcquiredConnectionStatus)"
"android.database.sqlite.SQLiteConnectionPool.finishAcquireConnectionLocked(SQLiteConnection, int)","android.database.sqlite.SQLiteConnection.setOnlyAllowReadOnlyOperations(boolean)"
"android.database.sqlite.SQLiteConnectionPool.closeConnectionAndLogExceptionsLocked(SQLiteConnection)","android.database.sqlite.SQLiteConnection.close()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.reconfigureAllConnectionsLocked()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.wakeConnectionWaitersLocked()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","java.util.ArrayList.isEmpty()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","java.util.WeakHashMap.isEmpty()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteDatabaseConfiguration.updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.throwIfClosedLocked()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.closeExcessConnectionsAndLogExceptionsLocked()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.closeAvailableConnectionsAndLogExceptionsLocked()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration, boolean)"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.setMaxConnectionPoolSizeLocked()"
"android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)","android.database.sqlite.SQLiteConnectionPool.discardAcquiredConnectionsLocked()"
"android.database.sqlite.SQLiteConnectionPool.releaseConnection(SQLiteConnection)","android.database.sqlite.SQLiteConnectionPool.wakeConnectionWaitersLocked()"
"android.database.sqlite.SQLiteConnectionPool.releaseConnection(SQLiteConnection)","java.util.ArrayList.size()"
"android.database.sqlite.SQLiteConnectionPool.releaseConnection(SQLiteConnection)","java.util.WeakHashMap.remove(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.releaseConnection(SQLiteConnection)","android.database.sqlite.SQLiteConnectionPool.recycleConnectionLocked(android.database.sqlite.SQLiteConnection, android.database.sqlite.SQLiteConnectionPool.AcquiredConnectionStatus)"
"android.database.sqlite.SQLiteConnectionPool.releaseConnection(SQLiteConnection)","java.util.ArrayList.add(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.releaseConnection(SQLiteConnection)","android.database.sqlite.SQLiteConnectionPool.closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.releaseConnection(SQLiteConnection)","android.database.sqlite.SQLiteConnection.isPrimaryConnection()"
"android.database.sqlite.SQLiteConnectionPool.reconfigureAllConnectionsLocked()","java.util.ArrayList.size()"
"android.database.sqlite.SQLiteConnectionPool.reconfigureAllConnectionsLocked()","android.database.sqlite.SQLiteConnectionPool.markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool.AcquiredConnectionStatus)"
"android.database.sqlite.SQLiteConnectionPool.reconfigureAllConnectionsLocked()","android.database.sqlite.SQLiteConnectionPool.closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.reconfigureAllConnectionsLocked()","android.database.sqlite.SQLiteConnection.reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration)"
"android.database.sqlite.SQLiteConnectionPool.reconfigureAllConnectionsLocked()","java.util.ArrayList.remove(int)"
"android.database.sqlite.SQLiteConnectionPool.reconfigureAllConnectionsLocked()","java.util.ArrayList.get(int)"
"android.database.sqlite.SQLiteConnectionPool.closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()","java.util.ArrayList.size()"
"android.database.sqlite.SQLiteConnectionPool.closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()","android.database.sqlite.SQLiteConnectionPool.closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()","java.util.ArrayList.get(int)"
"android.database.sqlite.SQLiteConnectionPool.closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()","java.util.ArrayList.clear()"
"android.database.sqlite.SQLiteConnectionPool.dispose(boolean)","android.database.sqlite.SQLiteConnectionPool.wakeConnectionWaitersLocked()"
"android.database.sqlite.SQLiteConnectionPool.dispose(boolean)","java.util.WeakHashMap.size()"
"android.database.sqlite.SQLiteConnectionPool.dispose(boolean)","android.database.sqlite.SQLiteConnectionPool.throwIfClosedLocked()"
"android.database.sqlite.SQLiteConnectionPool.dispose(boolean)","android.database.sqlite.SQLiteConnectionPool.closeAvailableConnectionsAndLogExceptionsLocked()"
"android.database.sqlite.SQLiteConnectionPool.isSessionBlockingImportantConnectionWaitersLocked(boolean, int)","android.database.sqlite.SQLiteConnectionPool.getPriority(int)"
"android.database.sqlite.SQLiteConnectionPool.collectDbStats(ArrayList)","android.database.sqlite.SQLiteConnection.collectDbStatsUnsafe(java.util.ArrayList<android.database.sqlite.SQLiteDebug.DbStats>)"
"android.database.sqlite.SQLiteConnectionPool.collectDbStats(ArrayList)","android.database.sqlite.SQLiteConnection.collectDbStats(java.util.ArrayList<android.database.sqlite.SQLiteDebug.DbStats>)"
"android.database.sqlite.SQLiteConnectionPool.collectDbStats(ArrayList)","java.util.WeakHashMap.keySet()"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.util.ArrayList.isEmpty()"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.util.WeakHashMap.isEmpty()"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.lang.StringBuilder.append(java.lang.String)"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.lang.Thread.currentThread()"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.lang.Thread.getName()"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.util.ArrayList.size()"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.util.ArrayList.add(java.lang.String)"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.lang.StringBuilder.append(int)"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","android.database.sqlite.SQLiteConnection.describeCurrentOperationUnsafe()"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.lang.Integer.toHexString(int)"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.util.WeakHashMap.keySet()"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.lang.StringBuilder.append(long)"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.lang.StringBuilder.append(float)"
"android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)","java.lang.Thread.getId()"
"android.database.sqlite.SQLiteConnectionPool.closeAvailableConnectionsAndLogExceptionsLocked()","android.database.sqlite.SQLiteConnectionPool.closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()"
"android.database.sqlite.SQLiteConnectionPool.closeAvailableConnectionsAndLogExceptionsLocked()","android.database.sqlite.SQLiteConnectionPool.closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.os.CancellationSignal.setOnCancelListener(android.os.CancellationSignal.OnCancelListener)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.wakeConnectionWaitersLocked()"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.logConnectionPoolBusyLocked(long, int)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.os.CancellationSignal.throwIfCanceled()"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.getPriority(int)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","java.lang.Thread.currentThread()"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.throwIfClosedLocked()"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean, boolean)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(java.lang.String, int)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.os.CancellationSignal.setOnCancelListener(null)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.os.SystemClock.uptimeMillis()"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","java.util.concurrent.locks.LockSupport.parkNanos(android.database.sqlite.SQLiteConnectionPool, long)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.cancelConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool.ConnectionWaiter)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.tryAcquirePrimaryConnectionLocked(int)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.obtainConnectionWaiterLocked(java.lang.Thread, long, int, boolean, java.lang.String, int)"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","java.lang.Thread.interrupted()"
"android.database.sqlite.SQLiteConnectionPool.waitForConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.recycleConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool.ConnectionWaiter)"
"android.database.sqlite.SQLiteConnectionPool.open()","android.database.sqlite.SQLiteConnectionPool.openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration, boolean)"
"android.database.sqlite.SQLiteConnectionPool.acquireConnection(String, int, CancellationSignal)","android.database.sqlite.SQLiteConnectionPool.waitForConnection(java.lang.String, int, android.os.CancellationSignal)"
"android.database.sqlite.SQLiteConnectionPool.wakeConnectionWaitersLocked()","java.util.concurrent.locks.LockSupport.unpark(java.lang.Thread)"
"android.database.sqlite.SQLiteConnectionPool.wakeConnectionWaitersLocked()","android.database.sqlite.SQLiteConnectionPool.tryAcquirePrimaryConnectionLocked(int)"
"android.database.sqlite.SQLiteConnectionPool.wakeConnectionWaitersLocked()","android.database.sqlite.SQLiteConnectionPool.tryAcquireNonPrimaryConnectionLocked(java.lang.String, int)"
"com.android.internal.app.MediaRouteControllerDialog.onRouteGrouped(MediaRouter, RouteInfo, RouteGroup, int)","com.android.internal.app.MediaRouteControllerDialog.update()"
"com.android.internal.app.MediaRouteControllerDialog.onDetachedFromWindow()","android.app.Dialog.onDetachedFromWindow()"
"com.android.internal.app.MediaRouteControllerDialog.onRouteUngrouped(MediaRouter, RouteInfo, RouteGroup)","com.android.internal.app.MediaRouteControllerDialog.update()"
"com.android.internal.app.MediaRouteControllerDialog.onAttachedToWindow()","com.android.internal.app.MediaRouteControllerDialog.update()"
"com.android.internal.app.MediaRouteControllerDialog.onAttachedToWindow()","android.app.Dialog.onAttachedToWindow()"
"com.android.internal.app.MediaRouteControllerDialog.onKeyUp(int, KeyEvent)","android.app.Dialog.onKeyUp(int, android.view.KeyEvent)"
"com.android.internal.app.MediaRouteControllerDialog.updateVolume()","com.android.internal.app.MediaRouteControllerDialog.isVolumeControlAvailable()"
"com.android.internal.app.MediaRouteControllerDialog.update()","com.android.internal.app.MediaRouteControllerDialog.getIconDrawable()"
"com.android.internal.app.MediaRouteControllerDialog.update()","com.android.internal.app.MediaRouteControllerDialog.updateVolume()"
"com.android.internal.app.MediaRouteControllerDialog.update()","android.app.Dialog.dismiss()"
"com.android.internal.app.MediaRouteControllerDialog.onRouteChanged(MediaRouter, MediaRouter.RouteInfo)","com.android.internal.app.MediaRouteControllerDialog.update()"
"com.android.internal.app.MediaRouteControllerDialog.setVolumeControlEnabled(boolean)","com.android.internal.app.MediaRouteControllerDialog.updateVolume()"
"com.android.internal.app.MediaRouteControllerDialog.onRouteUnselected(MediaRouter, int, RouteInfo)","com.android.internal.app.MediaRouteControllerDialog.update()"
"com.android.internal.app.MediaRouteControllerDialog.onRouteVolumeChanged(MediaRouter, MediaRouter.RouteInfo)","com.android.internal.app.MediaRouteControllerDialog.updateVolume()"
"com.android.internal.app.MediaRouteControllerDialog.onKeyDown(int, KeyEvent)","android.app.Dialog.onKeyDown(int, android.view.KeyEvent)"
"com.android.internal.app.MediaRouteControllerDialog.onCreate(Bundle)","com.android.internal.app.MediaRouteControllerDialog.update()"
"com.android.internal.app.MediaRouteControllerDialog.onCreate(Bundle)","android.app.Dialog.onCreate(android.os.Bundle)"
"com.android.internal.app.MediaRouteControllerDialog.onCreate(Bundle)","android.view.Window.requestFeature(int)"
"com.android.internal.app.MediaRouteControllerDialog.onCreate(Bundle)","android.app.Dialog.getWindow()"
"com.android.internal.app.MediaRouteControllerDialog.onCreate(Bundle)","com.android.internal.app.MediaRouteControllerDialog.onCreateMediaControlView(android.os.Bundle)"
"android.app.VoiceInteractor.makeRequestList()","java.util.ArrayList.add(android.app.VoiceInteractor.Request)"
"android.app.VoiceInteractor.makeRequestList()","android.util.ArrayMap.valueAt(int)"
"android.app.VoiceInteractor.makeRequestList()","android.util.ArrayMap.size()"
"android.app.VoiceInteractor.executeMessage(Message)","android.app.VoiceInteractor.AbortVoiceRequest.onAbortResult(android.os.Bundle)"
"android.app.VoiceInteractor.executeMessage(Message)","android.app.VoiceInteractor.Request.onCancel()"
"android.app.VoiceInteractor.executeMessage(Message)","android.app.VoiceInteractor.Request.clear()"
"android.app.VoiceInteractor.executeMessage(Message)","android.app.VoiceInteractor.CommandRequest.onCommandResult(android.os.Bundle)"
"android.app.VoiceInteractor.executeMessage(Message)","android.app.VoiceInteractor.CompleteVoiceRequest.onCompleteResult(android.os.Bundle)"
"android.app.VoiceInteractor.executeMessage(Message)","android.app.VoiceInteractor.ConfirmationRequest.onConfirmationResult(boolean, android.os.Bundle)"
"android.app.VoiceInteractor.detachActivity()","java.util.ArrayList.size()"
"android.app.VoiceInteractor.detachActivity()","android.app.VoiceInteractor.Request.onDetached()"
"android.app.VoiceInteractor.detachActivity()","android.app.VoiceInteractor.makeRequestList()"
"android.app.VoiceInteractor.detachActivity()","java.util.ArrayList.get(int)"
"android.app.VoiceInteractor.attachActivity(Activity)","java.util.ArrayList.size()"
"android.app.VoiceInteractor.attachActivity(Activity)","android.app.VoiceInteractor.Request.onAttached(android.app.Activity)"
"android.app.VoiceInteractor.attachActivity(Activity)","android.app.VoiceInteractor.makeRequestList()"
"android.app.VoiceInteractor.attachActivity(Activity)","java.util.ArrayList.get(int)"
"android.content.pm.ActivityInfo.toString()","java.lang.System.identityHashCode(android.content.pm.ActivityInfo)"
"android.content.pm.ActivityInfo.toString()","java.lang.Integer.toHexString(int)"
"android.content.pm.ActivityInfo.dump(Printer, String)","android.content.pm.ComponentInfo.dumpBack(android.util.Printer, java.lang.String)"
"android.content.pm.ActivityInfo.dump(Printer, String)","android.content.pm.ComponentInfo.dumpFront(android.util.Printer, java.lang.String)"
"android.content.pm.ActivityInfo.dump(Printer, String)","android.content.pm.ActivityInfo.persistableModeToString()"
"android.content.pm.ActivityInfo.dump(Printer, String)","android.util.Printer.println(java.lang.String)"
"android.content.pm.ActivityInfo.dump(Printer, String)","java.lang.Integer.toHexString(int)"
"android.content.pm.ActivityInfo.writeToParcel(Parcel, int)","android.content.pm.ComponentInfo.writeToParcel(android.os.Parcel, int)"
"android.content.pm.ActivityInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.content.pm.ActivityInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.view.animation.CycleInterpolator.getInterpolation(float)","java.lang.Math.sin(double)"
"android.view.animation.CycleInterpolator.createNativeInterpolator()","com.android.internal.view.animation.NativeInterpolatorFactoryHelper.createCycleInterpolator(float)"
"android.widget.HorizontalScrollView.initScrollView()","android.view.ViewConfiguration.getScaledTouchSlop()"
"android.widget.HorizontalScrollView.initScrollView()","android.view.ViewConfiguration.get(android.content.Context)"
"android.widget.HorizontalScrollView.initScrollView()","android.view.ViewConfiguration.getScaledMinimumFlingVelocity()"
"android.widget.HorizontalScrollView.initScrollView()","android.view.ViewConfiguration.getScaledOverscrollDistance()"
"android.widget.HorizontalScrollView.initScrollView()","android.view.ViewConfiguration.getScaledOverflingDistance()"
"android.widget.HorizontalScrollView.initScrollView()","android.view.ViewConfiguration.getScaledMaximumFlingVelocity()"
"android.widget.HorizontalScrollView.computeScrollDeltaToGetChildRectOnScreen(Rect)","java.lang.Math.min(int, int)"
"android.widget.HorizontalScrollView.fullScroll(int)","android.view.View.getRight()"
"android.widget.HorizontalScrollView.draw(Canvas)","android.widget.EdgeEffect.isFinished()"
"android.widget.HorizontalScrollView.draw(Canvas)","android.widget.EdgeEffect.setSize(int, int)"
"android.widget.HorizontalScrollView.onSaveInstanceState()","android.content.Context.getApplicationInfo()"
"android.widget.HorizontalScrollView.onOverScrolled(int, int, boolean, boolean)","android.widget.OverScroller.isFinished()"
"android.widget.HorizontalScrollView.executeKeyEvent(KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.widget.HorizontalScrollView.executeKeyEvent(KeyEvent)","android.view.KeyEvent.isAltPressed()"
"android.widget.HorizontalScrollView.executeKeyEvent(KeyEvent)","android.view.KeyEvent.getAction()"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getX(int)"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.widget.OverScroller.isFinished()"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.widget.OverScroller.abortAnimation()"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.ViewParent.requestDisallowInterceptTouchEvent(boolean)"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getX()"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.widget.EdgeEffect.onRelease()"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.VelocityTracker.getXVelocity(int)"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.MotionEvent.findPointerIndex(int)"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","java.lang.Math.abs(int)"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.widget.EdgeEffect.isFinished()"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.VelocityTracker.clear()"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.VelocityTracker.computeCurrentVelocity(int, int)"
"android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.findPointerIndex(int)"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getX(int)"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","java.lang.Math.abs(int)"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","android.widget.OverScroller.isFinished()"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","android.view.ViewParent.requestDisallowInterceptTouchEvent(boolean)"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getActionIndex()"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getX()"
"android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"android.widget.HorizontalScrollView.recycleVelocityTracker()","android.view.VelocityTracker.recycle()"
"android.widget.HorizontalScrollView.computeScroll()","android.widget.EdgeEffect.onAbsorb(int)"
"android.widget.HorizontalScrollView.computeScroll()","android.widget.OverScroller.getCurrX()"
"android.widget.HorizontalScrollView.computeScroll()","android.widget.OverScroller.getCurrY()"
"android.widget.HorizontalScrollView.computeScroll()","android.widget.OverScroller.getCurrVelocity()"
"android.widget.HorizontalScrollView.computeScroll()","android.widget.OverScroller.computeScrollOffset()"
"android.widget.HorizontalScrollView.measureChild(View, int, int)","android.view.View.getLayoutParams()"
"android.widget.HorizontalScrollView.measureChild(View, int, int)","android.view.View.measure(int, int)"
"android.widget.HorizontalScrollView.measureChild(View, int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.HorizontalScrollView.onLayout(boolean, int, int, int, int)","java.lang.Math.max(int, int)"
"android.widget.HorizontalScrollView.initVelocityTrackerIfNotExists()","android.view.VelocityTracker.obtain()"
"android.widget.HorizontalScrollView.onRestoreInstanceState(Parcelable)","android.content.Context.getApplicationInfo()"
"android.widget.HorizontalScrollView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.HorizontalScrollView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setScrollable(boolean)"
"android.widget.HorizontalScrollView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.HorizontalScrollView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.addAction(int)"
"android.widget.HorizontalScrollView.onGenericMotionEvent(MotionEvent)","android.view.MotionEvent.getSource()"
"android.widget.HorizontalScrollView.onGenericMotionEvent(MotionEvent)","android.view.MotionEvent.getMetaState()"
"android.widget.HorizontalScrollView.onGenericMotionEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.widget.HorizontalScrollView.onGenericMotionEvent(MotionEvent)","android.view.MotionEvent.getAxisValue(int)"
"android.widget.HorizontalScrollView.performAccessibilityAction(int, Bundle)","java.lang.Math.max(int, int)"
"android.widget.HorizontalScrollView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setScrollX(int)"
"android.widget.HorizontalScrollView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setScrollY(int)"
"android.widget.HorizontalScrollView.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.HorizontalScrollView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setMaxScrollY(int)"
"android.widget.HorizontalScrollView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.HorizontalScrollView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setScrollable(boolean)"
"android.widget.HorizontalScrollView.measureChildWithMargins(View, int, int, int, int)","android.view.View.getLayoutParams()"
"android.widget.HorizontalScrollView.measureChildWithMargins(View, int, int, int, int)","android.view.View.measure(int, int)"
"android.widget.HorizontalScrollView.measureChildWithMargins(View, int, int, int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.HorizontalScrollView.toString()","java.lang.System.identityHashCode(android.widget.HorizontalScrollView.SavedState)"
"android.widget.HorizontalScrollView.toString()","java.lang.Integer.toHexString(int)"
"android.widget.HorizontalScrollView.isViewDescendantOf(View, View)","android.view.View.getParent()"
"android.widget.HorizontalScrollView.initOrResetVelocityTracker()","android.view.VelocityTracker.clear()"
"android.widget.HorizontalScrollView.initOrResetVelocityTracker()","android.view.VelocityTracker.obtain()"
"android.widget.HorizontalScrollView.computeHorizontalScrollRange()","java.lang.Math.max(int, int)"
"android.widget.HorizontalScrollView.findFocusableViewInBounds(boolean, int, int)","android.view.View.getLeft()"
"android.widget.HorizontalScrollView.findFocusableViewInBounds(boolean, int, int)","java.util.List.size()"
"android.widget.HorizontalScrollView.findFocusableViewInBounds(boolean, int, int)","android.view.View.getRight()"
"android.widget.HorizontalScrollView.findFocusableViewInBounds(boolean, int, int)","java.util.List.get(int)"
"android.widget.HorizontalScrollView.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"android.widget.HorizontalScrollView.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.widget.HorizontalScrollView.arrowScroll(int)","android.view.View.isFocused()"
"android.widget.HorizontalScrollView.fling(int)","android.widget.OverScroller.fling(int, int, int, int, int, int, int, int, int, int)"
"android.widget.HorizontalScrollView.fling(int)","java.lang.Math.max(int, int)"
"android.widget.HorizontalScrollView.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getX(int)"
"android.widget.HorizontalScrollView.onSecondaryPointerUp(MotionEvent)","android.view.VelocityTracker.clear()"
"android.widget.HorizontalScrollView.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getAction()"
"android.widget.HorizontalScrollView.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"android.widget.HorizontalScrollView.canScroll()","android.view.View.getWidth()"
"android.widget.HorizontalScrollView.findFocusableViewInMyBounds(boolean, int, View)","android.view.View.getLeft()"
"android.widget.HorizontalScrollView.findFocusableViewInMyBounds(boolean, int, View)","android.view.View.getRight()"
"android.widget.HorizontalScrollView.pageScroll(int)","android.view.View.getRight()"
"android.widget.HorizontalScrollView.inChild(int, int)","android.view.View.getLeft()"
"android.widget.HorizontalScrollView.inChild(int, int)","android.view.View.getBottom()"
"android.widget.HorizontalScrollView.inChild(int, int)","android.view.View.getTop()"
"android.widget.HorizontalScrollView.inChild(int, int)","android.view.View.getRight()"
"android.widget.HorizontalScrollView.smoothScrollBy(int, int)","android.widget.OverScroller.isFinished()"
"android.widget.HorizontalScrollView.smoothScrollBy(int, int)","android.widget.OverScroller.abortAnimation()"
"android.widget.HorizontalScrollView.smoothScrollBy(int, int)","android.widget.OverScroller.startScroll(int, int, int, int)"
"android.widget.HorizontalScrollView.smoothScrollBy(int, int)","java.lang.Math.max(int, int)"
"android.widget.HorizontalScrollView.smoothScrollBy(int, int)","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.widget.HorizontalScrollView.smoothScrollBy(int, int)","java.lang.Math.min(int, int)"
"android.widget.HorizontalScrollView.onMeasure(int, int)","android.view.View.getMeasuredWidth()"
"android.widget.HorizontalScrollView.onMeasure(int, int)","android.view.View.getLayoutParams()"
"android.widget.HorizontalScrollView.onMeasure(int, int)","android.view.View.measure(int, int)"
"android.widget.HorizontalScrollView.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.HorizontalScrollView.onMeasure(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.hardware.hdmi.HdmiTvClient.startOneTouchRecord(int, RecordSource)","android.hardware.hdmi.HdmiRecordSources.RecordSource.toByteArray(boolean, byte[], int)"
"android.hardware.hdmi.HdmiTvClient.startOneTouchRecord(int, RecordSource)","android.hardware.hdmi.HdmiRecordSources.RecordSource.getDataSize(boolean)"
"android.hardware.hdmi.HdmiTvClient.clearTimerRecording(int, int, TimerRecordSource)","android.hardware.hdmi.HdmiTvClient.checkTimerRecordingSourceType(int)"
"android.hardware.hdmi.HdmiTvClient.clearTimerRecording(int, int, TimerRecordSource)","android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource.toByteArray(byte[], int)"
"android.hardware.hdmi.HdmiTvClient.clearTimerRecording(int, int, TimerRecordSource)","android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource.getDataSize()"
"android.hardware.hdmi.HdmiTvClient.startTimerRecording(int, int, TimerRecordSource)","android.hardware.hdmi.HdmiTvClient.checkTimerRecordingSourceType(int)"
"android.hardware.hdmi.HdmiTvClient.startTimerRecording(int, int, TimerRecordSource)","android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource.toByteArray(byte[], int)"
"android.hardware.hdmi.HdmiTvClient.startTimerRecording(int, int, TimerRecordSource)","android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource.getDataSize()"
"android.hardware.hdmi.HdmiTvClient.getDeviceList()","java.util.Collections.emptyList()"
"com.android.internal.os.LoggingPrintStream.println(Object)","java.lang.StringBuilder.append(java.lang.Object)"
"com.android.internal.os.LoggingPrintStream.println(Object)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.print(String)","java.lang.StringBuilder.append(java.lang.String)"
"com.android.internal.os.LoggingPrintStream.print(String)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.append(CharSequence)","java.lang.StringBuilder.append(java.lang.CharSequence)"
"com.android.internal.os.LoggingPrintStream.append(CharSequence)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.println(double)","java.lang.StringBuilder.append(double)"
"com.android.internal.os.LoggingPrintStream.println(double)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.println()","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.flush(boolean)","java.lang.StringBuilder.delete(int, int)"
"com.android.internal.os.LoggingPrintStream.flush(boolean)","com.android.internal.os.LoggingPrintStream.log(java.lang.String)"
"com.android.internal.os.LoggingPrintStream.flush(boolean)","java.lang.AbstractStringBuilder.setLength(int)"
"com.android.internal.os.LoggingPrintStream.flush(boolean)","java.lang.AbstractStringBuilder.substring(int)"
"com.android.internal.os.LoggingPrintStream.flush(boolean)","java.lang.AbstractStringBuilder.length()"
"com.android.internal.os.LoggingPrintStream.flush(boolean)","java.lang.StringBuilder.indexOf(java.lang.String, int)"
"com.android.internal.os.LoggingPrintStream.flush(boolean)","java.lang.AbstractStringBuilder.substring(int, int)"
"com.android.internal.os.LoggingPrintStream.format(String, Object[])","com.android.internal.os.LoggingPrintStream.format(java.util.Locale, java.lang.String, java.lang.Object[])"
"com.android.internal.os.LoggingPrintStream.format(String, Object[])","java.util.Locale.getDefault()"
"com.android.internal.os.LoggingPrintStream.append(char)","com.android.internal.os.LoggingPrintStream.print(char)"
"com.android.internal.os.LoggingPrintStream.print(long)","java.lang.StringBuilder.append(long)"
"com.android.internal.os.LoggingPrintStream.write(byte[])","com.android.internal.os.LoggingPrintStream.write(byte[], int, int)"
"com.android.internal.os.LoggingPrintStream.print(boolean)","java.lang.StringBuilder.append(boolean)"
"com.android.internal.os.LoggingPrintStream.printf(String, Object[])","com.android.internal.os.LoggingPrintStream.format(java.lang.String, java.lang.Object[])"
"com.android.internal.os.LoggingPrintStream.println(float)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.println(float)","java.lang.StringBuilder.append(float)"
"com.android.internal.os.LoggingPrintStream.print(float)","java.lang.StringBuilder.append(float)"
"com.android.internal.os.LoggingPrintStream.printf(Locale, String, Object[])","com.android.internal.os.LoggingPrintStream.format(java.util.Locale, java.lang.String, java.lang.Object[])"
"com.android.internal.os.LoggingPrintStream.format(Locale, String, Object[])","java.util.Formatter.format(java.util.Locale, java.lang.String, java.lang.Object[])"
"com.android.internal.os.LoggingPrintStream.format(Locale, String, Object[])","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.println(char)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.println(char)","java.lang.StringBuilder.append(char)"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.charset.Charset.newDecoder()"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.ByteBuffer.compact()"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.lang.Math.min(int, int)"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.ByteBuffer.put(byte[], int, int)"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.ByteBuffer.flip()"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.Buffer.remaining()"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.CharBuffer.flip()"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.charset.Charset.defaultCharset()"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer, java.nio.CharBuffer, boolean)"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.lang.StringBuilder.append(java.nio.CharBuffer)"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.charset.CoderResult.isOverflow()"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.CharBuffer.allocate(int)"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.CharBuffer.clear()"
"com.android.internal.os.LoggingPrintStream.write(byte[], int, int)","java.nio.ByteBuffer.allocate(int)"
"com.android.internal.os.LoggingPrintStream.print(char[])","java.lang.StringBuilder.append(char[])"
"com.android.internal.os.LoggingPrintStream.print(char[])","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.write(int)","com.android.internal.os.LoggingPrintStream.write(byte[], int, int)"
"com.android.internal.os.LoggingPrintStream.println(long)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.println(long)","java.lang.StringBuilder.append(long)"
"com.android.internal.os.LoggingPrintStream.println(String)","java.lang.String.substring(int)"
"com.android.internal.os.LoggingPrintStream.println(String)","java.lang.String.indexOf(char, int)"
"com.android.internal.os.LoggingPrintStream.println(String)","java.lang.StringBuilder.append(java.lang.String)"
"com.android.internal.os.LoggingPrintStream.println(String)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.println(String)","com.android.internal.os.LoggingPrintStream.log(java.lang.String)"
"com.android.internal.os.LoggingPrintStream.println(String)","java.lang.String.substring(int, int)"
"com.android.internal.os.LoggingPrintStream.println(String)","java.lang.AbstractStringBuilder.length()"
"com.android.internal.os.LoggingPrintStream.println(String)","java.lang.String.length()"
"com.android.internal.os.LoggingPrintStream.println(boolean)","java.lang.StringBuilder.append(boolean)"
"com.android.internal.os.LoggingPrintStream.println(boolean)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.print(double)","java.lang.StringBuilder.append(double)"
"com.android.internal.os.LoggingPrintStream.print(char)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.print(char)","java.lang.StringBuilder.append(char)"
"com.android.internal.os.LoggingPrintStream.println(char[])","java.lang.StringBuilder.append(char[])"
"com.android.internal.os.LoggingPrintStream.println(char[])","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.append(CharSequence, int, int)","java.lang.StringBuilder.append(java.lang.CharSequence, int, int)"
"com.android.internal.os.LoggingPrintStream.append(CharSequence, int, int)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.print(int)","java.lang.StringBuilder.append(int)"
"com.android.internal.os.LoggingPrintStream.println(int)","java.lang.StringBuilder.append(int)"
"com.android.internal.os.LoggingPrintStream.println(int)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.print(Object)","java.lang.StringBuilder.append(java.lang.Object)"
"com.android.internal.os.LoggingPrintStream.print(Object)","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"com.android.internal.os.LoggingPrintStream.flush()","com.android.internal.os.LoggingPrintStream.flush(boolean)"
"android.net.NetworkInfo.setDetailedState(DetailedState, String, String)","java.util.EnumMap.get(android.net.NetworkInfo.DetailedState)"
"android.net.NetworkInfo.writeToParcel(Parcel, int)","java.lang.Enum.name()"
"android.net.NetworkInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.net.NetworkInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.NetworkInfo.toString()","java.lang.StringBuilder.append(android.net.NetworkInfo.DetailedState)"
"android.net.NetworkInfo.toString()","java.lang.StringBuilder.append(android.net.NetworkInfo.State)"
"android.net.NetworkInfo.toString()","java.lang.StringBuilder.append(boolean)"
"android.net.NetworkInfo.toString()","android.net.NetworkInfo.getSubtypeName()"
"android.net.NetworkInfo.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.net.NetworkInfo.toString()","android.net.NetworkInfo.getTypeName()"
"android.net.NetworkInfo.toString()","java.lang.StringBuilder.toString()"
"android.net.NetworkInfo.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.net.NetworkInfo.createFromParcel(Parcel)","android.net.NetworkInfo.State.valueOf(java.lang.String)"
"android.net.NetworkInfo.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.net.NetworkInfo.createFromParcel(Parcel)","android.net.NetworkInfo.DetailedState.valueOf(java.lang.String)"
"com.android.internal.widget.AccountViewAdapter.getCount()","java.util.List.size()"
"com.android.internal.widget.AccountViewAdapter.getView(int, View, ViewGroup)","com.android.internal.widget.AccountViewAdapter.getItem(int)"
"com.android.internal.widget.AccountViewAdapter.getItem(int)","java.util.List.get(int)"
"com.android.internal.widget.AccountViewAdapter.updateData(List)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.text.style.AbsoluteSizeSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.pm.VerificationParams.equals(Object)","android.content.pm.ManifestDigest.equals(android.content.pm.ManifestDigest)"
"android.content.pm.VerificationParams.equals(Object)","android.net.Uri.equals(android.net.Uri)"
"android.content.pm.VerificationParams.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.content.pm.ManifestDigest, int)"
"android.content.pm.VerificationParams.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.pm.VerificationParams.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.net.Uri, int)"
"android.content.pm.VerificationParams.toString()","java.lang.StringBuilder.append(int)"
"android.content.pm.VerificationParams.toString()","android.content.pm.ManifestDigest.toString()"
"android.content.pm.VerificationParams.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.content.pm.VerificationParams.toString()","java.lang.StringBuilder.toString()"
"android.content.pm.VerificationParams.toString()","java.lang.StringBuilder.append(char)"
"android.content.pm.VerificationParams.toString()","android.net.Uri.toString()"
"android.content.pm.VerificationParams.hashCode()","android.net.Uri.hashCode()"
"android.content.pm.VerificationParams.hashCode()","android.content.pm.ManifestDigest.hashCode()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.getTagsForKeys(CaptureRequest.Key<?>[])","android.hardware.camera2.CaptureRequest.Key.getNativeKey()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.getTagsForKeys(CaptureRequest.Key<?>[])","android.hardware.camera2.impl.CameraMetadataNative.Key.getTag()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAwb(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapLens(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAf(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapFlash(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapSync(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapStatistics(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<int[]>, int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapJpeg(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapScaler(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.appendStreamConfig(ArrayList, int, List)","java.util.ArrayList.add(android.hardware.camera2.params.StreamConfiguration)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapLens(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Float>, float)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapLens(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<float[]>, float[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapLens(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getFocalLength()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapLens(CameraMetadataNative, Camera.Parameters)","java.lang.String.equals(java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapLens(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getFocusMode()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertSceneModeFromLegacy(String)","android.hardware.camera2.utils.ArrayUtils.getArrayIndex(java.lang.String[], java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.getTagsForKeys(Key<?>[])","android.hardware.camera2.impl.CameraMetadataNative.Key.getTag()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.getTagsForKeys(Key<?>[])","android.hardware.camera2.CameraCharacteristics.Key.getNativeKey()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","java.util.Collections.sort(java.util.List<android.hardware.Camera.Size>, java.util.Comparator<T>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.calculateJpegStallDuration(android.hardware.Camera.Size)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","java.util.List.isEmpty()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Long>, long)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","java.lang.Math.abs(float)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.SizeAreaComparator.findLargestByArea(java.util.List<android.hardware.Camera.Size>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedPictureSizes()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.appendStreamConfig(java.util.ArrayList<android.hardware.camera2.params.StreamConfiguration>, int, java.util.List<android.hardware.Camera.Size>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedPreviewSizes()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","java.util.Collections.reverseOrder(android.hardware.camera2.legacy.SizeAreaComparator)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","java.util.ArrayList.toArray(android.hardware.camera2.params.StreamConfiguration[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","java.util.Collections.sort(java.util.List<android.hardware.Camera.Size>, android.hardware.camera2.legacy.SizeAreaComparator)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","java.util.List.size()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<android.hardware.camera2.params.StreamConfiguration[]>, android.hardware.camera2.params.StreamConfiguration[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<android.hardware.camera2.params.StreamConfigurationDuration[]>, android.hardware.camera2.params.StreamConfigurationDuration[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedPreviewFormats()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","java.util.List.remove(int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScalerStreamConfigs(CameraMetadataNative, Camera.Parameters)","java.util.List.get(int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(String, android.hardware.CameraInfo)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String, java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(String, android.hardware.CameraInfo)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.Camera.CameraInfo, java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(String, android.hardware.CameraInfo)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromInfo(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.CameraInfo)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(String, android.hardware.CameraInfo)","android.hardware.Camera.getEmptyParameters()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(String, android.hardware.CameraInfo)","android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromParameters(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(String, android.hardware.CameraInfo)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.CameraInfo, java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(String, android.hardware.CameraInfo)","android.hardware.Camera.Parameters.unflatten(java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(String, android.hardware.CameraInfo)","android.hardware.camera2.impl.CameraMetadataNative.dumpToLog()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAwb(CameraMetadataNative, Camera.Parameters)","java.util.List.add(int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ArrayUtils.toIntArray(java.util.List<java.lang.Integer>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAwb(CameraMetadataNative, Camera.Parameters)","java.util.List.size()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ArrayUtils.convertStringListToIntList(java.util.List<java.lang.String>, java.lang.String[], int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<int[]>, int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedWhiteBalance()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertAeFpsRangeToLegacy(Range)","android.util.Range.getLower()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertAeFpsRangeToLegacy(Range)","android.util.Range.getUpper()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertEffectModeFromLegacy(String)","android.hardware.camera2.utils.ArrayUtils.getArrayIndex(java.lang.String[], java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertAfModeToLegacy(int, List)","java.util.List.isEmpty()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertAfModeToLegacy(int, List)","java.util.List.contains(java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertAfModeToLegacy(int, List)","java.util.List.get(int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSync(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.getTagsForKeys(CaptureResult.Key<?>[])","android.hardware.camera2.impl.CameraMetadataNative.Key.getTag()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.getTagsForKeys(CaptureResult.Key<?>[])","android.hardware.camera2.CaptureResult.Key.getNativeKey()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.isVideoStabilizationSupported()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedColorEffects()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getMaxNumFocusAreas()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ArrayUtils.convertStringListToIntArray(java.util.List<java.lang.String>, java.lang.String[], int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedSceneModes()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","java.util.List.add(int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ArrayUtils.toIntArray(java.util.List<java.lang.Integer>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ArrayUtils.convertStringListToIntList(java.util.List<java.lang.String>, java.lang.String[], int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<int[]>, int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getMaxNumMeteringAreas()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlOther(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getMaxNumDetectedFaces()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.CameraCharacteristics.get(android.hardware.camera2.CameraCharacteristics.Key<android.util.Range<java.lang.Integer>[]>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureRequest.Key<java.lang.Float>, float)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.utils.ArrayUtils.contains(int[], int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.util.Range.getUpper()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureRequest.Key<android.util.Size>, android.util.Size)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureRequest.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.CameraCharacteristics.get(android.hardware.camera2.CameraCharacteristics.Key<int[]>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.util.Range.getLower()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureRequest.Key<android.util.Range<java.lang.Integer>>, android.util.Range<java.lang.Integer>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.CameraCharacteristics.get(android.hardware.camera2.CameraCharacteristics.Key<float[]>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.CameraCharacteristics.get(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Float>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.CameraCharacteristics.get(android.hardware.camera2.CameraCharacteristics.Key<android.util.Size[]>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureRequest.Key<java.lang.Boolean>, boolean)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createRequestTemplate(CameraCharacteristics, int)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureRequest.Key<android.hardware.camera2.params.MeteringRectangle[]>, android.hardware.camera2.params.MeteringRectangle[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","android.hardware.camera2.legacy.ParameterUtils.getLargestSupportedJpegSizeByArea(android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<android.util.Size>, android.util.Size)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","android.hardware.Camera.Parameters.getFocalLength()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","android.hardware.Camera.Parameters.getVerticalViewAngle()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","java.lang.Math.tan(double)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<int[]>, int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<android.util.SizeF>, android.util.SizeF)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","java.lang.Math.abs(double)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","android.hardware.Camera.Parameters.getHorizontalViewAngle()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapSensor(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScaler(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Float>, float)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScaler(CameraMetadataNative, Parameters)","android.hardware.camera2.legacy.ParameterUtils.getMaxZoomRatio(android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapScaler(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertSceneModeToLegacy(int)","android.hardware.camera2.utils.ArrayUtils.getArrayIndex(int[], int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.getTagsForKeys(android.hardware.camera2.CaptureRequest.Key<?>[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","java.util.Arrays.asList(android.hardware.camera2.CameraCharacteristics.Key<?>[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","android.hardware.Camera.Parameters.getMaxNumFocusAreas()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","java.util.ArrayList.toArray(android.hardware.camera2.CaptureRequest.Key<?>[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","android.hardware.Camera.Parameters.getMaxNumMeteringAreas()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","java.util.List.add(android.hardware.camera2.CaptureResult.Key<android.hardware.camera2.params.MeteringRectangle[]>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.get(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Float>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","java.util.ArrayList.size()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","java.util.Arrays.asList(android.hardware.camera2.CaptureRequest.Key<?>[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","java.util.List.toArray(android.hardware.camera2.CameraCharacteristics.Key<?>[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.getTagsForKeys(android.hardware.camera2.CaptureResult.Key<?>[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.getTagsForKeys(android.hardware.camera2.CameraCharacteristics.Key<?>[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","java.util.List.toArray(android.hardware.camera2.CaptureResult.Key<?>[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","java.util.List.add(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Float>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Byte>, byte)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<int[]>, int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","java.util.ArrayList.add(android.hardware.camera2.CaptureRequest.Key<android.hardware.camera2.params.MeteringRectangle[]>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapRequest(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(Camera.Parameters, CameraInfo)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.Camera.CameraInfo, java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(Camera.Parameters, CameraInfo)","android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(java.lang.String, android.hardware.CameraInfo)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(Camera.Parameters, CameraInfo)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.Camera.Parameters, java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(Camera.Parameters, CameraInfo)","android.hardware.Camera.Parameters.flatten()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertEffectModeToLegacy(int)","android.hardware.camera2.utils.ArrayUtils.getArrayIndex(int[], int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.convertAntiBandingMode(java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getMinExposureCompensation()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedPreviewFpsRange()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ArrayUtils.convertStringListToIntArray(java.util.List<java.lang.String>, java.lang.String[], int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getExposureCompensationStep()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedAntibanding()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ParamsUtils.createRational(float)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","java.util.Arrays.copyOf(int[], int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<android.util.Rational>, android.util.Rational)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<android.util.Range<java.lang.Integer>[]>, android.util.Range<java.lang.Integer>[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getMaxExposureCompensation()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","java.util.List.size()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedFlashModes()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<android.util.Range<java.lang.Integer>>, android.util.Range<java.lang.Integer>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<int[]>, int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAe(CameraMetadataNative, Camera.Parameters)","android.util.Range.create(int, int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapFlash(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ListUtils.listElementsEqualTo(java.util.List<java.lang.String>, java.lang.String)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapFlash(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Boolean>, boolean)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapFlash(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedFlashModes()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapCharacteristicsFromInfo(CameraMetadataNative, CameraInfo)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapJpeg(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<android.util.Size[]>, android.util.Size[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapJpeg(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.ParameterUtils.convertSizeListToArray(java.util.List<android.hardware.Camera.Size>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapJpeg(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedJpegThumbnailSizes()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapJpeg(CameraMetadataNative, Camera.Parameters)","java.util.Arrays.sort(android.util.Size[], android.hardware.camera2.utils.SizeAreaComparator)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAf(CameraMetadataNative, Camera.Parameters)","java.util.List.add(int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAf(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ArrayUtils.toIntArray(java.util.List<java.lang.Integer>)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAf(CameraMetadataNative, Camera.Parameters)","java.util.List.size()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAf(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.utils.ArrayUtils.convertStringListToIntList(java.util.List<java.lang.String>, java.lang.String[], int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAf(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getSupportedFocusModes()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapControlAf(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<int[]>, int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapStatistics(CameraMetadataNative, Parameters)","android.hardware.Camera.Parameters.getMaxNumDetectedFaces()"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapStatistics(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<int[]>, int[])"
"android.hardware.camera2.legacy.LegacyMetadataMapper.mapStatistics(CameraMetadataNative, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(android.hardware.camera2.legacy.LegacyRequest)"
"android.hardware.camera2.legacy.LegacyMetadataMapper.convertAntiBandingModeOrDefault(String)","android.hardware.camera2.legacy.LegacyMetadataMapper.convertAntiBandingMode(java.lang.String)"
"android.widget.TableRow.getVirtualChildAt(int)","android.util.SparseIntArray.get(int, int)"
"android.widget.TableRow.onChildViewRemoved(View, View)","android.view.ViewGroup.OnHierarchyChangeListener.onChildViewRemoved(android.view.View, android.view.View)"
"android.widget.TableRow.measureChildBeforeLayout(View, int, int, int, int, int)","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.widget.TableRow.measureChildBeforeLayout(View, int, int, int, int, int)","android.view.View.getLayoutParams()"
"android.widget.TableRow.measureChildBeforeLayout(View, int, int, int, int, int)","android.view.View.getMeasuredWidth()"
"android.widget.TableRow.measureChildBeforeLayout(View, int, int, int, int, int)","android.view.View.measure(int, int)"
"android.widget.TableRow.measureChildBeforeLayout(View, int, int, int, int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.TableRow.measureChildBeforeLayout(View, int, int, int, int, int)","android.view.Gravity.isHorizontal(int)"
"android.widget.TableRow.measureChildBeforeLayout(View, int, int, int, int, int)","java.lang.Math.max(int, int)"
"android.widget.TableRow.setBaseAttributes(TypedArray, int, int)","android.content.res.TypedArray.hasValue(int)"
"android.widget.TableRow.setBaseAttributes(TypedArray, int, int)","android.content.res.TypedArray.getLayoutDimension(int, java.lang.String)"
"android.widget.TableRow.getChildrenSkipCount(View, int)","android.view.View.getLayoutParams()"
"android.widget.TableRow.setColumnCollapsed(int, boolean)","android.view.View.setVisibility(int)"
"android.widget.TableRow.getColumnsWidths(int)","android.view.View.getVisibility()"
"android.widget.TableRow.getColumnsWidths(int)","android.view.View.getLayoutParams()"
"android.widget.TableRow.getColumnsWidths(int)","android.view.View.getMeasuredWidth()"
"android.widget.TableRow.getColumnsWidths(int)","android.view.View.measure(int, int)"
"android.widget.TableRow.getColumnsWidths(int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.TableRow.getLocationOffset(View)","android.view.View.getLayoutParams()"
"android.widget.TableRow.getNextLocationOffset(View)","android.view.View.getLayoutParams()"
"android.widget.TableRow.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.TableRow.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.TableRow.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.TableRow.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.TableRow.mapIndexAndColumns()","android.view.View.getLayoutParams()"
"android.widget.TableRow.mapIndexAndColumns()","android.util.SparseIntArray.put(int, int)"
"android.widget.TableRow.onChildViewAdded(View, View)","android.view.ViewGroup.OnHierarchyChangeListener.onChildViewAdded(android.view.View, android.view.View)"
"android.app.ResourcesManager.flushDisplayMetricsLocked()","android.util.ArrayMap.clear()"
"android.app.ResourcesManager.getDisplayMetricsLocked(int, DisplayAdjustments)","android.util.ArrayMap.get(android.view.DisplayAdjustments)"
"android.app.ResourcesManager.getDisplayMetricsLocked(int, DisplayAdjustments)","android.hardware.display.DisplayManagerGlobal.getCompatibleDisplay(int, android.view.DisplayAdjustments)"
"android.app.ResourcesManager.getDisplayMetricsLocked(int, DisplayAdjustments)","android.util.ArrayMap.put(android.view.DisplayAdjustments, android.util.DisplayMetrics)"
"android.app.ResourcesManager.getDisplayMetricsLocked(int, DisplayAdjustments)","android.util.DisplayMetrics.setToDefaults()"
"android.app.ResourcesManager.getDisplayMetricsLocked(int, DisplayAdjustments)","android.hardware.display.DisplayManagerGlobal.getInstance()"
"android.app.ResourcesManager.getDisplayMetricsLocked(int, DisplayAdjustments)","android.view.Display.getMetrics(android.util.DisplayMetrics)"
"android.app.ResourcesManager.applyCompatConfiguration(int, Configuration)","android.content.res.CompatibilityInfo.supportsScreen()"
"android.app.ResourcesManager.applyCompatConfiguration(int, Configuration)","android.content.res.CompatibilityInfo.applyToConfiguration(int, android.content.res.Configuration)"
"android.app.ResourcesManager.applyNonDefaultDisplayMetricsToConfigurationLocked(DisplayMetrics, Configuration)","android.content.res.Configuration.reduceScreenLayout(int, int, int)"
"android.app.ResourcesManager.applyNonDefaultDisplayMetricsToConfigurationLocked(DisplayMetrics, Configuration)","android.content.res.Configuration.resetScreenLayout(int)"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.app.ResourcesManager.applyNonDefaultDisplayMetricsToConfigurationLocked(android.util.DisplayMetrics, android.content.res.Configuration)"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.content.res.Resources.getAssets()"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.content.res.AssetManager.close()"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.app.ResourcesManager.getDisplayMetricsLocked(int)"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.content.res.AssetManager.addAssetPath(java.lang.String)"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.app.ResourcesManager.getConfiguration()"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.content.res.Configuration.updateFrom(android.content.res.Configuration)"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","java.lang.ref.Reference.get()"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.util.ArrayMap.get(android.content.res.ResourcesKey)"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.content.res.AssetManager.isUpToDate()"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.content.res.AssetManager.addOverlayPath(java.lang.String)"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.util.ArrayMap.put(android.content.res.ResourcesKey, java.lang.ref.WeakReference<android.content.res.Resources>)"
"android.app.ResourcesManager.getTopLevelResources(String, String[], String[], String[], int, Configuration, CompatibilityInfo, IBinder)","android.content.res.ResourcesKey.hasOverrideConfiguration()"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.app.ResourcesManager.applyNonDefaultDisplayMetricsToConfigurationLocked(android.util.DisplayMetrics, android.content.res.Configuration)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.app.ResourcesManager.flushDisplayMetricsLocked()"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.content.res.Resources.updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.app.ResourcesManager.getDisplayMetricsLocked(int)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.util.ArrayMap.removeAt(int)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.content.res.Configuration.setTo(android.content.res.Configuration)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.util.ArrayMap.size()"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.content.res.Configuration.updateFrom(android.content.res.Configuration)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.util.ArrayMap.keyAt(int)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.content.res.Configuration.isOtherSeqNewer(android.content.res.Configuration)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","java.lang.ref.Reference.get()"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.app.ApplicationPackageManager.configurationChanged()"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.content.res.CompatibilityInfo.equals(android.content.res.CompatibilityInfo)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.util.ArrayMap.valueAt(int)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.content.res.ResourcesKey.hasOverrideConfiguration()"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","android.content.res.Resources.updateSystemConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo)"
"android.app.ResourcesManager.applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)","java.util.Locale.setDefault(java.util.Locale)"
"android.app.ResourcesManager.getDisplayMetricsLocked(int)","android.app.ResourcesManager.getDisplayMetricsLocked(int, android.view.DisplayAdjustments)"
"android.webkit.WebViewFactory.main(String[])","android.webkit.WebViewFactory.nativeCreateRelroFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.webkit.WebViewFactory.main(String[])","java.lang.System.exit(int)"
"android.webkit.WebViewFactory.prepareWebViewInZygote()","android.webkit.WebViewFactory.nativeReserveAddressSpace(long)"
"android.webkit.WebViewFactory.prepareWebViewInZygote()","java.lang.System.loadLibrary(java.lang.String)"
"android.webkit.WebViewFactory.prepareWebViewInZygote()","android.os.SystemProperties.getLong(java.lang.String, long)"
"android.webkit.WebViewFactory.getWebViewNativeLibraryPaths()","android.text.TextUtils.isEmpty(java.lang.String)"
"android.webkit.WebViewFactory.getWebViewNativeLibraryPaths()","android.app.AppGlobals.getInitialApplication()"
"android.webkit.WebViewFactory.getWebViewNativeLibraryPaths()","android.webkit.WebViewFactory.getWebViewPackageName()"
"android.webkit.WebViewFactory.getWebViewNativeLibraryPaths()","android.content.ContextWrapper.getPackageManager()"
"android.webkit.WebViewFactory.getWebViewNativeLibraryPaths()","android.content.pm.PackageManager.getApplicationInfo(java.lang.String, int)"
"android.webkit.WebViewFactory.prepareWebViewInSystemServer(String[])","android.webkit.WebViewFactory.createRelroFile(boolean, java.lang.String[])"
"android.webkit.WebViewFactory.prepareWebViewInSystemServer()","android.webkit.WebViewFactory.prepareWebViewInSystemServer(java.lang.String[])"
"android.webkit.WebViewFactory.prepareWebViewInSystemServer()","android.webkit.WebViewFactory.getWebViewNativeLibraryPaths()"
"android.webkit.WebViewFactory.createRelroFile(boolean, String[])","android.app.ActivityManagerInternal.startIsolatedProcess(java.lang.String, java.lang.String[], java.lang.String, java.lang.String, int, java.lang.Runnable)"
"android.webkit.WebViewFactory.createRelroFile(boolean, String[])","java.lang.Runnable.run()"
"android.webkit.WebViewFactory.createRelroFile(boolean, String[])","com.android.server.LocalServices.getService(java.lang.Class<android.app.ActivityManagerInternal>)"
"android.webkit.WebViewFactory.createRelroFile(boolean, String[])","java.lang.Class.getName()"
"android.webkit.WebViewFactory.onWebViewUpdateInstalled()","java.lang.Long.toString(long)"
"android.webkit.WebViewFactory.onWebViewUpdateInstalled()","android.webkit.WebViewFactory.prepareWebViewInSystemServer(java.lang.String[])"
"android.webkit.WebViewFactory.onWebViewUpdateInstalled()","android.webkit.WebViewFactory.getWebViewNativeLibraryPaths()"
"android.webkit.WebViewFactory.onWebViewUpdateInstalled()","java.io.File.length()"
"android.webkit.WebViewFactory.onWebViewUpdateInstalled()","android.os.SystemProperties.set(java.lang.String, java.lang.String)"
"android.webkit.WebViewFactory.onWebViewUpdateInstalled()","java.io.File.exists()"
"android.webkit.WebViewFactory.onWebViewUpdateInstalled()","java.lang.Math.max(long, long)"
"android.webkit.WebViewFactory.loadNativeLibrary()","android.webkit.WebViewFactory.nativeLoadWithRelroFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.webkit.WebViewFactory.loadNativeLibrary()","android.webkit.WebViewFactory.getWebViewNativeLibraryPaths()"
"android.webkit.WebViewFactory.getProvider()","java.lang.Class.newInstance()"
"android.webkit.WebViewFactory.getProvider()","android.os.Trace.traceBegin(long, java.lang.String)"
"android.webkit.WebViewFactory.getProvider()","java.lang.reflect.Constructor.newInstance(android.webkit.WebViewDelegate)"
"android.webkit.WebViewFactory.getProvider()","java.lang.Class.getConstructor(java.lang.Class<android.webkit.WebViewDelegate>)"
"android.webkit.WebViewFactory.getProvider()","android.os.StrictMode.allowThreadDiskReads()"
"android.webkit.WebViewFactory.getProvider()","android.webkit.WebViewFactory.loadNativeLibrary()"
"android.webkit.WebViewFactory.getProvider()","android.os.Process.myUid()"
"android.webkit.WebViewFactory.getProvider()","android.os.Trace.traceEnd(long)"
"android.webkit.WebViewFactory.getProvider()","android.os.StrictMode.setThreadPolicy(android.os.StrictMode.ThreadPolicy)"
"android.webkit.WebViewFactory.getProvider()","android.webkit.WebViewFactory.getFactoryClass()"
"android.webkit.WebViewFactory.getFactoryClass()","android.app.AppGlobals.getInitialApplication()"
"android.webkit.WebViewFactory.getFactoryClass()","android.webkit.WebViewFactory.getWebViewPackageName()"
"android.webkit.WebViewFactory.getFactoryClass()","java.lang.Class.forName(java.lang.String)"
"android.webkit.WebViewFactory.getFactoryClass()","android.content.res.AssetManager.addAssetPath(java.lang.String)"
"android.webkit.WebViewFactory.getFactoryClass()","java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader)"
"android.webkit.WebViewFactory.getFactoryClass()","android.content.ContextWrapper.getAssets()"
"android.webkit.WebViewFactory.getFactoryClass()","android.content.Context.getApplicationInfo()"
"android.webkit.WebViewFactory.getFactoryClass()","android.content.pm.PackageManager.getPackageInfo(java.lang.String, int)"
"android.webkit.WebViewFactory.getFactoryClass()","android.content.ContextWrapper.createPackageContext(java.lang.String, int)"
"android.webkit.WebViewFactory.getFactoryClass()","android.os.Trace.traceBegin(long, java.lang.String)"
"android.webkit.WebViewFactory.getFactoryClass()","android.content.Context.getClassLoader()"
"android.webkit.WebViewFactory.getFactoryClass()","android.content.ContextWrapper.getPackageManager()"
"android.webkit.WebViewFactory.getFactoryClass()","android.os.Trace.traceEnd(long)"
"android.bluetooth.le.AdvertiseData.equals(Object)","android.bluetooth.le.BluetoothLeUtils.equals(android.util.SparseArray<byte[]>, android.util.SparseArray<byte[]>)"
"android.bluetooth.le.AdvertiseData.equals(Object)","java.util.Objects.equals(java.util.List<android.os.ParcelUuid>, java.util.List<android.os.ParcelUuid>)"
"android.bluetooth.le.AdvertiseData.equals(Object)","java.lang.Object.getClass()"
"android.bluetooth.le.AdvertiseData.equals(Object)","android.bluetooth.le.BluetoothLeUtils.equals(java.util.Map<android.os.ParcelUuid, byte[]>, java.util.Map<android.os.ParcelUuid, byte[]>)"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","java.util.Map.size()"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","java.util.Map.get(android.os.ParcelUuid)"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.os.Parcel.writeByteArray(byte[])"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.os.ParcelUuid, int)"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.util.SparseArray.size()"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.util.SparseArray.keyAt(int)"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","java.util.Map.keySet()"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.os.Parcel.writeList(java.util.List<android.os.ParcelUuid>)"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.util.SparseArray.valueAt(int)"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.os.Parcel.writeByte(byte)"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.bluetooth.le.AdvertiseData.getIncludeDeviceName()"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.bluetooth.le.AdvertiseData.getIncludeTxPowerLevel()"
"android.bluetooth.le.AdvertiseData.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.bluetooth.le.AdvertiseData.toString()","android.bluetooth.le.BluetoothLeUtils.toString(android.util.SparseArray<byte[]>)"
"android.bluetooth.le.AdvertiseData.toString()","android.bluetooth.le.BluetoothLeUtils.toString(java.util.Map<android.os.ParcelUuid, byte[]>)"
"android.bluetooth.le.AdvertiseData.hashCode()","java.util.Objects.hash(java.util.List<android.os.ParcelUuid>, android.util.SparseArray<byte[]>, java.util.Map<android.os.ParcelUuid, byte[]>, boolean, boolean)"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.os.Parcel.readParcelable(java.lang.ClassLoader)"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.bluetooth.le.AdvertiseData.Builder.addServiceData(android.os.ParcelUuid, byte[])"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.bluetooth.le.AdvertiseData.Builder.build()"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","java.lang.Class.getClassLoader()"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.os.Parcel.readByteArray(byte[])"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.os.Parcel.readByte()"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.bluetooth.le.AdvertiseData.Builder.addServiceUuid(android.os.ParcelUuid)"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.os.Parcel.readArrayList(java.lang.ClassLoader)"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.bluetooth.le.AdvertiseData.Builder.addManufacturerData(int, byte[])"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.bluetooth.le.AdvertiseData.Builder.setIncludeTxPowerLevel(boolean)"
"android.bluetooth.le.AdvertiseData.createFromParcel(Parcel)","android.bluetooth.le.AdvertiseData.Builder.setIncludeDeviceName(boolean)"
"android.bluetooth.le.AdvertiseData.addManufacturerData(int, byte[])","android.util.SparseArray.put(int, byte[])"
"android.bluetooth.le.AdvertiseData.addServiceUuid(ParcelUuid)","java.util.List.add(android.os.ParcelUuid)"
"android.bluetooth.le.AdvertiseData.addServiceData(ParcelUuid, byte[])","java.util.Map.put(android.os.ParcelUuid, byte[])"
"android.hardware.camera2.utils.BinderHolder.readFromParcel(Parcel)","android.os.Parcel.readStrongBinder()"
"android.hardware.camera2.utils.BinderHolder.writeToParcel(Parcel, int)","android.os.Parcel.writeStrongBinder(android.os.IBinder)"
"android.widget.BaseAdapter.registerDataSetObserver(DataSetObserver)","android.database.Observable.registerObserver(android.database.DataSetObserver)"
"android.widget.BaseAdapter.notifyDataSetInvalidated()","android.database.DataSetObservable.notifyInvalidated()"
"android.widget.BaseAdapter.notifyDataSetChanged()","android.database.DataSetObservable.notifyChanged()"
"android.widget.BaseAdapter.isEmpty()","android.widget.Adapter.getCount()"
"android.widget.BaseAdapter.getDropDownView(int, View, ViewGroup)","android.widget.Adapter.getView(int, android.view.View, android.view.ViewGroup)"
"android.widget.BaseAdapter.unregisterDataSetObserver(DataSetObserver)","android.database.Observable.unregisterObserver(android.database.DataSetObserver)"
"android.text.style.SpellCheckSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.view.inputmethod.InputMethodManager.updateCursorAnchorInfo(View, CursorAnchorInfo)","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.updateCursorAnchorInfo(View, CursorAnchorInfo)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.updateCursorAnchorInfo(View, CursorAnchorInfo)","java.util.Objects.equals(android.view.inputmethod.CursorAnchorInfo, android.view.inputmethod.CursorAnchorInfo)"
"android.view.inputmethod.InputMethodManager.windowDismissed(IBinder)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.windowDismissed(IBinder)","android.view.View.getWindowToken()"
"android.view.inputmethod.InputMethodManager.windowDismissed(IBinder)","android.view.inputmethod.InputMethodManager.finishInputLocked()"
"android.view.inputmethod.InputMethodManager.updateExtractedText(View, int, ExtractedText)","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.updateExtractedText(View, int, ExtractedText)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.updateSelection(View, int, int, int, int)","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.updateSelection(View, int, int, int, int)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.flushPendingEventsLocked()","android.os.Message.setAsynchronous(boolean)"
"android.view.inputmethod.InputMethodManager.flushPendingEventsLocked()","android.os.Handler.removeMessages(int)"
"android.view.inputmethod.InputMethodManager.flushPendingEventsLocked()","android.os.Handler.obtainMessage(int, int, int)"
"android.view.inputmethod.InputMethodManager.flushPendingEventsLocked()","android.os.Message.sendToTarget()"
"android.view.inputmethod.InputMethodManager.flushPendingEventsLocked()","android.util.SparseArray.size()"
"android.view.inputmethod.InputMethodManager.flushPendingEventsLocked()","android.util.SparseArray.keyAt(int)"
"android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow(IBinder, int)","android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow(android.os.IBinder, int, null)"
"android.view.inputmethod.InputMethodManager.viewClicked(View)","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.viewClicked(View)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(PendingEvent)","android.os.Handler.getLooper()"
"android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(PendingEvent)","android.os.Message.setAsynchronous(boolean)"
"android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(PendingEvent)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(PendingEvent)","android.os.Handler.obtainMessage(int, android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(PendingEvent)","android.view.InputEventSender.sendInputEvent(int, android.view.InputEvent)"
"android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(PendingEvent)","android.view.InputEvent.getSequenceNumber()"
"android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(PendingEvent)","android.util.SparseArray.put(int, android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(PendingEvent)","android.util.SparseArray.size()"
"android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(PendingEvent)","android.os.Trace.traceCounter(long, java.lang.String, int)"
"android.view.inputmethod.InputMethodManager.getInstance()","android.os.Looper.getMainLooper()"
"android.view.inputmethod.InputMethodManager.getInstance()","android.os.ServiceManager.getService(java.lang.String)"
"android.view.inputmethod.InputMethodManager.showInputMethodPicker()","android.view.inputmethod.InputMethodManager.showInputMethodPickerLocked()"
"android.view.inputmethod.InputMethodManager.sendAppPrivateCommand(View, String, Bundle)","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.sendAppPrivateCommand(View, String, Bundle)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.checkFocusNoStartInput(boolean, boolean)","android.view.inputmethod.InputMethodManager.closeCurrentInput()"
"android.view.inputmethod.InputMethodManager.checkFocusNoStartInput(boolean, boolean)","android.view.inputmethod.InputConnection.finishComposingText()"
"android.view.inputmethod.InputMethodManager.checkFocusNoStartInput(boolean, boolean)","android.view.inputmethod.InputMethodManager.finishInputLocked()"
"android.view.inputmethod.InputMethodManager.focusOut(View)","android.view.View.hasWindowFocus()"
"android.view.inputmethod.InputMethodManager.focusOut(View)","android.view.inputmethod.InputMethodManager.scheduleCheckFocusLocked(android.view.View)"
"android.view.inputmethod.InputMethodManager.doDump(FileDescriptor, PrintWriter, String[])","android.util.Printer.println(java.lang.String)"
"android.view.inputmethod.InputMethodManager.doDump(FileDescriptor, PrintWriter, String[])","android.view.inputmethod.EditorInfo.dump(android.util.Printer, java.lang.String)"
"android.view.inputmethod.InputMethodManager.showSoftInput(View, int, ResultReceiver)","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.showSoftInput(View, int, ResultReceiver)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow(IBinder, int, ResultReceiver)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow(IBinder, int, ResultReceiver)","android.view.View.getWindowToken()"
"android.view.inputmethod.InputMethodManager.showSoftInput(View, int)","android.view.inputmethod.InputMethodManager.showSoftInput(android.view.View, int, null)"
"android.view.inputmethod.InputMethodManager.run()","android.view.inputmethod.InputMethodManager.recyclePendingEventLocked(android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.run()","android.view.inputmethod.InputMethodManager.FinishedInputEventCallback.onFinishedInputEvent(java.lang.Object, boolean)"
"android.view.inputmethod.InputMethodManager.sendInputEventAndReportResultOnMainLooper(PendingEvent)","android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(android.view.inputmethod.InputMethodManager.PendingEvent, boolean)"
"android.view.inputmethod.InputMethodManager.sendInputEventAndReportResultOnMainLooper(PendingEvent)","android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.focusInLocked(View)","android.view.View.getRootView()"
"android.view.inputmethod.InputMethodManager.focusInLocked(View)","android.view.inputmethod.InputMethodManager.scheduleCheckFocusLocked(android.view.View)"
"android.view.inputmethod.InputMethodManager.obtainPendingEventLocked(InputEvent, Object, String, FinishedInputEventCallback, Handler)","android.util.Pools.Pool.acquire()"
"android.view.inputmethod.InputMethodManager.finishedInputEvent(int, boolean, boolean)","android.util.SparseArray.valueAt(int)"
"android.view.inputmethod.InputMethodManager.finishedInputEvent(int, boolean, boolean)","android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(android.view.inputmethod.InputMethodManager.PendingEvent, boolean)"
"android.view.inputmethod.InputMethodManager.finishedInputEvent(int, boolean, boolean)","android.util.SparseArray.size()"
"android.view.inputmethod.InputMethodManager.finishedInputEvent(int, boolean, boolean)","android.util.SparseArray.indexOfKey(int)"
"android.view.inputmethod.InputMethodManager.finishedInputEvent(int, boolean, boolean)","android.util.SparseArray.removeAt(int)"
"android.view.inputmethod.InputMethodManager.finishedInputEvent(int, boolean, boolean)","android.os.Handler.removeMessages(int, android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.finishedInputEvent(int, boolean, boolean)","android.os.Trace.traceCounter(long, java.lang.String, int)"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.view.View.getContext()"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.view.inputmethod.InputMethodManager.notifyInputConnectionFinished()"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.os.Handler.getLooper()"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.view.inputmethod.InputMethodManager.closeCurrentInput()"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.content.Context.getPackageName()"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.os.Looper.myLooper()"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.view.View.onCreateInputConnection(android.view.inputmethod.EditorInfo)"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.view.InputChannel.dispose()"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.view.inputmethod.InputMethodManager.setInputChannelLocked(android.view.InputChannel)"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.view.View.getHandler()"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.os.Handler.post(java.lang.Runnable)"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.view.inputmethod.InputMethodManager.startInputInner(null, int, int, int)"
"android.view.inputmethod.InputMethodManager.startInputInner(IBinder, int, int, int)","android.view.View.getId()"
"android.view.inputmethod.InputMethodManager.clearBindingLocked()","android.view.inputmethod.InputMethodManager.setInputChannelLocked(null)"
"android.view.inputmethod.InputMethodManager.clearBindingLocked()","android.view.inputmethod.InputMethodManager.clearConnectionLocked()"
"android.view.inputmethod.InputMethodManager.reportFinishInputConnection(InputConnection)","android.view.inputmethod.InputConnection.finishComposingText()"
"android.view.inputmethod.InputMethodManager.reportFinishInputConnection(InputConnection)","android.view.inputmethod.BaseInputConnection.reportFinish()"
"android.view.inputmethod.InputMethodManager.getShortcutInputMethodsAndSubtypes()","java.util.ArrayList.add(android.view.inputmethod.InputMethodSubtype)"
"android.view.inputmethod.InputMethodManager.getShortcutInputMethodsAndSubtypes()","java.util.HashMap.put(android.view.inputmethod.InputMethodInfo, java.util.ArrayList<android.view.inputmethod.InputMethodSubtype>)"
"android.view.inputmethod.InputMethodManager.getShortcutInputMethodsAndSubtypes()","java.util.List.size()"
"android.view.inputmethod.InputMethodManager.getShortcutInputMethodsAndSubtypes()","java.util.List.get(int)"
"android.view.inputmethod.InputMethodManager.getShortcutInputMethodsAndSubtypes()","java.util.HashMap.containsKey(java.lang.Object)"
"android.view.inputmethod.InputMethodManager.onInputEventFinished(int, boolean)","android.view.inputmethod.InputMethodManager.finishedInputEvent(int, boolean, boolean)"
"android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(PendingEvent, boolean)","android.os.Handler.getLooper()"
"android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(PendingEvent, boolean)","android.os.Message.setAsynchronous(boolean)"
"android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(PendingEvent, boolean)","android.os.Looper.isCurrentThread()"
"android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(PendingEvent, boolean)","android.os.Message.obtain(android.os.Handler, android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(PendingEvent, boolean)","android.view.inputmethod.InputMethodManager.PendingEvent.run()"
"android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(PendingEvent, boolean)","android.os.Message.sendToTarget()"
"android.view.inputmethod.InputMethodManager.onWindowFocus(View, View, int, boolean, int)","android.view.inputmethod.InputMethodManager.focusInLocked(android.view.View)"
"android.view.inputmethod.InputMethodManager.onWindowFocus(View, View, int, boolean, int)","android.view.inputmethod.InputMethodManager.startInputInner(android.os.IBinder, int, int, int)"
"android.view.inputmethod.InputMethodManager.onWindowFocus(View, View, int, boolean, int)","android.view.View.getWindowToken()"
"android.view.inputmethod.InputMethodManager.onWindowFocus(View, View, int, boolean, int)","android.view.View.onCheckIsTextEditor()"
"android.view.inputmethod.InputMethodManager.onWindowFocus(View, View, int, boolean, int)","android.view.inputmethod.InputMethodManager.checkFocusNoStartInput(boolean, boolean)"
"android.view.inputmethod.InputMethodManager.isActive(View)","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.isActive(View)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.isActive()","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.setInputChannelLocked(InputChannel)","android.view.InputEventSender.dispose()"
"android.view.inputmethod.InputMethodManager.setInputChannelLocked(InputChannel)","android.view.InputChannel.dispose()"
"android.view.inputmethod.InputMethodManager.setInputChannelLocked(InputChannel)","android.view.inputmethod.InputMethodManager.flushPendingEventsLocked()"
"android.view.inputmethod.InputMethodManager.checkFocus()","android.view.inputmethod.InputMethodManager.checkFocusNoStartInput(boolean, boolean)"
"android.view.inputmethod.InputMethodManager.checkFocus()","android.view.inputmethod.InputMethodManager.startInputInner(null, int, int, int)"
"android.view.inputmethod.InputMethodManager.isAcceptingText()","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.updateCursor(View, int, int, int, int)","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.updateCursor(View, int, int, int, int)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.toggleSoftInputFromWindow(IBinder, int, int)","android.view.View.getWindowToken()"
"android.view.inputmethod.InputMethodManager.scheduleCheckFocusLocked(View)","android.view.ViewRootImpl.dispatchCheckFocus()"
"android.view.inputmethod.InputMethodManager.scheduleCheckFocusLocked(View)","android.view.View.getViewRootImpl()"
"android.view.inputmethod.InputMethodManager.finishInputLocked()","android.view.inputmethod.InputMethodManager.notifyInputConnectionFinished()"
"android.view.inputmethod.InputMethodManager.finishInputLocked()","android.view.inputmethod.InputMethodManager.clearConnectionLocked()"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","java.util.concurrent.CountDownLatch.countDown()"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.inputmethod.InputMethodManager.doDump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.inputmethod.InputMethodManager.finishedInputEvent(int, boolean, boolean)"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.inputmethod.InputMethodManager.clearBindingLocked()"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.View.isFocused()"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.inputmethod.InputMethodManager.sendInputEventAndReportResultOnMainLooper(android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","com.android.internal.os.SomeArgs.recycle()"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.View.hasWindowFocus()"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","java.io.PrintWriter.println(java.lang.String)"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.InputChannel.dispose()"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.inputmethod.InputMethodManager.setInputChannelLocked(android.view.InputChannel)"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.inputmethod.InputMethodManager.checkFocusNoStartInput(boolean, boolean)"
"android.view.inputmethod.InputMethodManager.handleMessage(Message)","android.view.inputmethod.InputMethodManager.startInputInner(null, int, int, int)"
"android.view.inputmethod.InputMethodManager.displayCompletions(View, CompletionInfo[])","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.displayCompletions(View, CompletionInfo[])","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.restartInput(View)","android.view.View.checkInputConnectionProxy(android.view.View)"
"android.view.inputmethod.InputMethodManager.restartInput(View)","android.view.inputmethod.InputMethodManager.checkFocus()"
"android.view.inputmethod.InputMethodManager.restartInput(View)","android.view.inputmethod.InputMethodManager.startInputInner(null, int, int, int)"
"android.view.inputmethod.InputMethodManager.recyclePendingEventLocked(PendingEvent)","android.view.inputmethod.InputMethodManager.PendingEvent.recycle()"
"android.view.inputmethod.InputMethodManager.recyclePendingEventLocked(PendingEvent)","android.util.Pools.Pool.release(android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.os.Message.setAsynchronous(boolean)"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.os.Handler.sendMessage(android.os.Message)"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.os.Handler.obtainMessage(int, android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.view.inputmethod.InputMethodManager.showInputMethodPickerLocked()"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.view.KeyEvent.getRepeatCount()"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.os.Looper.isCurrentThread()"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.view.KeyEvent.getKeyCode()"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.view.KeyEvent.getAction()"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.view.inputmethod.InputMethodManager.sendInputEventOnMainLooperLocked(android.view.inputmethod.InputMethodManager.PendingEvent)"
"android.view.inputmethod.InputMethodManager.dispatchInputEvent(InputEvent, Object, FinishedInputEventCallback, Handler)","android.view.inputmethod.InputMethodManager.obtainPendingEventLocked(android.view.InputEvent, java.lang.Object, java.lang.String, android.view.inputmethod.InputMethodManager.FinishedInputEventCallback, android.os.Handler)"
"android.view.inputmethod.InputMethodManager.notifyInputConnectionFinished()","android.view.View.getViewRootImpl()"
"android.view.inputmethod.InputMethodManager.notifyInputConnectionFinished()","android.view.ViewRootImpl.dispatchFinishInputConnection(android.view.inputmethod.InputConnection)"
"android.view.inputmethod.InputMethodManager.focusIn(View)","android.view.inputmethod.InputMethodManager.focusInLocked(android.view.View)"
"com.android.internal.database.SortCursor.getDouble(int)","android.database.Cursor.getDouble(int)"
"com.android.internal.database.SortCursor.deactivate()","android.database.Cursor.deactivate()"
"com.android.internal.database.SortCursor.getBlob(int)","android.database.Cursor.getBlob(int)"
"com.android.internal.database.SortCursor.requery()","android.database.Cursor.requery()"
"com.android.internal.database.SortCursor.onMove(int, int)","java.lang.String.compareToIgnoreCase(java.lang.String)"
"com.android.internal.database.SortCursor.onMove(int, int)","android.database.Cursor.getString(int)"
"com.android.internal.database.SortCursor.onMove(int, int)","android.database.Cursor.isAfterLast()"
"com.android.internal.database.SortCursor.onMove(int, int)","android.database.Cursor.moveToPosition(int)"
"com.android.internal.database.SortCursor.onMove(int, int)","android.database.Cursor.moveToNext()"
"com.android.internal.database.SortCursor.onMove(int, int)","android.database.Cursor.moveToFirst()"
"com.android.internal.database.SortCursor.onMove(int, int)","android.database.Cursor.getPosition()"
"com.android.internal.database.SortCursor.registerDataSetObserver(DataSetObserver)","android.database.Cursor.registerDataSetObserver(android.database.DataSetObserver)"
"com.android.internal.database.SortCursor.getType(int)","android.database.Cursor.getType(int)"
"com.android.internal.database.SortCursor.getString(int)","android.database.Cursor.getString(int)"
"com.android.internal.database.SortCursor.close()","android.database.Cursor.close()"
"com.android.internal.database.SortCursor.getInt(int)","android.database.Cursor.getInt(int)"
"com.android.internal.database.SortCursor.unregisterDataSetObserver(DataSetObserver)","android.database.Cursor.unregisterDataSetObserver(android.database.DataSetObserver)"
"com.android.internal.database.SortCursor.getShort(int)","android.database.Cursor.getShort(int)"
"com.android.internal.database.SortCursor.getCount()","android.database.Cursor.getCount()"
"com.android.internal.database.SortCursor.getLong(int)","android.database.Cursor.getLong(int)"
"com.android.internal.database.SortCursor.getFloat(int)","android.database.Cursor.getFloat(int)"
"com.android.internal.database.SortCursor.getColumnNames()","android.database.Cursor.getColumnNames()"
"com.android.internal.database.SortCursor.isNull(int)","android.database.Cursor.isNull(int)"
"com.google.android.collect.Sets.newHashSet(E[])","java.util.Collections.addAll(java.util.HashSet<E>, E[])"
"com.google.android.collect.Sets.newSortedSet(E[])","java.util.Collections.addAll(java.util.SortedSet<E>, E[])"
"com.google.android.collect.Sets.newArraySet(E[])","java.util.Collections.addAll(android.util.ArraySet<E>, E[])"
"android.transition.ChangeText.createAnimator(ViewGroup, TransitionValues, TransitionValues)","android.animation.Animator.addListener(android.animation.AnimatorListenerAdapter)"
"android.transition.ChangeText.createAnimator(ViewGroup, TransitionValues, TransitionValues)","android.transition.Transition.addListener(android.transition.Transition.TransitionListener)"
"android.transition.ChangeText.createAnimator(ViewGroup, TransitionValues, TransitionValues)","java.lang.Object.equals(java.lang.CharSequence)"
"android.transition.ChangeText.createAnimator(ViewGroup, TransitionValues, TransitionValues)","java.util.Map.get(java.lang.String)"
"android.transition.ChangeText.createAnimator(ViewGroup, TransitionValues, TransitionValues)","android.animation.ValueAnimator.getAnimatedValue()"
"android.transition.ChangeText.createAnimator(ViewGroup, TransitionValues, TransitionValues)","android.transition.ChangeText.setSelection(android.widget.EditText, int, int)"
"android.transition.ChangeText.createAnimator(ViewGroup, TransitionValues, TransitionValues)","android.animation.ValueAnimator.addUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)"
"android.transition.ChangeText.createAnimator(ViewGroup, TransitionValues, TransitionValues)","android.animation.ValueAnimator.ofInt(int, int)"
"android.transition.ChangeText.createAnimator(ViewGroup, TransitionValues, TransitionValues)","android.animation.AnimatorSet.playSequentially(android.animation.ValueAnimator, android.animation.ValueAnimator)"
"android.transition.ChangeText.captureStartValues(TransitionValues)","android.transition.ChangeText.captureValues(android.transition.TransitionValues)"
"android.transition.ChangeText.captureEndValues(TransitionValues)","android.transition.ChangeText.captureValues(android.transition.TransitionValues)"
"android.service.persistentdata.PersistentDataBlockManager.setOemUnlockEnabled(boolean)","android.service.persistentdata.PersistentDataBlockManager.onError(java.lang.String)"
"android.service.persistentdata.PersistentDataBlockManager.write(byte[])","android.service.persistentdata.PersistentDataBlockManager.onError(java.lang.String)"
"android.service.persistentdata.PersistentDataBlockManager.getDataBlockSize()","android.service.persistentdata.PersistentDataBlockManager.onError(java.lang.String)"
"android.service.persistentdata.PersistentDataBlockManager.wipe()","android.service.persistentdata.PersistentDataBlockManager.onError(java.lang.String)"
"android.service.persistentdata.PersistentDataBlockManager.getOemUnlockEnabled()","android.service.persistentdata.PersistentDataBlockManager.onError(java.lang.String)"
"android.service.persistentdata.PersistentDataBlockManager.getMaximumDataBlockSize()","android.service.persistentdata.PersistentDataBlockManager.onError(java.lang.String)"
"android.service.persistentdata.PersistentDataBlockManager.read()","android.service.persistentdata.PersistentDataBlockManager.onError(java.lang.String)"
"android.os.Looper.quitSafely()","android.os.MessageQueue.quit(boolean)"
"android.os.Looper.postSyncBarrier()","android.os.SystemClock.uptimeMillis()"
"android.os.Looper.postSyncBarrier()","android.os.MessageQueue.enqueueSyncBarrier(long)"
"android.os.Looper.dump(Printer, String)","android.util.Printer.println(java.lang.String)"
"android.os.Looper.dump(Printer, String)","android.os.Looper.toString()"
"android.os.Looper.dump(Printer, String)","android.os.MessageQueue.dump(android.util.Printer, java.lang.String)"
"android.os.Looper.loop()","android.os.Message.recycleUnchecked()"
"android.os.Looper.loop()","android.os.Binder.clearCallingIdentity()"
"android.os.Looper.loop()","android.os.Handler.dispatchMessage(android.os.Message)"
"android.os.Looper.loop()","android.os.MessageQueue.next()"
"android.os.Looper.loop()","android.os.Looper.myLooper()"
"android.os.Looper.loop()","android.util.Printer.println(java.lang.String)"
"android.os.Looper.prepare()","android.os.Looper.prepare(boolean)"
"android.os.Looper.myQueue()","android.os.Looper.myLooper()"
"android.os.Looper.isIdling()","android.os.MessageQueue.isIdling()"
"android.os.Looper.isCurrentThread()","java.lang.Thread.currentThread()"
"android.os.Looper.prepareMainLooper()","android.os.Looper.prepare(boolean)"
"android.os.Looper.prepareMainLooper()","android.os.Looper.myLooper()"
"android.os.Looper.prepare(boolean)","java.lang.ThreadLocal.get()"
"android.os.Looper.prepare(boolean)","java.lang.ThreadLocal.set(android.os.Looper)"
"android.os.Looper.removeSyncBarrier(int)","android.os.MessageQueue.removeSyncBarrier(int)"
"android.os.Looper.myLooper()","java.lang.ThreadLocal.get()"
"android.os.Looper.quit()","android.os.MessageQueue.quit(boolean)"
"android.os.Looper.toString()","java.lang.System.identityHashCode(android.os.Looper)"
"android.os.Looper.toString()","java.lang.Integer.toHexString(int)"
"android.os.Looper.toString()","java.lang.Thread.getName()"
"android.os.Looper.toString()","java.lang.Thread.getId()"
"android.service.notification.NotificationRankingUpdate.writeToParcel(Parcel, int)","android.os.Parcel.writeStringArray(java.lang.String[])"
"android.service.notification.NotificationRankingUpdate.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.service.notification.NotificationRankingUpdate.writeToParcel(Parcel, int)","android.os.Parcel.writeBundle(android.os.Bundle)"
"android.widget.SeekBar.onStopTrackingTouch()","android.widget.SeekBar.OnSeekBarChangeListener.onStopTrackingTouch(android.widget.SeekBar)"
"android.widget.SeekBar.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.SeekBar.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.SeekBar.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.SeekBar.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.SeekBar.onStartTrackingTouch()","android.widget.SeekBar.OnSeekBarChangeListener.onStartTrackingTouch(android.widget.SeekBar)"
"android.text.style.RelativeSizeSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeFloat(float)"
"android.widget.SimpleExpandableListAdapter.getChildrenCount(int)","java.util.List.size()"
"android.widget.SimpleExpandableListAdapter.getChildrenCount(int)","java.util.List.get(int)"
"android.widget.SimpleExpandableListAdapter.getChild(int, int)","java.util.List.get(int)"
"android.widget.SimpleExpandableListAdapter.getGroup(int)","java.util.List.get(int)"
"android.widget.SimpleExpandableListAdapter.getGroupCount()","java.util.List.size()"
"android.widget.SimpleExpandableListAdapter.bindView(View, Map, String[], int[])","android.view.View.findViewById(int)"
"android.widget.SimpleExpandableListAdapter.getChildView(int, int, boolean, View, ViewGroup)","android.widget.SimpleExpandableListAdapter.bindView(android.view.View, ? extends java.util.Map<java.lang.String, ?>, java.lang.String[], int[])"
"android.widget.SimpleExpandableListAdapter.getChildView(int, int, boolean, View, ViewGroup)","java.util.List.get(int)"
"android.widget.SimpleExpandableListAdapter.getChildView(int, int, boolean, View, ViewGroup)","android.widget.SimpleExpandableListAdapter.newChildView(boolean, android.view.ViewGroup)"
"android.widget.SimpleExpandableListAdapter.getGroupView(int, boolean, View, ViewGroup)","android.widget.SimpleExpandableListAdapter.bindView(android.view.View, ? extends java.util.Map<java.lang.String, ?>, java.lang.String[], int[])"
"android.widget.SimpleExpandableListAdapter.getGroupView(int, boolean, View, ViewGroup)","android.widget.SimpleExpandableListAdapter.newGroupView(boolean, android.view.ViewGroup)"
"android.widget.SimpleExpandableListAdapter.getGroupView(int, boolean, View, ViewGroup)","java.util.List.get(int)"
"android.nfc.tech.NfcBarcode.get(Tag)","android.nfc.Tag.hasTech(int)"
"android.nfc.tech.NfcBarcode.getBarcode()","android.nfc.Tag.getId()"
"android.widget.SpellChecker.onGetSuggestions(SuggestionsInfo[])","android.widget.SpellChecker.scheduleNewSpellCheck()"
"android.widget.SpellChecker.onGetSuggestions(SuggestionsInfo[])","android.text.Spannable.removeSpan(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.onGetSuggestions(SuggestionsInfo[])","android.widget.SpellChecker.onGetSuggestionsInternal(android.view.textservice.SuggestionsInfo, int, int)"
"android.widget.SpellChecker.parse()","android.widget.SpellChecker.addSpellCheckSpan(android.text.Editable, int, int)"
"android.widget.SpellChecker.parse()","android.text.style.SpellCheckSpan.isSpellCheckInProgress()"
"android.widget.SpellChecker.parse()","android.text.Spanned.getSpanEnd(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.parse()","android.text.Spannable.removeSpan(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.parse()","android.text.method.WordIterator.getEnd(int)"
"android.widget.SpellChecker.parse()","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.SpellCheckSpan>)"
"android.widget.SpellChecker.parse()","android.widget.SpellChecker.SpellParser.setRangeSpan(android.text.Editable, int, int)"
"android.widget.SpellChecker.parse()","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.widget.SpellChecker.parse()","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.SuggestionSpan>)"
"android.widget.SpellChecker.parse()","android.widget.SpellChecker.SpellParser.removeSpansAt(android.text.Editable, int, android.text.style.SpellCheckSpan[])"
"android.widget.SpellChecker.parse()","java.lang.Math.min(int, int)"
"android.widget.SpellChecker.parse()","android.text.method.WordIterator.preceding(int)"
"android.widget.SpellChecker.parse()","android.text.Spanned.getSpanStart(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.parse()","android.widget.SpellChecker.spellCheck()"
"android.widget.SpellChecker.parse()","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.widget.SpellChecker.parse()","android.widget.SpellChecker.SpellParser.removeSpansAt(android.text.Editable, int, android.text.style.SuggestionSpan[])"
"android.widget.SpellChecker.parse()","java.lang.Math.max(int, int)"
"android.widget.SpellChecker.parse()","android.text.method.WordIterator.getBeginning(int)"
"android.widget.SpellChecker.parse()","android.text.method.WordIterator.setCharSequence(android.text.Editable, int, int)"
"android.widget.SpellChecker.parse()","android.text.method.WordIterator.following(int)"
"android.widget.SpellChecker.parse()","android.widget.SpellChecker.SpellParser.removeRangeSpan(android.text.Editable)"
"android.widget.SpellChecker.closeSession()","android.view.textservice.SpellCheckerSession.close()"
"android.widget.SpellChecker.closeSession()","android.widget.SpellChecker.SpellParser.stop()"
"android.widget.SpellChecker.spellCheck()","android.text.style.SpellCheckSpan.isSpellCheckInProgress()"
"android.widget.SpellChecker.spellCheck()","android.text.Spanned.getSpanEnd(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.spellCheck()","java.lang.CharSequence.charAt(int)"
"android.widget.SpellChecker.spellCheck()","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.widget.SpellChecker.spellCheck()","android.text.style.SpellCheckSpan.setSpellCheckInProgress(boolean)"
"android.widget.SpellChecker.spellCheck()","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.widget.SpellChecker.spellCheck()","android.text.Spanned.getSpanStart(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.spellCheck()","android.view.textservice.SpellCheckerSession.getSuggestions(android.view.textservice.TextInfo[], int, boolean)"
"android.widget.SpellChecker.spellCheck()","java.lang.System.arraycopy(android.view.textservice.TextInfo[], int, android.view.textservice.TextInfo[], int, int)"
"android.widget.SpellChecker.spellCheck()","android.view.textservice.SpellCheckerSession.getSentenceSuggestions(android.view.textservice.TextInfo[], int)"
"android.widget.SpellChecker.nextSpellCheckSpanIndex()","com.android.internal.util.GrowingArrayUtils.append(int[], int, int)"
"android.widget.SpellChecker.nextSpellCheckSpanIndex()","com.android.internal.util.GrowingArrayUtils.append(android.text.style.SpellCheckSpan[], int, android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.resetSession()","android.view.textservice.TextServicesManager.getCurrentSpellCheckerSubtype(boolean)"
"android.widget.SpellChecker.resetSession()","android.widget.SpellChecker.closeSession()"
"android.widget.SpellChecker.resetSession()","android.view.textservice.TextServicesManager.isSpellCheckerEnabled()"
"android.widget.SpellChecker.resetSession()","android.view.textservice.TextServicesManager.newSpellCheckerSession(null, java.util.Locale, android.widget.SpellChecker, boolean)"
"android.widget.SpellChecker.resetSession()","android.util.LruCache.evictAll()"
"android.widget.SpellChecker.stop()","android.widget.SpellChecker.SpellParser.removeRangeSpan(android.text.Editable)"
"android.widget.SpellChecker.parse(int, int)","android.widget.SpellChecker.SpellParser.setRangeSpan(android.text.Editable, int, int)"
"android.widget.SpellChecker.parse(int, int)","android.widget.SpellChecker.SpellParser.parse()"
"android.widget.SpellChecker.isFinished()","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.widget.SpellChecker.haveWordBoundariesChanged(Editable, int, int, int, int)","java.lang.Character.codePointBefore(android.text.Editable, int)"
"android.widget.SpellChecker.haveWordBoundariesChanged(Editable, int, int, int, int)","java.lang.Character.codePointAt(android.text.Editable, int)"
"android.widget.SpellChecker.haveWordBoundariesChanged(Editable, int, int, int, int)","java.lang.Character.isLetterOrDigit(int)"
"android.widget.SpellChecker.haveWordBoundariesChanged(Editable, int, int, int, int)","java.lang.CharSequence.length()"
"android.widget.SpellChecker.setRangeSpan(Editable, int, int)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.widget.SpellChecker.scheduleNewSpellCheck()","android.widget.SpellChecker.SpellParser.isFinished()"
"android.widget.SpellChecker.scheduleNewSpellCheck()","android.widget.SpellChecker.SpellParser.parse()"
"android.widget.SpellChecker.spellCheck(int, int)","android.widget.SpellChecker.resetSession()"
"android.widget.SpellChecker.spellCheck(int, int)","android.widget.SpellChecker.isSessionActive()"
"android.widget.SpellChecker.spellCheck(int, int)","android.widget.SpellChecker.SpellParser.isFinished()"
"android.widget.SpellChecker.spellCheck(int, int)","java.lang.System.arraycopy(android.widget.SpellChecker.SpellParser[], int, android.widget.SpellChecker.SpellParser[], int, int)"
"android.widget.SpellChecker.spellCheck(int, int)","java.util.Locale.equals(java.util.Locale)"
"android.widget.SpellChecker.spellCheck(int, int)","android.view.textservice.TextServicesManager.isSpellCheckerEnabled()"
"android.widget.SpellChecker.spellCheck(int, int)","android.widget.SpellChecker.setLocale(java.util.Locale)"
"android.widget.SpellChecker.spellCheck(int, int)","android.widget.SpellChecker.SpellParser.parse(int, int)"
"android.widget.SpellChecker.addSpellCheckSpan(Editable, int, int)","android.text.style.SpellCheckSpan.setSpellCheckInProgress(boolean)"
"android.widget.SpellChecker.addSpellCheckSpan(Editable, int, int)","android.widget.SpellChecker.nextSpellCheckSpanIndex()"
"android.widget.SpellChecker.addSpellCheckSpan(Editable, int, int)","android.text.Spannable.setSpan(android.text.style.SpellCheckSpan, int, int, int)"
"android.widget.SpellChecker.onSelectionChanged()","android.widget.SpellChecker.spellCheck()"
"android.widget.SpellChecker.onGetSentenceSuggestions(SentenceSuggestionsInfo[])","android.view.textservice.SentenceSuggestionsInfo.getSuggestionsInfoAt(int)"
"android.widget.SpellChecker.onGetSentenceSuggestions(SentenceSuggestionsInfo[])","android.widget.SpellChecker.scheduleNewSpellCheck()"
"android.widget.SpellChecker.onGetSentenceSuggestions(SentenceSuggestionsInfo[])","android.text.Spannable.removeSpan(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.onGetSentenceSuggestions(SentenceSuggestionsInfo[])","android.view.textservice.SentenceSuggestionsInfo.getOffsetAt(int)"
"android.widget.SpellChecker.onGetSentenceSuggestions(SentenceSuggestionsInfo[])","android.view.textservice.SentenceSuggestionsInfo.getLengthAt(int)"
"android.widget.SpellChecker.onGetSentenceSuggestions(SentenceSuggestionsInfo[])","android.widget.SpellChecker.onGetSuggestionsInternal(android.view.textservice.SuggestionsInfo, int, int)"
"android.widget.SpellChecker.onGetSentenceSuggestions(SentenceSuggestionsInfo[])","android.view.textservice.SentenceSuggestionsInfo.getSuggestionsCount()"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","android.text.Spanned.getSpanEnd(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","android.view.textservice.SuggestionsInfo.getSuggestionsCount()"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","android.text.Spannable.removeSpan(android.text.style.SuggestionSpan)"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","java.lang.Long.valueOf(long)"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","android.text.Spanned.getSpanStart(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","android.util.LruCache.get(java.lang.Long)"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","android.text.Spannable.setSpan(android.text.style.SuggestionSpan, int, int, int)"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","android.text.TextUtils.packRangeInLong(int, int)"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","android.util.LruCache.put(java.lang.Long, android.text.style.SuggestionSpan)"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","android.view.textservice.SuggestionsInfo.getSuggestionAt(int)"
"android.widget.SpellChecker.createMisspelledSuggestionSpan(Editable, SuggestionsInfo, SpellCheckSpan, int, int)","com.android.internal.util.ArrayUtils.emptyArray(java.lang.Class<java.lang.String>)"
"android.widget.SpellChecker.setLocale(Locale)","android.widget.SpellChecker.resetSession()"
"android.widget.SpellChecker.removeSpansAt(Editable, int, T[])","android.text.Spanned.getSpanStart(T)"
"android.widget.SpellChecker.removeSpansAt(Editable, int, T[])","android.text.Spanned.getSpanEnd(T)"
"android.widget.SpellChecker.removeSpansAt(Editable, int, T[])","android.text.Spannable.removeSpan(T)"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.text.Spanned.getSpanEnd(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.text.Spannable.removeSpan(android.text.style.SuggestionSpan)"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.view.textservice.SuggestionsInfo.getCookie()"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","java.lang.Long.valueOf(long)"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.text.Spanned.getSpanStart(android.text.style.SpellCheckSpan)"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.util.LruCache.get(java.lang.Long)"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.view.textservice.SuggestionsInfo.getSuggestionsAttributes()"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.util.LruCache.remove(java.lang.Long)"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.view.textservice.SuggestionsInfo.getSequence()"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.text.TextUtils.packRangeInLong(int, int)"
"android.widget.SpellChecker.onGetSuggestionsInternal(SuggestionsInfo, int, int)","android.widget.SpellChecker.createMisspelledSuggestionSpan(android.text.Editable, android.view.textservice.SuggestionsInfo, android.text.style.SpellCheckSpan, int, int)"
"android.widget.SpellChecker.removeRangeSpan(Editable)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.os.BatteryStats.formatTime(StringBuilder, long)","android.os.BatteryStats.formatTimeRaw(java.lang.StringBuilder, long)"
"android.os.BatteryStats.formatTime(StringBuilder, long)","java.lang.StringBuilder.append(java.lang.String)"
"android.os.BatteryStats.formatTime(StringBuilder, long)","java.lang.StringBuilder.append(long)"
"android.os.BatteryStats.equals(Object)","java.lang.Object.getClass()"
"android.os.BatteryStats.equals(Object)","java.lang.String.equals(java.lang.String)"
"android.os.BatteryStats.same(HistoryItem)","android.os.BatteryStats.HistoryItem.sameNonEvent(android.os.BatteryStats.HistoryItem)"
"android.os.BatteryStats.same(HistoryItem)","android.os.BatteryStats.HistoryTag.equals(android.os.BatteryStats.HistoryTag)"
"android.os.BatteryStats.formatTimeMs(StringBuilder, long)","android.os.BatteryStats.formatTimeRaw(java.lang.StringBuilder, long)"
"android.os.BatteryStats.formatTimeMs(StringBuilder, long)","java.lang.StringBuilder.append(java.lang.String)"
"android.os.BatteryStats.formatTimeMs(StringBuilder, long)","java.lang.StringBuilder.append(long)"
"android.os.BatteryStats.formatRatioLocked(long, long)","java.lang.StringBuilder.toString()"
"android.os.BatteryStats.formatRatioLocked(long, long)","java.lang.AbstractStringBuilder.setLength(int)"
"android.os.BatteryStats.formatRatioLocked(long, long)","java.util.Formatter.format(java.lang.String, float)"
"android.os.BatteryStats.setTo(HistoryItem)","android.os.BatteryStats.HistoryItem.setToCommon(android.os.BatteryStats.HistoryItem)"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","android.util.SparseIntArray.size()"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","android.os.BatteryStats.commitCurrentHistoryBatchLocked()"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","android.util.SparseIntArray.valueAt(int)"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","android.os.BatteryStats.HistoryEventTracker.updateState(int, java.lang.String, int, int)"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","android.os.BatteryStats.HistoryEventTracker.getStateForEvent(int)"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","java.io.PrintWriter.println(long)"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","android.os.BatteryStats.HistoryPrinter.printNextItem(java.io.PrintWriter, android.os.BatteryStats.HistoryItem, long, boolean, boolean)"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","android.util.SparseIntArray.keyAt(int)"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","java.util.HashMap.entrySet()"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","android.os.BatteryStats.getNextHistoryLocked(android.os.BatteryStats.HistoryItem)"
"android.os.BatteryStats.dumpHistoryLocked(PrintWriter, int, long, boolean)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getParcelVersion()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getChargeStepDurationsArray()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getHistoryTagPoolString(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.util.SparseArray.put(int, java.util.ArrayList<java.lang.String>)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.prepareForDumpLocked()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.io.PrintWriter.println()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getNumChargeStepDurations()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getNumDischargeStepDurations()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.util.SparseArray.size()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getStartPlatformVersion()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.util.SparseArray.get(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.util.SparseArray.keyAt(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getHistoryTagPoolUid(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getDischargeStepDurationsArray()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.computeChargeTimeRemaining(long)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.io.PrintWriter.print(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.dumpCheckinLocked(android.content.Context, java.io.PrintWriter, int, int, boolean)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.util.ArrayList.add(java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.lang.String.replace(java.lang.String, java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.SystemClock.elapsedRealtime()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.io.PrintWriter.print(char)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getHistoryStringPoolSize()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, java.lang.Object[])"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.finishIteratingHistoryLocked()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.util.List.get(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.startIteratingHistoryLocked()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getHistoryBaseTime()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.computeBatteryTimeRemaining(long)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.lang.Long.toString(long)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.util.ArrayList.size()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.dumpHistoryLocked(java.io.PrintWriter, int, long, boolean)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.dumpDurationSteps(java.io.PrintWriter, java.lang.String, long[], int, boolean)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.util.List.size()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getUidStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.lang.Integer.toString(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","android.os.BatteryStats.getEndPlatformVersion()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, List, int, long)","java.util.ArrayList.get(int)"
"android.os.BatteryStats.dumpDurationSteps(PrintWriter, String, long[], int, boolean)","java.lang.Long.toString(long)"
"android.os.BatteryStats.dumpDurationSteps(PrintWriter, String, long[], int, boolean)","java.io.PrintWriter.print(int)"
"android.os.BatteryStats.dumpDurationSteps(PrintWriter, String, long[], int, boolean)","java.io.PrintWriter.println(java.lang.String)"
"android.os.BatteryStats.dumpDurationSteps(PrintWriter, String, long[], int, boolean)","java.io.PrintWriter.println()"
"android.os.BatteryStats.dumpDurationSteps(PrintWriter, String, long[], int, boolean)","android.util.TimeUtils.formatDuration(long, java.io.PrintWriter)"
"android.os.BatteryStats.dumpDurationSteps(PrintWriter, String, long[], int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, java.lang.Object[])"
"android.os.BatteryStats.dumpDurationSteps(PrintWriter, String, long[], int, boolean)","java.lang.Integer.toString(int)"
"android.os.BatteryStats.dumpDurationSteps(PrintWriter, String, long[], int, boolean)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.printWakeLockCheckin(StringBuilder, Timer, long, String, int, String)","android.os.BatteryStats.Timer.getCountLocked(int)"
"android.os.BatteryStats.printWakeLockCheckin(StringBuilder, Timer, long, String, int, String)","java.lang.StringBuilder.append(int)"
"android.os.BatteryStats.printWakeLockCheckin(StringBuilder, Timer, long, String, int, String)","java.lang.StringBuilder.append(java.lang.String)"
"android.os.BatteryStats.printWakeLockCheckin(StringBuilder, Timer, long, String, int, String)","android.os.BatteryStats.Timer.getTotalTimeLocked(long, int)"
"android.os.BatteryStats.printWakeLockCheckin(StringBuilder, Timer, long, String, int, String)","java.lang.StringBuilder.append(char)"
"android.os.BatteryStats.printWakeLockCheckin(StringBuilder, Timer, long, String, int, String)","java.lang.StringBuilder.append(long)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getUserActivityCount(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getSyncStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.makemAh(double)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.lang.String.indexOf(char)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.util.SparseArray.keyAt(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.computeBatteryRealtime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getSystemTime(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.SystemClock.uptimeMillis()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getWifiOnTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getBluetoothOnTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, java.lang.Object[])"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getWifiSignalStrengthTime(int, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, int, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getPhoneSignalScanningTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.util.Map.Entry.getKey()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getMobileRadioActiveAdjustedTime(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getWifiSignalStrengthCount(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Sensor.getSensorTime()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.computeRealtime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Timer.getCountLocked(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","com.android.internal.os.PowerProfile.getBatteryCapacity()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getNetworkActivityPackets(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getDischargeAmountScreenOff()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getNumCrashes(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.Serv.getStarts(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getDischargeAmountScreenOn()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getDischargeCurrentLevel()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, long, long, long, long, long, long, long, long, long, long, long, int, long, long, long, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.computeBatteryScreenOffUptime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.util.Map.entrySet()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getMobileRadioActiveTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getDischargeStartLevel()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getComputedPower()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getUidStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getBluetoothStateTime(int, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.util.Map.size()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getKernelWakelockStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getLowDischargeAmountSinceCharge()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.computeBatteryUptime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getPhoneDataConnectionCount(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Wakelock.getWakeTime(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getPowerProfile()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getDischargeAmountScreenOnSinceCharge()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.computeBatteryScreenOffRealtime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.UserHandle.getUid(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getDischargeAmountScreenOffSinceCharge()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getHighDischargeAmountSinceCharge()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getJobStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getWifiStateTime(int, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, long, int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getNumAnrs(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.util.List.get(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getWifiRunningTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getNumConnectivityChange(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getPhoneSignalStrengthTime(int, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getInteractiveTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getFullWifiLockTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.lang.String.replace(char, char)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.lang.StringBuilder.toString()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.hasUserActivity()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.Serv.getStartTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getMobileRadioActiveTime(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.util.SparseArray.valueAt(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getScreenBrightnessTime(int, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getScreenOnTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getSensorStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.lang.AbstractStringBuilder.setLength(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getNetworkActivityPackets(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getProcessStateTime(int, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getLowPowerModeEnabledTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getUserTime(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getProcessStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.SystemClock.elapsedRealtime()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.printWakeLockCheckin(java.lang.StringBuilder, ? extends android.os.BatteryStats.Timer, long, null, int, java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getWifiScanTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.lang.AbstractStringBuilder.length()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, java.lang.String, long, long, long, int, int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, int, int, int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getBluetoothStateCount(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getPackageStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getWifiStateCount(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Timer.getTotalTimeLocked(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, long, long, long, long, long, long, long, long)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, long, long, long, long, long, long, long, long, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getBatteryUptime(long)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.util.Map.Entry.getValue()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.printWakeLockCheckin(java.lang.StringBuilder, android.os.BatteryStats.Timer, long, java.lang.String, int, java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, long, long, long)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.refreshStats(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getMinDrainedPower()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getPhoneOnTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getPhoneSignalStrengthCount(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getMaxDrainedPower()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.util.SparseArray.size()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getGlobalWifiRunningTime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.getWakeups(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getForegroundTime(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.create(android.os.BatteryStats)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getWakeupReasonStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, java.lang.String, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getPhoneDataConnectionTime(int, long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getWakelockStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getStarts(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.Serv.getLaunches(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getMobileRadioActiveCount(int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getWifiSupplStateCount(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.dumpLine(java.io.PrintWriter, int, java.lang.String, java.lang.String, long)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getUsageList()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getForegroundActivityTimer()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.computeUptime(long, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getNetworkActivityBytes(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.getServiceStats()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","java.util.List.size()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getVibratorOnTimer()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getUid()"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.Uid.getNetworkActivityBytes(int, int)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int, boolean)","android.os.BatteryStats.getWifiSupplStateTime(int, long, int)"
"android.os.BatteryStats.formatBytesLocked(long)","java.util.Formatter.format(java.lang.String, double)"
"android.os.BatteryStats.formatBytesLocked(long)","java.lang.StringBuilder.toString()"
"android.os.BatteryStats.formatBytesLocked(long)","java.lang.AbstractStringBuilder.setLength(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getChargeStepDurationsArray()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getIsOnBattery()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.printSizeValue(java.io.PrintWriter, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.dumpTimeEstimate(java.io.PrintWriter, java.lang.String, long[], int, int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.prepareForDumpLocked()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","java.io.PrintWriter.println()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getNumChargeStepDurations()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getHistoryTotalSize()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getNumDischargeStepDurations()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.startIteratingOldHistoryLocked()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.util.SparseArray.size()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.HistoryPrinter.printNextItem(java.io.PrintWriter, android.os.BatteryStats.HistoryItem, long, boolean, boolean)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getNextOldHistoryLocked(android.os.BatteryStats.HistoryItem)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.finishIteratingOldHistoryLocked()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.util.SparseArray.keyAt(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getDischargeStepDurationsArray()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.computeChargeTimeRemaining(long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","java.io.PrintWriter.print(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getHistoryStringPoolBytes()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.SystemClock.elapsedRealtime()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getHistoryStringPoolSize()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.util.TimeUtils.formatDuration(long, java.io.PrintWriter)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.finishIteratingHistoryLocked()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.dumpLocked(android.content.Context, java.io.PrintWriter, java.lang.String, int, int, boolean)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.startIteratingHistoryLocked()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getHistoryUsedSize()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.computeBatteryTimeRemaining(long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getStartCount()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","java.io.PrintWriter.print(long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.util.SparseArray.valueAt(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.dumpHistoryLocked(java.io.PrintWriter, int, long, boolean)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.dumpDurationSteps(java.io.PrintWriter, java.lang.String, long[], int, boolean)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","java.io.PrintWriter.println(java.lang.String)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.getUidStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.printSizeValue(java.io.PrintWriter, long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, int, int, long)","android.os.BatteryStats.Uid.getPidStats()"
"android.os.BatteryStats.dumpLine(PrintWriter, int, String, String, Object[])","java.io.PrintWriter.print(int)"
"android.os.BatteryStats.dumpLine(PrintWriter, int, String, String, Object[])","java.io.PrintWriter.print(char)"
"android.os.BatteryStats.dumpLine(PrintWriter, int, String, String, Object[])","java.io.PrintWriter.println()"
"android.os.BatteryStats.dumpLine(PrintWriter, int, String, String, Object[])","java.io.PrintWriter.print(java.lang.Object)"
"android.os.BatteryStats.dumpLine(PrintWriter, int, String, String, Object[])","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.dumpTimeEstimate(PrintWriter, String, long[], int, long, long)","android.os.BatteryStats.formatTimeMs(java.lang.StringBuilder, long)"
"android.os.BatteryStats.dumpTimeEstimate(PrintWriter, String, long[], int, long, long)","java.io.PrintWriter.print(java.lang.StringBuilder)"
"android.os.BatteryStats.dumpTimeEstimate(PrintWriter, String, long[], int, long, long)","java.io.PrintWriter.println()"
"android.os.BatteryStats.dumpTimeEstimate(PrintWriter, String, long[], int, long, long)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.setToCommon(HistoryItem)","android.os.BatteryStats.HistoryTag.setTo(android.os.BatteryStats.HistoryTag)"
"android.os.BatteryStats.updateState(int, String, int, int)","android.util.SparseIntArray.size()"
"android.os.BatteryStats.updateState(int, String, int, int)","java.util.HashMap.get(java.lang.String)"
"android.os.BatteryStats.updateState(int, String, int, int)","java.util.HashMap.remove(java.lang.String)"
"android.os.BatteryStats.updateState(int, String, int, int)","android.util.SparseIntArray.put(int, int)"
"android.os.BatteryStats.updateState(int, String, int, int)","android.util.SparseIntArray.removeAt(int)"
"android.os.BatteryStats.updateState(int, String, int, int)","java.util.HashMap.put(java.lang.String, android.util.SparseIntArray)"
"android.os.BatteryStats.updateState(int, String, int, int)","android.util.SparseIntArray.indexOfKey(int)"
"android.os.BatteryStats.formatTimeRaw(StringBuilder, long)","java.lang.StringBuilder.append(java.lang.String)"
"android.os.BatteryStats.formatTimeRaw(StringBuilder, long)","java.lang.StringBuilder.append(long)"
"android.os.BatteryStats.hashCode()","java.lang.String.hashCode()"
"android.os.BatteryStats.readFromParcel(Parcel)","android.os.BatteryStats.HistoryTag.readFromParcel(android.os.Parcel)"
"android.os.BatteryStats.readFromParcel(Parcel)","android.os.Parcel.readLong()"
"android.os.BatteryStats.readFromParcel(Parcel)","android.os.Parcel.dataPosition()"
"android.os.BatteryStats.readFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.os.BatteryStats.printWakeLock(StringBuilder, Timer, long, String, int, String)","android.os.BatteryStats.formatTimeMs(java.lang.StringBuilder, long)"
"android.os.BatteryStats.printWakeLock(StringBuilder, Timer, long, String, int, String)","android.os.BatteryStats.Timer.getCountLocked(int)"
"android.os.BatteryStats.printWakeLock(StringBuilder, Timer, long, String, int, String)","java.lang.StringBuilder.append(int)"
"android.os.BatteryStats.printWakeLock(StringBuilder, Timer, long, String, int, String)","java.lang.StringBuilder.append(java.lang.String)"
"android.os.BatteryStats.printWakeLock(StringBuilder, Timer, long, String, int, String)","java.lang.StringBuilder.append(char)"
"android.os.BatteryStats.printWakeLock(StringBuilder, Timer, long, String, int, String)","android.os.BatteryStats.computeWakeLock(android.os.BatteryStats.Timer, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.formatTimeMs(java.lang.StringBuilder, long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getUserActivityCount(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getIsOnBattery()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getMobilemsppList()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getSyncStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.makemAh(double)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.util.SparseArray.keyAt(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.computeBatteryRealtime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getSystemTime(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.SystemClock.uptimeMillis()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.lang.StringBuilder.append(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getWifiOnTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getBluetoothOnTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.printmAh(java.io.PrintWriter, double)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getWifiSignalStrengthTime(int, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.Map.Entry.getKey()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getPhoneSignalScanningTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getMobileRadioActiveAdjustedTime(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getWifiSignalStrengthCount(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Sensor.getSensorTime()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.computeRealtime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Timer.getCountLocked(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.PowerProfile.getBatteryCapacity()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Sensor.getHandle()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getNetworkActivityPackets(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getDischargeAmountScreenOff()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.computeWakeLock(android.os.BatteryStats.Timer, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getNumCrashes(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.Collections.sort(java.util.ArrayList<android.os.BatteryStats.TimerEntry>, java.util.Comparator<android.os.BatteryStats.TimerEntry>)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.Serv.getStarts(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getDischargeAmountScreenOn()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getDischargeCurrentLevel()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.io.PrintWriter.print(long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.ArrayList.size()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.computeBatteryScreenOffUptime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.Map.entrySet()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getMobileRadioActiveTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getMobileRadioActiveUnknownCount(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getDischargeStartLevel()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getComputedPower()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getUidStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getScreenOnCount(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getBluetoothStateTime(int, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.Map.size()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getKernelWakelockStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.lang.StringBuilder.append(java.lang.String)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.lang.CharSequence.toString()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.io.PrintWriter.println()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getLowDischargeAmountSinceCharge()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.computeBatteryUptime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getPhoneDataConnectionCount(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Wakelock.getWakeTime(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getPowerProfile()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getDischargeAmountScreenOnSinceCharge()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.computeBatteryScreenOffRealtime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getDischargeAmountScreenOffSinceCharge()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getHighDischargeAmountSinceCharge()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getJobStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getWifiStateTime(int, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.util.TimeUtils.formatDuration(long, java.io.PrintWriter)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getStartClockTime()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getNumAnrs(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.List.get(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getWifiRunningTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getNumConnectivityChange(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getPhoneSignalStrengthTime(int, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getInteractiveTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.printWakeLock(java.lang.StringBuilder, android.os.BatteryStats.Timer, long, java.lang.String, int, java.lang.String)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.io.PrintWriter.println(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getFullWifiLockTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.lang.StringBuilder.toString()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Proc.countExcessivePowers()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.hasUserActivity()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.Serv.getStartTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getMobileRadioActiveTime(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getExcessivePower(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.util.SparseArray.valueAt(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getScreenBrightnessTime(int, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getScreenOnTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.formatRatioLocked(long, long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getSensorStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.lang.AbstractStringBuilder.setLength(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.text.format.DateFormat.format(java.lang.String, long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.formatBytesLocked(long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.lang.String.equals(java.lang.String)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getNetworkActivityPackets(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getProcessStateTime(int, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getLowPowerModeEnabledTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getUserTime(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getPhoneOnCount(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getProcessStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.SystemClock.elapsedRealtime()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getMobileRadioActiveUnknownTime(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getWifiScanTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.ArrayList.clear()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.formatTimeMsNoSpace(java.lang.StringBuilder, long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getPackageStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getWifiStateCount(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Timer.getTotalTimeLocked(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.computeBatteryTimeRemaining(long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getBatteryUptime(long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.Map.Entry.getValue()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.io.PrintWriter.println(java.lang.String)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.printWakeLock(java.lang.StringBuilder, android.os.BatteryStats.Timer, long, null, int, java.lang.String)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.ArrayList.get(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.refreshStats(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getMinDrainedPower()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getPhoneOnTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.ArrayList.add(android.os.BatteryStats.TimerEntry)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getPhoneSignalStrengthCount(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getMaxDrainedPower()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.util.SparseArray.size()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getGlobalWifiRunningTime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.computeChargeTimeRemaining(long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.getWakeups(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getForegroundTime(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.io.PrintWriter.print(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getMobileRadioActiveCount(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.create(android.os.BatteryStats)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getWakeupReasonStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getPhoneDataConnectionTime(int, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getWakelockStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Proc.getStarts(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.Serv.getLaunches(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getMobileRadioActiveCount(int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getWifiSupplStateCount(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.UserHandle.formatUid(java.io.PrintWriter, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","com.android.internal.os.BatteryStatsHelper.getUsageList()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getForegroundActivityTimer()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.computeUptime(long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.UserHandle.formatUid(java.lang.StringBuilder, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getNetworkActivityBytes(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.Pkg.getServiceStats()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.formatTime(java.lang.StringBuilder, long)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.util.List.size()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getVibratorOnTimer()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getUid()"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.Uid.getNetworkActivityBytes(int, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","android.os.BatteryStats.getWifiSupplStateTime(int, long, int)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int, boolean)","java.lang.StringBuilder.append(long)"
"android.os.BatteryStats.printSizeValue(PrintWriter, long)","java.io.PrintWriter.print(int)"
"android.os.BatteryStats.printSizeValue(PrintWriter, long)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int)","com.android.internal.os.BatteryStatsHelper.checkWifiOnly(android.content.Context)"
"android.os.BatteryStats.dumpLocked(Context, PrintWriter, String, int, int)","android.os.BatteryStats.dumpLocked(android.content.Context, java.io.PrintWriter, java.lang.String, int, int, boolean)"
"android.os.BatteryStats.printBitDescriptions(PrintWriter, int, int, HistoryTag, BitDescription[], boolean)","java.io.PrintWriter.print(int)"
"android.os.BatteryStats.printBitDescriptions(PrintWriter, int, int, HistoryTag, BitDescription[], boolean)","android.os.UserHandle.formatUid(java.io.PrintWriter, int)"
"android.os.BatteryStats.printBitDescriptions(PrintWriter, int, int, HistoryTag, BitDescription[], boolean)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int)","android.os.BatteryStats.dumpCheckinLocked(android.content.Context, java.io.PrintWriter, int, int, boolean)"
"android.os.BatteryStats.dumpCheckinLocked(Context, PrintWriter, int, int)","com.android.internal.os.BatteryStatsHelper.checkWifiOnly(android.content.Context)"
"android.os.BatteryStats.setTo(long, byte, HistoryItem)","android.os.BatteryStats.HistoryItem.setToCommon(android.os.BatteryStats.HistoryItem)"
"android.os.BatteryStats.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.os.BatteryStats.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.os.BatteryStats.writeToParcel(Parcel, int)","android.os.BatteryStats.HistoryTag.writeToParcel(android.os.Parcel, int)"
"android.os.BatteryStats.formatTimeMsNoSpace(StringBuilder, long)","android.os.BatteryStats.formatTimeRaw(java.lang.StringBuilder, long)"
"android.os.BatteryStats.formatTimeMsNoSpace(StringBuilder, long)","java.lang.StringBuilder.append(java.lang.String)"
"android.os.BatteryStats.formatTimeMsNoSpace(StringBuilder, long)","java.lang.StringBuilder.append(long)"
"android.os.BatteryStats.computeWakeLock(Timer, long, int)","android.os.BatteryStats.Timer.getTotalTimeLocked(long, int)"
"android.os.BatteryStats.printmAh(PrintWriter, double)","com.android.internal.os.BatteryStatsHelper.makemAh(double)"
"android.os.BatteryStats.printmAh(PrintWriter, double)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","android.util.TimeUtils.formatDuration(long, java.io.PrintWriter, int)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.io.PrintWriter.println()"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.lang.CharSequence.toString()"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","android.os.UserHandle.formatUid(java.io.PrintWriter, int)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.io.PrintWriter.print(byte)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.io.PrintWriter.print(java.lang.String)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","android.os.BatteryStats.printBitDescriptions(java.io.PrintWriter, int, int, android.os.BatteryStats.HistoryTag, android.os.BatteryStats.BitDescription[], boolean)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.io.PrintWriter.print(int)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.io.PrintWriter.print(long)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.io.PrintWriter.println(java.lang.String)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.io.PrintWriter.print(char)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","android.os.BatteryStats.HistoryPrinter.reset()"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","android.os.BatteryStats.printBitDescriptions(java.io.PrintWriter, int, int, null, android.os.BatteryStats.BitDescription[], boolean)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.io.PrintWriter.println(long)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","java.lang.Integer.toHexString(int)"
"android.os.BatteryStats.printNextItem(PrintWriter, HistoryItem, long, boolean, boolean)","android.text.format.DateFormat.format(java.lang.String, long)"
"android.hardware.camera2.legacy.LegacyRequest.setParameters(Camera.Parameters)","android.hardware.Camera.Parameters.copyFrom(android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyRequest.setParameters(Camera.Parameters)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.Camera.Parameters, java.lang.String)"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.appwidget.AppWidgetProvider.onEnabled(android.content.Context)"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.os.BaseBundle.getInt(java.lang.String)"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.content.Intent.getAction()"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","java.lang.String.equals(java.lang.String)"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.appwidget.AppWidgetProvider.onDisabled(android.content.Context)"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.appwidget.AppWidgetProvider.onDeleted(android.content.Context, int[])"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.os.BaseBundle.getIntArray(java.lang.String)"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.appwidget.AppWidgetProvider.onAppWidgetOptionsChanged(android.content.Context, android.appwidget.AppWidgetManager, int, android.os.Bundle)"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.appwidget.AppWidgetProvider.onUpdate(android.content.Context, android.appwidget.AppWidgetManager, int[])"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.appwidget.AppWidgetProvider.onRestored(android.content.Context, int[], int[])"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.content.Intent.getExtras()"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.os.BaseBundle.containsKey(java.lang.String)"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.appwidget.AppWidgetManager.getInstance(android.content.Context)"
"android.appwidget.AppWidgetProvider.onReceive(Context, Intent)","android.os.Bundle.getBundle(java.lang.String)"
"com.android.internal.net.VpnProfile.isValidLockdownProfile()","java.lang.String.split(java.lang.String)"
"com.android.internal.net.VpnProfile.isValidLockdownProfile()","android.text.TextUtils.isEmpty(java.lang.String)"
"com.android.internal.net.VpnProfile.decode(String, byte[])","java.lang.Integer.valueOf(java.lang.String)"
"com.android.internal.net.VpnProfile.decode(String, byte[])","java.lang.String.split(java.lang.String, int)"
"com.android.internal.net.VpnProfile.decode(String, byte[])","java.lang.Boolean.valueOf(java.lang.String)"
"com.android.internal.net.VpnProfile.decode(String, byte[])","java.lang.String.isEmpty()"
"com.android.internal.net.VpnProfile.encode()","java.lang.String.getBytes(java.nio.charset.Charset)"
"com.android.internal.net.VpnProfile.encode()","java.lang.StringBuilder.append(int)"
"com.android.internal.net.VpnProfile.encode()","java.lang.StringBuilder.append(boolean)"
"com.android.internal.net.VpnProfile.encode()","java.lang.StringBuilder.append(java.lang.String)"
"com.android.internal.net.VpnProfile.encode()","java.lang.StringBuilder.toString()"
"com.android.internal.net.VpnProfile.encode()","java.lang.StringBuilder.append(char)"
"com.android.internal.net.VpnProfile.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"com.android.internal.net.VpnProfile.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.AsyncQueryHandler.startUpdate(int, Object, Uri, ContentValues, String, String[])","android.os.Handler.sendMessage(android.os.Message)"
"android.content.AsyncQueryHandler.startUpdate(int, Object, Uri, ContentValues, String, String[])","android.os.Handler.obtainMessage(int)"
"android.content.AsyncQueryHandler.cancelOperation(int)","android.os.Handler.removeMessages(int)"
"android.content.AsyncQueryHandler.startQuery(int, Object, Uri, String[], String, String[], String)","android.os.Handler.sendMessage(android.os.Message)"
"android.content.AsyncQueryHandler.startQuery(int, Object, Uri, String[], String, String[], String)","android.os.Handler.obtainMessage(int)"
"android.content.AsyncQueryHandler.startInsert(int, Object, Uri, ContentValues)","android.os.Handler.sendMessage(android.os.Message)"
"android.content.AsyncQueryHandler.startInsert(int, Object, Uri, ContentValues)","android.os.Handler.obtainMessage(int)"
"android.content.AsyncQueryHandler.handleMessage(Message)","android.content.AsyncQueryHandler.onUpdateComplete(int, java.lang.Object, java.lang.Integer)"
"android.content.AsyncQueryHandler.handleMessage(Message)","android.content.AsyncQueryHandler.onInsertComplete(int, java.lang.Object, android.net.Uri)"
"android.content.AsyncQueryHandler.handleMessage(Message)","android.content.AsyncQueryHandler.onDeleteComplete(int, java.lang.Object, java.lang.Integer)"
"android.content.AsyncQueryHandler.handleMessage(Message)","android.content.AsyncQueryHandler.onQueryComplete(int, java.lang.Object, android.database.Cursor)"
"android.content.AsyncQueryHandler.startDelete(int, Object, Uri, String, String[])","android.os.Handler.sendMessage(android.os.Message)"
"android.content.AsyncQueryHandler.startDelete(int, Object, Uri, String, String[])","android.os.Handler.obtainMessage(int)"
"android.hardware.camera2.CaptureRequest.hashCode()","android.hardware.camera2.utils.HashCodeHelpers.hashCode(android.hardware.camera2.impl.CameraMetadataNative, java.util.HashSet<android.view.Surface>, java.lang.Object)"
"android.hardware.camera2.CaptureRequest.getTargets()","java.util.Collections.unmodifiableCollection(java.util.HashSet<android.view.Surface>)"
"android.hardware.camera2.CaptureRequest.getKeys()","android.hardware.camera2.CameraMetadata.getKeys()"
"android.hardware.camera2.CaptureRequest.equals(CaptureRequest)","java.util.Objects.equals(java.lang.Object, java.lang.Object)"
"android.hardware.camera2.CaptureRequest.equals(CaptureRequest)","java.lang.Object.equals(android.hardware.camera2.impl.CameraMetadataNative)"
"android.hardware.camera2.CaptureRequest.equals(CaptureRequest)","java.util.AbstractSet.equals(java.util.HashSet<android.view.Surface>)"
"android.hardware.camera2.CaptureRequest.set(Key, T)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureRequest.Key<T>, T)"
"android.hardware.camera2.CaptureRequest.createFromParcel(Parcel)","android.hardware.camera2.CaptureRequest.readFromParcel(android.os.Parcel)"
"android.hardware.camera2.CaptureRequest.removeTarget(Surface)","java.util.HashSet.remove(android.view.Surface)"
"android.hardware.camera2.CaptureRequest.containsTarget(Surface)","java.util.HashSet.contains(android.view.Surface)"
"android.hardware.camera2.CaptureRequest.getName()","android.hardware.camera2.impl.CameraMetadataNative.Key.getName()"
"android.hardware.camera2.CaptureRequest.getProtected(Key)","android.hardware.camera2.impl.CameraMetadataNative.get(android.hardware.camera2.CaptureRequest.Key<?>)"
"android.hardware.camera2.CaptureRequest.get(Key)","android.hardware.camera2.impl.CameraMetadataNative.get(android.hardware.camera2.CaptureRequest.Key<T>)"
"android.hardware.camera2.CaptureRequest.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelableArray(android.view.Surface[], int)"
"android.hardware.camera2.CaptureRequest.writeToParcel(Parcel, int)","java.util.HashSet.size()"
"android.hardware.camera2.CaptureRequest.writeToParcel(Parcel, int)","java.util.AbstractCollection.toArray(android.view.Surface[])"
"android.hardware.camera2.CaptureRequest.writeToParcel(Parcel, int)","android.hardware.camera2.impl.CameraMetadataNative.writeToParcel(android.os.Parcel, int)"
"android.hardware.camera2.CaptureRequest.addTarget(Surface)","java.util.HashSet.add(android.view.Surface)"
"android.hardware.camera2.CaptureRequest.readFromParcel(Parcel)","android.hardware.camera2.impl.CameraMetadataNative.readFromParcel(android.os.Parcel)"
"android.hardware.camera2.CaptureRequest.readFromParcel(Parcel)","java.util.HashSet.add(android.view.Surface)"
"android.hardware.camera2.CaptureRequest.readFromParcel(Parcel)","android.os.Parcel.readParcelableArray(java.lang.ClassLoader)"
"android.hardware.camera2.CaptureRequest.readFromParcel(Parcel)","java.lang.Class.getClassLoader()"
"android.hardware.camera2.CaptureRequest.readFromParcel(Parcel)","java.util.HashSet.clear()"
"android.hardware.camera2.CaptureRequest.equals(Object)","android.hardware.camera2.CaptureRequest.equals(android.hardware.camera2.CaptureRequest)"
"android.hardware.camera2.CaptureRequest.isEmpty()","android.hardware.camera2.impl.CameraMetadataNative.isEmpty()"
"android.inputmethodservice.KeyboardView.swipeUp()","android.inputmethodservice.KeyboardView.OnKeyboardActionListener.swipeUp()"
"android.inputmethodservice.KeyboardView.showKey(int)","android.widget.PopupWindow.update(int, int, int, int)"
"android.inputmethodservice.KeyboardView.showKey(int)","android.os.Handler.removeMessages(int)"
"android.inputmethodservice.KeyboardView.showKey(int)","android.widget.PopupWindow.setWidth(int)"
"android.inputmethodservice.KeyboardView.showKey(int)","android.widget.PopupWindow.setHeight(int)"
"android.inputmethodservice.KeyboardView.showKey(int)","android.widget.PopupWindow.isShowing()"
"android.inputmethodservice.KeyboardView.showKey(int)","java.lang.CharSequence.length()"
"android.inputmethodservice.KeyboardView.isShifted()","android.inputmethodservice.Keyboard.isShifted()"
"android.inputmethodservice.KeyboardView.computeProximityThreshold(Keyboard)","java.lang.Math.min(int, int)"
"android.inputmethodservice.KeyboardView.swipeDown()","android.inputmethodservice.KeyboardView.OnKeyboardActionListener.swipeDown()"
"android.inputmethodservice.KeyboardView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getY()"
"android.inputmethodservice.KeyboardView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getMetaState()"
"android.inputmethodservice.KeyboardView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getPointerCount()"
"android.inputmethodservice.KeyboardView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getEventTime()"
"android.inputmethodservice.KeyboardView.onTouchEvent(MotionEvent)","android.view.MotionEvent.recycle()"
"android.inputmethodservice.KeyboardView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.inputmethodservice.KeyboardView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getX()"
"android.inputmethodservice.KeyboardView.onTouchEvent(MotionEvent)","android.view.MotionEvent.obtain(long, long, int, float, float, int)"
"android.inputmethodservice.KeyboardView.computeCurrentVelocity(int)","android.inputmethodservice.KeyboardView.SwipeTracker.computeCurrentVelocity(int, float)"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.view.MotionEvent.getY()"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.os.Handler.removeMessages(int)"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.os.Handler.obtainMessage(int, android.view.MotionEvent)"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.view.MotionEvent.getEventTime()"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.view.MotionEvent.getX()"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.os.Handler.obtainMessage(int)"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.inputmethodservice.KeyboardView.OnKeyboardActionListener.onPress(int)"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.view.MotionEvent.getAction()"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.inputmethodservice.KeyboardView.SwipeTracker.clear()"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","java.util.Arrays.fill(int[], int)"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.inputmethodservice.KeyboardView.SwipeTracker.addMovement(android.view.MotionEvent)"
"android.inputmethodservice.KeyboardView.onModifiedTouchEvent(MotionEvent, boolean)","android.view.GestureDetector.onTouchEvent(android.view.MotionEvent)"
"android.inputmethodservice.KeyboardView.dismissPopupKeyboard()","android.widget.PopupWindow.dismiss()"
"android.inputmethodservice.KeyboardView.dismissPopupKeyboard()","android.widget.PopupWindow.isShowing()"
"android.inputmethodservice.KeyboardView.getPreviewText(Key)","java.lang.AbstractStringBuilder.setLength(int)"
"android.inputmethodservice.KeyboardView.getPreviewText(Key)","java.lang.StringBuilder.append(char)"
"android.inputmethodservice.KeyboardView.onSizeChanged(int, int, int, int)","android.view.View.onSizeChanged(int, int, int, int)"
"android.inputmethodservice.KeyboardView.onSizeChanged(int, int, int, int)","android.inputmethodservice.Keyboard.resize(int, int)"
"android.inputmethodservice.KeyboardView.adjustCase(CharSequence)","java.lang.CharSequence.charAt(int)"
"android.inputmethodservice.KeyboardView.adjustCase(CharSequence)","java.lang.Character.isLowerCase(char)"
"android.inputmethodservice.KeyboardView.adjustCase(CharSequence)","java.lang.String.toUpperCase()"
"android.inputmethodservice.KeyboardView.adjustCase(CharSequence)","java.lang.CharSequence.toString()"
"android.inputmethodservice.KeyboardView.adjustCase(CharSequence)","android.inputmethodservice.Keyboard.isShifted()"
"android.inputmethodservice.KeyboardView.adjustCase(CharSequence)","java.lang.CharSequence.length()"
"android.inputmethodservice.KeyboardView.sendAccessibilityEventForUnicodeCharacter(int, int)","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.inputmethodservice.KeyboardView.sendAccessibilityEventForUnicodeCharacter(int, int)","android.provider.Settings.Secure.getIntForUser(android.content.ContentResolver, java.lang.String, int, int)"
"android.inputmethodservice.KeyboardView.sendAccessibilityEventForUnicodeCharacter(int, int)","java.util.List.add(java.lang.String)"
"android.inputmethodservice.KeyboardView.sendAccessibilityEventForUnicodeCharacter(int, int)","android.content.Context.getContentResolver()"
"android.inputmethodservice.KeyboardView.sendAccessibilityEventForUnicodeCharacter(int, int)","android.view.accessibility.AccessibilityEvent.obtain(int)"
"android.inputmethodservice.KeyboardView.sendAccessibilityEventForUnicodeCharacter(int, int)","android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.inputmethodservice.KeyboardView.sendAccessibilityEventForUnicodeCharacter(int, int)","java.lang.String.valueOf(char)"
"android.inputmethodservice.KeyboardView.sendAccessibilityEventForUnicodeCharacter(int, int)","android.view.accessibility.AccessibilityRecord.getText()"
"android.inputmethodservice.KeyboardView.computeCurrentVelocity(int, float)","java.lang.Math.max(float, float)"
"android.inputmethodservice.KeyboardView.computeCurrentVelocity(int, float)","java.lang.Math.min(float, float)"
"android.inputmethodservice.KeyboardView.setShifted(boolean)","android.inputmethodservice.Keyboard.setShifted(boolean)"
"android.inputmethodservice.KeyboardView.onHoverEvent(MotionEvent)","android.view.accessibility.AccessibilityManager.isTouchExplorationEnabled()"
"android.inputmethodservice.KeyboardView.onHoverEvent(MotionEvent)","android.view.MotionEvent.getPointerCount()"
"android.inputmethodservice.KeyboardView.onHoverEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.inputmethodservice.KeyboardView.onHoverEvent(MotionEvent)","android.view.MotionEvent.setAction(int)"
"android.inputmethodservice.KeyboardView.initGestureDetector()","android.view.MotionEvent.getY()"
"android.inputmethodservice.KeyboardView.initGestureDetector()","android.inputmethodservice.KeyboardView.SwipeTracker.getXVelocity()"
"android.inputmethodservice.KeyboardView.initGestureDetector()","android.inputmethodservice.KeyboardView.SwipeTracker.getYVelocity()"
"android.inputmethodservice.KeyboardView.initGestureDetector()","android.inputmethodservice.KeyboardView.SwipeTracker.computeCurrentVelocity(int)"
"android.inputmethodservice.KeyboardView.initGestureDetector()","java.lang.Math.abs(float)"
"android.inputmethodservice.KeyboardView.initGestureDetector()","android.view.GestureDetector.setIsLongpressEnabled(boolean)"
"android.inputmethodservice.KeyboardView.initGestureDetector()","android.view.MotionEvent.getX()"
"android.inputmethodservice.KeyboardView.handleBack()","android.widget.PopupWindow.isShowing()"
"android.inputmethodservice.KeyboardView.removeMessages()","android.os.Handler.removeMessages(int)"
"android.inputmethodservice.KeyboardView.onLongPress(Key)","java.util.Map.get(android.inputmethodservice.Keyboard.Key)"
"android.inputmethodservice.KeyboardView.onLongPress(Key)","java.util.Map.put(android.inputmethodservice.Keyboard.Key, android.view.View)"
"android.inputmethodservice.KeyboardView.onLongPress(Key)","android.view.View.getPaddingBottom()"
"android.inputmethodservice.KeyboardView.onLongPress(Key)","android.view.View.getMeasuredWidth()"
"android.inputmethodservice.KeyboardView.onLongPress(Key)","android.widget.PopupWindow.setWidth(int)"
"android.inputmethodservice.KeyboardView.onLongPress(Key)","android.widget.PopupWindow.setHeight(int)"
"android.inputmethodservice.KeyboardView.onLongPress(Key)","android.view.View.getPaddingRight()"
"android.inputmethodservice.KeyboardView.onLongPress(Key)","android.view.View.getMeasuredHeight()"
"android.inputmethodservice.KeyboardView.onLongPress(Key)","android.widget.PopupWindow.setContentView(android.view.View)"
"android.inputmethodservice.KeyboardView.handleMessage(Message)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.inputmethodservice.KeyboardView.handleMessage(Message)","android.os.Message.obtain(android.inputmethodservice.KeyboardView.Anonymous-5d143e27-9561-46f0-856b-804d7b200782, int)"
"android.inputmethodservice.KeyboardView.setKeyboard(Keyboard)","android.inputmethodservice.Keyboard.getKeys()"
"android.inputmethodservice.KeyboardView.setKeyboard(Keyboard)","java.util.List.size()"
"android.inputmethodservice.KeyboardView.setKeyboard(Keyboard)","java.util.List.toArray(android.inputmethodservice.Keyboard.Key[])"
"android.inputmethodservice.KeyboardView.setKeyboard(Keyboard)","java.util.Map.clear()"
"android.inputmethodservice.KeyboardView.onDetachedFromWindow()","android.view.View.onDetachedFromWindow()"
"android.inputmethodservice.KeyboardView.showPreview(int)","android.inputmethodservice.Keyboard.Key.onReleased(boolean)"
"android.inputmethodservice.KeyboardView.showPreview(int)","android.os.Handler.removeMessages(int)"
"android.inputmethodservice.KeyboardView.showPreview(int)","android.inputmethodservice.Keyboard.Key.onPressed()"
"android.inputmethodservice.KeyboardView.showPreview(int)","android.os.Handler.obtainMessage(int, int, int)"
"android.inputmethodservice.KeyboardView.showPreview(int)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.inputmethodservice.KeyboardView.showPreview(int)","android.widget.PopupWindow.isShowing()"
"android.inputmethodservice.KeyboardView.showPreview(int)","android.os.Handler.obtainMessage(int)"
"android.inputmethodservice.KeyboardView.addMovement(MotionEvent)","android.view.MotionEvent.getHistorySize()"
"android.inputmethodservice.KeyboardView.addMovement(MotionEvent)","android.view.MotionEvent.getY()"
"android.inputmethodservice.KeyboardView.addMovement(MotionEvent)","android.view.MotionEvent.getHistoricalX(int)"
"android.inputmethodservice.KeyboardView.addMovement(MotionEvent)","android.view.MotionEvent.getEventTime()"
"android.inputmethodservice.KeyboardView.addMovement(MotionEvent)","android.inputmethodservice.KeyboardView.SwipeTracker.addPoint(float, float, long)"
"android.inputmethodservice.KeyboardView.addMovement(MotionEvent)","android.view.MotionEvent.getHistoricalEventTime(int)"
"android.inputmethodservice.KeyboardView.addMovement(MotionEvent)","android.view.MotionEvent.getX()"
"android.inputmethodservice.KeyboardView.addMovement(MotionEvent)","android.view.MotionEvent.getHistoricalY(int)"
"android.inputmethodservice.KeyboardView.setPopupOffset(int, int)","android.widget.PopupWindow.dismiss()"
"android.inputmethodservice.KeyboardView.setPopupOffset(int, int)","android.widget.PopupWindow.isShowing()"
"android.inputmethodservice.KeyboardView.onBufferDraw()","android.inputmethodservice.Keyboard.Key.getCurrentDrawableState()"
"android.inputmethodservice.KeyboardView.onBufferDraw()","java.lang.String.length()"
"android.inputmethodservice.KeyboardView.swipeRight()","android.inputmethodservice.KeyboardView.OnKeyboardActionListener.swipeRight()"
"android.inputmethodservice.KeyboardView.onMeasure(int, int)","android.inputmethodservice.Keyboard.getMinWidth()"
"android.inputmethodservice.KeyboardView.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.inputmethodservice.KeyboardView.addPoint(float, float, long)","java.lang.System.arraycopy(float[], int, float[], int, int)"
"android.inputmethodservice.KeyboardView.addPoint(float, float, long)","java.lang.System.arraycopy(long[], int, long[], int, int)"
"android.inputmethodservice.KeyboardView.closing()","android.widget.PopupWindow.dismiss()"
"android.inputmethodservice.KeyboardView.closing()","android.widget.PopupWindow.isShowing()"
"android.inputmethodservice.KeyboardView.closing()","java.util.Map.clear()"
"android.inputmethodservice.KeyboardView.getKeyIndices(int, int, int[])","android.inputmethodservice.Keyboard.Key.isInside(int, int)"
"android.inputmethodservice.KeyboardView.getKeyIndices(int, int, int[])","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.inputmethodservice.KeyboardView.getKeyIndices(int, int, int[])","android.inputmethodservice.Keyboard.Key.squaredDistanceFrom(int, int)"
"android.inputmethodservice.KeyboardView.getKeyIndices(int, int, int[])","android.inputmethodservice.Keyboard.getNearestKeys(int, int)"
"android.inputmethodservice.KeyboardView.getKeyIndices(int, int, int[])","java.util.Arrays.fill(int[], int)"
"android.inputmethodservice.KeyboardView.detectAndSendKey(int, int, int, long)","android.inputmethodservice.KeyboardView.OnKeyboardActionListener.onKey(int, int[])"
"android.inputmethodservice.KeyboardView.detectAndSendKey(int, int, int, long)","android.inputmethodservice.KeyboardView.OnKeyboardActionListener.onText(java.lang.CharSequence)"
"android.inputmethodservice.KeyboardView.detectAndSendKey(int, int, int, long)","java.util.Arrays.fill(int[], int)"
"android.inputmethodservice.KeyboardView.detectAndSendKey(int, int, int, long)","android.inputmethodservice.KeyboardView.OnKeyboardActionListener.onRelease(int)"
"android.inputmethodservice.KeyboardView.swipeLeft()","android.inputmethodservice.KeyboardView.OnKeyboardActionListener.swipeLeft()"
"android.os.DropBoxManager.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.os.DropBoxManager.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.os.DropBoxManager.writeToParcel(Parcel, int)","android.os.ParcelFileDescriptor.writeToParcel(android.os.Parcel, int)"
"android.os.DropBoxManager.writeToParcel(Parcel, int)","android.os.Parcel.writeByteArray(byte[])"
"android.os.DropBoxManager.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.os.DropBoxManager.addFile(String, File, int)","android.os.DropBoxManager.Entry.close()"
"android.os.DropBoxManager.createFromParcel(Parcel)","android.os.Parcel.createByteArray()"
"android.os.DropBoxManager.createFromParcel(Parcel)","android.os.Parcel.readFileDescriptor()"
"android.os.DropBoxManager.createFromParcel(Parcel)","android.os.Parcel.readLong()"
"android.os.DropBoxManager.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.os.DropBoxManager.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.os.DropBoxManager.close()","android.os.ParcelFileDescriptor.close()"
"android.os.DropBoxManager.getText(int)","java.io.InputStream.close()"
"android.os.DropBoxManager.getText(int)","android.os.DropBoxManager.Entry.getInputStream()"
"android.os.DropBoxManager.getText(int)","java.io.InputStream.read(byte[], int, int)"
"android.os.DropBoxManager.getText(int)","java.lang.Math.min(int, int)"
"android.view.ViewRootImpl.findFocus(long, int, Region, int, IAccessibilityInteractionConnectionCallback, int, int, long, MagnificationSpec)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.requestLayoutDuringLayout(View)","java.util.ArrayList.add(android.view.View)"
"android.view.ViewRootImpl.requestLayoutDuringLayout(View)","java.util.ArrayList.contains(android.view.View)"
"android.view.ViewRootImpl.startFling(long, float, float)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.postFling(long)"
"android.view.ViewRootImpl.startFling(long, float, float)","java.lang.Math.abs(float)"
"android.view.ViewRootImpl.equals(Object)","java.lang.Object.getClass()"
"android.view.ViewRootImpl.equals(Object)","java.lang.Object.equals(java.lang.Runnable)"
"android.view.ViewRootImpl.isTypingKey(KeyEvent)","android.view.KeyEvent.getUnicodeChar()"
"android.view.ViewRootImpl.invokeFunctor(long, boolean)","android.view.ThreadedRenderer.invokeFunctor(long, boolean)"
"android.view.ViewRootImpl.handleMessage(Message)","android.os.Message.setAsynchronous(boolean)"
"android.view.ViewRootImpl.handleMessage(Message)","android.os.Handler.obtainMessage(int, android.view.KeyEvent)"
"android.view.ViewRootImpl.handleMessage(Message)","android.view.ViewConfiguration.getKeyRepeatDelay()"
"android.view.ViewRootImpl.handleMessage(Message)","android.os.SystemClock.uptimeMillis()"
"android.view.ViewRootImpl.handleMessage(Message)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.view.ViewRootImpl.handleMessage(Message)","android.view.KeyEvent.getRepeatCount()"
"android.view.ViewRootImpl.handleMessage(Message)","android.view.KeyEvent.changeTimeRepeat(android.view.KeyEvent, long, int)"
"android.view.ViewRootImpl.handleMessage(Message)","android.view.ViewRootImpl.enqueueInputEvent(android.view.KeyEvent)"
"android.view.ViewRootImpl.consumeAccumulatedMovement(long, int, float, int, int)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.sendKeyDownOrRepeat(long, int, int)"
"android.view.ViewRootImpl.dump(String, PrintWriter)","java.io.PrintWriter.println(int)"
"android.view.ViewRootImpl.dump(String, PrintWriter)","java.lang.Object.getClass()"
"android.view.ViewRootImpl.dump(String, PrintWriter)","android.view.ViewRootImpl.InputStage.dump(java.lang.String, java.io.PrintWriter)"
"android.view.ViewRootImpl.dump(String, PrintWriter)","java.lang.Class.getName()"
"android.view.ViewRootImpl.dump(String, PrintWriter)","java.io.PrintWriter.print(java.lang.String)"
"android.view.ViewRootImpl.toString()","android.view.ViewRootImpl.QueuedInputEvent.flagToString(java.lang.String, int, boolean, java.lang.StringBuilder)"
"android.view.ViewRootImpl.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.view.ViewRootImpl.toString()","java.lang.StringBuilder.toString()"
"android.view.ViewRootImpl.processPointerEvent(QueuedInputEvent)","android.view.View.dispatchPointerEvent(android.view.MotionEvent)"
"android.view.ViewRootImpl.processPointerEvent(QueuedInputEvent)","android.view.ViewRootImpl.scheduleConsumeBatchedInputImmediately()"
"android.view.ViewRootImpl.getAudioManager()","android.view.View.getContext()"
"android.view.ViewRootImpl.getAudioManager()","android.content.Context.getSystemService(java.lang.String)"
"android.view.ViewRootImpl.isViewDescendantOf(View, View)","android.view.ViewRootImpl.isViewDescendantOf(android.view.View, android.view.View)"
"android.view.ViewRootImpl.isViewDescendantOf(View, View)","android.view.View.getParent()"
"android.view.ViewRootImpl.defer(QueuedInputEvent)","android.view.ViewRootImpl.AsyncInputStage.enqueue(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.addView(View)","java.util.ArrayList.add(android.view.View)"
"android.view.ViewRootImpl.addView(View)","android.view.ViewRootImpl.InvalidateOnAnimationRunnable.postIfNeededLocked()"
"android.view.ViewRootImpl.collectViewAttributes()","android.view.ViewRootImpl.getImpliedSystemUiVisibility(android.view.WindowManager.LayoutParams)"
"android.view.ViewRootImpl.collectViewAttributes()","android.view.View.dispatchCollectViewAttributes(android.view.View.AttachInfo, int)"
"android.view.ViewRootImpl.collectViewAttributes()","android.view.ViewRootImpl.applyKeepScreenOnFlag(android.view.WindowManager.LayoutParams)"
"android.view.ViewRootImpl.collectViewAttributes()","android.view.View.dispatchWindowSystemUiVisiblityChanged(int)"
"android.view.ViewRootImpl.generate()","java.lang.Math.abs(float)"
"android.view.ViewRootImpl.onHighTextContrastStateChanged(boolean)","android.view.ViewRootImpl.destroyHardwareResources()"
"android.view.ViewRootImpl.measureHierarchy(View, WindowManager.LayoutParams, Resources, int, int)","java.io.PrintStream.println(java.lang.String)"
"android.view.ViewRootImpl.measureHierarchy(View, WindowManager.LayoutParams, Resources, int, int)","android.util.TypedValue.getDimension(android.util.DisplayMetrics)"
"android.view.ViewRootImpl.measureHierarchy(View, WindowManager.LayoutParams, Resources, int, int)","android.view.ViewRootImpl.getRootMeasureSpec(int, int)"
"android.view.ViewRootImpl.measureHierarchy(View, WindowManager.LayoutParams, Resources, int, int)","android.view.View.getMeasuredWidth()"
"android.view.ViewRootImpl.measureHierarchy(View, WindowManager.LayoutParams, Resources, int, int)","android.view.View.debug()"
"android.view.ViewRootImpl.measureHierarchy(View, WindowManager.LayoutParams, Resources, int, int)","android.view.View.getMeasuredHeight()"
"android.view.ViewRootImpl.measureHierarchy(View, WindowManager.LayoutParams, Resources, int, int)","android.view.View.getMeasuredWidthAndState()"
"android.view.ViewRootImpl.measureHierarchy(View, WindowManager.LayoutParams, Resources, int, int)","android.content.res.Resources.getDisplayMetrics()"
"android.view.ViewRootImpl.measureHierarchy(View, WindowManager.LayoutParams, Resources, int, int)","android.view.ViewRootImpl.performMeasure(int, int)"
"android.view.ViewRootImpl.dumpGfxInfo(int[])","android.view.ViewRootImpl.getGfxInfo(android.view.View, int[])"
"android.view.ViewRootImpl.onInputEvent(InputEvent)","android.view.ViewRootImpl.enqueueInputEvent(android.view.InputEvent, android.view.ViewRootImpl.WindowInputEventReceiver, int, boolean)"
"android.view.ViewRootImpl.detachFunctor(long)","android.view.HardwareRenderer.stopDrawing()"
"android.view.ViewRootImpl.onDisplayChanged(int)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.onDisplayChanged(int)","android.view.Display.getState()"
"android.view.ViewRootImpl.onDisplayChanged(int)","android.view.Display.getDisplayId()"
"android.view.ViewRootImpl.onDisplayChanged(int)","android.view.View.dispatchScreenStateChanged(int)"
"android.view.ViewRootImpl.onDisplayChanged(int)","android.view.ViewRootImpl.Anonymous-1c00420b-bf24-4aac-af50-c09199648679.toViewScreenState(int)"
"android.view.ViewRootImpl.onDisplayChanged(int)","android.view.ViewRootImpl.Anonymous-174867e0-021a-4ad4-aa63-d488a4907def.toViewScreenState(int)"
"android.view.ViewRootImpl.performAccessibilityAction(long, int, Bundle, int, IAccessibilityInteractionConnectionCallback, int, int, long)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.shouldSkipIme()","android.view.InputEvent.isFromSource(int)"
"android.view.ViewRootImpl.die(boolean)","android.view.ViewRootImpl.doDie()"
"android.view.ViewRootImpl.die(boolean)","android.view.ViewRootImpl.destroyHardwareRenderer()"
"android.view.ViewRootImpl.die(boolean)","android.os.Handler.sendEmptyMessage(int)"
"android.view.ViewRootImpl.addConfigCallback(ComponentCallbacks)","java.util.ArrayList.add(android.content.ComponentCallbacks)"
"android.view.ViewRootImpl.scrollToRectOrFocus(Rect, boolean)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.scrollToRectOrFocus(Rect, boolean)","android.view.View.getHeight()"
"android.view.ViewRootImpl.scrollToRectOrFocus(Rect, boolean)","android.view.View.getContext()"
"android.view.ViewRootImpl.scrollToRectOrFocus(Rect, boolean)","android.widget.Scroller.abortAnimation()"
"android.view.ViewRootImpl.scrollToRectOrFocus(Rect, boolean)","android.widget.Scroller.startScroll(int, int, int, int)"
"android.view.ViewRootImpl.scrollToRectOrFocus(Rect, boolean)","android.view.View.findFocus()"
"android.view.ViewRootImpl.finishTracking(long)","android.view.VelocityTracker.recycle()"
"android.view.ViewRootImpl.focusSearch(View, int)","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.hashCode()","java.lang.Object.hashCode()"
"android.view.ViewRootImpl.processTrackballEvent(QueuedInputEvent)","android.view.View.dispatchTrackballEvent(android.view.MotionEvent)"
"android.view.ViewRootImpl.setLayoutParams(WindowManager.LayoutParams, boolean)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.setLayoutParams(WindowManager.LayoutParams, boolean)","android.view.ViewRootImpl.applyKeepScreenOnFlag(android.view.WindowManager.LayoutParams)"
"android.view.ViewRootImpl.setLayoutParams(WindowManager.LayoutParams, boolean)","android.view.ViewRootImpl.requestLayout()"
"android.view.ViewRootImpl.dispatchInvalidateRectOnAnimation(AttachInfo.InvalidateInfo)","android.view.ViewRootImpl.InvalidateOnAnimationRunnable.addViewRect(android.view.View.AttachInfo.InvalidateInfo)"
"android.view.ViewRootImpl.getMessageName(Message)","android.os.Handler.getMessageName(android.os.Message)"
"android.view.ViewRootImpl.checkForLeavingTouchModeAndConsume(KeyEvent)","android.view.ViewRootImpl.isTypingKey(android.view.KeyEvent)"
"android.view.ViewRootImpl.checkForLeavingTouchModeAndConsume(KeyEvent)","android.view.ViewRootImpl.ensureTouchMode(boolean)"
"android.view.ViewRootImpl.checkForLeavingTouchModeAndConsume(KeyEvent)","android.view.ViewRootImpl.isNavigationKey(android.view.KeyEvent)"
"android.view.ViewRootImpl.checkForLeavingTouchModeAndConsume(KeyEvent)","android.view.KeyEvent.getFlags()"
"android.view.ViewRootImpl.checkForLeavingTouchModeAndConsume(KeyEvent)","android.view.KeyEvent.getAction()"
"android.view.ViewRootImpl.checkThread()","java.lang.Thread.currentThread()"
"android.view.ViewRootImpl.postSendWindowContentChangedCallback(View, int)","android.view.ViewRootImpl.SendWindowContentChangedAccessibilityEvent.runOrPost(android.view.View, int)"
"android.view.ViewRootImpl.requestFitSystemWindows()","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.requestFitSystemWindows()","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.enqueueInputEvent(InputEvent, InputEventReceiver, int, boolean)","android.view.ViewRootImpl.obtainQueuedInputEvent(android.view.InputEvent, android.view.InputEventReceiver, int)"
"android.view.ViewRootImpl.enqueueInputEvent(InputEvent, InputEventReceiver, int, boolean)","android.view.ViewRootImpl.doProcessInputEvents()"
"android.view.ViewRootImpl.enqueueInputEvent(InputEvent, InputEventReceiver, int, boolean)","android.view.ViewRootImpl.scheduleProcessInputEvents()"
"android.view.ViewRootImpl.enqueueInputEvent(InputEvent, InputEventReceiver, int, boolean)","android.os.Trace.traceCounter(long, java.lang.String, int)"
"android.view.ViewRootImpl.consumeAccumulatedMovement(long, int)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.consumeAccumulatedMovement(long, int, float, int, int)"
"android.view.ViewRootImpl.consumeAccumulatedMovement(long, int)","java.lang.Math.abs(float)"
"android.view.ViewRootImpl.postDelayed(Runnable, long)","java.util.ArrayList.add(android.view.ViewRootImpl.RunQueue.HandlerAction)"
"android.view.ViewRootImpl.resized(Rect, Rect, Rect, Rect, Rect, boolean, Configuration)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.checkCallingPermission(String)","android.os.Binder.getCallingPid()"
"android.view.ViewRootImpl.checkCallingPermission(String)","android.os.Binder.getCallingUid()"
"android.view.ViewRootImpl.checkCallingPermission(String)","android.app.IActivityManager.checkPermission(java.lang.String, int, int)"
"android.view.ViewRootImpl.checkCallingPermission(String)","android.app.ActivityManagerNative.getDefault()"
"android.view.ViewRootImpl.scheduleConsumeBatchedInput()","android.view.Choreographer.postCallback(int, android.view.ViewRootImpl.ConsumeBatchedInputRunnable, null)"
"android.view.ViewRootImpl.doneAnimating()","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.doneAnimating()","android.view.ViewRootImpl.dispatchDoneAnimating()"
"android.view.ViewRootImpl.flagToString(String, int, boolean, StringBuilder)","java.lang.StringBuilder.append(java.lang.String)"
"android.view.ViewRootImpl.collect(float, long, String)","java.lang.Math.abs(float)"
"android.view.ViewRootImpl.deliver(QueuedInputEvent)","android.view.ViewRootImpl.InputStage.forward(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.deliver(QueuedInputEvent)","android.view.ViewRootImpl.InputStage.shouldDropInputEvent(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.deliver(QueuedInputEvent)","android.view.ViewRootImpl.InputStage.apply(android.view.ViewRootImpl.QueuedInputEvent, int)"
"android.view.ViewRootImpl.deliver(QueuedInputEvent)","android.view.ViewRootImpl.InputStage.onProcess(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.deliver(QueuedInputEvent)","android.view.ViewRootImpl.InputStage.finish(android.view.ViewRootImpl.QueuedInputEvent, boolean)"
"android.view.ViewRootImpl.sendKeyUp(long)","android.view.ViewRootImpl.enqueueInputEvent(android.view.KeyEvent)"
"android.view.ViewRootImpl.cancel(MotionEvent)","android.view.MotionEvent.getSource()"
"android.view.ViewRootImpl.cancel(MotionEvent)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.finishKeys(long)"
"android.view.ViewRootImpl.cancel(MotionEvent)","android.view.MotionEvent.getDeviceId()"
"android.view.ViewRootImpl.cancel(MotionEvent)","android.view.MotionEvent.getEventTime()"
"android.view.ViewRootImpl.cancel(MotionEvent)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.finishTracking(long)"
"android.view.ViewRootImpl.moved(int, int)","android.view.ViewRootImpl.dispatchMoved(int, int)"
"android.view.ViewRootImpl.moved(int, int)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.registerAnimatingRenderNode(RenderNode)","android.view.HardwareRenderer.registerAnimatingRenderNode(android.view.RenderNode)"
"android.view.ViewRootImpl.registerAnimatingRenderNode(RenderNode)","java.util.List.add(android.view.RenderNode)"
"android.view.ViewRootImpl.dispatchDragEvent(DragEvent)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.dispatchDragEvent(DragEvent)","android.view.ViewRootImpl.dispatchDragEvent(android.view.DragEvent)"
"android.view.ViewRootImpl.requestUpdateConfiguration(Configuration)","android.os.Handler.sendMessage(android.os.Message)"
"android.view.ViewRootImpl.requestUpdateConfiguration(Configuration)","android.os.Handler.obtainMessage(int, android.content.res.Configuration)"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(int)"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(java.lang.String)"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(int)"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println()"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","android.view.ViewRootImpl.InputStage.dump(java.lang.String, java.io.PrintWriter)"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","android.view.Choreographer.dump(java.lang.String, java.io.PrintWriter)"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","android.view.ViewRootImpl.dumpViewHierarchy(java.lang.String, java.io.PrintWriter, android.view.View)"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(boolean)"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(boolean)"
"android.view.ViewRootImpl.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.view.ViewRootImpl.performMeasure(int, int)","android.os.Trace.traceBegin(long, java.lang.String)"
"android.view.ViewRootImpl.performMeasure(int, int)","android.view.View.measure(int, int)"
"android.view.ViewRootImpl.performMeasure(int, int)","android.os.Trace.traceEnd(long)"
"android.view.ViewRootImpl.handleDispatchSystemUiVisibilityChanged(SystemUiVisibilityInfo)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.handleDispatchSystemUiVisibilityChanged(SystemUiVisibilityInfo)","android.view.View.dispatchSystemUiVisibilityChanged(int)"
"android.view.ViewRootImpl.handleDispatchSystemUiVisibilityChanged(SystemUiVisibilityInfo)","android.view.View.updateLocalSystemUiVisibility(int, int)"
"android.view.ViewRootImpl.clearChildFocus(View)","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.clearChildFocus(View)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.runOrPost(View, int)","android.view.View.postDelayed(android.view.ViewRootImpl.SendWindowContentChangedAccessibilityEvent, long)"
"android.view.ViewRootImpl.runOrPost(View, int)","android.view.View.removeCallbacks(android.view.ViewRootImpl.SendWindowContentChangedAccessibilityEvent)"
"android.view.ViewRootImpl.runOrPost(View, int)","android.view.ViewRootImpl.getCommonPredecessor(android.view.View, android.view.View)"
"android.view.ViewRootImpl.runOrPost(View, int)","android.os.SystemClock.uptimeMillis()"
"android.view.ViewRootImpl.runOrPost(View, int)","android.view.ViewConfiguration.getSendRecurringAccessibilityEventsInterval()"
"android.view.ViewRootImpl.runOrPost(View, int)","android.view.ViewRootImpl.SendWindowContentChangedAccessibilityEvent.run()"
"android.view.ViewRootImpl.postFling(long)","android.os.Handler.postAtTime(java.lang.Runnable, long)"
"android.view.ViewRootImpl.dispatchApplyInsets(View)","android.view.View.dispatchApplyWindowInsets(android.view.WindowInsets)"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.content.res.Configuration.getLayoutDirection()"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.content.ComponentCallbacks.onConfigurationChanged(android.content.res.Configuration)"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.view.View.dispatchConfigurationChanged(android.content.res.Configuration)"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.content.res.CompatibilityInfo.applyToConfiguration(int, android.content.res.Configuration)"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.view.View.getResources()"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.content.res.Configuration.setTo(android.content.res.Configuration)"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.view.DisplayAdjustments.getCompatibilityInfo()"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","java.util.ArrayList.size()"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.view.View.setLayoutDirection(int)"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.content.res.CompatibilityInfo.equals(android.content.res.CompatibilityInfo)"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.content.res.Resources.getConfiguration()"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","android.content.res.Configuration.diff(android.content.res.Configuration)"
"android.view.ViewRootImpl.updateConfiguration(Configuration, boolean)","java.util.ArrayList.get(int)"
"android.view.ViewRootImpl.synthesizeInputEvent(InputEvent)","android.os.Handler.obtainMessage(int, android.view.InputEvent)"
"android.view.ViewRootImpl.synthesizeInputEvent(InputEvent)","android.os.Message.setAsynchronous(boolean)"
"android.view.ViewRootImpl.synthesizeInputEvent(InputEvent)","android.os.Handler.sendMessage(android.os.Message)"
"android.view.ViewRootImpl.shouldDropInputEvent(QueuedInputEvent)","android.view.InputEvent.cancel()"
"android.view.ViewRootImpl.shouldDropInputEvent(QueuedInputEvent)","android.view.ViewRootImpl.isTerminalInputEvent(android.view.InputEvent)"
"android.view.ViewRootImpl.shouldDropInputEvent(QueuedInputEvent)","android.view.InputEvent.isFromSource(int)"
"android.view.ViewRootImpl.setDrawDuringWindowsAnimating(boolean)","android.view.ViewRootImpl.handleDispatchDoneAnimating()"
"android.view.ViewRootImpl.changeCanvasOpacity(boolean)","android.view.HardwareRenderer.setOpaque(boolean)"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.accessibility.AccessibilityManager.removeHighTextContrastStateChangeListener(android.view.ViewRootImpl.HighContrastTextManager)"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.ViewRootImpl.unscheduleTraversals()"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.ViewRootImpl.WindowInputEventReceiver.dispose()"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.accessibility.AccessibilityManager.removeAccessibilityStateChangeListener(android.view.ViewRootImpl.AccessibilityInteractionConnectionManager)"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.ViewTreeObserver.dispatchOnWindowAttachedChange(boolean)"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.ViewRootImpl.setAccessibilityFocus(null, null)"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.ViewRootImpl.destroyHardwareRenderer()"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.ViewRootImpl.AccessibilityInteractionConnectionManager.ensureNoConnection()"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.ViewRootImpl.removeSendWindowContentChangedCallback()"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.hardware.display.DisplayManager.unregisterDisplayListener(android.hardware.display.DisplayManager.DisplayListener)"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.InputQueue.dispose()"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.InputChannel.dispose()"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.View.assignParent(null)"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.View.dispatchDetachedFromWindow()"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.InputQueue.Callback.onInputQueueDestroyed(android.view.InputQueue)"
"android.view.ViewRootImpl.dispatchDetachedFromWindow()","android.view.Surface.release()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getKeyCharacterMap()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getScanCode()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getEventTime()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getAction()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getDeviceId()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getDownTime()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getMetaState()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyCharacterMap.FallbackAction.recycle()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getFlags()"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.obtain(long, long, int, int, int, int, int, int, int, int, null)"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.ViewRootImpl.enqueueInputEvent(android.view.KeyEvent)"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyCharacterMap.getFallbackAction(int, int)"
"android.view.ViewRootImpl.process(KeyEvent)","android.view.KeyEvent.getSource()"
"android.view.ViewRootImpl.findAccessibilityNodeInfoByAccessibilityId(long, Region, int, IAccessibilityInteractionConnectionCallback, int, int, long, MagnificationSpec)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.draw(boolean)","android.view.ViewTreeObserver.dispatchOnScrollChanged()"
"android.view.ViewRootImpl.draw(boolean)","android.view.HardwareRenderer.invalidateRoot()"
"android.view.ViewRootImpl.draw(boolean)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.draw(boolean)","android.view.HardwareRenderer.draw(android.view.View, android.view.View.AttachInfo, android.view.ViewRootImpl)"
"android.view.ViewRootImpl.draw(boolean)","android.widget.Scroller.abortAnimation()"
"android.view.ViewRootImpl.draw(boolean)","android.widget.Scroller.computeScrollOffset()"
"android.view.ViewRootImpl.draw(boolean)","android.view.ViewRootImpl.handleOutOfResourcesException(android.view.Surface.OutOfResourcesException)"
"android.view.ViewRootImpl.draw(boolean)","android.widget.Scroller.getCurrY()"
"android.view.ViewRootImpl.draw(boolean)","android.view.Surface.isValid()"
"android.view.ViewRootImpl.draw(boolean)","android.view.ViewRootImpl.trackFPS()"
"android.view.ViewRootImpl.draw(boolean)","android.view.ViewRootImpl.disposeResizeBuffer()"
"android.view.ViewRootImpl.draw(boolean)","java.util.ArrayList.size()"
"android.view.ViewRootImpl.draw(boolean)","android.view.HardwareRenderer.isRequested()"
"android.view.ViewRootImpl.draw(boolean)","android.os.SystemClock.uptimeMillis()"
"android.view.ViewRootImpl.draw(boolean)","android.animation.TimeInterpolator.getInterpolation(float)"
"android.view.ViewRootImpl.draw(boolean)","com.android.internal.view.RootViewSurfaceTaker.onRootViewScrollYChanged(int)"
"android.view.ViewRootImpl.draw(boolean)","android.view.HardwareRenderer.isEnabled()"
"android.view.ViewRootImpl.draw(boolean)","android.os.Handler.post(java.lang.Runnable)"
"android.view.ViewRootImpl.draw(boolean)","android.view.ViewTreeObserver.dispatchOnDraw()"
"android.view.ViewRootImpl.draw(boolean)","java.util.ArrayList.get(int)"
"android.view.ViewRootImpl.scheduleConsumeBatchedInputImmediately()","android.os.Handler.post(android.view.ViewRootImpl.ConsumeBatchedInputImmediatelyRunnable)"
"android.view.ViewRootImpl.scheduleConsumeBatchedInputImmediately()","android.view.ViewRootImpl.unscheduleConsumeBatchedInput()"
"android.view.ViewRootImpl.addViewRect(AttachInfo.InvalidateInfo)","android.view.ViewRootImpl.InvalidateOnAnimationRunnable.postIfNeededLocked()"
"android.view.ViewRootImpl.addViewRect(AttachInfo.InvalidateInfo)","java.util.ArrayList.add(android.view.View.AttachInfo.InvalidateInfo)"
"android.view.ViewRootImpl.invalidate()","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.ViewRootImpl.InputStage.shouldDropInputEvent(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.FallbackEventHandler.dispatchKeyEvent(android.view.KeyEvent)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.KeyEvent.getRepeatCount()"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.KeyEvent.getKeyCode()"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.View.focusSearch(int)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.KeyEvent.getAction()"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.ViewRootImpl.focusSearch(null, int)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.View.findFocus()"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.View.dispatchKeyShortcutEvent(android.view.KeyEvent)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.SoundEffectConstants.getContantForFocusDirection(int)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.ViewRootImpl.playSoundEffect(int)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.ViewRootImpl.handleDispatchDoneAnimating()"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.View.dispatchUnhandledMove(android.view.View, int)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.View.dispatchKeyEvent(android.view.KeyEvent)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.KeyEvent.hasModifiers(int)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.KeyEvent.hasNoModifiers()"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.KeyEvent.isModifierKey(int)"
"android.view.ViewRootImpl.processKeyEvent(QueuedInputEvent)","android.view.KeyEvent.isCtrlPressed()"
"android.view.ViewRootImpl.dumpViewHierarchy(String, PrintWriter, View)","java.io.PrintWriter.println(java.lang.String)"
"android.view.ViewRootImpl.dumpViewHierarchy(String, PrintWriter, View)","android.view.View.toString()"
"android.view.ViewRootImpl.dumpViewHierarchy(String, PrintWriter, View)","java.io.PrintWriter.print(java.lang.String)"
"android.view.ViewRootImpl.notifyRendererOfFramePending()","android.view.HardwareRenderer.notifyFramePending()"
"android.view.ViewRootImpl.setKeepScreenOn(boolean)","com.android.internal.view.RootViewSurfaceTaker.setSurfaceKeepScreenOn(boolean)"
"android.view.ViewRootImpl.cancelInvalidate(View)","android.os.Handler.removeMessages(int, android.view.View)"
"android.view.ViewRootImpl.cancelInvalidate(View)","android.view.ViewRootImpl.InvalidateOnAnimationRunnable.removeView(android.view.View)"
"android.view.ViewRootImpl.onAccessibilityStateChanged(boolean)","android.view.View.sendAccessibilityEvent(int)"
"android.view.ViewRootImpl.onAccessibilityStateChanged(boolean)","android.os.Message.sendToTarget()"
"android.view.ViewRootImpl.onAccessibilityStateChanged(boolean)","android.view.ViewRootImpl.AccessibilityInteractionConnectionManager.ensureConnection()"
"android.view.ViewRootImpl.onAccessibilityStateChanged(boolean)","android.view.View.findFocus()"
"android.view.ViewRootImpl.onAccessibilityStateChanged(boolean)","android.view.ViewRootImpl.AccessibilityInteractionConnectionManager.ensureNoConnection()"
"android.view.ViewRootImpl.onAccessibilityStateChanged(boolean)","android.os.Handler.obtainMessage(int)"
"android.view.ViewRootImpl.ensureTouchModeLocally(boolean)","android.view.ViewRootImpl.leaveTouchMode()"
"android.view.ViewRootImpl.ensureTouchModeLocally(boolean)","android.view.ViewRootImpl.enterTouchMode()"
"android.view.ViewRootImpl.ensureTouchModeLocally(boolean)","android.view.ViewTreeObserver.dispatchOnTouchModeChanged(boolean)"
"android.view.ViewRootImpl.dispatchSystemUiVisibilityChanged(int, int, int, int)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.dispatchSystemUiVisibilityChanged(int, int, int, int)","android.view.ViewRootImpl.dispatchSystemUiVisibilityChanged(int, int, int, int)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.View.getZ()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","com.android.internal.view.RootViewSurfaceTaker.willYouTakeTheInputQueue()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.FallbackEventHandler.setView(android.view.View)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.FallbackEventHandler.setView(null)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","java.lang.Math.ceil(float)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.DisplayAdjustments.setActivityToken(android.os.IBinder)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.content.res.CompatibilityInfo.supportsScreen()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.View.setImportantForAccessibility(int)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.View.assignParent(android.view.ViewRootImpl)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.content.res.CompatibilityInfo.Translator.translateWindowLayout(android.view.WindowManager.LayoutParams)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","com.android.internal.view.RootViewSurfaceTaker.willYouTakeTheSurface()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.Display.getState()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.Surface.setCompatibilityTranslator(android.content.res.CompatibilityInfo.Translator)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.ViewRootImpl.unscheduleTraversals()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.View.getRawLayoutDirection()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.content.res.CompatibilityInfo.getTranslator()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.View.getImportantForAccessibility()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.ViewRootImpl.setAccessibilityFocus(null, null)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.InputQueue.Callback.onInputQueueCreated(android.view.InputQueue)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.ViewRootImpl.requestLayout()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.DisplayAdjustments.getCompatibilityInfo()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.os.Looper.myLooper()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.ViewRootImpl.AccessibilityInteractionConnectionManager.ensureConnection()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.View.getApplicationWindowToken()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.ViewRootImpl.enableHardwareAcceleration(android.view.WindowManager.LayoutParams)"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.view.ViewRootImpl.collectViewAttributes()"
"android.view.ViewRootImpl.setView(View, WindowManager.LayoutParams, View)","android.hardware.display.DisplayManager.registerDisplayListener(android.hardware.display.DisplayManager.DisplayListener, android.view.ViewRootImpl.ViewRootHandler)"
"android.view.ViewRootImpl.setAccessibilityFocus(View, AccessibilityNodeInfo)","android.view.HardwareRenderer.invalidateRoot()"
"android.view.ViewRootImpl.setAccessibilityFocus(View, AccessibilityNodeInfo)","android.view.View.getAccessibilityNodeProvider()"
"android.view.ViewRootImpl.setAccessibilityFocus(View, AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeProvider.performAction(int, int, null)"
"android.view.ViewRootImpl.setAccessibilityFocus(View, AccessibilityNodeInfo)","android.view.View.clearAccessibilityFocusNoCallbacks()"
"android.view.ViewRootImpl.setAccessibilityFocus(View, AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.getVirtualDescendantId(long)"
"android.view.ViewRootImpl.setAccessibilityFocus(View, AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.getSourceNodeId()"
"android.view.ViewRootImpl.setAccessibilityFocus(View, AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.recycle()"
"android.view.ViewRootImpl.trackFPS()","java.lang.System.identityHashCode(android.view.ViewRootImpl)"
"android.view.ViewRootImpl.trackFPS()","java.lang.System.currentTimeMillis()"
"android.view.ViewRootImpl.trackFPS()","java.lang.Integer.toHexString(int)"
"android.view.ViewRootImpl.notifySubtreeAccessibilityStateChanged(View, View, int)","android.view.ViewRootImpl.postSendWindowContentChangedCallback(android.view.View, int)"
"android.view.ViewRootImpl.cancelFling()","android.os.Handler.removeCallbacks(java.lang.Runnable)"
"android.view.ViewRootImpl.focusSearch(long, int, Region, int, IAccessibilityInteractionConnectionCallback, int, int, long, MagnificationSpec)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.processGenericMotionEvent(QueuedInputEvent)","android.view.View.dispatchGenericMotionEvent(android.view.MotionEvent)"
"android.view.ViewRootImpl.enableHardwareAcceleration(WindowManager.LayoutParams)","android.view.HardwareRenderer.destroy()"
"android.view.ViewRootImpl.enableHardwareAcceleration(WindowManager.LayoutParams)","android.view.HardwareRenderer.isAvailable()"
"android.view.ViewRootImpl.enableHardwareAcceleration(WindowManager.LayoutParams)","android.view.HardwareRenderer.create(android.content.Context, boolean)"
"android.view.ViewRootImpl.dispatchMoved(int, int)","android.os.Handler.sendMessage(android.os.Message)"
"android.view.ViewRootImpl.dispatchMoved(int, int)","android.os.Handler.obtainMessage(int, int, int)"
"android.view.ViewRootImpl.disposeResizeBuffer()","android.view.HardwareLayer.destroy()"
"android.view.ViewRootImpl.getRunQueue()","java.lang.ThreadLocal.set(android.view.ViewRootImpl.RunQueue)"
"android.view.ViewRootImpl.getRunQueue()","java.lang.ThreadLocal.get()"
"android.view.ViewRootImpl.finishKeys(long)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.sendKeyUp(long)"
"android.view.ViewRootImpl.finishKeys(long)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.cancelFling()"
"android.view.ViewRootImpl.enterTouchMode()","android.view.ViewRootImpl.findAncestorToTakeFocusInTouchMode(android.view.View)"
"android.view.ViewRootImpl.enterTouchMode()","android.view.View.clearFocusInternal(null, boolean, boolean)"
"android.view.ViewRootImpl.enterTouchMode()","android.view.View.isFocusableInTouchMode()"
"android.view.ViewRootImpl.enterTouchMode()","android.view.View.findFocus()"
"android.view.ViewRootImpl.enterTouchMode()","android.view.View.hasFocus()"
"android.view.ViewRootImpl.dispatchDoneAnimating()","android.os.Handler.sendEmptyMessage(int)"
"android.view.ViewRootImpl.executeCommand(String, String, ParcelFileDescriptor)","java.io.OutputStream.close()"
"android.view.ViewRootImpl.executeCommand(String, String, ParcelFileDescriptor)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.executeCommand(String, String, ParcelFileDescriptor)","android.os.Binder.getCallingPid()"
"android.view.ViewRootImpl.executeCommand(String, String, ParcelFileDescriptor)","android.os.Binder.getCallingUid()"
"android.view.ViewRootImpl.executeCommand(String, String, ParcelFileDescriptor)","android.view.ViewDebug.dispatchCommand(android.view.View, java.lang.String, java.lang.String, java.io.OutputStream)"
"android.view.ViewRootImpl.executeCommand(String, String, ParcelFileDescriptor)","java.lang.Throwable.printStackTrace()"
"android.view.ViewRootImpl.destroyHardwareResources()","android.view.HardwareRenderer.destroy()"
"android.view.ViewRootImpl.destroyHardwareResources()","android.view.HardwareRenderer.destroyHardwareResources(android.view.View)"
"android.view.ViewRootImpl.dispatchAppVisibility(boolean)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.dispatchAppVisibility(boolean)","android.view.ViewRootImpl.dispatchAppVisibility(boolean)"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.view.View.getContext()"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.view.View.getMeasuredHeight()"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.view.View.layout(int, int, int, int)"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.view.View.requestLayout()"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.view.ViewRootImpl.getValidLayoutRequesters(java.util.ArrayList<android.view.View>, boolean)"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","java.util.ArrayList.size()"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.os.Trace.traceBegin(long, java.lang.String)"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.view.View.getMeasuredWidth()"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.view.ViewRootImpl.RunQueue.post(java.lang.Runnable)"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.content.Context.getResources()"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.view.ViewRootImpl.getRunQueue()"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.os.Trace.traceEnd(long)"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","java.util.ArrayList.get(int)"
"android.view.ViewRootImpl.performLayout(WindowManager.LayoutParams, int, int)","android.view.ViewRootImpl.measureHierarchy(android.view.View, android.view.WindowManager.LayoutParams, android.content.res.Resources, int, int)"
"android.view.ViewRootImpl.handleAppVisibility(boolean)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.handleAppVisibility(boolean)","android.view.WindowManagerGlobal.trimForeground()"
"android.view.ViewRootImpl.focusableViewAvailable(View)","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.focusableViewAvailable(View)","android.view.ViewRootImpl.isViewDescendantOf(android.view.View, android.view.View)"
"android.view.ViewRootImpl.focusableViewAvailable(View)","android.view.View.findFocus()"
"android.view.ViewRootImpl.focusableViewAvailable(View)","android.view.View.hasFocus()"
"android.view.ViewRootImpl.closeSystemDialogs(String)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.closeSystemDialogs(String)","android.view.ViewRootImpl.dispatchCloseSystemDialogs(java.lang.String)"
"android.view.ViewRootImpl.outputDisplayList(View)","android.view.View.getDisplayList()"
"android.view.ViewRootImpl.outputDisplayList(View)","android.view.RenderNode.output()"
"android.view.ViewRootImpl.handleDragEvent(DragEvent)","android.view.DragEvent.recycle()"
"android.view.ViewRootImpl.handleDragEvent(DragEvent)","android.view.ViewRootImpl.setLocalDragState(null)"
"android.view.ViewRootImpl.handleDragEvent(DragEvent)","android.view.View.dispatchDragEvent(android.view.DragEvent)"
"android.view.ViewRootImpl.profileRendering(boolean)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.profileRendering(boolean)","android.view.Choreographer.removeFrameCallback(android.view.Choreographer.FrameCallback)"
"android.view.ViewRootImpl.profileRendering(boolean)","android.view.Choreographer.postFrameCallback(android.view.Choreographer.FrameCallback)"
"android.view.ViewRootImpl.dispatchInvalidateDelayed(View, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"android.view.ViewRootImpl.dispatchInvalidateDelayed(View, long)","android.os.Handler.obtainMessage(int, android.view.View)"
"android.view.ViewRootImpl.dispatchKeyFromIme(KeyEvent)","android.os.Message.setAsynchronous(boolean)"
"android.view.ViewRootImpl.dispatchKeyFromIme(KeyEvent)","android.os.Handler.obtainMessage(int, android.view.KeyEvent)"
"android.view.ViewRootImpl.dispatchKeyFromIme(KeyEvent)","android.os.Handler.sendMessage(android.os.Message)"
"android.view.ViewRootImpl.leaveTouchMode()","android.view.ViewRootImpl.focusSearch(null, int)"
"android.view.ViewRootImpl.leaveTouchMode()","android.view.View.findFocus()"
"android.view.ViewRootImpl.leaveTouchMode()","android.view.View.hasFocus()"
"android.view.ViewRootImpl.ensureTouchMode(boolean)","android.view.ViewRootImpl.isInLocalFocusMode()"
"android.view.ViewRootImpl.ensureTouchMode(boolean)","android.view.ViewRootImpl.ensureTouchModeLocally(boolean)"
"android.view.ViewRootImpl.dispatchUnhandledInputEvent(InputEvent)","android.view.MotionEvent.obtain(android.view.MotionEvent)"
"android.view.ViewRootImpl.dispatchUnhandledInputEvent(InputEvent)","android.view.ViewRootImpl.synthesizeInputEvent(android.view.InputEvent)"
"android.view.ViewRootImpl.dispatchFinishInputConnection(InputConnection)","android.os.Handler.sendMessage(android.os.Message)"
"android.view.ViewRootImpl.dispatchFinishInputConnection(InputConnection)","android.os.Handler.obtainMessage(int, android.view.inputmethod.InputConnection)"
"android.view.ViewRootImpl.getCommonPredecessor(View, View)","java.util.HashSet.contains(android.view.View)"
"android.view.ViewRootImpl.getCommonPredecessor(View, View)","java.util.HashSet.add(android.view.View)"
"android.view.ViewRootImpl.getCommonPredecessor(View, View)","java.util.HashSet.clear()"
"android.view.ViewRootImpl.requestTransitionStart(LayoutTransition)","java.util.ArrayList.contains(android.animation.LayoutTransition)"
"android.view.ViewRootImpl.requestTransitionStart(LayoutTransition)","java.util.ArrayList.add(android.animation.LayoutTransition)"
"android.view.ViewRootImpl.sendKeyDownOrRepeat(long, int, int)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.sendKeyUp(long)"
"android.view.ViewRootImpl.sendKeyDownOrRepeat(long, int, int)","android.view.ViewRootImpl.enqueueInputEvent(android.view.KeyEvent)"
"android.view.ViewRootImpl.dispatchInputEvent(InputEvent, InputEventReceiver)","android.os.Message.setAsynchronous(boolean)"
"android.view.ViewRootImpl.dispatchInputEvent(InputEvent, InputEventReceiver)","android.os.Handler.obtainMessage(int, com.android.internal.os.SomeArgs)"
"android.view.ViewRootImpl.dispatchInputEvent(InputEvent, InputEventReceiver)","android.os.Handler.sendMessage(android.os.Message)"
"android.view.ViewRootImpl.dispatchInputEvent(InputEvent, InputEventReceiver)","com.android.internal.os.SomeArgs.obtain()"
"android.view.ViewRootImpl.removeSendWindowContentChangedCallback()","android.os.Handler.removeCallbacks(android.view.ViewRootImpl.SendWindowContentChangedAccessibilityEvent)"
"android.view.ViewRootImpl.isTerminalInputEvent(InputEvent)","android.view.MotionEvent.getAction()"
"android.view.ViewRootImpl.isTerminalInputEvent(InputEvent)","android.view.KeyEvent.getAction()"
"android.view.ViewRootImpl.onBatchedInputEventPending()","android.view.ViewRootImpl.scheduleConsumeBatchedInput()"
"android.view.ViewRootImpl.onBatchedInputEventPending()","android.view.InputEventReceiver.onBatchedInputEventPending()"
"android.view.ViewRootImpl.getAccessibilityFocusedDrawable()","android.content.Context.getDrawable(int)"
"android.view.ViewRootImpl.onFinishedInputEvent(Object, boolean)","android.view.ViewRootImpl.InputStage.finish(android.view.ViewRootImpl.QueuedInputEvent, boolean)"
"android.view.ViewRootImpl.onFinishedInputEvent(Object, boolean)","android.view.ViewRootImpl.AsyncInputStage.forward(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.removeView(View)","android.view.View.AttachInfo.InvalidateInfo.recycle()"
"android.view.ViewRootImpl.removeView(View)","java.util.ArrayList.size()"
"android.view.ViewRootImpl.removeView(View)","java.util.ArrayList.isEmpty()"
"android.view.ViewRootImpl.removeView(View)","android.view.Choreographer.removeCallbacks(int, android.view.ViewRootImpl.InvalidateOnAnimationRunnable, null)"
"android.view.ViewRootImpl.removeView(View)","java.util.ArrayList.remove(android.view.View)"
"android.view.ViewRootImpl.removeView(View)","java.util.ArrayList.remove(int)"
"android.view.ViewRootImpl.removeView(View)","java.util.ArrayList.get(int)"
"android.view.ViewRootImpl.requestTransparentRegion(View)","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.requestTransparentRegion(View)","android.view.ViewRootImpl.requestLayout()"
"android.view.ViewRootImpl.requestChildFocus(View, View)","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.requestChildFocus(View, View)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.finishInputEvent(QueuedInputEvent)","android.view.InputEventReceiver.finishInputEvent(android.view.InputEvent, boolean)"
"android.view.ViewRootImpl.finishInputEvent(QueuedInputEvent)","android.view.InputEvent.recycleIfNeededAfterDispatch()"
"android.view.ViewRootImpl.finishInputEvent(QueuedInputEvent)","android.os.Trace.asyncTraceEnd(long, java.lang.String, int)"
"android.view.ViewRootImpl.finishInputEvent(QueuedInputEvent)","android.view.InputEvent.getSequenceNumber()"
"android.view.ViewRootImpl.finishInputEvent(QueuedInputEvent)","android.view.ViewRootImpl.recycleQueuedInputEvent(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.dispatchWindowShown()","android.view.ViewRootImpl.dispatchWindowShown()"
"android.view.ViewRootImpl.dispatchWindowShown()","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.executeActions(Handler)","java.util.ArrayList.size()"
"android.view.ViewRootImpl.executeActions(Handler)","android.os.Handler.postDelayed(java.lang.Runnable, long)"
"android.view.ViewRootImpl.executeActions(Handler)","java.util.ArrayList.get(int)"
"android.view.ViewRootImpl.executeActions(Handler)","java.util.ArrayList.clear()"
"android.view.ViewRootImpl.onProcess(QueuedInputEvent)","android.view.MotionEvent.getSource()"
"android.view.ViewRootImpl.onProcess(QueuedInputEvent)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.process(android.view.MotionEvent)"
"android.view.ViewRootImpl.onProcess(QueuedInputEvent)","android.view.ViewRootImpl.SyntheticTrackballHandler.process(android.view.MotionEvent)"
"android.view.ViewRootImpl.onProcess(QueuedInputEvent)","android.view.ViewRootImpl.SyntheticJoystickHandler.process(android.view.MotionEvent)"
"android.view.ViewRootImpl.onProcess(QueuedInputEvent)","android.view.ViewRootImpl.SyntheticKeyboardHandler.process(android.view.KeyEvent)"
"android.view.ViewRootImpl.getAccessibilityFocusedRect(Rect)","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.view.ViewRootImpl.getAccessibilityFocusedRect(Rect)","android.view.accessibility.AccessibilityManager.isTouchExplorationEnabled()"
"android.view.ViewRootImpl.getAccessibilityFocusedRect(Rect)","android.view.View.getAccessibilityNodeProvider()"
"android.view.ViewRootImpl.getAccessibilityFocusedRect(Rect)","android.view.accessibility.AccessibilityManager.getInstance(android.content.Context)"
"android.view.ViewRootImpl.invalidateChildInParent(int[], Rect)","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.invalidateChildInParent(int[], Rect)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.post(Runnable)","android.view.ViewRootImpl.RunQueue.postDelayed(java.lang.Runnable, int)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getY()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getSource()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getX(int)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getEventTime()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getDeviceId()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.InputDevice.getMotionRange(int)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.finishTracking(long)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getY(int)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getX()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.consumeAccumulatedMovement(long, int)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.VelocityTracker.obtain()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.VelocityTracker.getYVelocity(int)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.VelocityTracker.getXVelocity(int)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.findPointerIndex(int)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.InputDevice.MotionRange.getResolution()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getMetaState()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.finishKeys(long)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.startFling(long, float, float)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.InputDevice.MotionRange.getRange()"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.VelocityTracker.computeCurrentVelocity(int, float)"
"android.view.ViewRootImpl.process(MotionEvent)","android.view.InputEvent.getDevice()"
"android.view.ViewRootImpl.getHostVisibility()","android.view.View.getVisibility()"
"android.view.ViewRootImpl.dispatchInvalidateOnAnimation(View)","android.view.ViewRootImpl.InvalidateOnAnimationRunnable.addView(android.view.View)"
"android.view.ViewRootImpl.findAccessibilityNodeInfosByViewId(long, String, Region, int, IAccessibilityInteractionConnectionCallback, int, int, long, MagnificationSpec)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.loadSystemProperties()","android.os.Handler.sendEmptyMessageDelayed(int, int)"
"android.view.ViewRootImpl.loadSystemProperties()","android.os.Handler.hasMessages(int)"
"android.view.ViewRootImpl.loadSystemProperties()","android.view.ViewRootImpl.profileRendering(boolean)"
"android.view.ViewRootImpl.loadSystemProperties()","android.os.Handler.post(java.lang.Runnable)"
"android.view.ViewRootImpl.loadSystemProperties()","android.os.SystemProperties.getBoolean(java.lang.String, boolean)"
"android.view.ViewRootImpl.loadSystemProperties()","android.view.HardwareRenderer.loadSystemProperties()"
"android.view.ViewRootImpl.loadSystemProperties()","java.lang.String.contains(java.lang.String)"
"android.view.ViewRootImpl.dispatchCheckFocus()","android.os.Handler.hasMessages(int)"
"android.view.ViewRootImpl.dispatchCheckFocus()","android.os.Handler.sendEmptyMessage(int)"
"android.view.ViewRootImpl.relayoutWindow(WindowManager.LayoutParams, int, boolean)","android.content.res.CompatibilityInfo.Translator.translateWindowLayout(android.view.WindowManager.LayoutParams)"
"android.view.ViewRootImpl.dispatchInputEvent(InputEvent)","android.view.ViewRootImpl.dispatchInputEvent(android.view.InputEvent, null)"
"android.view.ViewRootImpl.getValidLayoutRequesters(ArrayList, boolean)","java.util.ArrayList.add(android.view.View)"
"android.view.ViewRootImpl.getValidLayoutRequesters(ArrayList, boolean)","java.util.ArrayList.size()"
"android.view.ViewRootImpl.getValidLayoutRequesters(ArrayList, boolean)","java.util.ArrayList.get(int)"
"android.view.ViewRootImpl.getValidLayoutRequesters(ArrayList, boolean)","java.util.ArrayList.clear()"
"android.view.ViewRootImpl.forward(QueuedInputEvent)","android.view.ViewRootImpl.InputStage.forward(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.forward(QueuedInputEvent)","android.view.ViewRootImpl.AsyncInputStage.dequeue(android.view.ViewRootImpl.QueuedInputEvent, android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.forward(QueuedInputEvent)","android.view.InputEvent.getDeviceId()"
"android.view.ViewRootImpl.forward(QueuedInputEvent)","android.view.ViewRootImpl.AsyncInputStage.enqueue(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.enqueue(QueuedInputEvent)","android.os.Trace.traceCounter(long, java.lang.String, int)"
"android.view.ViewRootImpl.performTraversals()","android.content.res.Configuration.getLayoutDirection()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewTreeObserver.hasComputeInternalInsetsListeners()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewTreeObserver.InternalInsetsInfo.reset()"
"android.view.ViewRootImpl.performTraversals()","android.view.HardwareRenderer.getWidth()"
"android.view.ViewRootImpl.performTraversals()","android.view.View.debug()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.dispatchApplyInsets(android.view.View)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.ensureTouchModeLocally(boolean)"
"android.view.ViewRootImpl.performTraversals()","com.android.internal.view.BaseSurfaceHolder.getCallbacks()"
"android.view.ViewRootImpl.performTraversals()","android.view.SurfaceHolder.Callback.surfaceDestroyed(com.android.internal.view.BaseSurfaceHolder)"
"android.view.ViewRootImpl.performTraversals()","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.performMeasure(int, int)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewTreeObserver.InternalInsetsInfo.equals(android.view.ViewTreeObserver.InternalInsetsInfo)"
"android.view.ViewRootImpl.performTraversals()","android.view.inputmethod.InputMethodManager.onWindowFocus(android.view.View, android.view.View, int, boolean, int)"
"android.view.ViewRootImpl.performTraversals()","android.content.res.CompatibilityInfo.supportsScreen()"
"android.view.ViewRootImpl.performTraversals()","android.view.View.getMeasuredWidth()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewTreeObserver.InternalInsetsInfo.set(android.view.ViewTreeObserver.InternalInsetsInfo)"
"android.view.ViewRootImpl.performTraversals()","android.view.HardwareRenderer.isEnabled()"
"android.view.ViewRootImpl.performTraversals()","android.view.HardwareRenderer.invalidate(android.view.Surface)"
"android.view.ViewRootImpl.performTraversals()","android.view.View.hasFocus()"
"android.view.ViewRootImpl.performTraversals()","android.view.inputmethod.InputMethodManager.startGettingWindowFocus(android.view.View)"
"android.view.ViewRootImpl.performTraversals()","android.view.Surface.getGenerationId()"
"android.view.ViewRootImpl.performTraversals()","java.util.ArrayList.clear()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.getHostVisibility()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.performTraversals()","android.view.HardwareRenderer.getHeight()"
"android.view.ViewRootImpl.performTraversals()","com.android.internal.view.BaseSurfaceHolder.ungetCallbacks()"
"android.view.ViewRootImpl.performTraversals()","android.view.HardwareRenderer.updateSurface(android.view.Surface)"
"android.view.ViewRootImpl.performTraversals()","android.animation.LayoutTransition.endChangingAnimations()"
"android.view.ViewRootImpl.performTraversals()","android.view.Surface.isValid()"
"android.view.ViewRootImpl.performTraversals()","android.view.HardwareRenderer.pauseSurface(android.view.Surface)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.RunQueue.executeActions(android.os.Handler)"
"android.view.ViewRootImpl.performTraversals()","java.util.ArrayList.size()"
"android.view.ViewRootImpl.performTraversals()","java.util.concurrent.locks.ReentrantLock.lock()"
"android.view.ViewRootImpl.performTraversals()","android.content.Context.getResources()"
"android.view.ViewRootImpl.performTraversals()","android.content.res.Resources.getConfiguration()"
"android.view.ViewRootImpl.performTraversals()","com.android.internal.view.RootViewSurfaceTaker.onRootViewScrollYChanged(int)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.collectViewAttributes()"
"android.view.ViewRootImpl.performTraversals()","android.view.View.isShown()"
"android.view.ViewRootImpl.performTraversals()","java.util.ArrayList.get(int)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewTreeObserver.InternalInsetsInfo.isEmpty()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.measureHierarchy(android.view.View, android.view.WindowManager.LayoutParams, android.content.res.Resources, int, int)"
"android.view.ViewRootImpl.performTraversals()","java.io.PrintStream.println(java.lang.String)"
"android.view.ViewRootImpl.performTraversals()","android.view.View.dispatchAttachedToWindow(android.view.View.AttachInfo, int)"
"android.view.ViewRootImpl.performTraversals()","android.view.View.getMeasuredHeight()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.performDraw()"
"android.view.ViewRootImpl.performTraversals()","android.view.View.getResources()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewTreeObserver.dispatchOnPreDraw()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewTreeObserver.dispatchOnComputeInternalInsets(android.view.ViewTreeObserver.InternalInsetsInfo)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewTreeObserver.dispatchOnWindowAttachedChange(boolean)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.updateConfiguration(android.content.res.Configuration, boolean)"
"android.view.ViewRootImpl.performTraversals()","android.view.View.findFocus()"
"android.view.ViewRootImpl.performTraversals()","android.content.res.Resources.getDisplayMetrics()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.disposeResizeBuffer()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.isInLocalFocusMode()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.getRunQueue()"
"android.view.ViewRootImpl.performTraversals()","android.view.View.dispatchWindowVisibilityChanged(int)"
"android.view.ViewRootImpl.performTraversals()","java.lang.ref.Reference.clear()"
"android.view.ViewRootImpl.performTraversals()","android.view.View.getLocationInWindow(int[])"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.getRootMeasureSpec(int, int)"
"android.view.ViewRootImpl.performTraversals()","android.view.View.getContext()"
"android.view.ViewRootImpl.performTraversals()","android.widget.Scroller.abortAnimation()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewTreeObserver.dispatchOnGlobalLayout()"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.relayoutWindow(android.view.WindowManager.LayoutParams, int, boolean)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.handleOutOfResourcesException(android.view.Surface.OutOfResourcesException)"
"android.view.ViewRootImpl.performTraversals()","android.content.res.Configuration.setTo(android.content.res.Configuration)"
"android.view.ViewRootImpl.performTraversals()","com.android.internal.view.BaseSurfaceHolder.setSurfaceFrameSize(int, int)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.destroyHardwareResources()"
"android.view.ViewRootImpl.performTraversals()","android.view.DisplayAdjustments.getCompatibilityInfo()"
"android.view.ViewRootImpl.performTraversals()","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.view.ViewRootImpl.performTraversals()","java.util.concurrent.locks.ReentrantLock.unlock()"
"android.view.ViewRootImpl.performTraversals()","android.view.HardwareRenderer.destroy()"
"android.view.ViewRootImpl.performTraversals()","android.view.SurfaceHolder.Callback.surfaceChanged(com.android.internal.view.BaseSurfaceHolder, int, int, int)"
"android.view.ViewRootImpl.performTraversals()","android.view.View.setLayoutDirection(int)"
"android.view.ViewRootImpl.performTraversals()","android.view.HardwareRenderer.initialize(android.view.Surface)"
"android.view.ViewRootImpl.performTraversals()","android.view.SurfaceHolder.Callback.surfaceCreated(com.android.internal.view.BaseSurfaceHolder)"
"android.view.ViewRootImpl.performTraversals()","android.view.ViewRootImpl.performLayout(android.view.WindowManager.LayoutParams, int, int)"
"android.view.ViewRootImpl.performTraversals()","android.animation.LayoutTransition.startChangingAnimations()"
"android.view.ViewRootImpl.setType(int)","com.android.internal.view.RootViewSurfaceTaker.setSurfaceType(int)"
"android.view.ViewRootImpl.doTraversal()","android.os.Handler.getLooper()"
"android.view.ViewRootImpl.doTraversal()","android.os.Looper.removeSyncBarrier(int)"
"android.view.ViewRootImpl.doTraversal()","android.os.Trace.traceBegin(long, java.lang.String)"
"android.view.ViewRootImpl.doTraversal()","android.os.Debug.stopMethodTracing()"
"android.view.ViewRootImpl.doTraversal()","android.os.Trace.traceEnd(long)"
"android.view.ViewRootImpl.doTraversal()","android.view.ViewRootImpl.performTraversals()"
"android.view.ViewRootImpl.doTraversal()","android.os.Debug.startMethodTracing(java.lang.String)"
"android.view.ViewRootImpl.dispatchGetNewSurface()","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.dispatchGetNewSurface()","android.view.ViewRootImpl.dispatchGetNewSurface()"
"android.view.ViewRootImpl.playSoundEffect(int)","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.playSoundEffect(int)","android.view.ViewRootImpl.getAudioManager()"
"android.view.ViewRootImpl.playSoundEffect(int)","java.lang.Class.getCanonicalName()"
"android.view.ViewRootImpl.playSoundEffect(int)","java.lang.Throwable.printStackTrace()"
"android.view.ViewRootImpl.run()","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.view.ViewRootImpl.run()","android.view.accessibility.AccessibilityEvent.setEventType(int)"
"android.view.ViewRootImpl.run()","android.os.SystemClock.uptimeMillis()"
"android.view.ViewRootImpl.run()","android.view.accessibility.AccessibilityManager.getInstance(android.content.Context)"
"android.view.ViewRootImpl.run()","android.view.accessibility.AccessibilityEvent.setContentChangeTypes(int)"
"android.view.ViewRootImpl.run()","android.view.accessibility.AccessibilityEvent.obtain()"
"android.view.ViewRootImpl.run()","android.view.View.resetSubtreeAccessibilityStateChanged()"
"android.view.ViewRootImpl.run()","android.view.View.sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)"
"android.view.ViewRootImpl.handleGetNewSurface()","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.doProcessInputEvents()","android.os.Handler.removeMessages(int)"
"android.view.ViewRootImpl.doProcessInputEvents()","android.os.Trace.traceCounter(long, java.lang.String, int)"
"android.view.ViewRootImpl.doProcessInputEvents()","android.view.ViewRootImpl.deliverInputEvent(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.isInTouchMode()","android.view.WindowManagerGlobal.peekWindowSession()"
"android.view.ViewRootImpl.setFormat(int)","com.android.internal.view.RootViewSurfaceTaker.setSurfaceFormat(int)"
"android.view.ViewRootImpl.windowFocusChanged(boolean, boolean)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.windowFocusChanged(boolean, boolean)","android.view.ViewRootImpl.windowFocusChanged(boolean, boolean)"
"android.view.ViewRootImpl.handleOutOfResourcesException(Surface.OutOfResourcesException)","android.os.Process.killProcess(int)"
"android.view.ViewRootImpl.handleOutOfResourcesException(Surface.OutOfResourcesException)","android.os.Process.myUid()"
"android.view.ViewRootImpl.handleOutOfResourcesException(Surface.OutOfResourcesException)","android.os.Process.myPid()"
"android.view.ViewRootImpl.apply(QueuedInputEvent, int)","android.view.ViewRootImpl.InputStage.apply(android.view.ViewRootImpl.QueuedInputEvent, int)"
"android.view.ViewRootImpl.apply(QueuedInputEvent, int)","android.view.ViewRootImpl.AsyncInputStage.defer(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.removeCallbacks(Runnable)","java.util.ArrayList.remove(android.view.ViewRootImpl.RunQueue.HandlerAction)"
"android.view.ViewRootImpl.onDeliverToNext(QueuedInputEvent)","android.view.MotionEvent.getSource()"
"android.view.ViewRootImpl.onDeliverToNext(QueuedInputEvent)","android.view.ViewRootImpl.SyntheticJoystickHandler.cancel(android.view.MotionEvent)"
"android.view.ViewRootImpl.onDeliverToNext(QueuedInputEvent)","android.view.ViewRootImpl.SyntheticTouchNavigationHandler.cancel(android.view.MotionEvent)"
"android.view.ViewRootImpl.onDeliverToNext(QueuedInputEvent)","android.view.ViewRootImpl.InputStage.onDeliverToNext(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.onDeliverToNext(QueuedInputEvent)","android.view.ViewRootImpl.SyntheticTrackballHandler.cancel(android.view.MotionEvent)"
"android.view.ViewRootImpl.handleDispatchWindowShown()","android.view.ViewTreeObserver.dispatchOnWindowShown()"
"android.view.ViewRootImpl.postIfNeededLocked()","android.view.Choreographer.postCallback(int, android.view.ViewRootImpl.InvalidateOnAnimationRunnable, null)"
"android.view.ViewRootImpl.handleDispatchDoneAnimating()","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.getGfxInfo(View, int[])","android.view.RenderNode.getDebugSize()"
"android.view.ViewRootImpl.getRootMeasureSpec(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.view.ViewRootImpl.requestLayout()","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.requestLayout()","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.setStopped(boolean)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.destroyHardwareRenderer()","android.view.HardwareRenderer.destroy()"
"android.view.ViewRootImpl.destroyHardwareRenderer()","android.view.HardwareRenderer.setRequested(boolean)"
"android.view.ViewRootImpl.destroyHardwareRenderer()","android.view.HardwareRenderer.destroyHardwareResources(android.view.View)"
"android.view.ViewRootImpl.finish(QueuedInputEvent, boolean)","android.view.ViewRootImpl.InputStage.forward(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.addFirstDrawHandler(Runnable)","java.util.ArrayList.add(java.lang.Runnable)"
"android.view.ViewRootImpl.recomputeViewAttributes(View)","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.recomputeViewAttributes(View)","android.view.ViewRootImpl.scheduleTraversals()"
"android.view.ViewRootImpl.debug()","android.view.View.debug()"
"android.view.ViewRootImpl.dispatchInvalidateRectDelayed(AttachInfo.InvalidateInfo, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"android.view.ViewRootImpl.dispatchInvalidateRectDelayed(AttachInfo.InvalidateInfo, long)","android.os.Handler.obtainMessage(int, android.view.View.AttachInfo.InvalidateInfo)"
"android.view.ViewRootImpl.forceLayout(View)","android.view.View.forceLayout()"
"android.view.ViewRootImpl.dispatchResized(Rect, Rect, Rect, Rect, Rect, boolean, Configuration)","android.os.Handler.sendMessage(android.os.Message)"
"android.view.ViewRootImpl.dispatchResized(Rect, Rect, Rect, Rect, Rect, boolean, Configuration)","android.os.Binder.getCallingPid()"
"android.view.ViewRootImpl.dispatchResized(Rect, Rect, Rect, Rect, Rect, boolean, Configuration)","android.os.Process.myPid()"
"android.view.ViewRootImpl.dispatchResized(Rect, Rect, Rect, Rect, Rect, boolean, Configuration)","com.android.internal.os.SomeArgs.obtain()"
"android.view.ViewRootImpl.dispatchResized(Rect, Rect, Rect, Rect, Rect, boolean, Configuration)","android.os.Handler.obtainMessage(int)"
"android.view.ViewRootImpl.scheduleTraversals()","android.os.Handler.getLooper()"
"android.view.ViewRootImpl.scheduleTraversals()","android.view.ViewRootImpl.scheduleConsumeBatchedInput()"
"android.view.ViewRootImpl.scheduleTraversals()","android.view.Choreographer.postCallback(int, android.view.ViewRootImpl.TraversalRunnable, null)"
"android.view.ViewRootImpl.scheduleTraversals()","android.os.Looper.postSyncBarrier()"
"android.view.ViewRootImpl.scheduleTraversals()","android.view.ViewRootImpl.notifyRendererOfFramePending()"
"android.view.ViewRootImpl.unscheduleConsumeBatchedInput()","android.view.Choreographer.removeCallbacks(int, android.view.ViewRootImpl.ConsumeBatchedInputRunnable, null)"
"android.view.ViewRootImpl.drawAccessibilityFocusedDrawableIfNeeded(Canvas)","android.view.ViewRootImpl.getAccessibilityFocusedDrawable()"
"android.view.ViewRootImpl.dispatchCloseSystemDialogs(String)","android.os.Handler.sendMessage(android.os.Message)"
"android.view.ViewRootImpl.dispatchCloseSystemDialogs(String)","android.os.Message.obtain()"
"android.view.ViewRootImpl.enqueueInputEvent(InputEvent)","android.view.ViewRootImpl.enqueueInputEvent(android.view.InputEvent, null, int, boolean)"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.ViewRootImpl.setAccessibilityFocus(android.view.View, android.view.accessibility.AccessibilityNodeInfo)"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.View.getAccessibilityViewId()"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.accessibility.AccessibilityNodeProvider.createAccessibilityNodeInfo(int)"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.accessibility.AccessibilityNodeInfo.getVirtualDescendantId(long)"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.ViewRootImpl.setAccessibilityFocus(null, null)"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.View.findViewByAccessibilityId(int)"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.getContentChangeTypes()"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.getEventType()"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.View.getAccessibilityNodeProvider()"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.accessibility.AccessibilityNodeInfo.getSourceNodeId()"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.getSourceNodeId()"
"android.view.ViewRootImpl.requestSendAccessibilityEvent(View, AccessibilityEvent)","android.view.accessibility.AccessibilityNodeInfo.getAccessibilityViewId(long)"
"android.view.ViewRootImpl.dispose()","android.view.InputEventReceiver.dispose()"
"android.view.ViewRootImpl.dispose()","android.view.ViewRootImpl.unscheduleConsumeBatchedInput()"
"android.view.ViewRootImpl.performDraw()","android.view.RenderNode.endAllAnimators()"
"android.view.ViewRootImpl.performDraw()","android.os.Trace.traceBegin(long, java.lang.String)"
"android.view.ViewRootImpl.performDraw()","java.util.List.clear()"
"android.view.ViewRootImpl.performDraw()","android.view.SurfaceHolder.Callback2.surfaceRedrawNeeded(com.android.internal.view.BaseSurfaceHolder)"
"android.view.ViewRootImpl.performDraw()","java.util.List.size()"
"android.view.ViewRootImpl.performDraw()","android.os.Trace.traceEnd(long)"
"android.view.ViewRootImpl.performDraw()","com.android.internal.view.BaseSurfaceHolder.getCallbacks()"
"android.view.ViewRootImpl.performDraw()","android.view.HardwareRenderer.fence()"
"android.view.ViewRootImpl.performDraw()","android.view.Surface.isValid()"
"android.view.ViewRootImpl.performDraw()","java.util.List.get(int)"
"android.view.ViewRootImpl.doDie()","android.view.ViewRootImpl.checkThread()"
"android.view.ViewRootImpl.doDie()","android.view.View.getVisibility()"
"android.view.ViewRootImpl.doDie()","android.view.ViewRootImpl.relayoutWindow(android.view.WindowManager.LayoutParams, int, boolean)"
"android.view.ViewRootImpl.doDie()","android.view.ViewRootImpl.dispatchDetachedFromWindow()"
"android.view.ViewRootImpl.doDie()","android.view.WindowManagerGlobal.doRemoveView(android.view.ViewRootImpl)"
"android.view.ViewRootImpl.doDie()","android.view.ViewRootImpl.destroyHardwareRenderer()"
"android.view.ViewRootImpl.doDie()","android.view.Surface.release()"
"android.view.ViewRootImpl.doDie()","android.view.WindowManagerGlobal.getInstance()"
"android.view.ViewRootImpl.findAncestorToTakeFocusInTouchMode(View)","android.view.View.getParent()"
"android.view.ViewRootImpl.deliverInputEvent(QueuedInputEvent)","android.os.Trace.asyncTraceBegin(long, java.lang.String, int)"
"android.view.ViewRootImpl.deliverInputEvent(QueuedInputEvent)","android.view.ViewRootImpl.QueuedInputEvent.shouldSkipIme()"
"android.view.ViewRootImpl.deliverInputEvent(QueuedInputEvent)","android.view.ViewRootImpl.finishInputEvent(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.deliverInputEvent(QueuedInputEvent)","android.view.ViewRootImpl.QueuedInputEvent.shouldSendToSynthesizer()"
"android.view.ViewRootImpl.deliverInputEvent(QueuedInputEvent)","android.view.InputEvent.getSequenceNumber()"
"android.view.ViewRootImpl.deliverInputEvent(QueuedInputEvent)","android.view.InputEventConsistencyVerifier.onInputEvent(android.view.InputEvent, int)"
"android.view.ViewRootImpl.deliverInputEvent(QueuedInputEvent)","android.view.ViewRootImpl.InputStage.deliver(android.view.ViewRootImpl.QueuedInputEvent)"
"android.view.ViewRootImpl.dequeue(QueuedInputEvent, QueuedInputEvent)","android.os.Trace.traceCounter(long, java.lang.String, int)"
"android.view.ViewRootImpl.unscheduleTraversals()","android.os.Handler.getLooper()"
"android.view.ViewRootImpl.unscheduleTraversals()","android.os.Looper.removeSyncBarrier(int)"
"android.view.ViewRootImpl.unscheduleTraversals()","android.view.Choreographer.removeCallbacks(int, android.view.ViewRootImpl.TraversalRunnable, null)"
"android.view.ViewRootImpl.scheduleProcessInputEvents()","android.os.Message.setAsynchronous(boolean)"
"android.view.ViewRootImpl.scheduleProcessInputEvents()","android.os.Handler.sendMessage(android.os.Message)"
"android.view.ViewRootImpl.scheduleProcessInputEvents()","android.os.Handler.obtainMessage(int)"
"android.view.ViewRootImpl.findAccessibilityNodeInfosByText(long, String, Region, int, IAccessibilityInteractionConnectionCallback, int, int, long, MagnificationSpec)","java.lang.ref.Reference.get()"
"android.view.ViewRootImpl.isNavigationKey(KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.view.ViewRootImpl.doConsumeBatchedInput(long)","android.view.ViewRootImpl.scheduleConsumeBatchedInput()"
"android.view.ViewRootImpl.doConsumeBatchedInput(long)","android.view.ViewRootImpl.doProcessInputEvents()"
"android.view.ViewRootImpl.doConsumeBatchedInput(long)","android.view.InputEventReceiver.consumeBatchedInputEvents(long)"
"android.view.ViewRootImpl.drawSoftware(Surface, AttachInfo, int, int, boolean, Rect)","android.view.View.getContext()"
"android.view.ViewRootImpl.drawSoftware(Surface, AttachInfo, int, int, boolean, Rect)","android.os.SystemClock.uptimeMillis()"
"android.view.ViewRootImpl.drawSoftware(Surface, AttachInfo, int, int, boolean, Rect)","android.view.ViewRootImpl.handleOutOfResourcesException(android.view.Surface.OutOfResourcesException)"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.MotionEvent.getY()"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.MotionEvent.getSource()"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.os.Handler.removeMessages(int)"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.os.Handler.obtainMessage(int, android.view.KeyEvent)"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.MotionEvent.getEventTime()"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.MotionEvent.getDeviceId()"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.ViewRootImpl.SyntheticJoystickHandler.joystickAxisValueToDirection(float)"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.ViewConfiguration.getKeyRepeatTimeout()"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.MotionEvent.getX()"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.os.Message.setAsynchronous(boolean)"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.MotionEvent.getMetaState()"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.MotionEvent.getAxisValue(int)"
"android.view.ViewRootImpl.update(MotionEvent, boolean)","android.view.ViewRootImpl.enqueueInputEvent(android.view.KeyEvent)"
"com.android.internal.widget.EditableInputConnection.reportFinish()","com.android.internal.widget.EditableInputConnection.endBatchEdit()"
"com.android.internal.widget.EditableInputConnection.reportFinish()","android.view.inputmethod.BaseInputConnection.reportFinish()"
"com.android.internal.widget.EditableInputConnection.clearMetaKeyStates(int)","com.android.internal.widget.EditableInputConnection.getEditable()"
"com.android.internal.widget.EditableInputConnection.commitText(CharSequence, int)","android.view.inputmethod.BaseInputConnection.commitText(java.lang.CharSequence, int)"
"com.android.internal.widget.EditableInputConnection.commitText(CharSequence, int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.SuggestionSpan>)"
"com.android.internal.widget.EditableInputConnection.commitText(CharSequence, int)","android.view.inputmethod.InputMethodManager.registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])"
"com.android.internal.widget.EditableInputConnection.commitText(CharSequence, int)","java.lang.CharSequence.length()"
"com.android.internal.widget.EditableInputConnection.requestCursorUpdates(int)","android.view.inputmethod.InputMethodManager.setUpdateCursorAnchorInfoMode(int)"
"android.text.style.TtsSpan.setIntegerPart(long)","java.lang.String.valueOf(long)"
"android.text.style.TtsSpan.setIntegerPart(long)","android.text.style.TtsSpan.MoneyBuilder.setIntegerPart(java.lang.String)"
"android.text.style.TtsSpan.setPassword(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setEmailArguments(String, String)","android.text.style.TtsSpan.ElectronicBuilder.setDomain(java.lang.String)"
"android.text.style.TtsSpan.setEmailArguments(String, String)","android.text.style.TtsSpan.ElectronicBuilder.setUsername(java.lang.String)"
"android.text.style.TtsSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.text.style.TtsSpan.writeToParcel(Parcel, int)","android.os.Parcel.writePersistableBundle(android.os.PersistableBundle)"
"android.text.style.TtsSpan.setUnit(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setPath(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setAnimacy(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setNumerator(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setMultiplicity(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setMonth(int)","android.text.style.TtsSpan.Builder.setIntArgument(java.lang.String, int)"
"android.text.style.TtsSpan.setQuantity(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setDenominator(long)","android.text.style.TtsSpan.MeasureBuilder.setDenominator(java.lang.String)"
"android.text.style.TtsSpan.setDenominator(long)","java.lang.String.valueOf(long)"
"android.text.style.TtsSpan.setNumber(long)","android.text.style.TtsSpan.MeasureBuilder.setNumber(java.lang.String)"
"android.text.style.TtsSpan.setNumber(long)","java.lang.String.valueOf(long)"
"android.text.style.TtsSpan.setCase(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setCountryCode(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setCurrency(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setMinutes(int)","android.text.style.TtsSpan.Builder.setIntArgument(java.lang.String, int)"
"android.text.style.TtsSpan.setExtension(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setUsername(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setFractionalPart(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setText(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setWeekday(int)","android.text.style.TtsSpan.Builder.setIntArgument(java.lang.String, int)"
"android.text.style.TtsSpan.setIntArgument(String, int)","android.os.BaseBundle.putInt(java.lang.String, int)"
"android.text.style.TtsSpan.setYear(int)","android.text.style.TtsSpan.Builder.setIntArgument(java.lang.String, int)"
"android.text.style.TtsSpan.setNumerator(long)","android.text.style.TtsSpan.MeasureBuilder.setNumerator(java.lang.String)"
"android.text.style.TtsSpan.setNumerator(long)","java.lang.String.valueOf(long)"
"android.text.style.TtsSpan.setVerbatim(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setHours(int)","android.text.style.TtsSpan.Builder.setIntArgument(java.lang.String, int)"
"android.text.style.TtsSpan.setQueryString(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setFragmentId(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setStringArgument(String, String)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setDay(int)","android.text.style.TtsSpan.Builder.setIntArgument(java.lang.String, int)"
"android.text.style.TtsSpan.setIntegerPart(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setNumberParts(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","java.lang.String.substring(int)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","java.text.NumberFormat.getInstance(java.util.Locale)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","java.text.NumberFormat.format(double)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","java.text.NumberFormat.setGroupingUsed(boolean)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","android.text.style.TtsSpan.DecimalBuilder.setIntegerPart(java.lang.String)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","android.text.style.TtsSpan.DecimalBuilder.setFractionalPart(java.lang.String)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","java.text.NumberFormat.setMaximumFractionDigits(int)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","java.lang.String.substring(int, int)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","java.text.NumberFormat.setMinimumFractionDigits(int)"
"android.text.style.TtsSpan.setArgumentsFromDouble(double, int, int)","java.lang.String.indexOf(char)"
"android.text.style.TtsSpan.setGender(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setProtocol(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setPort(int)","android.text.style.TtsSpan.Builder.setIntArgument(java.lang.String, int)"
"android.text.style.TtsSpan.setLongArgument(String, long)","android.os.BaseBundle.putLong(java.lang.String, long)"
"android.text.style.TtsSpan.setDenominator(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setDomain(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setNumber(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.text.style.TtsSpan.setDigits(String)","android.text.style.TtsSpan.Builder.setStringArgument(java.lang.String, java.lang.String)"
"android.content.res.AssetFileDescriptor.reset()","java.io.InputStream.reset()"
"android.content.res.AssetFileDescriptor.close()","android.os.ParcelFileDescriptor.close()"
"android.content.res.AssetFileDescriptor.write(int)","java.io.FileOutputStream.write(int)"
"android.content.res.AssetFileDescriptor.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.content.res.AssetFileDescriptor.writeToParcel(Parcel, int)","android.os.ParcelFileDescriptor.writeToParcel(android.os.Parcel, int)"
"android.content.res.AssetFileDescriptor.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.res.AssetFileDescriptor.writeToParcel(Parcel, int)","android.os.Parcel.writeBundle(android.os.Bundle)"
"android.content.res.AssetFileDescriptor.write(byte[])","java.io.FileOutputStream.write(byte[])"
"android.content.res.AssetFileDescriptor.read()","android.content.res.AssetFileDescriptor.AutoCloseInputStream.read(byte[], int, int)"
"android.content.res.AssetFileDescriptor.getFileDescriptor()","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.content.res.AssetFileDescriptor.describeContents()","android.os.ParcelFileDescriptor.describeContents()"
"android.content.res.AssetFileDescriptor.mark(int)","java.io.InputStream.mark(int)"
"android.content.res.AssetFileDescriptor.markSupported()","java.io.InputStream.markSupported()"
"android.content.res.AssetFileDescriptor.skip(long)","java.io.FileInputStream.skip(long)"
"android.content.res.AssetFileDescriptor.getLength()","android.os.ParcelFileDescriptor.getStatSize()"
"android.content.res.AssetFileDescriptor.available()","java.io.FileInputStream.available()"
"android.content.res.AssetFileDescriptor.read(byte[])","android.content.res.AssetFileDescriptor.AutoCloseInputStream.read(byte[], int, int)"
"android.content.res.AssetFileDescriptor.write(byte[], int, int)","java.io.FileOutputStream.write(byte[], int, int)"
"android.content.res.AssetFileDescriptor.read(byte[], int, int)","java.io.FileInputStream.read(byte[], int, int)"
"android.gesture.GestureUtils.computeOrientation(float[][])","java.lang.Math.pow(float, int)"
"android.gesture.GestureUtils.computeOrientation(float[][])","java.lang.Math.sqrt(double)"
"android.gesture.GestureUtils.computeTotalLength(float[])","java.lang.Math.sqrt(float)"
"android.gesture.GestureUtils.closeStream(Closeable)","java.io.Closeable.close()"
"android.gesture.GestureUtils.spatialSampling(Gesture, int, boolean)","java.util.ArrayList.size()"
"android.gesture.GestureUtils.spatialSampling(Gesture, int, boolean)","java.lang.Math.ceil(float)"
"android.gesture.GestureUtils.spatialSampling(Gesture, int, boolean)","java.util.Arrays.fill(float[], int)"
"android.gesture.GestureUtils.spatialSampling(Gesture, int, boolean)","android.gesture.Gesture.getStrokes()"
"android.gesture.GestureUtils.spatialSampling(Gesture, int, boolean)","android.gesture.GestureUtils.plot(float, float, float[], int)"
"android.gesture.GestureUtils.spatialSampling(Gesture, int, boolean)","android.gesture.Gesture.getBoundingBox()"
"android.gesture.GestureUtils.spatialSampling(Gesture, int, boolean)","java.util.ArrayList.get(int)"
"android.gesture.GestureUtils.plot(float, float, float[], int)","java.lang.Math.ceil(float)"
"android.gesture.GestureUtils.plot(float, float, float[], int)","java.lang.Math.pow(float, int)"
"android.gesture.GestureUtils.plot(float, float, float[], int)","java.lang.Math.sqrt(double)"
"android.gesture.GestureUtils.plot(float, float, float[], int)","java.lang.Math.floor(float)"
"android.gesture.GestureUtils.temporalSampling(GestureStroke, int)","java.lang.Math.sqrt(float)"
"android.gesture.GestureUtils.computeOrientedBoundingBox(float[])","android.gesture.GestureUtils.computeCentroid(float[])"
"android.gesture.GestureUtils.computeOrientedBoundingBox(float[])","android.gesture.GestureUtils.computeOrientedBoundingBox(float[], float[])"
"android.gesture.GestureUtils.minimumCosineDistance(float[], float[], int)","java.lang.Math.atan(float)"
"android.gesture.GestureUtils.minimumCosineDistance(float[], float[], int)","java.lang.Math.cos(double)"
"android.gesture.GestureUtils.minimumCosineDistance(float[], float[], int)","java.lang.Math.abs(double)"
"android.gesture.GestureUtils.minimumCosineDistance(float[], float[], int)","java.lang.Math.acos(float)"
"android.gesture.GestureUtils.minimumCosineDistance(float[], float[], int)","java.lang.Math.acos(double)"
"android.gesture.GestureUtils.computeStraightness(float[])","java.lang.Math.sqrt(float)"
"android.gesture.GestureUtils.computeStraightness(float[])","android.gesture.GestureUtils.computeTotalLength(float[])"
"android.gesture.GestureUtils.cosineDistance(float[], float[])","java.lang.Math.acos(float)"
"android.gesture.GestureUtils.computeOrientedBoundingBox(float[], float[])","android.gesture.GestureUtils.computeCoVariance(float[])"
"android.gesture.GestureUtils.computeOrientedBoundingBox(float[], float[])","android.gesture.GestureUtils.rotate(float[], float)"
"android.gesture.GestureUtils.computeOrientedBoundingBox(float[], float[])","android.gesture.GestureUtils.translate(float[], float, float)"
"android.gesture.GestureUtils.computeOrientedBoundingBox(float[], float[])","java.lang.Math.atan2(float, float)"
"android.gesture.GestureUtils.computeOrientedBoundingBox(float[], float[])","android.gesture.GestureUtils.computeOrientation(float[][])"
"android.gesture.GestureUtils.rotate(float[], float)","java.lang.Math.cos(float)"
"android.gesture.GestureUtils.rotate(float[], float)","java.lang.Math.sin(float)"
"android.gesture.GestureUtils.computeStraightness(float[], float)","java.lang.Math.sqrt(float)"
"android.gesture.GestureUtils.computeOrientedBoundingBox(ArrayList)","java.util.ArrayList.size()"
"android.gesture.GestureUtils.computeOrientedBoundingBox(ArrayList)","android.gesture.GestureUtils.computeCentroid(float[])"
"android.gesture.GestureUtils.computeOrientedBoundingBox(ArrayList)","android.gesture.GestureUtils.computeOrientedBoundingBox(float[], float[])"
"android.gesture.GestureUtils.computeOrientedBoundingBox(ArrayList)","java.util.ArrayList.get(int)"
"android.gesture.GestureUtils.spatialSampling(Gesture, int)","android.gesture.GestureUtils.spatialSampling(android.gesture.Gesture, int, boolean)"
"android.app.ExitTransitionCoordinator.delayCancel()","android.os.Handler.sendEmptyMessageDelayed(int, long)"
"android.app.ExitTransitionCoordinator.startExitTransition()","android.app.ActivityTransitionCoordinator.getDecor()"
"android.app.ExitTransitionCoordinator.startExitTransition()","android.app.ExitTransitionCoordinator.getExitTransition()"
"android.app.ExitTransitionCoordinator.startExitTransition()","android.app.ActivityTransitionCoordinator.transitionStarted()"
"android.app.ExitTransitionCoordinator.startExitTransition()","android.transition.TransitionManager.beginDelayedTransition(android.view.ViewGroup, android.transition.Transition)"
"android.app.ExitTransitionCoordinator.sharedElementTransitionComplete()","android.app.ExitTransitionCoordinator.captureExitSharedElementsState()"
"android.app.ExitTransitionCoordinator.sharedElementTransitionComplete()","android.app.ExitTransitionCoordinator.notifyComplete()"
"android.app.ExitTransitionCoordinator.startSharedElementExit(ViewGroup)","android.app.SharedElementCallback.onSharedElementEnd(java.util.ArrayList<java.lang.String>, java.util.ArrayList<android.view.View>, java.util.ArrayList<android.view.View>)"
"android.app.ExitTransitionCoordinator.startSharedElementExit(ViewGroup)","android.transition.Transition.removeListener(android.app.ExitTransitionCoordinator.Anonymous-73a25195-aa13-4e7a-9b60-276287cb99ca)"
"android.app.ExitTransitionCoordinator.startSharedElementExit(ViewGroup)","android.app.ExitTransitionCoordinator.delayCancel()"
"android.app.ExitTransitionCoordinator.startSharedElementExit(ViewGroup)","android.app.ActivityTransitionCoordinator.setGhostVisibility(int)"
"android.app.ExitTransitionCoordinator.startSharedElementExit(ViewGroup)","android.app.ActivityTransitionCoordinator.createSnapshots(android.os.Bundle, java.util.ArrayList<java.lang.String>)"
"android.app.ExitTransitionCoordinator.startSharedElementExit(ViewGroup)","android.transition.Transition.addListener(android.transition.Transition.TransitionListenerAdapter)"
"android.app.ExitTransitionCoordinator.startSharedElementExit(ViewGroup)","android.transition.TransitionManager.beginDelayedTransition(android.view.ViewGroup, android.transition.Transition)"
"android.app.ExitTransitionCoordinator.startSharedElementExit(ViewGroup)","android.app.ActivityTransitionCoordinator.scheduleGhostVisibilityChange(int)"
"android.app.ExitTransitionCoordinator.startSharedElementExit(ViewGroup)","android.app.ExitTransitionCoordinator.getSharedElementExitTransition()"
"android.app.ExitTransitionCoordinator.stop()","android.app.Activity.convertToTranslucent(null, null)"
"android.app.ExitTransitionCoordinator.stop()","android.app.ExitTransitionCoordinator.finish()"
"android.app.ExitTransitionCoordinator.getSharedElementExitTransition()","android.app.ExitTransitionCoordinator.getSharedElementTransition()"
"android.app.ExitTransitionCoordinator.getSharedElementExitTransition()","android.app.ActivityTransitionCoordinator.showViews(java.util.ArrayList<android.view.View>, boolean)"
"android.app.ExitTransitionCoordinator.getSharedElementExitTransition()","java.util.ArrayList.isEmpty()"
"android.app.ExitTransitionCoordinator.getSharedElementExitTransition()","android.app.ActivityTransitionCoordinator.configureTransition(android.transition.Transition, boolean)"
"android.app.ExitTransitionCoordinator.getSharedElementExitTransition()","android.transition.Transition.addListener(android.app.ActivityTransitionCoordinator.ContinueTransitionListener)"
"android.app.ExitTransitionCoordinator.getSharedElementExitTransition()","android.app.ExitTransitionCoordinator.sharedElementTransitionComplete()"
"android.app.ExitTransitionCoordinator.getSharedElementExitTransition()","android.transition.Transition.removeListener(android.app.ExitTransitionCoordinator.Anonymous-0e0cb35c-bf71-406f-b9dd-2c773a1af1bd)"
"android.app.ExitTransitionCoordinator.getExitTransition()","android.app.ActivityTransitionCoordinator.showViews(java.util.ArrayList<android.view.View>, boolean)"
"android.app.ExitTransitionCoordinator.getExitTransition()","java.util.ArrayList.isEmpty()"
"android.app.ExitTransitionCoordinator.getExitTransition()","android.app.ExitTransitionCoordinator.getViewsTransition()"
"android.app.ExitTransitionCoordinator.getExitTransition()","android.transition.Transition.forceVisibility(int, boolean)"
"android.app.ExitTransitionCoordinator.getExitTransition()","android.app.ExitTransitionCoordinator.delayCancel()"
"android.app.ExitTransitionCoordinator.getExitTransition()","android.transition.Transition.TransitionListenerAdapter.onTransitionEnd(android.transition.Transition)"
"android.app.ExitTransitionCoordinator.getExitTransition()","android.transition.Transition.removeListener(android.app.ExitTransitionCoordinator.Anonymous-32263cea-3479-48d3-9456-3fec2e98257c)"
"android.app.ExitTransitionCoordinator.getExitTransition()","android.app.ExitTransitionCoordinator.exitTransitionComplete()"
"android.app.ExitTransitionCoordinator.getExitTransition()","android.app.ActivityTransitionCoordinator.configureTransition(android.transition.Transition, boolean)"
"android.app.ExitTransitionCoordinator.getExitTransition()","android.transition.Transition.addListener(android.app.ActivityTransitionCoordinator.ContinueTransitionListener)"
"android.app.ExitTransitionCoordinator.resetViews()","android.app.ActivityTransitionCoordinator.clearState()"
"android.app.ExitTransitionCoordinator.resetViews()","android.app.ActivityTransitionCoordinator.showViews(java.util.ArrayList<android.view.View>, boolean)"
"android.app.ExitTransitionCoordinator.resetViews()","android.app.ActivityTransitionCoordinator.getDecor()"
"android.app.ExitTransitionCoordinator.resetViews()","android.app.ActivityTransitionCoordinator.moveSharedElementsFromOverlay()"
"android.app.ExitTransitionCoordinator.beginTransitions()","android.app.ActivityTransitionCoordinator.mergeTransitions(android.transition.Transition, android.transition.Transition)"
"android.app.ExitTransitionCoordinator.beginTransitions()","android.app.ActivityTransitionCoordinator.getDecor()"
"android.app.ExitTransitionCoordinator.beginTransitions()","android.app.ExitTransitionCoordinator.getExitTransition()"
"android.app.ExitTransitionCoordinator.beginTransitions()","android.app.ActivityTransitionCoordinator.setGhostVisibility(int)"
"android.app.ExitTransitionCoordinator.beginTransitions()","android.app.ActivityTransitionCoordinator.transitionStarted()"
"android.app.ExitTransitionCoordinator.beginTransitions()","android.transition.TransitionManager.beginDelayedTransition(android.view.ViewGroup, android.transition.Transition)"
"android.app.ExitTransitionCoordinator.beginTransitions()","android.app.ActivityTransitionCoordinator.scheduleGhostVisibilityChange(int)"
"android.app.ExitTransitionCoordinator.beginTransitions()","android.app.ExitTransitionCoordinator.getSharedElementExitTransition()"
"android.app.ExitTransitionCoordinator.startExit(int, Intent)","android.app.ActivityTransitionCoordinator.getDecor()"
"android.app.ExitTransitionCoordinator.startExit(int, Intent)","android.app.ExitTransitionCoordinator.startExitTransition()"
"android.app.ExitTransitionCoordinator.startExit(int, Intent)","android.app.ActivityOptions.makeSceneTransitionAnimation(android.app.Activity, android.app.ExitTransitionCoordinator, java.util.ArrayList<java.lang.String>, int, android.content.Intent)"
"android.app.ExitTransitionCoordinator.startExit(int, Intent)","android.app.ExitTransitionCoordinator.delayCancel()"
"android.app.ExitTransitionCoordinator.startExit(int, Intent)","android.app.ActivityTransitionCoordinator.moveSharedElementsToOverlay()"
"android.app.ExitTransitionCoordinator.startExit(int, Intent)","android.app.ActivityTransitionCoordinator.startTransition(java.lang.Runnable)"
"android.app.ExitTransitionCoordinator.startExit(int, Intent)","android.app.Activity.convertToTranslucent(android.app.Activity.TranslucentConversionListener, android.app.ActivityOptions)"
"android.app.ExitTransitionCoordinator.startExit(int, Intent)","android.app.ExitTransitionCoordinator.fadeOutBackground()"
"android.app.ExitTransitionCoordinator.startExit(int, Intent)","android.app.ExitTransitionCoordinator.finish()"
"android.app.ExitTransitionCoordinator.finish()","android.app.ActivityTransitionCoordinator.clearState()"
"android.app.ExitTransitionCoordinator.finish()","android.app.Activity.finish()"
"android.app.ExitTransitionCoordinator.finish()","android.app.ExitTransitionCoordinator.stopCancel()"
"android.app.ExitTransitionCoordinator.finish()","android.app.Activity.overridePendingTransition(int, int)"
"android.app.ExitTransitionCoordinator.finish()","android.app.ActivityTransitionState.clear()"
"android.app.ExitTransitionCoordinator.finish()","android.animation.ValueAnimator.cancel()"
"android.app.ExitTransitionCoordinator.finishIfNecessary()","java.util.ArrayList.isEmpty()"
"android.app.ExitTransitionCoordinator.finishIfNecessary()","android.app.ExitTransitionCoordinator.finish()"
"android.app.ExitTransitionCoordinator.fadeOutBackground()","android.animation.Animator.addListener(android.animation.AnimatorListenerAdapter)"
"android.app.ExitTransitionCoordinator.fadeOutBackground()","android.animation.ObjectAnimator.start()"
"android.app.ExitTransitionCoordinator.fadeOutBackground()","android.app.ExitTransitionCoordinator.notifyComplete()"
"android.app.ExitTransitionCoordinator.fadeOutBackground()","android.app.ActivityTransitionCoordinator.getDecor()"
"android.app.ExitTransitionCoordinator.fadeOutBackground()","android.animation.ObjectAnimator.setDuration(long)"
"android.app.ExitTransitionCoordinator.fadeOutBackground()","android.app.ActivityTransitionCoordinator.getFadeDuration()"
"android.app.ExitTransitionCoordinator.notifyComplete()","android.app.ActivityTransitionCoordinator.getDecor()"
"android.app.ExitTransitionCoordinator.notifyComplete()","android.app.ExitTransitionCoordinator.isReadyToNotify()"
"android.app.ExitTransitionCoordinator.notifyComplete()","android.app.ExitTransitionCoordinator.delayCancel()"
"android.app.ExitTransitionCoordinator.notifyComplete()","android.os.ResultReceiver.send(int, android.os.Bundle)"
"android.app.ExitTransitionCoordinator.notifyComplete()","android.os.ResultReceiver.send(int, null)"
"android.app.ExitTransitionCoordinator.notifyComplete()","android.app.ExitTransitionCoordinator.finishIfNecessary()"
"android.app.ExitTransitionCoordinator.hideSharedElements()","android.app.ActivityTransitionCoordinator.hideViews(java.util.ArrayList<android.view.View>)"
"android.app.ExitTransitionCoordinator.hideSharedElements()","android.app.ActivityTransitionCoordinator.moveSharedElementsFromOverlay()"
"android.app.ExitTransitionCoordinator.hideSharedElements()","android.app.ExitTransitionCoordinator.finishIfNecessary()"
"android.app.ExitTransitionCoordinator.captureExitSharedElementsState()","java.util.ArrayList.size()"
"android.app.ExitTransitionCoordinator.captureExitSharedElementsState()","android.os.Bundle.getBundle(java.lang.String)"
"android.app.ExitTransitionCoordinator.captureExitSharedElementsState()","java.util.ArrayList.get(int)"
"android.app.ExitTransitionCoordinator.captureExitSharedElementsState()","android.os.Bundle.putBundle(java.lang.String, android.os.Bundle)"
"android.app.ExitTransitionCoordinator.sharedElementExitBack()","android.app.ExitTransitionCoordinator.getSharedElementTransition()"
"android.app.ExitTransitionCoordinator.sharedElementExitBack()","android.app.ActivityTransitionCoordinator.getDecor()"
"android.app.ExitTransitionCoordinator.sharedElementExitBack()","java.util.ArrayList.isEmpty()"
"android.app.ExitTransitionCoordinator.sharedElementExitBack()","android.app.ActivityTransitionCoordinator.startTransition(java.lang.Runnable)"
"android.app.ExitTransitionCoordinator.sharedElementExitBack()","android.app.ExitTransitionCoordinator.startSharedElementExit(android.view.ViewGroup)"
"android.app.ExitTransitionCoordinator.sharedElementExitBack()","android.os.BaseBundle.isEmpty()"
"android.app.ExitTransitionCoordinator.sharedElementExitBack()","android.app.ExitTransitionCoordinator.sharedElementTransitionComplete()"
"android.app.ExitTransitionCoordinator.startExit()","android.app.ActivityTransitionCoordinator.getDecor()"
"android.app.ExitTransitionCoordinator.startExit()","android.app.ExitTransitionCoordinator.beginTransitions()"
"android.app.ExitTransitionCoordinator.startExit()","android.app.ActivityTransitionCoordinator.moveSharedElementsToOverlay()"
"android.app.ExitTransitionCoordinator.startExit()","android.app.ActivityTransitionCoordinator.startTransition(java.lang.Runnable)"
"android.app.ExitTransitionCoordinator.onReceiveResult(int, Bundle)","android.app.ExitTransitionCoordinator.notifyComplete()"
"android.app.ExitTransitionCoordinator.onReceiveResult(int, Bundle)","android.os.Handler.removeMessages(int)"
"android.app.ExitTransitionCoordinator.onReceiveResult(int, Bundle)","android.app.ExitTransitionCoordinator.stopCancel()"
"android.app.ExitTransitionCoordinator.onReceiveResult(int, Bundle)","android.app.ExitTransitionCoordinator.sharedElementExitBack()"
"android.app.ExitTransitionCoordinator.onReceiveResult(int, Bundle)","android.app.ExitTransitionCoordinator.startExit()"
"android.app.ExitTransitionCoordinator.onReceiveResult(int, Bundle)","android.app.ExitTransitionCoordinator.hideSharedElements()"
"android.app.ExitTransitionCoordinator.onReceiveResult(int, Bundle)","android.os.ResultReceiver.send(int, null)"
"android.app.ExitTransitionCoordinator.onReceiveResult(int, Bundle)","android.os.Bundle.getParcelable(java.lang.String)"
"android.app.ExitTransitionCoordinator.getViewsTransition()","android.app.ActivityTransitionCoordinator.getWindow()"
"android.app.ExitTransitionCoordinator.getViewsTransition()","android.view.Window.getReturnTransition()"
"android.app.ExitTransitionCoordinator.getViewsTransition()","android.view.Window.getExitTransition()"
"android.app.ExitTransitionCoordinator.exitTransitionComplete()","android.app.ExitTransitionCoordinator.notifyComplete()"
"android.app.ExitTransitionCoordinator.stopCancel()","android.os.Handler.removeMessages(int)"
"android.app.ExitTransitionCoordinator.getSharedElementTransition()","android.app.ActivityTransitionCoordinator.getWindow()"
"android.app.ExitTransitionCoordinator.getSharedElementTransition()","android.view.Window.getSharedElementReturnTransition()"
"android.app.ExitTransitionCoordinator.getSharedElementTransition()","android.view.Window.getSharedElementExitTransition()"
"android.os.ServiceManagerNative.checkService(String)","android.os.Parcel.readStrongBinder()"
"android.os.ServiceManagerNative.checkService(String)","android.os.Parcel.writeString(java.lang.String)"
"android.os.ServiceManagerNative.checkService(String)","android.os.Parcel.recycle()"
"android.os.ServiceManagerNative.checkService(String)","android.os.Parcel.obtain()"
"android.os.ServiceManagerNative.checkService(String)","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.os.ServiceManagerNative.checkService(String)","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.os.ServiceManagerNative.listServices()","java.util.ArrayList.size()"
"android.os.ServiceManagerNative.listServices()","java.util.ArrayList.add(java.lang.String)"
"android.os.ServiceManagerNative.listServices()","android.os.Parcel.recycle()"
"android.os.ServiceManagerNative.listServices()","android.os.Parcel.obtain()"
"android.os.ServiceManagerNative.listServices()","android.os.Parcel.readString()"
"android.os.ServiceManagerNative.listServices()","java.util.ArrayList.toArray(java.lang.String[])"
"android.os.ServiceManagerNative.listServices()","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.os.ServiceManagerNative.listServices()","android.os.Parcel.writeInt(int)"
"android.os.ServiceManagerNative.listServices()","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.os.ServiceManagerNative.getService(String)","android.os.Parcel.readStrongBinder()"
"android.os.ServiceManagerNative.getService(String)","android.os.Parcel.writeString(java.lang.String)"
"android.os.ServiceManagerNative.getService(String)","android.os.Parcel.recycle()"
"android.os.ServiceManagerNative.getService(String)","android.os.Parcel.obtain()"
"android.os.ServiceManagerNative.getService(String)","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.os.ServiceManagerNative.getService(String)","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.os.ServiceManagerNative.addService(String, IBinder, boolean)","android.os.Parcel.writeString(java.lang.String)"
"android.os.ServiceManagerNative.addService(String, IBinder, boolean)","android.os.Parcel.writeStrongBinder(android.os.IBinder)"
"android.os.ServiceManagerNative.addService(String, IBinder, boolean)","android.os.Parcel.recycle()"
"android.os.ServiceManagerNative.addService(String, IBinder, boolean)","android.os.Parcel.obtain()"
"android.os.ServiceManagerNative.addService(String, IBinder, boolean)","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.os.ServiceManagerNative.addService(String, IBinder, boolean)","android.os.Parcel.writeInt(int)"
"android.os.ServiceManagerNative.addService(String, IBinder, boolean)","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.enforceInterface(java.lang.String)"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.readStrongBinder()"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.IServiceManager.listServices()"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.writeStringArray(java.lang.String[])"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.writeStrongBinder(android.os.IBinder)"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.readString()"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.IServiceManager.addService(java.lang.String, android.os.IBinder, boolean)"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.IServiceManager.getService(java.lang.String)"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.readInt()"
"android.os.ServiceManagerNative.onTransact(int, Parcel, Parcel, int)","android.os.IServiceManager.checkService(java.lang.String)"
"android.os.ServiceManagerNative.asInterface(IBinder)","android.os.IBinder.queryLocalInterface(java.lang.String)"
"android.os.ServiceManagerNative.setPermissionController(IPermissionController)","android.os.Parcel.recycle()"
"android.os.ServiceManagerNative.setPermissionController(IPermissionController)","android.os.Parcel.obtain()"
"android.os.ServiceManagerNative.setPermissionController(IPermissionController)","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.os.ServiceManagerNative.setPermissionController(IPermissionController)","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.view.WindowCallbackWrapper.dispatchTrackballEvent(MotionEvent)","android.view.Window.Callback.dispatchTrackballEvent(android.view.MotionEvent)"
"android.view.WindowCallbackWrapper.onMenuOpened(int, Menu)","android.view.Window.Callback.onMenuOpened(int, android.view.Menu)"
"android.view.WindowCallbackWrapper.onCreatePanelMenu(int, Menu)","android.view.Window.Callback.onCreatePanelMenu(int, android.view.Menu)"
"android.view.WindowCallbackWrapper.dispatchGenericMotionEvent(MotionEvent)","android.view.Window.Callback.dispatchGenericMotionEvent(android.view.MotionEvent)"
"android.view.WindowCallbackWrapper.onSearchRequested()","android.view.Window.Callback.onSearchRequested()"
"android.view.WindowCallbackWrapper.onMenuItemSelected(int, MenuItem)","android.view.Window.Callback.onMenuItemSelected(int, android.view.MenuItem)"
"android.view.WindowCallbackWrapper.onPreparePanel(int, View, Menu)","android.view.Window.Callback.onPreparePanel(int, android.view.View, android.view.Menu)"
"android.view.WindowCallbackWrapper.onDetachedFromWindow()","android.view.Window.Callback.onDetachedFromWindow()"
"android.view.WindowCallbackWrapper.dispatchKeyEvent(KeyEvent)","android.view.Window.Callback.dispatchKeyEvent(android.view.KeyEvent)"
"android.view.WindowCallbackWrapper.onWindowFocusChanged(boolean)","android.view.Window.Callback.onWindowFocusChanged(boolean)"
"android.view.WindowCallbackWrapper.onContentChanged()","android.view.Window.Callback.onContentChanged()"
"android.view.WindowCallbackWrapper.onWindowStartingActionMode(ActionMode.Callback)","android.view.Window.Callback.onWindowStartingActionMode(android.view.ActionMode.Callback)"
"android.view.WindowCallbackWrapper.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.Window.Callback.dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.view.WindowCallbackWrapper.dispatchKeyShortcutEvent(KeyEvent)","android.view.Window.Callback.dispatchKeyShortcutEvent(android.view.KeyEvent)"
"android.view.WindowCallbackWrapper.onWindowAttributesChanged(WindowManager.LayoutParams)","android.view.Window.Callback.onWindowAttributesChanged(android.view.WindowManager.LayoutParams)"
"android.view.WindowCallbackWrapper.onActionModeStarted(ActionMode)","android.view.Window.Callback.onActionModeStarted(android.view.ActionMode)"
"android.view.WindowCallbackWrapper.onCreatePanelView(int)","android.view.Window.Callback.onCreatePanelView(int)"
"android.view.WindowCallbackWrapper.dispatchTouchEvent(MotionEvent)","android.view.Window.Callback.dispatchTouchEvent(android.view.MotionEvent)"
"android.view.WindowCallbackWrapper.onAttachedToWindow()","android.view.Window.Callback.onAttachedToWindow()"
"android.view.WindowCallbackWrapper.onPanelClosed(int, Menu)","android.view.Window.Callback.onPanelClosed(int, android.view.Menu)"
"android.view.WindowCallbackWrapper.onActionModeFinished(ActionMode)","android.view.Window.Callback.onActionModeFinished(android.view.ActionMode)"
"android.net.NetworkFactory.addNetworkRequest(NetworkRequest, int)","android.os.Handler.sendMessage(android.os.Message)"
"android.net.NetworkFactory.addNetworkRequest(NetworkRequest, int)","android.os.Handler.obtainMessage(int, android.net.NetworkFactory.NetworkRequestInfo)"
"android.net.NetworkFactory.setScoreFilter(int)","android.os.Handler.sendMessage(android.os.Message)"
"android.net.NetworkFactory.setScoreFilter(int)","android.os.Handler.obtainMessage(int, int, int)"
"android.net.NetworkFactory.needNetworkFor(NetworkRequest, int)","android.net.NetworkFactory.startNetwork()"
"android.net.NetworkFactory.setCapabilityFilter(NetworkCapabilities)","android.os.Handler.sendMessage(android.os.Message)"
"android.net.NetworkFactory.setCapabilityFilter(NetworkCapabilities)","android.os.Handler.obtainMessage(int, android.net.NetworkCapabilities)"
"android.net.NetworkFactory.handleAddRequest(NetworkRequest, int)","android.util.SparseArray.put(int, android.net.NetworkFactory.NetworkRequestInfo)"
"android.net.NetworkFactory.handleAddRequest(NetworkRequest, int)","android.util.SparseArray.get(int)"
"android.net.NetworkFactory.handleAddRequest(NetworkRequest, int)","android.net.NetworkFactory.evalRequest(android.net.NetworkFactory.NetworkRequestInfo)"
"android.net.NetworkFactory.handleAddRequest(NetworkRequest, int)","android.net.NetworkFactory.log(java.lang.String)"
"android.net.NetworkFactory.handleMessage(Message)","android.net.NetworkFactory.handleAddRequest(android.net.NetworkRequest, int)"
"android.net.NetworkFactory.handleMessage(Message)","android.net.NetworkFactory.handleSetFilter(android.net.NetworkCapabilities)"
"android.net.NetworkFactory.handleMessage(Message)","android.net.NetworkFactory.handleRemoveRequest(android.net.NetworkRequest)"
"android.net.NetworkFactory.handleMessage(Message)","android.net.NetworkFactory.handleSetScore(int)"
"android.net.NetworkFactory.handleSetScore(int)","android.net.NetworkFactory.evalRequests()"
"android.net.NetworkFactory.toString()","java.lang.StringBuilder.append(int)"
"android.net.NetworkFactory.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.net.NetworkFactory.toString()","java.lang.StringBuilder.toString()"
"android.net.NetworkFactory.toString()","android.util.SparseArray.size()"
"android.net.NetworkFactory.toString()","java.lang.StringBuilder.append(android.net.NetworkCapabilities)"
"android.net.NetworkFactory.evalRequest(NetworkRequestInfo)","android.net.NetworkFactory.releaseNetworkFor(android.net.NetworkRequest)"
"android.net.NetworkFactory.evalRequest(NetworkRequestInfo)","android.net.NetworkFactory.acceptRequest(android.net.NetworkRequest, int)"
"android.net.NetworkFactory.evalRequest(NetworkRequestInfo)","android.net.NetworkCapabilities.satisfiedByNetworkCapabilities(android.net.NetworkCapabilities)"
"android.net.NetworkFactory.evalRequest(NetworkRequestInfo)","android.net.NetworkFactory.needNetworkFor(android.net.NetworkRequest, int)"
"android.net.NetworkFactory.evalRequest(NetworkRequestInfo)","android.net.NetworkFactory.log(java.lang.String)"
"android.net.NetworkFactory.handleRemoveRequest(NetworkRequest)","android.util.SparseArray.remove(int)"
"android.net.NetworkFactory.handleRemoveRequest(NetworkRequest)","android.net.NetworkFactory.releaseNetworkFor(android.net.NetworkRequest)"
"android.net.NetworkFactory.handleRemoveRequest(NetworkRequest)","android.util.SparseArray.get(int)"
"android.net.NetworkFactory.evalRequests()","android.util.SparseArray.valueAt(int)"
"android.net.NetworkFactory.evalRequests()","android.util.SparseArray.size()"
"android.net.NetworkFactory.evalRequests()","android.net.NetworkFactory.evalRequest(android.net.NetworkFactory.NetworkRequestInfo)"
"android.net.NetworkFactory.releaseNetworkFor(NetworkRequest)","android.net.NetworkFactory.stopNetwork()"
"android.net.NetworkFactory.removeNetworkRequest(NetworkRequest)","android.os.Handler.sendMessage(android.os.Message)"
"android.net.NetworkFactory.removeNetworkRequest(NetworkRequest)","android.os.Handler.obtainMessage(int, android.net.NetworkRequest)"
"android.net.NetworkFactory.unregister()","android.net.ConnectivityManager.unregisterNetworkFactory(android.os.Messenger)"
"android.net.NetworkFactory.unregister()","android.net.ConnectivityManager.from(android.content.Context)"
"android.net.NetworkFactory.unregister()","android.net.NetworkFactory.log(java.lang.String)"
"android.net.NetworkFactory.register()","android.net.ConnectivityManager.registerNetworkFactory(android.os.Messenger, java.lang.String)"
"android.net.NetworkFactory.register()","android.net.ConnectivityManager.from(android.content.Context)"
"android.net.NetworkFactory.register()","android.net.NetworkFactory.log(java.lang.String)"
"android.net.NetworkFactory.handleSetFilter(NetworkCapabilities)","android.net.NetworkFactory.evalRequests()"
"android.hardware.Camera.getSupportedJpegThumbnailSizes()","android.hardware.Camera.Parameters.splitSize(java.lang.String)"
"android.hardware.Camera.getSupportedJpegThumbnailSizes()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setFocusMode(String)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.cameraInitUnspecified(int)","android.hardware.Camera.cameraInitVersion(int, int)"
"android.hardware.Camera.getSupportedVideoSizes()","android.hardware.Camera.Parameters.splitSize(java.lang.String)"
"android.hardware.Camera.getSupportedVideoSizes()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getMaxNumFocusAreas()","android.hardware.Camera.Parameters.getInt(java.lang.String, int)"
"android.hardware.Camera.setVideoStabilization(boolean)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.isSmoothZoomSupported()","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.isSmoothZoomSupported()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getSupportedWhiteBalance()","android.hardware.Camera.Parameters.split(java.lang.String)"
"android.hardware.Camera.getSupportedWhiteBalance()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.splitInt(String)","java.util.ArrayList.size()"
"android.hardware.Camera.splitInt(String)","java.util.ArrayList.add(int)"
"android.hardware.Camera.splitInt(String)","android.text.TextUtils.StringSplitter.setString(java.lang.String)"
"android.hardware.Camera.splitInt(String)","java.lang.Integer.parseInt(java.lang.String)"
"android.hardware.Camera.setAntibanding(String)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getJpegThumbnailQuality()","android.hardware.Camera.Parameters.getInt(java.lang.String)"
"android.hardware.Camera.setFocusAreas(List)","android.hardware.Camera.Parameters.set(java.lang.String, java.util.List<android.hardware.Camera.Area>)"
"android.hardware.Camera.split(String)","java.util.ArrayList.add(java.lang.String)"
"android.hardware.Camera.split(String)","android.text.TextUtils.StringSplitter.setString(java.lang.String)"
"android.hardware.Camera.addCallbackBuffer(byte[])","android.hardware.Camera._addCallbackBuffer(byte[], int)"
"android.hardware.Camera.get(String)","java.util.LinkedHashMap.get(java.lang.String)"
"android.hardware.Camera.release()","android.hardware.Camera.native_release()"
"android.hardware.Camera.setPreviewCallback(PreviewCallback)","android.hardware.Camera.setHasPreviewCallback(boolean, boolean)"
"android.hardware.Camera.setJpegThumbnailQuality(int)","android.hardware.Camera.Parameters.set(java.lang.String, int)"
"android.hardware.Camera.isVideoStabilizationSupported()","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.isVideoStabilizationSupported()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getSceneMode()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setAutoFocusMoveCallback(AutoFocusMoveCallback)","android.hardware.Camera.enableFocusMoveCallback(int)"
"android.hardware.Camera.setColorEffect(String)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getSupportedColorEffects()","android.hardware.Camera.Parameters.split(java.lang.String)"
"android.hardware.Camera.getSupportedColorEffects()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getPreviewFpsRange(int[])","android.hardware.Camera.Parameters.splitInt(java.lang.String, int[])"
"android.hardware.Camera.getPreviewFpsRange(int[])","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setExposureCompensation(int)","android.hardware.Camera.Parameters.set(java.lang.String, int)"
"android.hardware.Camera.setGpsLongitude(double)","java.lang.Double.toString(double)"
"android.hardware.Camera.setGpsLongitude(double)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getInt(String)","java.lang.Integer.parseInt(java.lang.String)"
"android.hardware.Camera.getInt(String)","java.util.LinkedHashMap.get(java.lang.String)"
"android.hardware.Camera.strToSize(String)","java.lang.String.substring(int)"
"android.hardware.Camera.strToSize(String)","java.lang.String.substring(int, int)"
"android.hardware.Camera.strToSize(String)","java.lang.String.indexOf(char)"
"android.hardware.Camera.strToSize(String)","java.lang.Integer.parseInt(java.lang.String)"
"android.hardware.Camera.createPreviewAllocation(RenderScript, int)","android.hardware.Camera.Parameters.getPreviewSize()"
"android.hardware.Camera.createPreviewAllocation(RenderScript, int)","android.hardware.Camera.getParameters()"
"android.hardware.Camera.splitSize(String)","java.util.ArrayList.size()"
"android.hardware.Camera.splitSize(String)","java.util.ArrayList.add(android.hardware.Camera.Size)"
"android.hardware.Camera.splitSize(String)","android.hardware.Camera.Parameters.strToSize(java.lang.String)"
"android.hardware.Camera.splitSize(String)","android.text.TextUtils.StringSplitter.setString(java.lang.String)"
"android.hardware.Camera.cameraInitVersion(int, int)","android.hardware.Camera.native_setup(java.lang.ref.WeakReference<android.hardware.Camera>, int, int, java.lang.String)"
"android.hardware.Camera.cameraInitVersion(int, int)","android.os.Looper.getMainLooper()"
"android.hardware.Camera.cameraInitVersion(int, int)","android.os.Looper.myLooper()"
"android.hardware.Camera.cameraInitVersion(int, int)","android.app.ActivityThread.currentPackageName()"
"android.hardware.Camera.getSupportedPreviewSizes()","android.hardware.Camera.Parameters.splitSize(java.lang.String)"
"android.hardware.Camera.getSupportedPreviewSizes()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getSupportedPreviewFormats()","android.hardware.Camera.Parameters.pixelFormatForCameraFormat(java.lang.String)"
"android.hardware.Camera.getSupportedPreviewFormats()","android.hardware.Camera.Parameters.split(java.lang.String)"
"android.hardware.Camera.getSupportedPreviewFormats()","java.util.ArrayList.add(int)"
"android.hardware.Camera.getSupportedPreviewFormats()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setPreviewCallbackWithBuffer(PreviewCallback)","android.hardware.Camera.setHasPreviewCallback(boolean, boolean)"
"android.hardware.Camera.postEventFromNative(Object, int, int, int, Object)","java.lang.ref.Reference.get()"
"android.hardware.Camera.postEventFromNative(Object, int, int, int, Object)","android.os.Handler.sendMessage(android.os.Message)"
"android.hardware.Camera.postEventFromNative(Object, int, int, int, Object)","android.os.Handler.obtainMessage(int, int, int, java.lang.Object)"
"android.hardware.Camera.getJpegThumbnailSize()","android.hardware.Camera.Parameters.getInt(java.lang.String)"
"android.hardware.Camera.finalize()","android.hardware.Camera.release()"
"android.hardware.Camera.getFocusMode()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getHorizontalViewAngle()","java.lang.Float.parseFloat(java.lang.String)"
"android.hardware.Camera.getHorizontalViewAngle()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getAutoWhiteBalanceLock()","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.getAutoWhiteBalanceLock()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getAntibanding()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.splitInt(String, int[])","android.text.TextUtils.StringSplitter.setString(java.lang.String)"
"android.hardware.Camera.splitInt(String, int[])","java.lang.Integer.parseInt(java.lang.String)"
"android.hardware.Camera.setJpegQuality(int)","android.hardware.Camera.Parameters.set(java.lang.String, int)"
"android.hardware.Camera.isAutoExposureLockSupported()","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.isAutoExposureLockSupported()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getPreferredPreviewSizeForVideo()","android.hardware.Camera.Parameters.strToSize(java.lang.String)"
"android.hardware.Camera.getPreferredPreviewSizeForVideo()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.splitFloat(String, float[])","java.lang.Float.parseFloat(java.lang.String)"
"android.hardware.Camera.splitFloat(String, float[])","android.text.TextUtils.StringSplitter.setString(java.lang.String)"
"android.hardware.Camera.setPreviewFormat(int)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.setPreviewFormat(int)","android.hardware.Camera.Parameters.cameraFormatForPixelFormat(int)"
"android.hardware.Camera.setGpsTimestamp(long)","java.lang.Long.toString(long)"
"android.hardware.Camera.setGpsTimestamp(long)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getParametersCopy(Camera.Parameters)","android.hardware.Camera.Parameters.getOuter()"
"android.hardware.Camera.getParametersCopy(Camera.Parameters)","android.hardware.Camera.Parameters.copyFrom(android.hardware.Camera.Parameters)"
"android.hardware.Camera.getJpegQuality()","android.hardware.Camera.Parameters.getInt(java.lang.String)"
"android.hardware.Camera.same(String, String)","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.copyFrom(Parameters)","java.util.HashMap.putAll(java.util.LinkedHashMap<java.lang.String, java.lang.String>)"
"android.hardware.Camera.getMeteringAreas()","android.hardware.Camera.Parameters.splitArea(java.lang.String)"
"android.hardware.Camera.getMeteringAreas()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getZoomRatios()","android.hardware.Camera.Parameters.splitInt(java.lang.String)"
"android.hardware.Camera.getZoomRatios()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getMinExposureCompensation()","android.hardware.Camera.Parameters.getInt(java.lang.String, int)"
"android.hardware.Camera.handleMessage(Message)","android.hardware.Camera.PictureCallback.onPictureTaken(byte[], android.hardware.Camera)"
"android.hardware.Camera.handleMessage(Message)","android.hardware.Camera.ErrorCallback.onError(int, android.hardware.Camera)"
"android.hardware.Camera.handleMessage(Message)","android.hardware.Camera.AutoFocusMoveCallback.onAutoFocusMoving(boolean, android.hardware.Camera)"
"android.hardware.Camera.handleMessage(Message)","android.hardware.Camera.setHasPreviewCallback(boolean, boolean)"
"android.hardware.Camera.handleMessage(Message)","android.hardware.Camera.PreviewCallback.onPreviewFrame(byte[], android.hardware.Camera)"
"android.hardware.Camera.handleMessage(Message)","android.hardware.Camera.OnZoomChangeListener.onZoomChange(int, boolean, android.hardware.Camera)"
"android.hardware.Camera.handleMessage(Message)","android.hardware.Camera.ShutterCallback.onShutter()"
"android.hardware.Camera.handleMessage(Message)","android.hardware.Camera.FaceDetectionListener.onFaceDetection(android.hardware.Camera.Face[], android.hardware.Camera)"
"android.hardware.Camera.handleMessage(Message)","android.hardware.Camera.AutoFocusCallback.onAutoFocus(boolean, android.hardware.Camera)"
"android.hardware.Camera.setWhiteBalance(String)","android.hardware.Camera.Parameters.same(java.lang.String, java.lang.String)"
"android.hardware.Camera.setWhiteBalance(String)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.setWhiteBalance(String)","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setPreviewCallbackAllocation(Allocation)","android.hardware.Camera.Parameters.getPreviewSize()"
"android.hardware.Camera.setPreviewCallbackAllocation(Allocation)","android.hardware.Camera.setPreviewCallbackSurface(android.view.Surface)"
"android.hardware.Camera.setPreviewCallbackAllocation(Allocation)","android.hardware.Camera.getParameters()"
"android.hardware.Camera.getFocusAreas()","android.hardware.Camera.Parameters.splitArea(java.lang.String)"
"android.hardware.Camera.getFocusAreas()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setOneShotPreviewCallback(PreviewCallback)","android.hardware.Camera.setHasPreviewCallback(boolean, boolean)"
"android.hardware.Camera.isAutoWhiteBalanceLockSupported()","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.isAutoWhiteBalanceLockSupported()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.set(String, String)","android.hardware.Camera.Parameters.put(java.lang.String, java.lang.String)"
"android.hardware.Camera.set(String, String)","java.lang.String.indexOf(int)"
"android.hardware.Camera.set(String, String)","java.lang.String.indexOf(char)"
"android.hardware.Camera.getMaxNumMeteringAreas()","android.hardware.Camera.Parameters.getInt(java.lang.String, int)"
"android.hardware.Camera.getColorEffect()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.set(String, List)","java.lang.StringBuilder.append(int)"
"android.hardware.Camera.set(String, List)","java.util.List.size()"
"android.hardware.Camera.set(String, List)","java.lang.StringBuilder.toString()"
"android.hardware.Camera.set(String, List)","java.lang.StringBuilder.append(char)"
"android.hardware.Camera.set(String, List)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.set(String, List)","java.util.List.get(int)"
"android.hardware.Camera.setGpsProcessingMethod(String)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getSupportedPictureSizes()","android.hardware.Camera.Parameters.splitSize(java.lang.String)"
"android.hardware.Camera.getSupportedPictureSizes()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.takePicture(ShutterCallback, PictureCallback, PictureCallback, PictureCallback)","android.hardware.Camera.native_takePicture(int)"
"android.hardware.Camera.setZoom(int)","android.hardware.Camera.Parameters.set(java.lang.String, int)"
"android.hardware.Camera.getPreviewSize()","android.hardware.Camera.Parameters.strToSize(java.lang.String)"
"android.hardware.Camera.getPreviewSize()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.stopFaceDetection()","android.hardware.Camera._stopFaceDetection()"
"android.hardware.Camera.splitArea(String)","java.lang.String.charAt(int)"
"android.hardware.Camera.splitArea(String)","java.util.ArrayList.size()"
"android.hardware.Camera.splitArea(String)","java.lang.String.indexOf(java.lang.String, int)"
"android.hardware.Camera.splitArea(String)","android.hardware.Camera.Parameters.splitInt(java.lang.String, int[])"
"android.hardware.Camera.splitArea(String)","java.lang.String.substring(int, int)"
"android.hardware.Camera.splitArea(String)","java.util.ArrayList.get(int)"
"android.hardware.Camera.splitArea(String)","java.lang.String.length()"
"android.hardware.Camera.splitArea(String)","java.util.ArrayList.add(android.hardware.Camera.Area)"
"android.hardware.Camera.open()","android.hardware.Camera.getNumberOfCameras()"
"android.hardware.Camera.open()","android.hardware.Camera.getCameraInfo(int, android.hardware.Camera.CameraInfo)"
"android.hardware.Camera.cameraInitNormal(int)","android.hardware.Camera.cameraInitVersion(int, int)"
"android.hardware.Camera.getFocalLength()","java.lang.Float.parseFloat(java.lang.String)"
"android.hardware.Camera.getFocalLength()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getSupportedPreviewFrameRates()","android.hardware.Camera.Parameters.splitInt(java.lang.String)"
"android.hardware.Camera.getSupportedPreviewFrameRates()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setMeteringAreas(List)","android.hardware.Camera.Parameters.set(java.lang.String, java.util.List<android.hardware.Camera.Area>)"
"android.hardware.Camera.getVerticalViewAngle()","java.lang.Float.parseFloat(java.lang.String)"
"android.hardware.Camera.getVerticalViewAngle()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getInt(String, int)","java.lang.Integer.parseInt(java.lang.String)"
"android.hardware.Camera.getInt(String, int)","java.util.LinkedHashMap.get(java.lang.String)"
"android.hardware.Camera.setAutoExposureLock(boolean)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.startFaceDetection()","android.hardware.Camera._startFaceDetection(int)"
"android.hardware.Camera.getZoom()","android.hardware.Camera.Parameters.getInt(java.lang.String, int)"
"android.hardware.Camera.getVideoStabilization()","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.getVideoStabilization()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.remove(String)","java.util.HashMap.remove(java.lang.String)"
"android.hardware.Camera.getMaxNumDetectedFaces()","android.hardware.Camera.Parameters.getInt(java.lang.String, int)"
"android.hardware.Camera.addCallbackBuffer(byte[], int)","android.hardware.Camera._addCallbackBuffer(byte[], int)"
"android.hardware.Camera.dump()","java.util.LinkedHashMap.keySet()"
"android.hardware.Camera.getSupportedPreviewFpsRange()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getSupportedPreviewFpsRange()","android.hardware.Camera.Parameters.splitRange(java.lang.String)"
"android.hardware.Camera.getWhiteBalance()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.isVideoSnapshotSupported()","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.isVideoSnapshotSupported()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.cancelAutoFocus()","android.os.Handler.removeMessages(int)"
"android.hardware.Camera.cancelAutoFocus()","android.hardware.Camera.native_cancelAutoFocus()"
"android.hardware.Camera.getPreviewFrameRate()","android.hardware.Camera.Parameters.getInt(java.lang.String)"
"android.hardware.Camera.setRotation(int)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.setRotation(int)","java.lang.Integer.toString(int)"
"android.hardware.Camera.getParameters()","android.hardware.Camera.native_getParameters()"
"android.hardware.Camera.getParameters()","android.hardware.Camera.Parameters.unflatten(java.lang.String)"
"android.hardware.Camera.setPreviewFpsRange(int, int)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.removeGpsData()","android.hardware.Camera.Parameters.remove(java.lang.String)"
"android.hardware.Camera.same(Parameters)","java.util.AbstractMap.equals(java.util.LinkedHashMap<java.lang.String, java.lang.String>)"
"android.hardware.Camera.setPictureFormat(int)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.setPictureFormat(int)","android.hardware.Camera.Parameters.cameraFormatForPixelFormat(int)"
"android.hardware.Camera.setGpsAltitude(double)","java.lang.Double.toString(double)"
"android.hardware.Camera.setGpsAltitude(double)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getMaxExposureCompensation()","android.hardware.Camera.Parameters.getInt(java.lang.String, int)"
"android.hardware.Camera.set(String, int)","android.hardware.Camera.Parameters.put(java.lang.String, java.lang.String)"
"android.hardware.Camera.set(String, int)","java.lang.Integer.toString(int)"
"android.hardware.Camera.getSupportedPictureFormats()","android.hardware.Camera.Parameters.pixelFormatForCameraFormat(java.lang.String)"
"android.hardware.Camera.getSupportedPictureFormats()","android.hardware.Camera.Parameters.split(java.lang.String)"
"android.hardware.Camera.getSupportedPictureFormats()","java.util.ArrayList.add(int)"
"android.hardware.Camera.getSupportedPictureFormats()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setParameters(Parameters)","android.hardware.Camera.Parameters.getPreviewSize()"
"android.hardware.Camera.setParameters(Parameters)","android.hardware.Camera.native_setParameters(java.lang.String)"
"android.hardware.Camera.setParameters(Parameters)","android.hardware.Camera.Parameters.flatten()"
"android.hardware.Camera.setParameters(Parameters)","android.hardware.Camera.getParameters()"
"android.hardware.Camera.enableShutterSound(boolean)","android.hardware.Camera._enableShutterSound(boolean)"
"android.hardware.Camera.enableShutterSound(boolean)","android.os.ServiceManager.getService(java.lang.String)"
"android.hardware.Camera.put(String, String)","java.util.HashMap.remove(java.lang.String)"
"android.hardware.Camera.put(String, String)","java.util.HashMap.put(java.lang.String, java.lang.String)"
"android.hardware.Camera.isZoomSupported()","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.isZoomSupported()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setPreviewDisplay(SurfaceHolder)","android.hardware.Camera.setPreviewSurface(android.view.Surface)"
"android.hardware.Camera.setPreviewDisplay(SurfaceHolder)","android.view.SurfaceHolder.getSurface()"
"android.hardware.Camera.unflatten(String)","java.lang.String.substring(int)"
"android.hardware.Camera.unflatten(String)","java.util.HashMap.put(java.lang.String, java.lang.String)"
"android.hardware.Camera.unflatten(String)","java.lang.String.substring(int, int)"
"android.hardware.Camera.unflatten(String)","java.lang.String.indexOf(char)"
"android.hardware.Camera.unflatten(String)","android.text.TextUtils.StringSplitter.setString(java.lang.String)"
"android.hardware.Camera.unflatten(String)","java.util.LinkedHashMap.clear()"
"android.hardware.Camera.autoFocus(AutoFocusCallback)","android.hardware.Camera.native_autoFocus()"
"android.hardware.Camera.getFlashMode()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getFloat(String, float)","java.lang.Float.parseFloat(java.lang.String)"
"android.hardware.Camera.getFloat(String, float)","java.util.LinkedHashMap.get(java.lang.String)"
"android.hardware.Camera.getPictureSize()","android.hardware.Camera.Parameters.strToSize(java.lang.String)"
"android.hardware.Camera.getPictureSize()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setJpegThumbnailSize(int, int)","android.hardware.Camera.Parameters.set(java.lang.String, int)"
"android.hardware.Camera.addRawImageCallbackBuffer(byte[])","android.hardware.Camera.addCallbackBuffer(byte[], int)"
"android.hardware.Camera.setFlashMode(String)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getSupportedFlashModes()","android.hardware.Camera.Parameters.split(java.lang.String)"
"android.hardware.Camera.getSupportedFlashModes()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getMaxZoom()","android.hardware.Camera.Parameters.getInt(java.lang.String, int)"
"android.hardware.Camera.stopPreview()","android.hardware.Camera._stopPreview()"
"android.hardware.Camera.getExposureCompensationStep()","android.hardware.Camera.Parameters.getFloat(java.lang.String, int)"
"android.hardware.Camera.setGpsLatitude(double)","java.lang.Double.toString(double)"
"android.hardware.Camera.setGpsLatitude(double)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.splitRange(String)","java.lang.String.charAt(int)"
"android.hardware.Camera.splitRange(String)","java.util.ArrayList.size()"
"android.hardware.Camera.splitRange(String)","java.util.ArrayList.add(int[])"
"android.hardware.Camera.splitRange(String)","java.lang.String.indexOf(java.lang.String, int)"
"android.hardware.Camera.splitRange(String)","android.hardware.Camera.Parameters.splitInt(java.lang.String, int[])"
"android.hardware.Camera.splitRange(String)","java.lang.String.substring(int, int)"
"android.hardware.Camera.splitRange(String)","java.lang.String.length()"
"android.hardware.Camera.disableShutterSound()","android.hardware.Camera._enableShutterSound(boolean)"
"android.hardware.Camera.getPreviewFormat()","android.hardware.Camera.Parameters.pixelFormatForCameraFormat(java.lang.String)"
"android.hardware.Camera.getPreviewFormat()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.pixelFormatForCameraFormat(String)","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.setPreviewSize(int, int)","java.lang.Integer.toString(int)"
"android.hardware.Camera.setPreviewSize(int, int)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getPictureFormat()","android.hardware.Camera.Parameters.pixelFormatForCameraFormat(java.lang.String)"
"android.hardware.Camera.getPictureFormat()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.flatten()","java.lang.StringBuilder.deleteCharAt(int)"
"android.hardware.Camera.flatten()","java.lang.StringBuilder.append(java.lang.String)"
"android.hardware.Camera.flatten()","java.util.LinkedHashMap.keySet()"
"android.hardware.Camera.flatten()","java.lang.StringBuilder.toString()"
"android.hardware.Camera.flatten()","java.lang.AbstractStringBuilder.length()"
"android.hardware.Camera.flatten()","java.util.LinkedHashMap.get(java.lang.String)"
"android.hardware.Camera.takePicture(ShutterCallback, PictureCallback, PictureCallback)","android.hardware.Camera.takePicture(android.hardware.Camera.ShutterCallback, android.hardware.Camera.PictureCallback, null, android.hardware.Camera.PictureCallback)"
"android.hardware.Camera.getSupportedFocusModes()","android.hardware.Camera.Parameters.split(java.lang.String)"
"android.hardware.Camera.getSupportedFocusModes()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setPictureSize(int, int)","java.lang.Integer.toString(int)"
"android.hardware.Camera.setPictureSize(int, int)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getSupportedSceneModes()","android.hardware.Camera.Parameters.split(java.lang.String)"
"android.hardware.Camera.getSupportedSceneModes()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getAutoExposureLock()","java.lang.String.equals(java.lang.String)"
"android.hardware.Camera.getAutoExposureLock()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getSupportedAntibanding()","android.hardware.Camera.Parameters.split(java.lang.String)"
"android.hardware.Camera.getSupportedAntibanding()","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.getExposureCompensation()","android.hardware.Camera.Parameters.getInt(java.lang.String, int)"
"android.hardware.Camera.setAutoWhiteBalanceLock(boolean)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.getFocusDistances(float[])","android.hardware.Camera.Parameters.splitFloat(java.lang.String, float[])"
"android.hardware.Camera.getFocusDistances(float[])","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.Camera.setSceneMode(String)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.Camera.setPreviewFrameRate(int)","android.hardware.Camera.Parameters.set(java.lang.String, int)"
"android.hardware.Camera.getCameraInfo(int, CameraInfo)","android.os.ServiceManager.getService(java.lang.String)"
"android.hardware.Camera.getCameraInfo(int, CameraInfo)","android.hardware.Camera._getCameraInfo(int, android.hardware.Camera.CameraInfo)"
"android.hardware.Camera.setRecordingHint(boolean)","android.hardware.Camera.Parameters.set(java.lang.String, java.lang.String)"
"android.hardware.location.ActivityChangedEvent.createFromParcel(Parcel)","android.os.Parcel.readTypedArray(android.hardware.location.ActivityRecognitionEvent[], android.os.Parcelable.Creator<android.hardware.location.ActivityRecognitionEvent>)"
"android.hardware.location.ActivityChangedEvent.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.location.ActivityChangedEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeTypedArray(android.hardware.location.ActivityRecognitionEvent[], int)"
"android.hardware.location.ActivityChangedEvent.writeToParcel(Parcel, int)","java.util.List.toArray(android.hardware.location.ActivityRecognitionEvent[])"
"android.hardware.location.ActivityChangedEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.location.ActivityChangedEvent.toString()","android.hardware.location.ActivityRecognitionEvent.toString()"
"android.hardware.location.ActivityChangedEvent.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.hardware.location.ActivityChangedEvent.toString()","java.lang.StringBuilder.toString()"
"android.util.LogWriter.write(char[], int, int)","android.util.LogWriter.flushBuilder()"
"android.util.LogWriter.write(char[], int, int)","java.lang.StringBuilder.append(char)"
"android.util.LogWriter.flush()","android.util.LogWriter.flushBuilder()"
"android.util.LogWriter.flushBuilder()","java.lang.StringBuilder.delete(int, int)"
"android.util.LogWriter.flushBuilder()","java.lang.StringBuilder.toString()"
"android.util.LogWriter.flushBuilder()","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.LogWriter.flushBuilder()","java.lang.AbstractStringBuilder.length()"
"android.util.LogWriter.close()","android.util.LogWriter.flushBuilder()"
"com.android.internal.view.menu.IconMenuPresenter.addItemView(View, int)","com.android.internal.view.menu.BaseMenuPresenter.addItemView(android.view.View, int)"
"com.android.internal.view.menu.IconMenuPresenter.initForMenu(Context, MenuBuilder)","com.android.internal.view.menu.BaseMenuPresenter.initForMenu(android.content.Context, com.android.internal.view.menu.MenuBuilder)"
"com.android.internal.view.menu.IconMenuPresenter.onCloseMenu(MenuBuilder, boolean)","com.android.internal.view.menu.MenuDialogHelper.dismiss()"
"com.android.internal.view.menu.IconMenuPresenter.saveHierarchyState(Bundle)","android.view.View.saveHierarchyState(android.util.SparseArray<android.os.Parcelable>)"
"com.android.internal.view.menu.IconMenuPresenter.saveHierarchyState(Bundle)","android.os.Bundle.putSparseParcelableArray(java.lang.String, android.util.SparseArray<android.os.Parcelable>)"
"com.android.internal.view.menu.IconMenuPresenter.onRestoreInstanceState(Parcelable)","com.android.internal.view.menu.IconMenuPresenter.restoreHierarchyState(android.os.Bundle)"
"com.android.internal.view.menu.IconMenuPresenter.shouldIncludeItem(int, MenuItemImpl)","java.util.ArrayList.size()"
"com.android.internal.view.menu.IconMenuPresenter.shouldIncludeItem(int, MenuItemImpl)","com.android.internal.view.menu.MenuItemImpl.isActionButton()"
"com.android.internal.view.menu.IconMenuPresenter.shouldIncludeItem(int, MenuItemImpl)","com.android.internal.view.menu.MenuBuilder.getNonActionItems()"
"com.android.internal.view.menu.IconMenuPresenter.onSaveInstanceState()","android.os.BaseBundle.putInt(java.lang.String, int)"
"com.android.internal.view.menu.IconMenuPresenter.onSaveInstanceState()","com.android.internal.view.menu.IconMenuPresenter.saveHierarchyState(android.os.Bundle)"
"com.android.internal.view.menu.IconMenuPresenter.restoreHierarchyState(Bundle)","com.android.internal.view.menu.MenuBuilder.findItem(int)"
"com.android.internal.view.menu.IconMenuPresenter.restoreHierarchyState(Bundle)","android.view.MenuItem.getSubMenu()"
"com.android.internal.view.menu.IconMenuPresenter.restoreHierarchyState(Bundle)","android.os.Bundle.getSparseParcelableArray(java.lang.String)"
"com.android.internal.view.menu.IconMenuPresenter.restoreHierarchyState(Bundle)","android.view.View.restoreHierarchyState(android.util.SparseArray<android.os.Parcelable>)"
"com.android.internal.view.menu.IconMenuPresenter.restoreHierarchyState(Bundle)","android.os.BaseBundle.getInt(java.lang.String, int)"
"com.android.internal.view.menu.IconMenuPresenter.restoreHierarchyState(Bundle)","com.android.internal.view.menu.IconMenuPresenter.onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder)"
"com.android.internal.view.menu.IconMenuPresenter.updateMenuView(boolean)","java.util.ArrayList.size()"
"com.android.internal.view.menu.IconMenuPresenter.updateMenuView(boolean)","com.android.internal.view.menu.BaseMenuPresenter.updateMenuView(boolean)"
"com.android.internal.view.menu.IconMenuPresenter.updateMenuView(boolean)","com.android.internal.view.menu.MenuBuilder.getNonActionItems()"
"com.android.internal.view.menu.IconMenuPresenter.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.MenuDialogHelper.setPresenterCallback(com.android.internal.view.menu.IconMenuPresenter.SubMenuPresenterCallback)"
"com.android.internal.view.menu.IconMenuPresenter.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.SubMenuBuilder.getItem()"
"com.android.internal.view.menu.IconMenuPresenter.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.MenuDialogHelper.show(null)"
"com.android.internal.view.menu.IconMenuPresenter.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.BaseMenuPresenter.onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder)"
"com.android.internal.view.menu.IconMenuPresenter.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.MenuBuilder.hasVisibleItems()"
"com.android.internal.view.menu.IconMenuPresenter.onSubMenuSelected(SubMenuBuilder)","android.view.MenuItem.getItemId()"
"com.android.internal.view.menu.IconMenuPresenter.filterLeftoverView(ViewGroup, int)","com.android.internal.view.menu.BaseMenuPresenter.filterLeftoverView(android.view.ViewGroup, int)"
"com.android.internal.view.menu.IconMenuPresenter.onOpenSubMenu(MenuBuilder)","com.android.internal.view.menu.SubMenuBuilder.getItem()"
"com.android.internal.view.menu.IconMenuPresenter.onOpenSubMenu(MenuBuilder)","android.view.MenuItem.getItemId()"
"android.text.AlteredCharSequence.getSpanEnd(Object)","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.text.AlteredCharSequence.getSpanStart(Object)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.text.AlteredCharSequence.nextSpanTransition(int, int, Class)","android.text.Spanned.nextSpanTransition(int, int, java.lang.Class)"
"android.text.AlteredCharSequence.getChars(int, int, char[], int)","android.text.TextUtils.getChars(java.lang.CharSequence, int, int, char[], int)"
"android.text.AlteredCharSequence.getChars(int, int, char[], int)","java.lang.System.arraycopy(char[], int, char[], int, int)"
"android.text.AlteredCharSequence.getChars(int, int, char[], int)","java.lang.Math.max(int, int)"
"android.text.AlteredCharSequence.getChars(int, int, char[], int)","java.lang.Math.min(int, int)"
"android.text.AlteredCharSequence.getSpanFlags(Object)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.AlteredCharSequence.toString()","android.text.AlteredCharSequence.length()"
"android.text.AlteredCharSequence.toString()","android.text.AlteredCharSequence.getChars(int, int, char[], int)"
"android.text.AlteredCharSequence.toString()","java.lang.String.valueOf(char[])"
"android.text.AlteredCharSequence.charAt(int)","java.lang.CharSequence.charAt(int)"
"android.text.AlteredCharSequence.subSequence(int, int)","java.lang.CharSequence.subSequence(int, int)"
"android.text.AlteredCharSequence.subSequence(int, int)","android.text.AlteredCharSequence.make(java.lang.CharSequence, char[], int, int)"
"android.text.AlteredCharSequence.getSpans(int, int, Class)","android.text.Spanned.getSpans(int, int, java.lang.Class<T>)"
"android.text.AlteredCharSequence.length()","java.lang.CharSequence.length()"
"android.content.res.ColorStateList.createFromParcel(Parcel)","android.os.Parcel.createIntArray()"
"android.content.res.ColorStateList.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","com.android.internal.util.GrowingArrayUtils.append(int[][], int, int[])"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.util.AttributeSet.getAttributeNameResource(int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.util.AttributeSet.getAttributeFloatValue(int, float)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.util.MathUtils.constrain(int, int, int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","com.android.internal.util.GrowingArrayUtils.append(int[], int, int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.util.StateSet.trimStateSet(int[], int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.util.AttributeSet.getAttributeCount()"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.util.AttributeSet.getAttributeIntValue(int, int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.content.res.Resources.getColor(int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.util.AttributeSet.getAttributeResourceValue(int, int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","com.android.internal.util.ArrayUtils.newUnpaddedArray(java.lang.Class<int[]>, int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.util.AttributeSet.getAttributeBooleanValue(int, boolean)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","android.content.res.Resources.getFloat(int)"
"android.content.res.ColorStateList.inflate(Resources, XmlPullParser, AttributeSet)","java.lang.System.arraycopy(int[][], int, int[][], int, int)"
"android.content.res.ColorStateList.toString()","java.util.Arrays.deepToString(int[][])"
"android.content.res.ColorStateList.toString()","java.util.Arrays.toString(int[])"
"android.content.res.ColorStateList.getColorForState(int[], int)","android.util.StateSet.stateSetMatches(int[], int[])"
"android.content.res.ColorStateList.addFirstIfMissing(ColorStateList, int, int)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.content.res.ColorStateList.addFirstIfMissing(ColorStateList, int, int)","android.content.res.ColorStateList.getStates()"
"android.content.res.ColorStateList.addFirstIfMissing(ColorStateList, int, int)","android.content.res.ColorStateList.getColors()"
"android.content.res.ColorStateList.addFirstIfMissing(ColorStateList, int, int)","java.lang.System.arraycopy(int[][], int, int[][], int, int)"
"android.content.res.ColorStateList.createFromXmlInner(Resources, XmlPullParser, AttributeSet)","java.lang.String.equals(java.lang.String)"
"android.content.res.ColorStateList.writeToParcel(Parcel, int)","android.os.Parcel.writeIntArray(int[])"
"android.content.res.ColorStateList.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.res.ColorStateList.valueOf(int)","java.lang.ref.Reference.get()"
"android.content.res.ColorStateList.valueOf(int)","android.util.SparseArray.put(int, java.lang.ref.WeakReference<android.content.res.ColorStateList>)"
"android.content.res.ColorStateList.valueOf(int)","android.util.SparseArray.get(int)"
"android.view.accessibility.AccessibilityRecord.isPassword()","android.view.accessibility.AccessibilityRecord.getBooleanProperty(int)"
"android.view.accessibility.AccessibilityRecord.enforceNotSealed()","android.view.accessibility.AccessibilityRecord.isSealed()"
"android.view.accessibility.AccessibilityRecord.setBeforeText(CharSequence)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setPassword(boolean)","android.view.accessibility.AccessibilityRecord.setBooleanProperty(int, boolean)"
"android.view.accessibility.AccessibilityRecord.setPassword(boolean)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setSource(View, int)","android.view.accessibility.AccessibilityRecord.setBooleanProperty(int, boolean)"
"android.view.accessibility.AccessibilityRecord.setSource(View, int)","android.view.View.getAccessibilityViewId()"
"android.view.accessibility.AccessibilityRecord.setSource(View, int)","android.view.View.getAccessibilityWindowId()"
"android.view.accessibility.AccessibilityRecord.setSource(View, int)","android.view.accessibility.AccessibilityNodeInfo.makeNodeId(int, int)"
"android.view.accessibility.AccessibilityRecord.setSource(View, int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setSource(View, int)","android.view.View.isImportantForAccessibility()"
"android.view.accessibility.AccessibilityRecord.setItemCount(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setSource(View)","android.view.accessibility.AccessibilityRecord.setSource(android.view.View, int)"
"android.view.accessibility.AccessibilityRecord.isEnabled()","android.view.accessibility.AccessibilityRecord.getBooleanProperty(int)"
"android.view.accessibility.AccessibilityRecord.setScrollable(boolean)","android.view.accessibility.AccessibilityRecord.setBooleanProperty(int, boolean)"
"android.view.accessibility.AccessibilityRecord.setScrollable(boolean)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setScrollY(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setParcelableData(Parcelable)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.enforceSealed()","android.view.accessibility.AccessibilityRecord.isSealed()"
"android.view.accessibility.AccessibilityRecord.isFullScreen()","android.view.accessibility.AccessibilityRecord.getBooleanProperty(int)"
"android.view.accessibility.AccessibilityRecord.setAddedCount(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setFullScreen(boolean)","android.view.accessibility.AccessibilityRecord.setBooleanProperty(int, boolean)"
"android.view.accessibility.AccessibilityRecord.setFullScreen(boolean)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.toString()","android.view.accessibility.AccessibilityRecord.getBooleanProperty(int)"
"android.view.accessibility.AccessibilityRecord.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.view.accessibility.AccessibilityRecord.toString()","java.lang.StringBuilder.toString()"
"android.view.accessibility.AccessibilityRecord.setCurrentItemIndex(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.recycle()","android.view.accessibility.AccessibilityRecord.clear()"
"android.view.accessibility.AccessibilityRecord.setEnabled(boolean)","android.view.accessibility.AccessibilityRecord.setBooleanProperty(int, boolean)"
"android.view.accessibility.AccessibilityRecord.setEnabled(boolean)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setRemovedCount(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.isImportantForAccessibility()","android.view.accessibility.AccessibilityRecord.getBooleanProperty(int)"
"android.view.accessibility.AccessibilityRecord.setMaxScrollY(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setToIndex(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.getSource()","android.view.accessibility.AccessibilityInteractionClient.getInstance()"
"android.view.accessibility.AccessibilityRecord.getSource()","android.view.accessibility.AccessibilityRecord.enforceSealed()"
"android.view.accessibility.AccessibilityRecord.getSource()","android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int)"
"android.view.accessibility.AccessibilityRecord.getSource()","android.view.accessibility.AccessibilityNodeInfo.getAccessibilityViewId(long)"
"android.view.accessibility.AccessibilityRecord.setFromIndex(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.isScrollable()","android.view.accessibility.AccessibilityRecord.getBooleanProperty(int)"
"android.view.accessibility.AccessibilityRecord.setConnectionId(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.isChecked()","android.view.accessibility.AccessibilityRecord.getBooleanProperty(int)"
"android.view.accessibility.AccessibilityRecord.init(AccessibilityRecord)","java.util.List.addAll(java.util.List<java.lang.CharSequence>)"
"android.view.accessibility.AccessibilityRecord.setContentDescription(CharSequence)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.obtain(AccessibilityRecord)","android.view.accessibility.AccessibilityRecord.init(android.view.accessibility.AccessibilityRecord)"
"android.view.accessibility.AccessibilityRecord.obtain(AccessibilityRecord)","android.view.accessibility.AccessibilityRecord.obtain()"
"android.view.accessibility.AccessibilityRecord.clear()","java.util.List.clear()"
"android.view.accessibility.AccessibilityRecord.clear()","android.view.accessibility.AccessibilityNodeInfo.makeNodeId(int, int)"
"android.view.accessibility.AccessibilityRecord.setScrollX(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setChecked(boolean)","android.view.accessibility.AccessibilityRecord.setBooleanProperty(int, boolean)"
"android.view.accessibility.AccessibilityRecord.setChecked(boolean)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setMaxScrollX(int)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.view.accessibility.AccessibilityRecord.setClassName(CharSequence)","android.view.accessibility.AccessibilityRecord.enforceNotSealed()"
"android.content.res.Resources.obtainAttributes(AttributeSet, int[])","android.content.res.TypedArray.obtain(android.content.res.Resources, int)"
"android.content.res.Resources.getTheme()","java.lang.String.split(java.lang.String)"
"android.content.res.Resources.getTheme()","android.content.res.Resources.Theme.getResourceNameFromHexString(java.lang.String)"
"android.content.res.Resources.getTheme()","java.lang.String.endsWith(java.lang.String)"
"android.content.res.Resources.getTheme()","java.lang.String.substring(int, int)"
"android.content.res.Resources.getTheme()","java.lang.String.length()"
"android.content.res.Resources.applyStyle(int, boolean)","android.content.res.AssetManager.applyThemeStyle(long, int, boolean)"
"android.content.res.Resources.applyStyle(int, boolean)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.cacheDrawable(TypedValue, Theme, boolean, ArrayMap, long, Drawable)","android.content.res.Configuration.getLayoutDirection()"
"android.content.res.Resources.cacheDrawable(TypedValue, Theme, boolean, ArrayMap, long, Drawable)","android.util.ArrayMap.put(java.lang.String, android.util.LongSparseArray<java.lang.ref.WeakReference<android.content.res.ConstantState>>)"
"android.content.res.Resources.cacheDrawable(TypedValue, Theme, boolean, ArrayMap, long, Drawable)","android.content.res.ConstantState.getChangingConfigurations()"
"android.content.res.Resources.cacheDrawable(TypedValue, Theme, boolean, ArrayMap, long, Drawable)","android.util.LongSparseArray.put(long, java.lang.ref.WeakReference<android.content.res.ConstantState>)"
"android.content.res.Resources.cacheDrawable(TypedValue, Theme, boolean, ArrayMap, long, Drawable)","android.content.res.Resources.verifyPreloadConfig(int, int, int, java.lang.String)"
"android.content.res.Resources.cacheDrawable(TypedValue, Theme, boolean, ArrayMap, long, Drawable)","android.util.LongSparseArray.put(long, android.content.res.ConstantState)"
"android.content.res.Resources.cacheDrawable(TypedValue, Theme, boolean, ArrayMap, long, Drawable)","android.util.ArrayMap.get(java.lang.String)"
"android.content.res.Resources.getInteger(int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getInteger(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getDrawable(int)","android.content.res.Resources.getDrawable(int, android.content.res.Resources.Theme)"
"android.content.res.Resources.loadXmlResourceParser(int, String)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.loadXmlResourceParser(int, String)","java.lang.CharSequence.toString()"
"android.content.res.Resources.loadXmlResourceParser(int, String)","android.content.res.Resources.loadXmlResourceParser(java.lang.String, int, int, java.lang.String)"
"android.content.res.Resources.loadXmlResourceParser(int, String)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getDimensionPixelOffset(int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getDimensionPixelOffset(int)","android.util.TypedValue.complexToDimensionPixelOffset(int, android.util.DisplayMetrics)"
"android.content.res.Resources.getDimensionPixelOffset(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getDimension(int)","android.util.TypedValue.complexToDimension(int, android.util.DisplayMetrics)"
"android.content.res.Resources.getDimension(int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getDimension(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.obtainStyledAttributes(int[])","android.content.res.AssetManager.applyStyle(long, int, int, int, int[], int[], int[])"
"android.content.res.Resources.obtainStyledAttributes(int[])","android.content.res.TypedArray.obtain(android.content.res.Resources, int)"
"android.content.res.Resources.getString(int, Object[])","java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[])"
"android.content.res.Resources.getString(int, Object[])","android.content.res.Resources.getString(int)"
"android.content.res.Resources.verifyPreloadConfig(int, int, int, String)","android.content.res.Resources.getResourceName(int)"
"android.content.res.Resources.updateSystemConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.content.res.Resources.updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo)"
"android.content.res.Resources.getXml(int)","android.content.res.Resources.loadXmlResourceParser(int, java.lang.String)"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","java.lang.Throwable.initCause(java.lang.Exception)"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","android.content.res.AssetManager.openNonAsset(int, java.lang.String, int)"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","java.io.InputStream.close()"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","android.os.Trace.traceBegin(long, java.lang.String)"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","java.lang.CharSequence.toString()"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","android.os.Trace.traceEnd(long)"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","java.lang.String.endsWith(java.lang.String)"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","android.content.res.Resources.getResourceName(int)"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","android.content.res.Resources.loadXmlResourceParser(java.lang.String, int, int, java.lang.String)"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.loadDrawableForCookie(TypedValue, int, Theme)","android.content.res.XmlResourceParser.close()"
"android.content.res.Resources.getValue(int, TypedValue, boolean)","android.content.res.AssetManager.getResourceValue(int, int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getValue(int, TypedValue, boolean)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.setCompatibilityInfo(CompatibilityInfo)","android.content.res.Resources.updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics)"
"android.content.res.Resources.obtainStyledAttributes(int, int[])","java.io.PrintStream.println(java.lang.String)"
"android.content.res.Resources.obtainStyledAttributes(int, int[])","android.content.res.AssetManager.applyStyle(long, int, int, int, int[], int[], int[])"
"android.content.res.Resources.obtainStyledAttributes(int, int[])","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.obtainStyledAttributes(int, int[])","android.content.res.TypedArray.obtain(android.content.res.Resources, int)"
"android.content.res.Resources.getCachedDrawable(ArrayMap, long, Theme)","android.util.ArrayMap.get(java.lang.String)"
"android.content.res.Resources.getCachedDrawable(ArrayMap, long, Theme)","android.content.res.Resources.getCachedDrawableLocked(android.util.LongSparseArray<java.lang.ref.WeakReference<android.content.res.ConstantState>>, long)"
"android.content.res.Resources.getText(int)","android.content.res.AssetManager.getResourceText(int)"
"android.content.res.Resources.getText(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.loadXmlResourceParser(String, int, int, String)","java.lang.Throwable.initCause(java.lang.Exception)"
"android.content.res.Resources.loadXmlResourceParser(String, int, int, String)","android.content.res.XmlBlock.close()"
"android.content.res.Resources.loadXmlResourceParser(String, int, int, String)","android.content.res.AssetManager.openXmlBlockAsset(int, java.lang.String)"
"android.content.res.Resources.loadXmlResourceParser(String, int, int, String)","android.content.res.XmlBlock.newParser()"
"android.content.res.Resources.loadXmlResourceParser(String, int, int, String)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getConstantStateLocked(LongSparseArray, long)","java.lang.ref.Reference.get()"
"android.content.res.Resources.getConstantStateLocked(LongSparseArray, long)","android.util.LongSparseArray.get(long)"
"android.content.res.Resources.getConstantStateLocked(LongSparseArray, long)","android.util.LongSparseArray.delete(long)"
"android.content.res.Resources.obtainTypedArray(int)","android.content.res.AssetManager.getArraySize(int)"
"android.content.res.Resources.obtainTypedArray(int)","android.content.res.AssetManager.retrieveArray(int, int[])"
"android.content.res.Resources.obtainTypedArray(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.obtainTypedArray(int)","android.content.res.TypedArray.obtain(android.content.res.Resources, int)"
"android.content.res.Resources.getResourceEntryName(int)","android.content.res.AssetManager.getResourceEntryName(int)"
"android.content.res.Resources.getResourceEntryName(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getColor(int)","android.content.res.ColorStateList.getDefaultColor()"
"android.content.res.Resources.getColor(int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getColor(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getColor(int)","android.content.res.Resources.loadColorStateList(android.util.TypedValue, int)"
"android.content.res.Resources.resolveAttributes(int[], int[])","android.content.res.AssetManager.resolveAttrs(long, int, int, int[], int[], int[], int[])"
"android.content.res.Resources.resolveAttributes(int[], int[])","android.content.res.TypedArray.obtain(android.content.res.Resources, int)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.util.LongSparseArray.get(long)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.content.res.Resources.getCachedColorStateList(long)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","java.lang.CharSequence.toString()"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","java.lang.String.endsWith(java.lang.String)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.content.res.Resources.getResourceName(int)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.content.res.Resources.loadXmlResourceParser(java.lang.String, int, int, java.lang.String)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.content.res.Resources.verifyPreloadConfig(int, int, int, java.lang.String)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.content.res.XmlResourceParser.close()"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.content.res.ColorStateList.valueOf(int)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","java.lang.Throwable.initCause(java.lang.Exception)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.os.Trace.traceBegin(long, java.lang.String)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.util.LongSparseArray.put(long, android.content.res.ColorStateList)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.os.Trace.traceEnd(long)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","android.util.LongSparseArray.put(long, java.lang.ref.WeakReference<android.content.res.ColorStateList>)"
"android.content.res.Resources.loadColorStateList(TypedValue, int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.finalize()","android.content.res.AssetManager.releaseTheme(long)"
"android.content.res.Resources.finalize()","java.lang.Object.finalize()"
"android.content.res.Resources.parseBundleExtras(XmlResourceParser, Bundle)","java.lang.String.equals(java.lang.String)"
"android.content.res.Resources.getQuantityString(int, int)","android.content.res.Resources.getQuantityText(int, int)"
"android.content.res.Resources.getQuantityString(int, int)","java.lang.CharSequence.toString()"
"android.content.res.Resources.startPreloading()","android.content.res.Resources.updateConfiguration(null, null)"
"android.content.res.Resources.getColorStateList(int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getColorStateList(int)","android.content.res.Resources.loadColorStateList(android.util.TypedValue, int)"
"android.content.res.Resources.getValueForDensity(int, int, TypedValue, boolean)","android.content.res.AssetManager.getResourceValue(int, int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getValueForDensity(int, int, TypedValue, boolean)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getResourceName(int)","android.content.res.AssetManager.getResourceName(int)"
"android.content.res.Resources.getResourceName(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.flushLayoutCache()","android.content.res.XmlBlock.close()"
"android.content.res.Resources.getDimensionPixelSize(int)","android.util.TypedValue.complexToDimensionPixelSize(int, android.util.DisplayMetrics)"
"android.content.res.Resources.getDimensionPixelSize(int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getDimensionPixelSize(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.obtainStyledAttributes(AttributeSet, int[], int, int)","java.io.PrintStream.println(java.lang.String)"
"android.content.res.Resources.obtainStyledAttributes(AttributeSet, int[], int, int)","android.util.AttributeSet.getAttributeNameResource(int)"
"android.content.res.Resources.obtainStyledAttributes(AttributeSet, int[], int, int)","android.util.AttributeSet.getAttributeValue(int)"
"android.content.res.Resources.obtainStyledAttributes(AttributeSet, int[], int, int)","android.util.AttributeSet.getAttributeName(int)"
"android.content.res.Resources.obtainStyledAttributes(AttributeSet, int[], int, int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.obtainStyledAttributes(AttributeSet, int[], int, int)","android.util.AttributeSet.getAttributeCount()"
"android.content.res.Resources.obtainStyledAttributes(AttributeSet, int[], int, int)","android.content.res.TypedArray.obtain(android.content.res.Resources, int)"
"android.content.res.Resources.getIntArray(int)","android.content.res.AssetManager.getArrayIntResource(int)"
"android.content.res.Resources.getIntArray(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.clearDrawableCachesLocked(ArrayMap, int)","android.util.ArrayMap.valueAt(int)"
"android.content.res.Resources.clearDrawableCachesLocked(ArrayMap, int)","android.content.res.Resources.clearDrawableCacheLocked(android.util.LongSparseArray<java.lang.ref.WeakReference<android.content.res.ConstantState>>, int)"
"android.content.res.Resources.clearDrawableCachesLocked(ArrayMap, int)","android.util.ArrayMap.size()"
"android.content.res.Resources.getResourcePackageName(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getResourcePackageName(int)","android.content.res.AssetManager.getResourcePackageName(int)"
"android.content.res.Resources.getDrawable(int, Theme)","android.content.res.Resources.loadDrawable(android.util.TypedValue, int, android.content.res.Resources.Theme)"
"android.content.res.Resources.getDrawable(int, Theme)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.openRawResource(int, TypedValue)","java.lang.Throwable.initCause(java.lang.Exception)"
"android.content.res.Resources.openRawResource(int, TypedValue)","android.content.res.AssetManager.openNonAsset(int, java.lang.String, int)"
"android.content.res.Resources.openRawResource(int, TypedValue)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.openRawResource(int, TypedValue)","java.lang.CharSequence.toString()"
"android.content.res.Resources.openRawResource(int, TypedValue)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getDrawableForDensity(int, int)","android.content.res.Resources.getDrawableForDensity(int, int, null)"
"android.content.res.Resources.getTextArray(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getTextArray(int)","android.content.res.AssetManager.getResourceTextArray(int)"
"android.content.res.Resources.getResourceNameFromHexString(String)","java.lang.Integer.parseInt(java.lang.String, int)"
"android.content.res.Resources.getResourceNameFromHexString(String)","android.content.res.Resources.getResourceName(int)"
"android.content.res.Resources.getQuantityText(int, int)","android.content.res.AssetManager.getResourceBagText(int, int)"
"android.content.res.Resources.getQuantityText(int, int)","android.content.res.Resources.getPluralRule()"
"android.content.res.Resources.getQuantityText(int, int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.finishPreloading()","android.content.res.Resources.flushLayoutCache()"
"android.content.res.Resources.adjustLanguageTag(String)","java.lang.String.substring(int)"
"android.content.res.Resources.adjustLanguageTag(String)","java.lang.String.substring(int, int)"
"android.content.res.Resources.adjustLanguageTag(String)","java.lang.String.indexOf(char)"
"android.content.res.Resources.getText(int, CharSequence)","android.content.res.AssetManager.getResourceText(int)"
"android.content.res.Resources.getCachedColorStateList(long)","java.lang.ref.Reference.get()"
"android.content.res.Resources.getCachedColorStateList(long)","android.util.LongSparseArray.get(long)"
"android.content.res.Resources.getCachedColorStateList(long)","android.util.LongSparseArray.delete(long)"
"android.content.res.Resources.resolveAttribute(int, TypedValue, boolean)","java.io.PrintStream.println(java.lang.String)"
"android.content.res.Resources.resolveAttribute(int, TypedValue, boolean)","android.content.res.AssetManager.getThemeValue(long, int, android.util.TypedValue, boolean)"
"android.content.res.Resources.resolveAttribute(int, TypedValue, boolean)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.dump(int, String, String)","android.content.res.AssetManager.dumpTheme(long, int, java.lang.String, java.lang.String)"
"android.content.res.Resources.clearDrawableCacheLocked(LongSparseArray, int)","java.lang.ref.Reference.get()"
"android.content.res.Resources.clearDrawableCacheLocked(LongSparseArray, int)","android.content.res.ConstantState.getChangingConfigurations()"
"android.content.res.Resources.clearDrawableCacheLocked(LongSparseArray, int)","android.util.LongSparseArray.setValueAt(int, null)"
"android.content.res.Resources.clearDrawableCacheLocked(LongSparseArray, int)","android.content.res.Configuration.needNewResources(int, int)"
"android.content.res.Resources.clearDrawableCacheLocked(LongSparseArray, int)","android.util.LongSparseArray.size()"
"android.content.res.Resources.clearDrawableCacheLocked(LongSparseArray, int)","android.util.LongSparseArray.valueAt(int)"
"android.content.res.Resources.getIdentifier(String, String, String)","android.content.res.AssetManager.getResourceIdentifier(java.lang.String, java.lang.String, java.lang.String)"
"android.content.res.Resources.getIdentifier(String, String, String)","java.lang.Integer.parseInt(java.lang.String)"
"android.content.res.Resources.getLayout(int)","android.content.res.Resources.loadXmlResourceParser(int, java.lang.String)"
"android.content.res.Resources.calcConfigChanges(Configuration)","android.content.res.Configuration.updateFrom(android.content.res.Configuration)"
"android.content.res.Resources.calcConfigChanges(Configuration)","android.content.res.CompatibilityInfo.applyToConfiguration(int, android.content.res.Configuration)"
"android.content.res.Resources.calcConfigChanges(Configuration)","android.content.res.Configuration.setTo(android.content.res.Configuration)"
"android.content.res.Resources.calcConfigChanges(Configuration)","android.content.res.Configuration.setLayoutDirection(java.util.Locale)"
"android.content.res.Resources.calcConfigChanges(Configuration)","android.content.pm.ActivityInfo.activityInfoConfigToNative(int)"
"android.content.res.Resources.calcConfigChanges(Configuration)","java.util.Locale.getDefault()"
"android.content.res.Resources.loadDrawable(TypedValue, int, Theme)","android.content.res.Configuration.getLayoutDirection()"
"android.content.res.Resources.loadDrawable(TypedValue, int, Theme)","android.util.LongSparseArray.get(long)"
"android.content.res.Resources.loadDrawable(TypedValue, int, Theme)","android.content.res.Resources.getCachedDrawable(android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<java.lang.ref.WeakReference<android.content.res.ConstantState>>>, long, android.content.res.Resources.Theme)"
"android.content.res.Resources.loadDrawable(TypedValue, int, Theme)","android.content.res.Resources.getResourceName(int)"
"android.content.res.Resources.loadDrawable(TypedValue, int, Theme)","android.content.res.Resources.loadDrawableForCookie(android.util.TypedValue, int, android.content.res.Resources.Theme)"
"android.content.res.Resources.setTo(Theme)","android.content.res.AssetManager.copyTheme(long, long)"
"android.content.res.Resources.getValue(String, TypedValue, boolean)","android.content.res.Resources.getIdentifier(java.lang.String, java.lang.String, null)"
"android.content.res.Resources.getValue(String, TypedValue, boolean)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getDrawableForDensity(int, int, Theme)","android.content.res.Resources.getValueForDensity(int, int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getDrawableForDensity(int, int, Theme)","android.content.res.Resources.loadDrawable(android.util.TypedValue, int, android.content.res.Resources.Theme)"
"android.content.res.Resources.getFraction(int, int, int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getFraction(int, int, int)","android.util.TypedValue.complexToFraction(int, int, int)"
"android.content.res.Resources.getFraction(int, int, int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getString(int)","java.lang.CharSequence.toString()"
"android.content.res.Resources.getString(int)","android.content.res.Resources.getText(int)"
"android.content.res.Resources.getString(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.openRawResourceFd(int)","android.content.res.AssetManager.openNonAssetFd(int, java.lang.String)"
"android.content.res.Resources.openRawResourceFd(int)","java.lang.Throwable.initCause(java.lang.Exception)"
"android.content.res.Resources.openRawResourceFd(int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.openRawResourceFd(int)","java.lang.CharSequence.toString()"
"android.content.res.Resources.openRawResourceFd(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getFloat(int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getFloat(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getFloat(int)","android.util.TypedValue.getFloat()"
"android.content.res.Resources.getAllAttributes()","android.content.res.Resources.Theme.getAppliedStyleResId()"
"android.content.res.Resources.getAllAttributes()","android.content.res.AssetManager.getStyleAttributes(int)"
"android.content.res.Resources.getStringArray(int)","android.content.res.AssetManager.getResourceStringArray(int)"
"android.content.res.Resources.getStringArray(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.getResourceTypeName(int)","android.content.res.AssetManager.getResourceTypeName(int)"
"android.content.res.Resources.getResourceTypeName(int)","java.lang.Integer.toHexString(int)"
"android.content.res.Resources.openRawResource(int)","android.content.res.Resources.openRawResource(int, android.util.TypedValue)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics)","android.content.res.Resources.updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, null)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.content.res.Resources.adjustLanguageTag(java.lang.String)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","java.util.Locale.toLanguageTag()"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.util.DisplayMetrics.setTo(android.util.DisplayMetrics)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.content.res.ConfigurationBoundResourceCache.onConfigurationChange(int)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.content.res.AssetManager.setConfiguration(int, int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int, int, int, int)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.content.res.CompatibilityInfo.applyToDisplayMetrics(android.util.DisplayMetrics)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.content.res.Configuration.setLayoutDirection(java.util.Locale)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.content.res.Resources.flushLayoutCache()"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.content.res.Resources.calcConfigChanges(android.content.res.Configuration)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","java.util.Locale.getDefault()"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.content.res.Resources.clearDrawableCachesLocked(android.util.ArrayMap<java.lang.String, android.util.LongSparseArray<java.lang.ref.WeakReference<android.content.res.ConstantState>>>, int)"
"android.content.res.Resources.updateConfiguration(Configuration, DisplayMetrics, CompatibilityInfo)","android.util.LongSparseArray.clear()"
"android.content.res.Resources.getCachedDrawableLocked(LongSparseArray, long)","android.content.res.Resources.getConstantStateLocked(android.util.LongSparseArray<java.lang.ref.WeakReference<android.content.res.ConstantState>>, long)"
"android.content.res.Resources.getMovie(int)","java.io.InputStream.close()"
"android.content.res.Resources.getMovie(int)","android.content.res.Resources.openRawResource(int)"
"android.content.res.Resources.getQuantityString(int, int, Object[])","android.content.res.Resources.getQuantityText(int, int)"
"android.content.res.Resources.getQuantityString(int, int, Object[])","java.lang.String.format(java.util.Locale, java.lang.String, java.lang.Object[])"
"android.content.res.Resources.getQuantityString(int, int, Object[])","java.lang.CharSequence.toString()"
"android.content.res.Resources.parseBundleExtra(String, AttributeSet, Bundle)","android.os.Bundle.putFloat(java.lang.String, float)"
"android.content.res.Resources.parseBundleExtra(String, AttributeSet, Bundle)","android.os.BaseBundle.putInt(java.lang.String, int)"
"android.content.res.Resources.parseBundleExtra(String, AttributeSet, Bundle)","android.os.Bundle.putCharSequence(java.lang.String, java.lang.CharSequence)"
"android.content.res.Resources.parseBundleExtra(String, AttributeSet, Bundle)","android.util.TypedValue.coerceToString()"
"android.content.res.Resources.parseBundleExtra(String, AttributeSet, Bundle)","android.content.res.TypedArray.recycle()"
"android.content.res.Resources.parseBundleExtra(String, AttributeSet, Bundle)","android.os.BaseBundle.putBoolean(java.lang.String, boolean)"
"android.content.res.Resources.parseBundleExtra(String, AttributeSet, Bundle)","android.util.TypedValue.getFloat()"
"android.content.res.Resources.parseBundleExtra(String, AttributeSet, Bundle)","android.util.AttributeSet.getPositionDescription()"
"android.content.res.Resources.getAnimation(int)","android.content.res.Resources.loadXmlResourceParser(int, java.lang.String)"
"android.content.res.Resources.getBoolean(int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.content.res.Resources.getBoolean(int)","java.lang.Integer.toHexString(int)"
"com.android.internal.view.menu.ActionMenuItem.setTitle(int)","android.content.Context.getResources()"
"com.android.internal.view.menu.ActionMenuItem.setTitle(int)","android.content.res.Resources.getString(int)"
"com.android.internal.view.menu.ActionMenuItem.setShowAsActionFlags(int)","com.android.internal.view.menu.ActionMenuItem.setShowAsAction(int)"
"com.android.internal.view.menu.ActionMenuItem.setIcon(int)","android.content.Context.getDrawable(int)"
"com.android.internal.view.menu.ActionMenuItem.invoke()","android.view.MenuItem.OnMenuItemClickListener.onMenuItemClick(com.android.internal.view.menu.ActionMenuItem)"
"com.android.internal.view.menu.ActionMenuItem.invoke()","android.content.Context.startActivity(android.content.Intent)"
"android.os.UEventObserver.startObserving(String)","android.os.UEventObserver.UEventThread.addObserver(java.lang.String, android.os.UEventObserver)"
"android.os.UEventObserver.startObserving(String)","java.lang.String.isEmpty()"
"android.os.UEventObserver.startObserving(String)","android.os.UEventObserver.getThread()"
"android.os.UEventObserver.finalize()","java.lang.Object.finalize()"
"android.os.UEventObserver.finalize()","android.os.UEventObserver.stopObserving()"
"android.os.UEventObserver.get(String, String)","java.util.HashMap.get(java.lang.String)"
"android.os.UEventObserver.run()","android.os.UEventObserver.nativeWaitForNextEvent()"
"android.os.UEventObserver.run()","android.os.UEventObserver.UEventThread.sendEvent(java.lang.String)"
"android.os.UEventObserver.run()","android.os.UEventObserver.nativeSetup()"
"android.os.UEventObserver.get(String)","java.util.HashMap.get(java.lang.String)"
"android.os.UEventObserver.addObserver(String, UEventObserver)","java.util.ArrayList.add(java.lang.String)"
"android.os.UEventObserver.addObserver(String, UEventObserver)","android.os.UEventObserver.nativeAddMatch(java.lang.String)"
"android.os.UEventObserver.addObserver(String, UEventObserver)","java.util.ArrayList.add(android.os.UEventObserver)"
"android.os.UEventObserver.toString()","java.util.AbstractMap.toString()"
"android.os.UEventObserver.getThread()","java.lang.Thread.start()"
"android.os.UEventObserver.sendEvent(String)","java.util.ArrayList.size()"
"android.os.UEventObserver.sendEvent(String)","java.util.ArrayList.isEmpty()"
"android.os.UEventObserver.sendEvent(String)","android.os.UEventObserver.onUEvent(android.os.UEventObserver.UEvent)"
"android.os.UEventObserver.sendEvent(String)","java.util.ArrayList.add(android.os.UEventObserver)"
"android.os.UEventObserver.sendEvent(String)","java.util.ArrayList.get(int)"
"android.os.UEventObserver.sendEvent(String)","java.lang.String.contains(java.lang.String)"
"android.os.UEventObserver.sendEvent(String)","java.util.ArrayList.clear()"
"android.os.UEventObserver.removeObserver(UEventObserver)","java.util.ArrayList.size()"
"android.os.UEventObserver.removeObserver(UEventObserver)","android.os.UEventObserver.nativeRemoveMatch(java.lang.String)"
"android.os.UEventObserver.removeObserver(UEventObserver)","java.util.ArrayList.remove(int)"
"android.os.UEventObserver.removeObserver(UEventObserver)","java.util.ArrayList.get(int)"
"android.os.UEventObserver.stopObserving()","android.os.UEventObserver.UEventThread.removeObserver(android.os.UEventObserver)"
"android.os.UEventObserver.stopObserving()","android.os.UEventObserver.getThread()"
"android.animation.ValueAnimator.getFrameDelay()","android.view.Choreographer.getFrameDelay()"
"android.animation.ValueAnimator.removeAllUpdateListeners()","java.util.ArrayList.clear()"
"android.animation.ValueAnimator.end()","android.animation.ValueAnimator.getOrCreateAnimationHandler()"
"android.animation.ValueAnimator.end()","android.animation.ValueAnimator.animateValue(float)"
"android.animation.ValueAnimator.end()","java.util.ArrayList.contains(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.end()","android.animation.ValueAnimator.endAnimation(android.animation.ValueAnimator.AnimationHandler)"
"android.animation.ValueAnimator.end()","android.animation.ValueAnimator.startAnimation(android.animation.ValueAnimator.AnimationHandler)"
"android.animation.ValueAnimator.end()","android.animation.ValueAnimator.initAnimation()"
"android.animation.ValueAnimator.animationFrame(long)","java.util.ArrayList.size()"
"android.animation.ValueAnimator.animationFrame(long)","android.animation.Animator.AnimatorListener.onAnimationRepeat(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.animationFrame(long)","android.animation.ValueAnimator.animateValue(float)"
"android.animation.ValueAnimator.animationFrame(long)","java.lang.Math.min(float, float)"
"android.animation.ValueAnimator.animationFrame(long)","java.util.ArrayList.get(int)"
"android.animation.ValueAnimator.setFloatValues(float[])","android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder)"
"android.animation.ValueAnimator.setFloatValues(float[])","android.animation.PropertyValuesHolder.setFloatValues(float[])"
"android.animation.ValueAnimator.setFloatValues(float[])","android.animation.PropertyValuesHolder.ofFloat(java.lang.String, float[])"
"android.animation.ValueAnimator.setValues(PropertyValuesHolder[])","java.util.HashMap.put(java.lang.String, android.animation.PropertyValuesHolder)"
"android.animation.ValueAnimator.setValues(PropertyValuesHolder[])","android.animation.PropertyValuesHolder.getPropertyName()"
"android.animation.ValueAnimator.setCurrentPlayTime(long)","android.animation.ValueAnimator.setCurrentFraction(float)"
"android.animation.ValueAnimator.clone()","java.util.HashMap.put(java.lang.String, android.animation.PropertyValuesHolder)"
"android.animation.ValueAnimator.clone()","android.animation.PropertyValuesHolder.clone()"
"android.animation.ValueAnimator.clone()","android.animation.Animator.clone()"
"android.animation.ValueAnimator.clone()","android.animation.PropertyValuesHolder.getPropertyName()"
"android.animation.ValueAnimator.start(boolean)","android.animation.ValueAnimator.updateScaledDuration()"
"android.animation.ValueAnimator.start(boolean)","java.util.ArrayList.add(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.start(boolean)","android.animation.ValueAnimator.AnimationHandler.start()"
"android.animation.ValueAnimator.start(boolean)","android.animation.ValueAnimator.getOrCreateAnimationHandler()"
"android.animation.ValueAnimator.start(boolean)","android.os.Looper.myLooper()"
"android.animation.ValueAnimator.start(boolean)","android.animation.ValueAnimator.setCurrentPlayTime(int)"
"android.animation.ValueAnimator.start(boolean)","android.animation.ValueAnimator.notifyStartListeners()"
"android.animation.ValueAnimator.getAnimatedValue()","android.animation.PropertyValuesHolder.getAnimatedValue()"
"android.animation.ValueAnimator.setIntValues(int[])","android.animation.PropertyValuesHolder.ofInt(java.lang.String, int[])"
"android.animation.ValueAnimator.setIntValues(int[])","android.animation.PropertyValuesHolder.setIntValues(int[])"
"android.animation.ValueAnimator.setIntValues(int[])","android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder)"
"android.animation.ValueAnimator.cancel()","android.animation.ValueAnimator.getOrCreateAnimationHandler()"
"android.animation.ValueAnimator.cancel()","android.animation.Animator.AnimatorListener.onAnimationCancel(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.cancel()","java.util.ArrayList.contains(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.cancel()","android.animation.ValueAnimator.endAnimation(android.animation.ValueAnimator.AnimationHandler)"
"android.animation.ValueAnimator.cancel()","java.util.ArrayList.clone()"
"android.animation.ValueAnimator.cancel()","android.animation.ValueAnimator.notifyStartListeners()"
"android.animation.ValueAnimator.ofPropertyValuesHolder(PropertyValuesHolder[])","android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder[])"
"android.animation.ValueAnimator.resume()","android.animation.Animator.resume()"
"android.animation.ValueAnimator.getCurrentAnimationsCount()","java.util.ArrayList.size()"
"android.animation.ValueAnimator.getCurrentAnimationsCount()","java.lang.ThreadLocal.get()"
"android.animation.ValueAnimator.ofInt(int[])","android.animation.ValueAnimator.setIntValues(int[])"
"android.animation.ValueAnimator.removeUpdateListener(AnimatorUpdateListener)","java.util.ArrayList.size()"
"android.animation.ValueAnimator.removeUpdateListener(AnimatorUpdateListener)","java.util.ArrayList.remove(android.animation.ValueAnimator.AnimatorUpdateListener)"
"android.animation.ValueAnimator.startAnimation(AnimationHandler)","android.os.Trace.asyncTraceBegin(long, java.lang.String, int)"
"android.animation.ValueAnimator.startAnimation(AnimationHandler)","java.util.ArrayList.add(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.startAnimation(AnimationHandler)","android.os.Trace.isTagEnabled(long)"
"android.animation.ValueAnimator.startAnimation(AnimationHandler)","android.animation.ValueAnimator.getNameForTrace()"
"android.animation.ValueAnimator.startAnimation(AnimationHandler)","android.animation.ValueAnimator.initAnimation()"
"android.animation.ValueAnimator.startAnimation(AnimationHandler)","android.animation.ValueAnimator.notifyStartListeners()"
"android.animation.ValueAnimator.startAnimation(AnimationHandler)","java.lang.System.identityHashCode(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.clearAllAnimations()","java.lang.ThreadLocal.get()"
"android.animation.ValueAnimator.clearAllAnimations()","java.util.ArrayList.clear()"
"android.animation.ValueAnimator.addUpdateListener(AnimatorUpdateListener)","java.util.ArrayList.add(android.animation.ValueAnimator.AnimatorUpdateListener)"
"android.animation.ValueAnimator.setEvaluator(TypeEvaluator)","android.animation.PropertyValuesHolder.setEvaluator(android.animation.TypeEvaluator)"
"android.animation.ValueAnimator.initAnimation()","android.animation.PropertyValuesHolder.init()"
"android.animation.ValueAnimator.notifyStartListeners()","java.util.ArrayList.size()"
"android.animation.ValueAnimator.notifyStartListeners()","java.util.ArrayList.clone()"
"android.animation.ValueAnimator.notifyStartListeners()","android.animation.Animator.AnimatorListener.onAnimationStart(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.notifyStartListeners()","java.util.ArrayList.get(int)"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","java.util.ArrayList.remove(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","java.util.ArrayList.size()"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","android.os.Trace.isTagEnabled(long)"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","android.animation.ValueAnimator.getNameForTrace()"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","android.os.Trace.asyncTraceEnd(long, java.lang.String, int)"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","android.animation.Animator.AnimatorListener.onAnimationEnd(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","java.util.ArrayList.clone()"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","android.animation.ValueAnimator.notifyStartListeners()"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","java.util.ArrayList.get(int)"
"android.animation.ValueAnimator.endAnimation(AnimationHandler)","java.lang.System.identityHashCode(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.start()","android.animation.ValueAnimator.start(boolean)"
"android.animation.ValueAnimator.doAnimationFrame(long)","java.lang.Math.max(long, long)"
"android.animation.ValueAnimator.doAnimationFrame(long)","android.animation.ValueAnimator.animationFrame(long)"
"android.animation.ValueAnimator.ofFloat(float[])","android.animation.ValueAnimator.setFloatValues(float[])"
"android.animation.ValueAnimator.getCurrentPlayTime()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.animation.ValueAnimator.getOrCreateAnimationHandler()","java.lang.ThreadLocal.get()"
"android.animation.ValueAnimator.getOrCreateAnimationHandler()","java.lang.ThreadLocal.set(android.animation.ValueAnimator.AnimationHandler)"
"android.animation.ValueAnimator.reverse()","android.animation.ValueAnimator.end()"
"android.animation.ValueAnimator.reverse()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.animation.ValueAnimator.reverse()","android.animation.ValueAnimator.start(boolean)"
"android.animation.ValueAnimator.ofArgb(int[])","android.animation.ArgbEvaluator.getInstance()"
"android.animation.ValueAnimator.ofArgb(int[])","android.animation.ValueAnimator.setEvaluator(android.animation.ArgbEvaluator)"
"android.animation.ValueAnimator.ofArgb(int[])","android.animation.ValueAnimator.setIntValues(int[])"
"android.animation.ValueAnimator.run()","android.animation.ValueAnimator.AnimationHandler.doAnimationFrame(long)"
"android.animation.ValueAnimator.run()","android.view.Choreographer.getFrameTime()"
"android.animation.ValueAnimator.getAnimatedValue(String)","android.animation.PropertyValuesHolder.getAnimatedValue()"
"android.animation.ValueAnimator.getAnimatedValue(String)","java.util.HashMap.get(java.lang.String)"
"android.animation.ValueAnimator.animateValue(float)","java.util.ArrayList.size()"
"android.animation.ValueAnimator.animateValue(float)","android.animation.PropertyValuesHolder.calculateValue(float)"
"android.animation.ValueAnimator.animateValue(float)","android.animation.TimeInterpolator.getInterpolation(float)"
"android.animation.ValueAnimator.animateValue(float)","java.util.ArrayList.get(int)"
"android.animation.ValueAnimator.animateValue(float)","android.animation.ValueAnimator.AnimatorUpdateListener.onAnimationUpdate(android.animation.ValueAnimator)"
"android.animation.ValueAnimator.ofObject(TypeEvaluator, Object[])","android.animation.ValueAnimator.setObjectValues(java.lang.Object[])"
"android.animation.ValueAnimator.ofObject(TypeEvaluator, Object[])","android.animation.ValueAnimator.setEvaluator(android.animation.TypeEvaluator)"
"android.animation.ValueAnimator.setObjectValues(Object[])","android.animation.PropertyValuesHolder.setObjectValues(java.lang.Object[])"
"android.animation.ValueAnimator.scheduleAnimation()","android.view.Choreographer.postCallback(int, android.animation.ValueAnimator.AnimationHandler, null)"
"android.animation.ValueAnimator.setCurrentFraction(float)","android.animation.ValueAnimator.animateValue(float)"
"android.animation.ValueAnimator.setCurrentFraction(float)","android.animation.ValueAnimator.initAnimation()"
"android.animation.ValueAnimator.setCurrentFraction(float)","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.animation.ValueAnimator.setDuration(long)","android.animation.ValueAnimator.updateScaledDuration()"
"android.animation.ValueAnimator.toString()","java.lang.Object.hashCode()"
"android.animation.ValueAnimator.toString()","android.animation.PropertyValuesHolder.toString()"
"android.animation.ValueAnimator.toString()","java.lang.Integer.toHexString(int)"
"android.animation.ValueAnimator.pause()","android.animation.Animator.pause()"
"android.animation.ValueAnimator.setFrameDelay(long)","android.view.Choreographer.setFrameDelay(long)"
"android.os.RemoteCallback.run()","android.os.RemoteCallback.onResult(android.os.Bundle)"
"android.os.RemoteCallback.createFromParcel(Parcel)","android.os.Parcel.readStrongBinder()"
"android.content.AsyncTaskLoader.waitForLoader()","android.content.AsyncTaskLoader.LoadTask.waitForLoader()"
"android.content.AsyncTaskLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(android.content.AsyncTaskLoader.LoadTask)"
"android.content.AsyncTaskLoader.dump(String, FileDescriptor, PrintWriter, String[])","android.util.TimeUtils.formatDuration(long, long, java.io.PrintWriter)"
"android.content.AsyncTaskLoader.dump(String, FileDescriptor, PrintWriter, String[])","android.os.SystemClock.uptimeMillis()"
"android.content.AsyncTaskLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println()"
"android.content.AsyncTaskLoader.dump(String, FileDescriptor, PrintWriter, String[])","android.util.TimeUtils.formatDuration(long, java.io.PrintWriter)"
"android.content.AsyncTaskLoader.dump(String, FileDescriptor, PrintWriter, String[])","android.content.Loader.dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.content.AsyncTaskLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(boolean)"
"android.content.AsyncTaskLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.content.AsyncTaskLoader.doInBackground(Void[])","android.os.AsyncTask.isCancelled()"
"android.content.AsyncTaskLoader.doInBackground(Void[])","android.content.AsyncTaskLoader.onLoadInBackground()"
"android.content.AsyncTaskLoader.onCancelled(D)","java.util.concurrent.CountDownLatch.countDown()"
"android.content.AsyncTaskLoader.onCancelled(D)","android.content.AsyncTaskLoader.dispatchOnCancelled(android.content.AsyncTaskLoader.LoadTask, D)"
"android.content.AsyncTaskLoader.dispatchOnLoadComplete(LoadTask, D)","android.content.AsyncTaskLoader.dispatchOnCancelled(android.content.AsyncTaskLoader.LoadTask, D)"
"android.content.AsyncTaskLoader.dispatchOnLoadComplete(LoadTask, D)","android.content.Loader.isAbandoned()"
"android.content.AsyncTaskLoader.dispatchOnLoadComplete(LoadTask, D)","android.os.SystemClock.uptimeMillis()"
"android.content.AsyncTaskLoader.dispatchOnLoadComplete(LoadTask, D)","android.content.Loader.commitContentChanged()"
"android.content.AsyncTaskLoader.dispatchOnLoadComplete(LoadTask, D)","android.content.AsyncTaskLoader.onCanceled(D)"
"android.content.AsyncTaskLoader.dispatchOnLoadComplete(LoadTask, D)","android.content.Loader.deliverResult(D)"
"android.content.AsyncTaskLoader.onLoadInBackground()","android.content.AsyncTaskLoader.loadInBackground()"
"android.content.AsyncTaskLoader.dispatchOnCancelled(LoadTask, D)","android.content.Loader.deliverCancellation()"
"android.content.AsyncTaskLoader.dispatchOnCancelled(LoadTask, D)","android.os.SystemClock.uptimeMillis()"
"android.content.AsyncTaskLoader.dispatchOnCancelled(LoadTask, D)","android.content.Loader.rollbackContentChanged()"
"android.content.AsyncTaskLoader.dispatchOnCancelled(LoadTask, D)","android.content.AsyncTaskLoader.executePendingTask()"
"android.content.AsyncTaskLoader.dispatchOnCancelled(LoadTask, D)","android.content.AsyncTaskLoader.onCanceled(D)"
"android.content.AsyncTaskLoader.run()","android.content.AsyncTaskLoader.executePendingTask()"
"android.content.AsyncTaskLoader.onForceLoad()","android.content.Loader.onForceLoad()"
"android.content.AsyncTaskLoader.onForceLoad()","android.content.AsyncTaskLoader.executePendingTask()"
"android.content.AsyncTaskLoader.onForceLoad()","android.content.Loader.cancelLoad()"
"android.content.AsyncTaskLoader.onCancelLoad()","android.content.AsyncTaskLoader.cancelLoadInBackground()"
"android.content.AsyncTaskLoader.onCancelLoad()","android.os.Handler.removeCallbacks(android.content.AsyncTaskLoader.LoadTask)"
"android.content.AsyncTaskLoader.onCancelLoad()","android.os.AsyncTask.cancel(boolean)"
"android.content.AsyncTaskLoader.onPostExecute(D)","java.util.concurrent.CountDownLatch.countDown()"
"android.content.AsyncTaskLoader.onPostExecute(D)","android.content.AsyncTaskLoader.dispatchOnLoadComplete(android.content.AsyncTaskLoader.LoadTask, D)"
"android.content.AsyncTaskLoader.executePendingTask()","android.os.AsyncTask.executeOnExecutor(java.util.concurrent.Executor, java.lang.Void[])"
"android.content.AsyncTaskLoader.executePendingTask()","android.os.SystemClock.uptimeMillis()"
"android.content.AsyncTaskLoader.executePendingTask()","android.os.Handler.removeCallbacks(android.content.AsyncTaskLoader.LoadTask)"
"android.content.AsyncTaskLoader.executePendingTask()","android.os.Handler.postAtTime(android.content.AsyncTaskLoader.LoadTask, long)"
"android.hardware.camera2.params.ColorSpaceTransform.copyElements(int[], int)","com.android.internal.util.Preconditions.checkNotNull(int[], java.lang.String)"
"android.hardware.camera2.params.ColorSpaceTransform.copyElements(int[], int)","com.android.internal.util.Preconditions.checkArgumentNonnegative(int, java.lang.String)"
"android.hardware.camera2.params.ColorSpaceTransform.toString()","java.lang.String.format(java.lang.String, java.lang.String)"
"android.hardware.camera2.params.ColorSpaceTransform.toString()","android.hardware.camera2.params.ColorSpaceTransform.toShortString()"
"android.hardware.camera2.params.ColorSpaceTransform.hashCode()","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int[])"
"android.hardware.camera2.params.ColorSpaceTransform.toShortString()","java.lang.StringBuilder.append(int)"
"android.hardware.camera2.params.ColorSpaceTransform.toShortString()","java.lang.StringBuilder.append(java.lang.String)"
"android.hardware.camera2.params.ColorSpaceTransform.toShortString()","java.lang.StringBuilder.toString()"
"android.hardware.camera2.params.ColorSpaceTransform.copyElements(Rational[], int)","com.android.internal.util.Preconditions.checkNotNull(android.util.Rational[], java.lang.String)"
"android.hardware.camera2.params.ColorSpaceTransform.copyElements(Rational[], int)","com.android.internal.util.Preconditions.checkArgumentNonnegative(int, java.lang.String)"
"android.hardware.camera2.params.ColorSpaceTransform.equals(Object)","android.util.Rational.equals(android.util.Rational)"
"android.net.WifiLinkQualityInfo.createFromParcelBody(Parcel)","android.os.Parcel.readLong()"
"android.net.WifiLinkQualityInfo.createFromParcelBody(Parcel)","android.os.Parcel.readString()"
"android.net.WifiLinkQualityInfo.createFromParcelBody(Parcel)","android.net.LinkQualityInfo.initializeFromParcel(android.os.Parcel)"
"android.net.WifiLinkQualityInfo.createFromParcelBody(Parcel)","android.os.Parcel.readInt()"
"android.net.WifiLinkQualityInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.net.WifiLinkQualityInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.net.WifiLinkQualityInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.WifiLinkQualityInfo.writeToParcel(Parcel, int)","android.net.LinkQualityInfo.writeToParcel(android.os.Parcel, int, int)"
"android.text.style.TextAppearanceSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.text.style.TextAppearanceSpan.writeToParcel(Parcel, int)","android.content.res.ColorStateList.writeToParcel(android.os.Parcel, int)"
"android.text.style.TextAppearanceSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.text.style.TextAppearanceSpan.updateDrawState(TextPaint)","android.text.style.TextAppearanceSpan.updateMeasureState(android.text.TextPaint)"
"android.text.style.TextAppearanceSpan.updateDrawState(TextPaint)","android.content.res.ColorStateList.getColorForState(int[], int)"
"android.util.SparseIntArray.delete(int)","android.util.ContainerHelpers.binarySearch(int[], int, int)"
"android.util.SparseIntArray.delete(int)","android.util.SparseIntArray.removeAt(int)"
"android.util.SparseIntArray.indexOfKey(int)","android.util.ContainerHelpers.binarySearch(int[], int, int)"
"android.util.SparseIntArray.clone()","java.lang.Object.clone()"
"android.util.SparseIntArray.get(int, int)","android.util.ContainerHelpers.binarySearch(int[], int, int)"
"android.util.SparseIntArray.append(int, int)","android.util.SparseIntArray.put(int, int)"
"android.util.SparseIntArray.append(int, int)","com.android.internal.util.GrowingArrayUtils.append(int[], int, int)"
"android.util.SparseIntArray.get(int)","android.util.SparseIntArray.get(int, int)"
"android.util.SparseIntArray.toString()","android.util.SparseIntArray.size()"
"android.util.SparseIntArray.toString()","android.util.SparseIntArray.valueAt(int)"
"android.util.SparseIntArray.toString()","java.lang.StringBuilder.append(int)"
"android.util.SparseIntArray.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.util.SparseIntArray.toString()","java.lang.StringBuilder.toString()"
"android.util.SparseIntArray.toString()","java.lang.StringBuilder.append(char)"
"android.util.SparseIntArray.toString()","android.util.SparseIntArray.keyAt(int)"
"android.util.SparseIntArray.removeAt(int)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.util.SparseIntArray.put(int, int)","android.util.ContainerHelpers.binarySearch(int[], int, int)"
"android.util.SparseIntArray.put(int, int)","com.android.internal.util.GrowingArrayUtils.insert(int[], int, int, int)"
"android.net.NetworkState.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.net.NetworkInfo, int)"
"android.net.NetworkState.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.net.NetworkState.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.net.LinkProperties, int)"
"android.net.NetworkState.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.net.NetworkCapabilities, int)"
"android.net.NetworkState.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.net.Network, int)"
"android.app.admin.DeviceAdminReceiver.getManager(Context)","android.content.Context.getSystemService(java.lang.String)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onLockTaskModeEntering(android.content.Context, android.content.Intent, java.lang.String)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onPasswordExpiring(android.content.Context, android.content.Intent)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onProfileProvisioningComplete(android.content.Context, android.content.Intent)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onDisabled(android.content.Context, android.content.Intent)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onPasswordSucceeded(android.content.Context, android.content.Intent)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.os.Bundle.putCharSequence(java.lang.String, java.lang.CharSequence)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onEnabled(android.content.Context, android.content.Intent)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.content.Intent.getAction()"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","java.lang.String.equals(java.lang.String)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onPasswordFailed(android.content.Context, android.content.Intent)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onPasswordChanged(android.content.Context, android.content.Intent)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onLockTaskModeExiting(android.content.Context, android.content.Intent)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.content.Intent.getStringExtra(java.lang.String)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.app.admin.DeviceAdminReceiver.onDisableRequested(android.content.Context, android.content.Intent)"
"android.app.admin.DeviceAdminReceiver.onReceive(Context, Intent)","android.content.BroadcastReceiver.getResultExtras(boolean)"
"android.app.admin.DeviceAdminReceiver.getWho(Context)","java.lang.Object.getClass()"
"android.os.Bundle.getCharSequenceArray(String)","android.os.BaseBundle.getCharSequenceArray(java.lang.String)"
"android.os.Bundle.createFromParcel(Parcel)","android.os.Parcel.readBundle()"
"android.os.Bundle.getBinder(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.Bundle.getBinder(String)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getBinder(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.Bundle.getFloatArray(String)","android.os.BaseBundle.getFloatArray(java.lang.String)"
"android.os.Bundle.putIntegerArrayList(String, ArrayList)","android.os.BaseBundle.putIntegerArrayList(java.lang.String, java.util.ArrayList<java.lang.Integer>)"
"android.os.Bundle.putBundle(String, Bundle)","android.util.ArrayMap.put(java.lang.String, android.os.Bundle)"
"android.os.Bundle.putBundle(String, Bundle)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getCharSequenceArrayList(String)","android.os.BaseBundle.getCharSequenceArrayList(java.lang.String)"
"android.os.Bundle.putStringArrayList(String, ArrayList)","android.os.BaseBundle.putStringArrayList(java.lang.String, java.util.ArrayList<java.lang.String>)"
"android.os.Bundle.clear()","android.os.BaseBundle.clear()"
"android.os.Bundle.readFromParcel(Parcel)","android.os.Parcel.hasFileDescriptors()"
"android.os.Bundle.readFromParcel(Parcel)","android.os.BaseBundle.readFromParcelInner(android.os.Parcel)"
"android.os.Bundle.getClassLoader()","android.os.BaseBundle.getClassLoader()"
"android.os.Bundle.putFloat(String, float)","android.os.BaseBundle.putFloat(java.lang.String, float)"
"android.os.Bundle.putCharSequenceArrayList(String, ArrayList)","android.os.BaseBundle.putCharSequenceArrayList(java.lang.String, java.util.ArrayList<java.lang.CharSequence>)"
"android.os.Bundle.putSizeF(String, SizeF)","android.util.ArrayMap.put(java.lang.String, android.util.SizeF)"
"android.os.Bundle.putSizeF(String, SizeF)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.putSparseParcelableArray(String, SparseArray)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.putSparseParcelableArray(String, SparseArray)","android.util.ArrayMap.put(java.lang.String, android.util.SparseArray<? extends android.os.Parcelable>)"
"android.os.Bundle.getChar(String, char)","android.os.BaseBundle.getChar(java.lang.String, char)"
"android.os.Bundle.putByte(String, byte)","android.os.BaseBundle.putByte(java.lang.String, byte)"
"android.os.Bundle.getShort(String, short)","android.os.BaseBundle.getShort(java.lang.String, short)"
"android.os.Bundle.getCharSequence(String, CharSequence)","android.os.BaseBundle.getCharSequence(java.lang.String, java.lang.CharSequence)"
"android.os.Bundle.putByteArray(String, byte[])","android.os.BaseBundle.putByteArray(java.lang.String, byte[])"
"android.os.Bundle.putFloatArray(String, float[])","android.os.BaseBundle.putFloatArray(java.lang.String, float[])"
"android.os.Bundle.putIBinder(String, IBinder)","android.util.ArrayMap.put(java.lang.String, android.os.IBinder)"
"android.os.Bundle.putIBinder(String, IBinder)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getStringArrayList(String)","android.os.BaseBundle.getStringArrayList(java.lang.String)"
"android.os.Bundle.putAll(Bundle)","android.util.ArrayMap.putAll(android.util.ArrayMap<java.lang.String, java.lang.Object>)"
"android.os.Bundle.putAll(Bundle)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getCharSequence(String)","android.os.BaseBundle.getCharSequence(java.lang.String)"
"android.os.Bundle.getSize(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.Bundle.getSize(String)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getSize(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.Bundle.getByte(String)","android.os.BaseBundle.getByte(java.lang.String)"
"android.os.Bundle.putParcelableList(String, List)","android.util.ArrayMap.put(java.lang.String, java.util.List<? extends android.os.Parcelable>)"
"android.os.Bundle.putParcelableList(String, List)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.putParcelableArrayList(String, ArrayList)","android.util.ArrayMap.put(java.lang.String, java.util.ArrayList<? extends android.os.Parcelable>)"
"android.os.Bundle.putParcelableArrayList(String, ArrayList)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getFloat(String)","android.os.BaseBundle.getFloat(java.lang.String)"
"android.os.Bundle.putCharArray(String, char[])","android.os.BaseBundle.putCharArray(java.lang.String, char[])"
"android.os.Bundle.putSize(String, Size)","android.util.ArrayMap.put(java.lang.String, android.util.Size)"
"android.os.Bundle.putSize(String, Size)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getByteArray(String)","android.os.BaseBundle.getByteArray(java.lang.String)"
"android.os.Bundle.putParcelableArray(String, Parcelable[])","android.os.BaseBundle.unparcel()"
"android.os.Bundle.putParcelableArray(String, Parcelable[])","android.util.ArrayMap.put(java.lang.String, android.os.Parcelable[])"
"android.os.Bundle.getSparseParcelableArray(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.Bundle.getSparseParcelableArray(String)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getSparseParcelableArray(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.Bundle.getBundle(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.Bundle.getBundle(String)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getBundle(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.Bundle.forPair(String, String)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.os.Bundle.putBinder(String, IBinder)","android.util.ArrayMap.put(java.lang.String, android.os.IBinder)"
"android.os.Bundle.putBinder(String, IBinder)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.putCharSequenceArray(String, CharSequence[])","android.os.BaseBundle.putCharSequenceArray(java.lang.String, java.lang.CharSequence[])"
"android.os.Bundle.putCharSequence(String, CharSequence)","android.os.BaseBundle.putCharSequence(java.lang.String, java.lang.CharSequence)"
"android.os.Bundle.describeContents()","android.os.Bundle.hasFileDescriptors()"
"android.os.Bundle.toString()","android.util.ArrayMap.toString()"
"android.os.Bundle.toString()","android.os.Parcel.dataSize()"
"android.os.Bundle.getFloat(String, float)","android.os.BaseBundle.getFloat(java.lang.String, float)"
"android.os.Bundle.putSerializable(String, Serializable)","android.os.BaseBundle.putSerializable(java.lang.String, java.io.Serializable)"
"android.os.Bundle.getSerializable(String)","android.os.BaseBundle.getSerializable(java.lang.String)"
"android.os.Bundle.getCharArray(String)","android.os.BaseBundle.getCharArray(java.lang.String)"
"android.os.Bundle.getIBinder(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.Bundle.getIBinder(String)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getIBinder(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.Bundle.getChar(String)","android.os.BaseBundle.getChar(java.lang.String)"
"android.os.Bundle.getParcelableArrayList(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.Bundle.getParcelableArrayList(String)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getParcelableArrayList(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.Bundle.getShortArray(String)","android.os.BaseBundle.getShortArray(java.lang.String)"
"android.os.Bundle.getShort(String)","android.os.BaseBundle.getShort(java.lang.String)"
"android.os.Bundle.putChar(String, char)","android.os.BaseBundle.putChar(java.lang.String, char)"
"android.os.Bundle.getParcelableArray(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.Bundle.getParcelableArray(String)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getParcelableArray(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.Bundle.getIntegerArrayList(String)","android.os.BaseBundle.getIntegerArrayList(java.lang.String)"
"android.os.Bundle.putShortArray(String, short[])","android.os.BaseBundle.putShortArray(java.lang.String, short[])"
"android.os.Bundle.getSizeF(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.Bundle.getSizeF(String)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getSizeF(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.Bundle.setClassLoader(ClassLoader)","android.os.BaseBundle.setClassLoader(java.lang.ClassLoader)"
"android.os.Bundle.putShort(String, short)","android.os.BaseBundle.putShort(java.lang.String, short)"
"android.os.Bundle.getParcelable(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.Bundle.getParcelable(String)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.getParcelable(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.Bundle.putParcelable(String, Parcelable)","android.os.BaseBundle.unparcel()"
"android.os.Bundle.putParcelable(String, Parcelable)","android.util.ArrayMap.put(java.lang.String, android.os.Parcelable)"
"android.os.Bundle.hasFileDescriptors()","java.util.ArrayList.size()"
"android.os.Bundle.hasFileDescriptors()","android.util.SparseArray.valueAt(int)"
"android.os.Bundle.hasFileDescriptors()","android.os.Parcel.hasFileDescriptors()"
"android.os.Bundle.hasFileDescriptors()","java.util.ArrayList.isEmpty()"
"android.os.Bundle.hasFileDescriptors()","android.util.ArrayMap.valueAt(int)"
"android.os.Bundle.hasFileDescriptors()","android.os.Parcelable.describeContents()"
"android.os.Bundle.hasFileDescriptors()","java.util.ArrayList.get(int)"
"android.os.Bundle.hasFileDescriptors()","android.util.ArrayMap.size()"
"android.os.Bundle.getByte(String, byte)","android.os.BaseBundle.getByte(java.lang.String, byte)"
"android.os.Bundle.writeToParcel(Parcel, int)","android.os.Parcel.pushAllowFds(boolean)"
"android.os.Bundle.writeToParcel(Parcel, int)","android.os.Parcel.restoreAllowFds(boolean)"
"android.os.Bundle.writeToParcel(Parcel, int)","android.os.BaseBundle.writeToParcelInner(android.os.Parcel, int)"
"android.util.StringBuilderPrinter.println(String)","java.lang.String.charAt(int)"
"android.util.StringBuilderPrinter.println(String)","java.lang.StringBuilder.append(java.lang.String)"
"android.util.StringBuilderPrinter.println(String)","java.lang.StringBuilder.append(char)"
"android.util.StringBuilderPrinter.println(String)","java.lang.String.length()"
"android.content.ContentQueryMap.requery()","java.util.Observable.setChanged()"
"android.content.ContentQueryMap.requery()","android.content.ContentQueryMap.readCursorIntoCache(android.database.Cursor)"
"android.content.ContentQueryMap.requery()","java.util.Observable.notifyObservers()"
"android.content.ContentQueryMap.requery()","android.database.Cursor.requery()"
"android.content.ContentQueryMap.readCursorIntoCache(Cursor)","java.util.Map.size()"
"android.content.ContentQueryMap.readCursorIntoCache(Cursor)","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.content.ContentQueryMap.readCursorIntoCache(Cursor)","java.util.Map.put(java.lang.String, android.content.ContentValues)"
"android.content.ContentQueryMap.readCursorIntoCache(Cursor)","android.database.Cursor.getString(int)"
"android.content.ContentQueryMap.readCursorIntoCache(Cursor)","android.database.Cursor.moveToNext()"
"android.content.ContentQueryMap.getValues(String)","java.util.Map.get(java.lang.String)"
"android.content.ContentQueryMap.getValues(String)","android.content.ContentQueryMap.requery()"
"android.content.ContentQueryMap.setKeepUpdated(boolean)","android.database.Cursor.unregisterContentObserver(android.database.ContentObserver)"
"android.content.ContentQueryMap.setKeepUpdated(boolean)","android.database.Cursor.registerContentObserver(android.database.ContentObserver)"
"android.content.ContentQueryMap.setKeepUpdated(boolean)","java.util.Observable.countObservers()"
"android.content.ContentQueryMap.setKeepUpdated(boolean)","android.content.ContentQueryMap.requery()"
"android.content.ContentQueryMap.getRows()","android.content.ContentQueryMap.requery()"
"android.content.ContentQueryMap.finalize()","java.lang.Object.finalize()"
"android.content.ContentQueryMap.finalize()","android.content.ContentQueryMap.close()"
"android.content.ContentQueryMap.close()","android.database.Cursor.unregisterContentObserver(android.database.ContentObserver)"
"android.content.ContentQueryMap.close()","android.database.Cursor.close()"
"android.net.VpnService.addSearchDomain(String)","java.util.List.add(java.lang.String)"
"android.net.VpnService.onRevoke()","android.app.Service.stopSelf()"
"android.net.VpnService.setUnderlyingNetworks(Network[])","java.lang.Object.clone()"
"android.net.VpnService.addAddress(InetAddress, int)","java.net.InetAddress.isAnyLocalAddress()"
"android.net.VpnService.addAddress(InetAddress, int)","java.util.List.add(android.net.LinkAddress)"
"android.net.VpnService.addAddress(InetAddress, int)","com.android.internal.net.VpnConfig.updateAllowedFamilies(java.net.InetAddress)"
"android.net.VpnService.addAddress(InetAddress, int)","android.net.VpnService.check(java.net.InetAddress, int)"
"android.net.VpnService.removeAddress(InetAddress, int)","android.net.VpnService.check(java.net.InetAddress, int)"
"android.net.VpnService.check(InetAddress, int)","java.net.InetAddress.isLoopbackAddress()"
"android.net.VpnService.prepare(Context)","com.android.internal.net.VpnConfig.getIntentForConfirmation()"
"android.net.VpnService.prepareAndAuthorize(Context)","android.content.Context.getPackageName()"
"android.net.VpnService.prepareAndAuthorize(Context)","android.net.VpnService.getService()"
"android.net.VpnService.addAllowedApplication(String)","java.util.List.add(java.lang.String)"
"android.net.VpnService.addAllowedApplication(String)","android.net.VpnService.Builder.verifyApp(java.lang.String)"
"android.net.VpnService.onTransact(int, Parcel, Parcel, int)","android.net.VpnService.onRevoke()"
"android.net.VpnService.addDnsServer(InetAddress)","java.util.List.add(java.lang.String)"
"android.net.VpnService.addDnsServer(InetAddress)","java.net.InetAddress.isAnyLocalAddress()"
"android.net.VpnService.addDnsServer(InetAddress)","java.net.InetAddress.isLoopbackAddress()"
"android.net.VpnService.addDnsServer(InetAddress)","java.net.InetAddress.getHostAddress()"
"android.net.VpnService.addDisallowedApplication(String)","java.util.List.add(java.lang.String)"
"android.net.VpnService.addDisallowedApplication(String)","android.net.VpnService.Builder.verifyApp(java.lang.String)"
"android.net.VpnService.onBind(Intent)","java.lang.String.equals(java.lang.String)"
"android.net.VpnService.onBind(Intent)","android.content.Intent.getAction()"
"android.net.VpnService.addRoute(InetAddress, int)","com.android.internal.net.VpnConfig.updateAllowedFamilies(java.net.InetAddress)"
"android.net.VpnService.addRoute(InetAddress, int)","android.net.VpnService.check(java.net.InetAddress, int)"
"android.net.VpnService.addRoute(InetAddress, int)","java.net.InetAddress.getAddress()"
"android.net.VpnService.addRoute(InetAddress, int)","java.util.List.add(android.net.RouteInfo)"
"android.net.VpnService.protect(int)","android.net.NetworkUtils.protectFromVpn(int)"
"android.service.restrictions.RestrictionsReceiver.onReceive(Context, Intent)","android.service.restrictions.RestrictionsReceiver.onRequestPermission(android.content.Context, java.lang.String, java.lang.String, java.lang.String, android.os.PersistableBundle)"
"android.service.restrictions.RestrictionsReceiver.onReceive(Context, Intent)","android.content.Intent.getParcelableExtra(java.lang.String)"
"android.service.restrictions.RestrictionsReceiver.onReceive(Context, Intent)","android.content.Intent.getStringExtra(java.lang.String)"
"android.service.restrictions.RestrictionsReceiver.onReceive(Context, Intent)","android.content.Intent.getAction()"
"android.service.restrictions.RestrictionsReceiver.onReceive(Context, Intent)","java.lang.String.equals(java.lang.String)"
"android.view.inputmethod.ComposingText.setComposingSpans(Spannable)","java.lang.CharSequence.length()"
"android.view.inputmethod.ComposingText.setComposingSpans(Spannable)","android.view.inputmethod.BaseInputConnection.setComposingSpans(android.text.Spannable, int, int)"
"android.view.inputmethod.ComposingText.performEditorAction(int)","android.os.SystemClock.uptimeMillis()"
"android.view.inputmethod.ComposingText.performEditorAction(int)","android.view.inputmethod.BaseInputConnection.sendKeyEvent(android.view.KeyEvent)"
"android.view.inputmethod.ComposingText.reportFullscreenMode(boolean)","android.view.inputmethod.InputMethodManager.setFullscreenMode(boolean)"
"android.view.inputmethod.ComposingText.setComposingSpans(Spannable, int, int)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.view.inputmethod.ComposingText.setComposingSpans(Spannable, int, int)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.view.inputmethod.ComposingText.setComposingSpans(Spannable, int, int)","android.text.Spanned.getSpans(int, int, java.lang.Class<java.lang.Object>)"
"android.view.inputmethod.ComposingText.setComposingSpans(Spannable, int, int)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.view.inputmethod.ComposingText.setComposingSpans(Spannable, int, int)","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.view.inputmethod.ComposingText.setComposingSpans(Spannable, int, int)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.view.inputmethod.ComposingText.getComposingSpanStart(Spannable)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.view.inputmethod.ComposingText.setSelection(int, int)","android.text.Selection.setSelection(android.text.Editable, int, int)"
"android.view.inputmethod.ComposingText.setSelection(int, int)","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.setSelection(int, int)","java.lang.CharSequence.length()"
"android.view.inputmethod.ComposingText.setSelection(int, int)","android.text.method.MetaKeyKeyListener.getMetaState(android.text.Editable, int)"
"android.view.inputmethod.ComposingText.setSelection(int, int)","android.text.Selection.extendSelection(android.text.Editable, int)"
"android.view.inputmethod.ComposingText.getTextBeforeCursor(int, int)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.view.inputmethod.ComposingText.getTextBeforeCursor(int, int)","android.text.TextUtils.substring(android.text.Editable, int, int)"
"android.view.inputmethod.ComposingText.getTextBeforeCursor(int, int)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.view.inputmethod.ComposingText.getTextBeforeCursor(int, int)","java.lang.CharSequence.subSequence(int, int)"
"android.view.inputmethod.ComposingText.getTextBeforeCursor(int, int)","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.setComposingRegion(int, int)","android.view.inputmethod.BaseInputConnection.endBatchEdit()"
"android.view.inputmethod.ComposingText.setComposingRegion(int, int)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.view.inputmethod.ComposingText.setComposingRegion(int, int)","android.view.inputmethod.BaseInputConnection.sendCurrentText()"
"android.view.inputmethod.ComposingText.setComposingRegion(int, int)","android.view.inputmethod.BaseInputConnection.ensureDefaultComposingSpans()"
"android.view.inputmethod.ComposingText.setComposingRegion(int, int)","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.setComposingRegion(int, int)","android.view.inputmethod.BaseInputConnection.beginBatchEdit()"
"android.view.inputmethod.ComposingText.setComposingRegion(int, int)","android.view.inputmethod.BaseInputConnection.removeComposingSpans(android.text.Editable)"
"android.view.inputmethod.ComposingText.setComposingRegion(int, int)","java.lang.CharSequence.length()"
"android.view.inputmethod.ComposingText.getComposingSpanEnd(Spannable)","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.view.inputmethod.ComposingText.getSelectedText(int)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.view.inputmethod.ComposingText.getSelectedText(int)","android.text.TextUtils.substring(android.text.Editable, int, int)"
"android.view.inputmethod.ComposingText.getSelectedText(int)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.view.inputmethod.ComposingText.getSelectedText(int)","java.lang.CharSequence.subSequence(int, int)"
"android.view.inputmethod.ComposingText.getSelectedText(int)","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.sendCurrentText()","android.text.Editable.clear()"
"android.view.inputmethod.ComposingText.sendCurrentText()","android.os.SystemClock.uptimeMillis()"
"android.view.inputmethod.ComposingText.sendCurrentText()","android.view.KeyCharacterMap.load(int)"
"android.view.inputmethod.ComposingText.sendCurrentText()","android.view.inputmethod.BaseInputConnection.sendKeyEvent(android.view.KeyEvent)"
"android.view.inputmethod.ComposingText.sendCurrentText()","java.lang.CharSequence.toString()"
"android.view.inputmethod.ComposingText.sendCurrentText()","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.sendCurrentText()","android.text.GetChars.getChars(int, int, char[], int)"
"android.view.inputmethod.ComposingText.sendCurrentText()","java.lang.CharSequence.length()"
"android.view.inputmethod.ComposingText.sendCurrentText()","android.view.KeyCharacterMap.getEvents(char[])"
"android.view.inputmethod.ComposingText.getTextAfterCursor(int, int)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.view.inputmethod.ComposingText.getTextAfterCursor(int, int)","android.text.TextUtils.substring(android.text.Editable, int, int)"
"android.view.inputmethod.ComposingText.getTextAfterCursor(int, int)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.view.inputmethod.ComposingText.getTextAfterCursor(int, int)","java.lang.CharSequence.subSequence(int, int)"
"android.view.inputmethod.ComposingText.getTextAfterCursor(int, int)","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.getTextAfterCursor(int, int)","java.lang.CharSequence.length()"
"android.view.inputmethod.ComposingText.deleteSurroundingText(int, int)","android.view.inputmethod.BaseInputConnection.endBatchEdit()"
"android.view.inputmethod.ComposingText.deleteSurroundingText(int, int)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.view.inputmethod.ComposingText.deleteSurroundingText(int, int)","android.view.inputmethod.BaseInputConnection.getComposingSpanStart(android.text.Editable)"
"android.view.inputmethod.ComposingText.deleteSurroundingText(int, int)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.view.inputmethod.ComposingText.deleteSurroundingText(int, int)","android.view.inputmethod.BaseInputConnection.getComposingSpanEnd(android.text.Editable)"
"android.view.inputmethod.ComposingText.deleteSurroundingText(int, int)","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.deleteSurroundingText(int, int)","android.view.inputmethod.BaseInputConnection.beginBatchEdit()"
"android.view.inputmethod.ComposingText.deleteSurroundingText(int, int)","java.lang.CharSequence.length()"
"android.view.inputmethod.ComposingText.deleteSurroundingText(int, int)","android.text.Editable.delete(int, int)"
"android.view.inputmethod.ComposingText.commitText(CharSequence, int)","android.view.inputmethod.BaseInputConnection.sendCurrentText()"
"android.view.inputmethod.ComposingText.commitText(CharSequence, int)","android.view.inputmethod.BaseInputConnection.replaceText(java.lang.CharSequence, int, boolean)"
"android.view.inputmethod.ComposingText.commitText(CharSequence, int)","android.view.inputmethod.InputMethodManager.notifyUserAction()"
"android.view.inputmethod.ComposingText.removeComposingSpans(Spannable)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.view.inputmethod.ComposingText.removeComposingSpans(Spannable)","android.text.Spanned.getSpans(int, int, java.lang.Class<java.lang.Object>)"
"android.view.inputmethod.ComposingText.removeComposingSpans(Spannable)","java.lang.CharSequence.length()"
"android.view.inputmethod.ComposingText.removeComposingSpans(Spannable)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.view.inputmethod.ComposingText.finishComposingText()","android.view.inputmethod.BaseInputConnection.endBatchEdit()"
"android.view.inputmethod.ComposingText.finishComposingText()","android.view.inputmethod.BaseInputConnection.sendCurrentText()"
"android.view.inputmethod.ComposingText.finishComposingText()","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.finishComposingText()","android.view.inputmethod.BaseInputConnection.beginBatchEdit()"
"android.view.inputmethod.ComposingText.finishComposingText()","android.view.inputmethod.BaseInputConnection.removeComposingSpans(android.text.Editable)"
"android.view.inputmethod.ComposingText.sendKeyEvent(KeyEvent)","android.view.ViewRootImpl.dispatchKeyFromIme(android.view.KeyEvent)"
"android.view.inputmethod.ComposingText.sendKeyEvent(KeyEvent)","android.view.View.getViewRootImpl()"
"android.view.inputmethod.ComposingText.sendKeyEvent(KeyEvent)","android.view.inputmethod.InputMethodManager.notifyUserAction()"
"android.view.inputmethod.ComposingText.getEditable()","android.text.Editable.Factory.newEditable(java.lang.String)"
"android.view.inputmethod.ComposingText.getEditable()","android.text.Editable.Factory.getInstance()"
"android.view.inputmethod.ComposingText.getEditable()","android.text.Selection.setSelection(android.text.Editable, int)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.view.inputmethod.BaseInputConnection.endBatchEdit()"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.view.inputmethod.BaseInputConnection.getComposingSpanStart(android.text.Editable)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.view.inputmethod.BaseInputConnection.getComposingSpanEnd(android.text.Editable)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.text.TextUtils.dumpSpans(android.text.Editable, android.util.LogPrinter, java.lang.String)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.text.Selection.setSelection(android.text.Editable, int)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.util.LogPrinter.println(java.lang.String)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.text.TextUtils.dumpSpans(java.lang.CharSequence, android.util.LogPrinter, java.lang.String)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.text.Editable.replace(int, int, java.lang.CharSequence)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.view.inputmethod.BaseInputConnection.ensureDefaultComposingSpans()"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.view.inputmethod.BaseInputConnection.setComposingSpans(android.text.Spannable)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.view.inputmethod.BaseInputConnection.beginBatchEdit()"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","android.view.inputmethod.BaseInputConnection.removeComposingSpans(android.text.Editable)"
"android.view.inputmethod.ComposingText.replaceText(CharSequence, int, boolean)","java.lang.CharSequence.length()"
"android.view.inputmethod.ComposingText.setComposingText(CharSequence, int)","android.view.inputmethod.BaseInputConnection.replaceText(java.lang.CharSequence, int, boolean)"
"android.view.inputmethod.ComposingText.setComposingText(CharSequence, int)","android.view.inputmethod.InputMethodManager.notifyUserAction()"
"android.view.inputmethod.ComposingText.ensureDefaultComposingSpans()","android.content.Context.getTheme()"
"android.view.inputmethod.ComposingText.ensureDefaultComposingSpans()","android.view.View.getContext()"
"android.view.inputmethod.ComposingText.ensureDefaultComposingSpans()","android.content.res.Resources.Theme.obtainStyledAttributes(int[])"
"android.view.inputmethod.ComposingText.ensureDefaultComposingSpans()","android.content.res.TypedArray.getText(int)"
"android.view.inputmethod.ComposingText.ensureDefaultComposingSpans()","android.text.Spanned.getSpans(int, int, java.lang.Class<java.lang.Object>)"
"android.view.inputmethod.ComposingText.ensureDefaultComposingSpans()","android.content.res.TypedArray.recycle()"
"android.view.inputmethod.ComposingText.ensureDefaultComposingSpans()","java.lang.CharSequence.length()"
"android.view.inputmethod.ComposingText.clearMetaKeyStates(int)","android.text.method.MetaKeyKeyListener.clearMetaKeyState(android.text.Editable, int)"
"android.view.inputmethod.ComposingText.clearMetaKeyStates(int)","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.view.inputmethod.ComposingText.getCursorCapsMode(int)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.view.inputmethod.ComposingText.getCursorCapsMode(int)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.view.inputmethod.ComposingText.getCursorCapsMode(int)","android.text.TextUtils.getCapsMode(android.text.Editable, int, int)"
"android.view.inputmethod.ComposingText.getCursorCapsMode(int)","android.view.inputmethod.BaseInputConnection.getEditable()"
"android.webkit.UrlInterceptRegistry.unregisterHandler(UrlInterceptHandler)","java.util.LinkedList.remove(android.webkit.UrlInterceptHandler)"
"android.webkit.UrlInterceptRegistry.unregisterHandler(UrlInterceptHandler)","android.webkit.UrlInterceptRegistry.getHandlers()"
"android.webkit.UrlInterceptRegistry.registerHandler(UrlInterceptHandler)","java.util.LinkedList.contains(android.webkit.UrlInterceptHandler)"
"android.webkit.UrlInterceptRegistry.registerHandler(UrlInterceptHandler)","android.webkit.UrlInterceptRegistry.getHandlers()"
"android.webkit.UrlInterceptRegistry.registerHandler(UrlInterceptHandler)","java.util.LinkedList.addFirst(android.webkit.UrlInterceptHandler)"
"android.webkit.UrlInterceptRegistry.getPluginData(String, Map)","java.util.AbstractList.listIterator()"
"android.webkit.UrlInterceptRegistry.getPluginData(String, Map)","java.util.Iterator.next()"
"android.webkit.UrlInterceptRegistry.getPluginData(String, Map)","android.webkit.UrlInterceptRegistry.getHandlers()"
"android.webkit.UrlInterceptRegistry.getPluginData(String, Map)","java.util.Iterator.hasNext()"
"android.webkit.UrlInterceptRegistry.getPluginData(String, Map)","android.webkit.UrlInterceptHandler.getPluginData(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"
"android.webkit.UrlInterceptRegistry.getPluginData(String, Map)","android.webkit.UrlInterceptRegistry.urlInterceptDisabled()"
"android.webkit.UrlInterceptRegistry.getSurrogate(String, Map)","java.util.AbstractList.listIterator()"
"android.webkit.UrlInterceptRegistry.getSurrogate(String, Map)","android.webkit.UrlInterceptHandler.service(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"
"android.webkit.UrlInterceptRegistry.getSurrogate(String, Map)","java.util.Iterator.next()"
"android.webkit.UrlInterceptRegistry.getSurrogate(String, Map)","android.webkit.UrlInterceptRegistry.getHandlers()"
"android.webkit.UrlInterceptRegistry.getSurrogate(String, Map)","java.util.Iterator.hasNext()"
"android.webkit.UrlInterceptRegistry.getSurrogate(String, Map)","android.webkit.UrlInterceptRegistry.urlInterceptDisabled()"
"android.hardware.camera2.CameraManager.onStatusChanged(int, int)","android.hardware.camera2.CameraManager.CameraManagerGlobal.onStatusChangedLocked(int, java.lang.String)"
"android.hardware.camera2.CameraManager.onStatusChanged(int, int)","java.lang.String.valueOf(int)"
"android.hardware.camera2.CameraManager.unregisterAvailabilityCallback(AvailabilityCallback)","android.util.ArrayMap.remove(android.hardware.camera2.CameraManager.AvailabilityCallback)"
"android.hardware.camera2.CameraManager.postSingleUpdate(AvailabilityCallback, Handler, String, int)","android.hardware.camera2.CameraManager.CameraManagerGlobal.isAvailable(int)"
"android.hardware.camera2.CameraManager.postSingleUpdate(AvailabilityCallback, Handler, String, int)","android.hardware.camera2.CameraManager.AvailabilityCallback.onCameraAvailable(java.lang.String)"
"android.hardware.camera2.CameraManager.postSingleUpdate(AvailabilityCallback, Handler, String, int)","android.os.Handler.post(java.lang.Runnable)"
"android.hardware.camera2.CameraManager.postSingleUpdate(AvailabilityCallback, Handler, String, int)","android.hardware.camera2.CameraManager.AvailabilityCallback.onCameraUnavailable(java.lang.String)"
"android.hardware.camera2.CameraManager.supportsCamera2ApiLocked(String)","android.hardware.camera2.CameraManager.supportsCameraApiLocked(java.lang.String, int)"
"android.hardware.camera2.CameraManager.getCameraCharacteristics(String)","java.lang.String.format(java.lang.String, java.lang.String)"
"android.hardware.camera2.CameraManager.getCameraCharacteristics(String)","android.hardware.camera2.legacy.LegacyMetadataMapper.createCharacteristics(java.lang.String, android.hardware.CameraInfo)"
"android.hardware.camera2.CameraManager.getCameraCharacteristics(String)","java.lang.Integer.valueOf(java.lang.String)"
"android.hardware.camera2.CameraManager.getCameraCharacteristics(String)","android.hardware.camera2.utils.CameraRuntimeException.asChecked()"
"android.hardware.camera2.CameraManager.getCameraCharacteristics(String)","android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()"
"android.hardware.camera2.CameraManager.getCameraCharacteristics(String)","android.hardware.camera2.CameraManager.CameraManagerGlobal.get()"
"android.hardware.camera2.CameraManager.getCameraCharacteristics(String)","java.util.ArrayList.contains(java.lang.String)"
"android.hardware.camera2.CameraManager.getCameraCharacteristics(String)","android.hardware.camera2.CameraManager.supportsCamera2ApiLocked(java.lang.String)"
"android.hardware.camera2.CameraManager.getCameraCharacteristics(String)","android.hardware.camera2.CameraManager.CameraManagerGlobal.getCameraService()"
"android.hardware.camera2.CameraManager.supportsCameraApiLocked(String, int)","android.hardware.camera2.utils.CameraRuntimeException.getReason()"
"android.hardware.camera2.CameraManager.supportsCameraApiLocked(String, int)","android.hardware.camera2.CameraManager.CameraManagerGlobal.get()"
"android.hardware.camera2.CameraManager.supportsCameraApiLocked(String, int)","android.hardware.camera2.CameraManager.CameraManagerGlobal.getCameraService()"
"android.hardware.camera2.CameraManager.supportsCameraApiLocked(String, int)","java.lang.Integer.parseInt(java.lang.String)"
"android.hardware.camera2.CameraManager.connectCameraServiceLocked()","android.hardware.camera2.utils.CameraRuntimeException.asChecked()"
"android.hardware.camera2.CameraManager.connectCameraServiceLocked()","android.os.ServiceManager.getService(java.lang.String)"
"android.hardware.camera2.CameraManager.connectCameraServiceLocked()","android.hardware.camera2.utils.CameraBinderDecorator.throwOnError(int)"
"android.hardware.camera2.CameraManager.connectCameraServiceLocked()","android.hardware.camera2.CameraManager.CameraManagerGlobal.handleRecoverableSetupErrors(android.hardware.camera2.utils.CameraRuntimeException, java.lang.String)"
"android.hardware.camera2.CameraManager.connectCameraServiceLocked()","android.hardware.camera2.impl.CameraMetadataNative.nativeSetupGlobalVendorTagDescriptor()"
"android.hardware.camera2.CameraManager.onStatusChangedLocked(int, String)","android.hardware.camera2.CameraManager.CameraManagerGlobal.validStatus(int)"
"android.hardware.camera2.CameraManager.onStatusChangedLocked(int, String)","android.hardware.camera2.CameraManager.CameraManagerGlobal.isAvailable(int)"
"android.hardware.camera2.CameraManager.onStatusChangedLocked(int, String)","android.util.ArrayMap.keyAt(int)"
"android.hardware.camera2.CameraManager.onStatusChangedLocked(int, String)","android.util.ArrayMap.valueAt(int)"
"android.hardware.camera2.CameraManager.onStatusChangedLocked(int, String)","android.hardware.camera2.CameraManager.CameraManagerGlobal.isAvailable(java.lang.Integer)"
"android.hardware.camera2.CameraManager.onStatusChangedLocked(int, String)","android.hardware.camera2.CameraManager.CameraManagerGlobal.postSingleUpdate(android.hardware.camera2.CameraManager.AvailabilityCallback, android.os.Handler, java.lang.String, int)"
"android.hardware.camera2.CameraManager.onStatusChangedLocked(int, String)","android.util.ArrayMap.put(java.lang.String, int)"
"android.hardware.camera2.CameraManager.onStatusChangedLocked(int, String)","android.util.ArrayMap.size()"
"android.hardware.camera2.CameraManager.updateCallbackLocked(AvailabilityCallback, Handler)","android.util.ArrayMap.keyAt(int)"
"android.hardware.camera2.CameraManager.updateCallbackLocked(AvailabilityCallback, Handler)","android.util.ArrayMap.valueAt(int)"
"android.hardware.camera2.CameraManager.updateCallbackLocked(AvailabilityCallback, Handler)","android.hardware.camera2.CameraManager.CameraManagerGlobal.postSingleUpdate(android.hardware.camera2.CameraManager.AvailabilityCallback, android.os.Handler, java.lang.String, java.lang.Integer)"
"android.hardware.camera2.CameraManager.updateCallbackLocked(AvailabilityCallback, Handler)","android.util.ArrayMap.size()"
"android.hardware.camera2.CameraManager.binderDied()","android.util.ArrayMap.keyAt(int)"
"android.hardware.camera2.CameraManager.binderDied()","android.hardware.camera2.CameraManager.CameraManagerGlobal.onStatusChangedLocked(int, java.lang.String)"
"android.hardware.camera2.CameraManager.binderDied()","android.util.ArrayMap.size()"
"android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(String, CameraDevice.StateCallback, Handler)","android.hardware.camera2.utils.CameraRuntimeException.asChecked()"
"android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(String, CameraDevice.StateCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.getCallbacks()"
"android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(String, CameraDevice.StateCallback, Handler)","android.hardware.camera2.utils.CameraRuntimeException.getReason()"
"android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(String, CameraDevice.StateCallback, Handler)","android.hardware.camera2.CameraManager.CameraManagerGlobal.get()"
"android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(String, CameraDevice.StateCallback, Handler)","android.hardware.camera2.CameraManager.getCameraCharacteristics(java.lang.String)"
"android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(String, CameraDevice.StateCallback, Handler)","android.hardware.camera2.CameraManager.supportsCamera2ApiLocked(java.lang.String)"
"android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(String, CameraDevice.StateCallback, Handler)","android.hardware.camera2.impl.CameraDeviceImpl.setRemoteFailure(android.hardware.camera2.utils.CameraRuntimeException)"
"android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(String, CameraDevice.StateCallback, Handler)","android.hardware.camera2.CameraManager.CameraManagerGlobal.getCameraService()"
"android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(String, CameraDevice.StateCallback, Handler)","java.lang.Integer.parseInt(java.lang.String)"
"android.hardware.camera2.CameraManager.getCameraIdList()","android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()"
"android.hardware.camera2.CameraManager.getCameraIdList()","java.util.ArrayList.toArray(java.lang.String[])"
"android.hardware.camera2.CameraManager.getCameraService()","android.hardware.camera2.CameraManager.CameraManagerGlobal.connectCameraServiceLocked()"
"android.hardware.camera2.CameraManager.handleRecoverableSetupErrors(CameraRuntimeException, String)","android.hardware.camera2.utils.CameraRuntimeException.getReason()"
"android.hardware.camera2.CameraManager.handleRecoverableSetupErrors(CameraRuntimeException, String)","android.hardware.camera2.utils.CameraRuntimeException.asChecked()"
"android.hardware.camera2.CameraManager.handleRecoverableSetupErrors(CameraRuntimeException, String)","android.hardware.camera2.CameraAccessException.getDefaultMessage(int)"
"android.hardware.camera2.CameraManager.registerAvailabilityCallback(AvailabilityCallback, Handler)","android.util.ArrayMap.put(android.hardware.camera2.CameraManager.AvailabilityCallback, android.os.Handler)"
"android.hardware.camera2.CameraManager.registerAvailabilityCallback(AvailabilityCallback, Handler)","android.hardware.camera2.CameraManager.CameraManagerGlobal.updateCallbackLocked(android.hardware.camera2.CameraManager.AvailabilityCallback, android.os.Handler)"
"android.hardware.camera2.CameraManager.openCamera(String, CameraDevice.StateCallback, Handler)","android.hardware.camera2.CameraManager.openCameraDeviceUserAsync(java.lang.String, android.hardware.camera2.CameraDevice.StateCallback, android.os.Handler)"
"android.hardware.camera2.CameraManager.openCamera(String, CameraDevice.StateCallback, Handler)","android.os.Looper.myLooper()"
"android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()","android.hardware.camera2.utils.CameraRuntimeException.asChecked()"
"android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()","android.hardware.camera2.utils.CameraRuntimeException.getReason()"
"android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()","java.util.ArrayList.add(java.lang.String)"
"android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()","android.hardware.camera2.CameraManager.CameraManagerGlobal.get()"
"android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()","android.hardware.camera2.impl.CameraMetadataNative.isEmpty()"
"android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()","java.lang.String.valueOf(int)"
"android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()","android.hardware.camera2.CameraManager.CameraManagerGlobal.getCameraService()"
"android.hardware.camera2.CameraManager.getOrCreateDeviceIdListLocked()","java.util.ArrayList.clear()"
"android.hardware.camera2.legacy.LegacyRequestMapper.mapAeAndFlashMode(CaptureRequest, Parameters)","android.hardware.Camera.Parameters.setFlashMode(java.lang.String)"
"android.hardware.camera2.legacy.LegacyRequestMapper.mapAeAndFlashMode(CaptureRequest, Parameters)","android.hardware.camera2.utils.ListUtils.listContains(java.util.List<java.lang.String>, java.lang.String)"
"android.hardware.camera2.legacy.LegacyRequestMapper.mapAeAndFlashMode(CaptureRequest, Parameters)","android.hardware.Camera.Parameters.getSupportedFlashModes()"
"android.hardware.camera2.legacy.LegacyRequestMapper.mapAeAndFlashMode(CaptureRequest, Parameters)","android.hardware.camera2.utils.ParamsUtils.getOrDefault(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setZoom(int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getSupportedPreviewFpsRange()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getMaxNumFocusAreas()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setJpegQuality(int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.CaptureRequest.get(android.hardware.camera2.CaptureRequest.Key<android.util.Size>)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.isVideoStabilizationSupported()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setPreviewFpsRange(int, int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.CaptureRequest.get(android.hardware.camera2.CaptureRequest.Key<java.lang.Integer>)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.utils.ParamsUtils.getOrDefault(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.convertAeAntiBandingModeToLegacy(java.lang.Integer)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.isAutoWhiteBalanceLockSupported()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.utils.ListUtils.listContains(java.util.List<java.lang.String>, java.lang.String)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.convertAeFpsRangeToLegacy(android.util.Range<java.lang.Integer>)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setSceneMode(java.lang.String)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.filterSupportedCaptureIntent(int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.CaptureRequest.get(android.hardware.camera2.CaptureRequest.Key<android.hardware.camera2.params.MeteringRectangle[]>)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.mapAeAndFlashMode(android.hardware.camera2.CaptureRequest, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.util.Size.getHeight()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.isZoomSupported()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setAutoWhiteBalanceLock(java.lang.Boolean)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setVideoStabilization(boolean)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getSupportedColorEffects()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.getIfSupported(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest.Key<java.lang.Float>, float, boolean, float)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setAutoExposureLock(java.lang.Boolean)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setRecordingHint(boolean)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getMaxNumMeteringAreas()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.util.Size.getWidth()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setAntibanding(java.lang.String)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.CaptureRequest.get(android.hardware.camera2.CaptureRequest.Key<android.util.Range<java.lang.Integer>>)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyMetadataMapper.convertEffectModeToLegacy(int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setJpegThumbnailQuality(int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.CameraCharacteristics.get(android.hardware.camera2.CameraCharacteristics.Key<android.util.Range<java.lang.Integer>>)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setJpegThumbnailSize(int, int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.ParameterUtils.containsSize(java.util.List<android.hardware.Camera.Size>, int, int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setWhiteBalance(java.lang.String)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.utils.ParamsUtils.getOrDefault(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest.Key<java.lang.Byte>, byte)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.isAutoExposureLockSupported()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.util.Range.contains(int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getSupportedWhiteBalance()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyMetadataMapper.convertAfModeToLegacy(int, java.util.List<java.lang.String>)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setColorEffect(java.lang.String)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setFocusAreas(java.util.List<android.hardware.Camera.Area>)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.getIfSupported(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest.Key<java.lang.Boolean>, boolean, boolean, boolean)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setExposureCompensation(int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getSupportedAntibanding()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getSupportedJpegThumbnailSizes()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setMeteringAreas(java.util.List<android.hardware.Camera.Area>)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.utils.ListUtils.listSelectFirstFrom(java.util.List<java.lang.String>, java.lang.String[])"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getSupportedFocusModes()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.convertAwbModeToLegacy(java.lang.Integer)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.removeGpsData()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getSupportedSceneModes()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","java.util.List.size()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setFocusMode(java.lang.String)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.Camera.Parameters.setRotation(java.lang.Integer)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.getIfSupported(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest.Key<java.lang.Integer>, int, boolean, int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertRequestMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyMetadataMapper.convertSceneModeToLegacy(int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.getIfSupported(CaptureRequest, CaptureRequest.Key, T, boolean, T)","java.util.Objects.equals(T, T)"
"android.hardware.camera2.legacy.LegacyRequestMapper.getIfSupported(CaptureRequest, CaptureRequest.Key, T, boolean, T)","android.hardware.camera2.utils.ParamsUtils.getOrDefault(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest.Key<T>, T)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertMeteringRegionsToLegacy(Rect, ParameterUtils.ZoomData, MeteringRectangle[], int, String)","java.util.Arrays.asList(android.hardware.Camera.Area)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertMeteringRegionsToLegacy(Rect, ParameterUtils.ZoomData, MeteringRectangle[], int, String)","java.util.List.add(android.hardware.camera2.params.MeteringRectangle)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertMeteringRegionsToLegacy(Rect, ParameterUtils.ZoomData, MeteringRectangle[], int, String)","java.util.List.size()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertMeteringRegionsToLegacy(Rect, ParameterUtils.ZoomData, MeteringRectangle[], int, String)","java.util.List.add(android.hardware.Camera.Area)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertMeteringRegionsToLegacy(Rect, ParameterUtils.ZoomData, MeteringRectangle[], int, String)","java.util.List.get(int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertMeteringRegionsToLegacy(Rect, ParameterUtils.ZoomData, MeteringRectangle[], int, String)","android.hardware.camera2.params.MeteringRectangle.getMeteringWeight()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertMeteringRegionsToLegacy(Rect, ParameterUtils.ZoomData, MeteringRectangle[], int, String)","java.lang.Math.min(int, int)"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertAeFpsRangeToLegacy(Range)","android.util.Range.getLower()"
"android.hardware.camera2.legacy.LegacyRequestMapper.convertAeFpsRangeToLegacy(Range)","android.util.Range.getUpper()"
"android.widget.ActivityChooserModel.readHistoricalDataIfNeeded()","android.text.TextUtils.isEmpty(java.lang.String)"
"android.widget.ActivityChooserModel.readHistoricalDataIfNeeded()","android.widget.ActivityChooserModel.readHistoricalDataImpl()"
"android.widget.ActivityChooserModel.setDefaultActivity(int)","android.widget.ActivityChooserModel.ensureConsistentState()"
"android.widget.ActivityChooserModel.setDefaultActivity(int)","android.widget.ActivityChooserModel.addHisoricalRecord(android.widget.ActivityChooserModel.HistoricalRecord)"
"android.widget.ActivityChooserModel.setDefaultActivity(int)","java.lang.System.currentTimeMillis()"
"android.widget.ActivityChooserModel.setDefaultActivity(int)","java.util.List.get(int)"
"android.widget.ActivityChooserModel.setActivitySorter(ActivitySorter)","android.widget.ActivityChooserModel.sortActivitiesIfNeeded()"
"android.widget.ActivityChooserModel.setActivitySorter(ActivitySorter)","android.database.DataSetObservable.notifyChanged()"
"android.widget.ActivityChooserModel.doInBackground(Object[])","android.content.Context.openFileOutput(java.lang.String, int)"
"android.widget.ActivityChooserModel.doInBackground(Object[])","android.util.Xml.newSerializer()"
"android.widget.ActivityChooserModel.doInBackground(Object[])","java.util.List.size()"
"android.widget.ActivityChooserModel.doInBackground(Object[])","java.io.FileOutputStream.close()"
"android.widget.ActivityChooserModel.doInBackground(Object[])","java.util.List.remove(int)"
"android.widget.ActivityChooserModel.sortActivitiesIfNeeded()","java.util.Collections.unmodifiableList(java.util.List<android.widget.ActivityChooserModel.HistoricalRecord>)"
"android.widget.ActivityChooserModel.sortActivitiesIfNeeded()","java.util.List.isEmpty()"
"android.widget.ActivityChooserModel.sortActivitiesIfNeeded()","android.widget.ActivityChooserModel.ActivitySorter.sort(android.content.Intent, java.util.List<android.widget.ActivityChooserModel.ActivityResolveInfo>, java.util.List<T>)"
"android.widget.ActivityChooserModel.equals(Object)","java.lang.Object.getClass()"
"android.widget.ActivityChooserModel.equals(Object)","java.lang.Float.floatToIntBits(float)"
"android.widget.ActivityChooserModel.setIntent(Intent)","android.widget.ActivityChooserModel.ensureConsistentState()"
"android.widget.ActivityChooserModel.getActivityIndex(ResolveInfo)","android.widget.ActivityChooserModel.ensureConsistentState()"
"android.widget.ActivityChooserModel.getActivityIndex(ResolveInfo)","java.util.List.size()"
"android.widget.ActivityChooserModel.getActivityIndex(ResolveInfo)","java.util.List.get(int)"
"android.widget.ActivityChooserModel.getDefaultActivity()","android.widget.ActivityChooserModel.ensureConsistentState()"
"android.widget.ActivityChooserModel.getDefaultActivity()","java.util.List.isEmpty()"
"android.widget.ActivityChooserModel.getDefaultActivity()","java.util.List.get(int)"
"android.widget.ActivityChooserModel.setHistoryMaxSize(int)","android.widget.ActivityChooserModel.sortActivitiesIfNeeded()"
"android.widget.ActivityChooserModel.setHistoryMaxSize(int)","android.widget.ActivityChooserModel.pruneExcessiveHistoricalRecordsIfNeeded()"
"android.widget.ActivityChooserModel.setHistoryMaxSize(int)","android.database.DataSetObservable.notifyChanged()"
"android.widget.ActivityChooserModel.sort(Intent, List, List)","java.util.Collections.sort(java.util.List<android.widget.ActivityChooserModel.ActivityResolveInfo>)"
"android.widget.ActivityChooserModel.sort(Intent, List, List)","java.util.List.size()"
"android.widget.ActivityChooserModel.sort(Intent, List, List)","java.util.Map.put(android.content.ComponentName, android.widget.ActivityChooserModel.ActivityResolveInfo)"
"android.widget.ActivityChooserModel.sort(Intent, List, List)","java.util.List.get(int)"
"android.widget.ActivityChooserModel.sort(Intent, List, List)","java.util.Map.clear()"
"android.widget.ActivityChooserModel.sort(Intent, List, List)","java.util.Map.get(android.content.ComponentName)"
"android.widget.ActivityChooserModel.pruneExcessiveHistoricalRecordsIfNeeded()","java.util.List.size()"
"android.widget.ActivityChooserModel.pruneExcessiveHistoricalRecordsIfNeeded()","java.util.List.remove(int)"
"android.widget.ActivityChooserModel.addHisoricalRecord(HistoricalRecord)","android.widget.ActivityChooserModel.sortActivitiesIfNeeded()"
"android.widget.ActivityChooserModel.addHisoricalRecord(HistoricalRecord)","android.widget.ActivityChooserModel.persistHistoricalDataIfNeeded()"
"android.widget.ActivityChooserModel.addHisoricalRecord(HistoricalRecord)","java.util.List.add(android.widget.ActivityChooserModel.HistoricalRecord)"
"android.widget.ActivityChooserModel.addHisoricalRecord(HistoricalRecord)","android.widget.ActivityChooserModel.pruneExcessiveHistoricalRecordsIfNeeded()"
"android.widget.ActivityChooserModel.addHisoricalRecord(HistoricalRecord)","android.database.DataSetObservable.notifyChanged()"
"android.widget.ActivityChooserModel.ensureConsistentState()","android.widget.ActivityChooserModel.sortActivitiesIfNeeded()"
"android.widget.ActivityChooserModel.ensureConsistentState()","android.widget.ActivityChooserModel.readHistoricalDataIfNeeded()"
"android.widget.ActivityChooserModel.ensureConsistentState()","android.widget.ActivityChooserModel.loadActivitiesIfNeeded()"
"android.widget.ActivityChooserModel.ensureConsistentState()","android.widget.ActivityChooserModel.pruneExcessiveHistoricalRecordsIfNeeded()"
"android.widget.ActivityChooserModel.ensureConsistentState()","android.database.DataSetObservable.notifyChanged()"
"android.widget.ActivityChooserModel.toString()","android.content.pm.ResolveInfo.toString()"
"android.widget.ActivityChooserModel.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.widget.ActivityChooserModel.toString()","java.lang.StringBuilder.toString()"
"android.widget.ActivityChooserModel.toString()","java.lang.StringBuilder.append(java.math.BigDecimal)"
"android.widget.ActivityChooserModel.loadActivitiesIfNeeded()","java.util.List.add(android.widget.ActivityChooserModel.ActivityResolveInfo)"
"android.widget.ActivityChooserModel.loadActivitiesIfNeeded()","java.util.List.clear()"
"android.widget.ActivityChooserModel.loadActivitiesIfNeeded()","android.content.Context.getPackageManager()"
"android.widget.ActivityChooserModel.loadActivitiesIfNeeded()","java.util.List.size()"
"android.widget.ActivityChooserModel.loadActivitiesIfNeeded()","android.os.Process.myUid()"
"android.widget.ActivityChooserModel.loadActivitiesIfNeeded()","android.app.ActivityManager.checkComponentPermission(java.lang.String, int, int, boolean)"
"android.widget.ActivityChooserModel.loadActivitiesIfNeeded()","android.content.pm.PackageManager.queryIntentActivities(android.content.Intent, int)"
"android.widget.ActivityChooserModel.loadActivitiesIfNeeded()","java.util.List.get(int)"
"android.widget.ActivityChooserModel.persistHistoricalDataIfNeeded()","android.text.TextUtils.isEmpty(java.lang.String)"
"android.widget.ActivityChooserModel.persistHistoricalDataIfNeeded()","android.os.AsyncTask.executeOnExecutor(java.util.concurrent.Executor, java.util.ArrayList<android.widget.ActivityChooserModel.HistoricalRecord>, java.lang.String)"
"android.widget.ActivityChooserModel.hashCode()","java.lang.Float.floatToIntBits(float)"
"android.widget.ActivityChooserModel.readHistoricalDataImpl()","java.io.FileInputStream.close()"
"android.widget.ActivityChooserModel.readHistoricalDataImpl()","java.util.List.add(android.widget.ActivityChooserModel.HistoricalRecord)"
"android.widget.ActivityChooserModel.readHistoricalDataImpl()","java.util.List.clear()"
"android.widget.ActivityChooserModel.readHistoricalDataImpl()","android.content.Context.openFileInput(java.lang.String)"
"android.widget.ActivityChooserModel.readHistoricalDataImpl()","android.util.Xml.newPullParser()"
"android.widget.ActivityChooserModel.readHistoricalDataImpl()","java.lang.String.equals(java.lang.String)"
"android.widget.ActivityChooserModel.finalize()","java.lang.Object.finalize()"
"android.widget.ActivityChooserModel.finalize()","com.android.internal.content.PackageMonitor.unregister()"
"android.widget.ActivityChooserModel.getActivityCount()","android.widget.ActivityChooserModel.ensureConsistentState()"
"android.widget.ActivityChooserModel.getActivityCount()","java.util.List.size()"
"android.widget.ActivityChooserModel.getActivity(int)","android.widget.ActivityChooserModel.ensureConsistentState()"
"android.widget.ActivityChooserModel.getActivity(int)","java.util.List.get(int)"
"android.widget.ActivityChooserModel.getHistorySize()","android.widget.ActivityChooserModel.ensureConsistentState()"
"android.widget.ActivityChooserModel.getHistorySize()","java.util.List.size()"
"android.widget.ActivityChooserModel.get(Context, String)","java.util.Map.put(java.lang.String, android.widget.ActivityChooserModel)"
"android.widget.ActivityChooserModel.get(Context, String)","java.util.Map.get(java.lang.String)"
"android.widget.ActivityChooserModel.compareTo(ActivityResolveInfo)","java.lang.Float.floatToIntBits(float)"
"android.widget.ActivityChooserModel.chooseActivity(int)","android.widget.ActivityChooserModel.ensureConsistentState()"
"android.widget.ActivityChooserModel.chooseActivity(int)","android.widget.ActivityChooserModel.addHisoricalRecord(android.widget.ActivityChooserModel.HistoricalRecord)"
"android.widget.ActivityChooserModel.chooseActivity(int)","android.widget.ActivityChooserModel.OnChooseActivityListener.onChooseActivity(android.widget.ActivityChooserModel, android.content.Intent)"
"android.widget.ActivityChooserModel.chooseActivity(int)","android.content.Intent.setComponent(android.content.ComponentName)"
"android.widget.ActivityChooserModel.chooseActivity(int)","java.lang.System.currentTimeMillis()"
"android.widget.ActivityChooserModel.chooseActivity(int)","java.util.List.get(int)"
"com.android.internal.app.MediaRouteDialogPresenter.showDialogFragment(Activity, int, View.OnClickListener)","android.app.Activity.getFragmentManager()"
"com.android.internal.app.MediaRouteDialogPresenter.showDialogFragment(Activity, int, View.OnClickListener)","android.app.FragmentManager.findFragmentByTag(java.lang.String)"
"com.android.internal.app.MediaRouteDialogPresenter.showDialogFragment(Activity, int, View.OnClickListener)","com.android.internal.app.MediaRouteChooserDialogFragment.setRouteTypes(int)"
"com.android.internal.app.MediaRouteDialogPresenter.showDialogFragment(Activity, int, View.OnClickListener)","android.app.Activity.getSystemService(java.lang.String)"
"com.android.internal.app.MediaRouteDialogPresenter.showDialogFragment(Activity, int, View.OnClickListener)","com.android.internal.app.MediaRouteChooserDialogFragment.setExtendedSettingsClickListener(android.view.View.OnClickListener)"
"com.android.internal.app.MediaRouteDialogPresenter.showDialogFragment(Activity, int, View.OnClickListener)","android.app.DialogFragment.show(android.app.FragmentManager, java.lang.String)"
"com.android.internal.app.MediaRouteDialogPresenter.createDialog(Context, int, View.OnClickListener)","com.android.internal.app.MediaRouteChooserDialog.setRouteTypes(int)"
"com.android.internal.app.MediaRouteDialogPresenter.createDialog(Context, int, View.OnClickListener)","com.android.internal.app.MediaRouteChooserDialog.setExtendedSettingsClickListener(android.view.View.OnClickListener)"
"com.android.internal.app.MediaRouteDialogPresenter.createDialog(Context, int, View.OnClickListener)","android.content.Context.getSystemService(java.lang.String)"
"android.webkit.WebChromeClient.onReachedMaxAppCacheSize(long, long, WebStorage.QuotaUpdater)","android.webkit.WebStorage.QuotaUpdater.updateQuota(long)"
"android.webkit.WebChromeClient.parseResult(int, Intent)","android.webkit.WebViewFactory.getProvider()"
"android.webkit.WebChromeClient.parseResult(int, Intent)","android.webkit.WebViewFactoryProvider.getStatics()"
"android.webkit.WebChromeClient.parseResult(int, Intent)","android.webkit.WebViewFactoryProvider.Statics.parseFileChooserResult(int, android.content.Intent)"
"android.webkit.WebChromeClient.onExceededDatabaseQuota(String, String, long, long, long, WebStorage.QuotaUpdater)","android.webkit.WebStorage.QuotaUpdater.updateQuota(long)"
"android.webkit.WebChromeClient.openFileChooser(ValueCallback, String, String)","android.webkit.ValueCallback.onReceiveValue(null)"
"android.webkit.WebChromeClient.onConsoleMessage(ConsoleMessage)","android.webkit.WebChromeClient.onConsoleMessage(java.lang.String, int, java.lang.String)"
"android.webkit.WebChromeClient.onConsoleMessage(ConsoleMessage)","android.webkit.ConsoleMessage.message()"
"android.webkit.WebChromeClient.onConsoleMessage(ConsoleMessage)","android.webkit.ConsoleMessage.lineNumber()"
"android.webkit.WebChromeClient.onConsoleMessage(ConsoleMessage)","android.webkit.ConsoleMessage.sourceId()"
"android.webkit.WebChromeClient.onPermissionRequest(PermissionRequest)","android.webkit.PermissionRequest.deny()"
"android.widget.ListPopupWindow.setSoftInputMode(int)","android.widget.PopupWindow.setSoftInputMode(int)"
"android.widget.ListPopupWindow.setSelection(int)","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.clearCallbacks()","android.view.View.removeCallbacks(java.lang.Runnable)"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.MotionEvent.findPointerIndex(int)"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.MotionEvent.getX(int)"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.View.postDelayed(java.lang.Runnable, int)"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.View.isEnabled()"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.MotionEvent.getY(int)"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.View.pointInView(float, float, float)"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.widget.ListPopupWindow.ForwardingListener.clearCallbacks()"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.ViewParent.requestDisallowInterceptTouchEvent(boolean)"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.View.getParent()"
"android.widget.ListPopupWindow.onTouchObserved(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"android.widget.ListPopupWindow.buildDropDown()","android.widget.PopupWindow.getContentView()"
"android.widget.ListPopupWindow.buildDropDown()","android.view.View.getLayoutParams()"
"android.widget.ListPopupWindow.buildDropDown()","android.widget.PopupWindow.getMaxAvailableHeight(android.view.View, int, boolean)"
"android.widget.ListPopupWindow.buildDropDown()","android.view.View.getMeasuredHeight()"
"android.widget.ListPopupWindow.buildDropDown()","android.view.View.getWindowToken()"
"android.widget.ListPopupWindow.buildDropDown()","android.view.View.measure(int, int)"
"android.widget.ListPopupWindow.buildDropDown()","android.widget.PopupWindow.getInputMethodMode()"
"android.widget.ListPopupWindow.buildDropDown()","android.widget.ListPopupWindow.getAnchorView()"
"android.widget.ListPopupWindow.buildDropDown()","android.widget.ListPopupWindow.show()"
"android.widget.ListPopupWindow.buildDropDown()","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.ListPopupWindow.buildDropDown()","android.widget.PopupWindow.getBackground()"
"android.widget.ListPopupWindow.onTouch(View, MotionEvent)","android.os.Handler.removeCallbacks(android.widget.ListPopupWindow.ResizePopupRunnable)"
"android.widget.ListPopupWindow.onTouch(View, MotionEvent)","android.view.MotionEvent.getY()"
"android.widget.ListPopupWindow.onTouch(View, MotionEvent)","android.widget.PopupWindow.getHeight()"
"android.widget.ListPopupWindow.onTouch(View, MotionEvent)","android.widget.PopupWindow.getWidth()"
"android.widget.ListPopupWindow.onTouch(View, MotionEvent)","android.view.MotionEvent.getAction()"
"android.widget.ListPopupWindow.onTouch(View, MotionEvent)","android.os.Handler.postDelayed(android.widget.ListPopupWindow.ResizePopupRunnable, int)"
"android.widget.ListPopupWindow.onTouch(View, MotionEvent)","android.widget.PopupWindow.isShowing()"
"android.widget.ListPopupWindow.onTouch(View, MotionEvent)","android.view.MotionEvent.getX()"
"android.widget.ListPopupWindow.show()","android.widget.ListPopupWindow.isInputMethodNotNeeded()"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.setWidth(int)"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.showAsDropDown(android.view.View, int, int, int)"
"android.widget.ListPopupWindow.show()","android.widget.ListPopupWindow.getAnchorView()"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.update(android.view.View, int, int, int, int)"
"android.widget.ListPopupWindow.show()","android.widget.ListPopupWindow.buildDropDown()"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.setTouchInterceptor(android.widget.ListPopupWindow.PopupTouchInterceptor)"
"android.widget.ListPopupWindow.show()","android.view.View.getWidth()"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.setHeight(int)"
"android.widget.ListPopupWindow.show()","android.os.Handler.post(android.widget.ListPopupWindow.ListSelectorHider)"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.setClipToScreenEnabled(boolean)"
"android.widget.ListPopupWindow.show()","android.widget.ListPopupWindow.clearListSelection()"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.setAllowScrollingAnchorParent(boolean)"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.isShowing()"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.setWindowLayoutMode(int, int)"
"android.widget.ListPopupWindow.show()","android.widget.PopupWindow.setOutsideTouchable(boolean)"
"android.widget.ListPopupWindow.postShow()","android.os.Handler.post(java.lang.Runnable)"
"android.widget.ListPopupWindow.getSelectedItemPosition()","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.setInputMethodMode(int)","android.widget.PopupWindow.setInputMethodMode(int)"
"android.widget.ListPopupWindow.setPromptView(View)","android.widget.ListPopupWindow.removePromptView()"
"android.widget.ListPopupWindow.setPromptView(View)","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.setPromptView(View)","android.widget.ListPopupWindow.show()"
"android.widget.ListPopupWindow.dismiss()","android.os.Handler.removeCallbacks(android.widget.ListPopupWindow.ResizePopupRunnable)"
"android.widget.ListPopupWindow.dismiss()","android.widget.ListPopupWindow.removePromptView()"
"android.widget.ListPopupWindow.dismiss()","android.widget.PopupWindow.setContentView(null)"
"android.widget.ListPopupWindow.dismiss()","android.widget.PopupWindow.dismiss()"
"android.widget.ListPopupWindow.performItemClick(int)","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.clearPressedItem()","android.animation.Animator.cancel()"
"android.widget.ListPopupWindow.clearPressedItem()","android.view.View.setPressed(boolean)"
"android.widget.ListPopupWindow.removePromptView()","android.view.View.getParent()"
"android.widget.ListPopupWindow.onKeyDown(int, KeyEvent)","android.widget.PopupWindow.isAboveAnchor()"
"android.widget.ListPopupWindow.onKeyDown(int, KeyEvent)","android.widget.Adapter.getCount()"
"android.widget.ListPopupWindow.onKeyDown(int, KeyEvent)","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.onKeyDown(int, KeyEvent)","android.widget.ListAdapter.areAllItemsEnabled()"
"android.widget.ListPopupWindow.onKeyDown(int, KeyEvent)","android.widget.ListPopupWindow.clearListSelection()"
"android.widget.ListPopupWindow.onKeyDown(int, KeyEvent)","android.widget.PopupWindow.setInputMethodMode(int)"
"android.widget.ListPopupWindow.onKeyDown(int, KeyEvent)","android.widget.ListPopupWindow.show()"
"android.widget.ListPopupWindow.onKeyDown(int, KeyEvent)","android.view.KeyEvent.isConfirmKey(int)"
"android.widget.ListPopupWindow.getAnimationStyle()","android.widget.PopupWindow.getAnimationStyle()"
"android.widget.ListPopupWindow.getBackground()","android.widget.PopupWindow.getBackground()"
"android.widget.ListPopupWindow.onScrollStateChanged(AbsListView, int)","android.widget.ListPopupWindow.isInputMethodNotNeeded()"
"android.widget.ListPopupWindow.onScrollStateChanged(AbsListView, int)","android.os.Handler.removeCallbacks(android.widget.ListPopupWindow.ResizePopupRunnable)"
"android.widget.ListPopupWindow.onScrollStateChanged(AbsListView, int)","android.widget.PopupWindow.getContentView()"
"android.widget.ListPopupWindow.onScrollStateChanged(AbsListView, int)","android.widget.ListPopupWindow.ResizePopupRunnable.run()"
"android.widget.ListPopupWindow.onChanged()","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.onChanged()","android.widget.ListPopupWindow.show()"
"android.widget.ListPopupWindow.onTouchForwarded(MotionEvent)","android.view.View.toGlobalMotionEvent(android.view.MotionEvent)"
"android.widget.ListPopupWindow.onTouchForwarded(MotionEvent)","android.view.MotionEvent.recycle()"
"android.widget.ListPopupWindow.onTouchForwarded(MotionEvent)","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.onTouchForwarded(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.widget.ListPopupWindow.onTouchForwarded(MotionEvent)","android.view.MotionEvent.obtainNoHistory(android.view.MotionEvent)"
"android.widget.ListPopupWindow.onTouchForwarded(MotionEvent)","android.widget.ListPopupWindow.ForwardingListener.getPopup()"
"android.widget.ListPopupWindow.onKeyUp(int, KeyEvent)","android.widget.ListPopupWindow.dismiss()"
"android.widget.ListPopupWindow.onKeyUp(int, KeyEvent)","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.onKeyUp(int, KeyEvent)","android.view.KeyEvent.isConfirmKey(int)"
"android.widget.ListPopupWindow.onInvalidated()","android.widget.ListPopupWindow.dismiss()"
"android.widget.ListPopupWindow.getSelectedItem()","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.getInputMethodMode()","android.widget.PopupWindow.getInputMethodMode()"
"android.widget.ListPopupWindow.setAnimationStyle(int)","android.widget.PopupWindow.setAnimationStyle(int)"
"android.widget.ListPopupWindow.onForwardingStarted()","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.onForwardingStarted()","android.widget.ListPopupWindow.show()"
"android.widget.ListPopupWindow.onForwardingStarted()","android.widget.ListPopupWindow.ForwardingListener.getPopup()"
"android.widget.ListPopupWindow.setContentWidth(int)","android.widget.ListPopupWindow.setWidth(int)"
"android.widget.ListPopupWindow.setContentWidth(int)","android.widget.PopupWindow.getBackground()"
"android.widget.ListPopupWindow.onViewDetachedFromWindow(View)","android.view.View.removeCallbacks(java.lang.Runnable)"
"android.widget.ListPopupWindow.onKeyPreIme(int, KeyEvent)","android.widget.ListPopupWindow.dismiss()"
"android.widget.ListPopupWindow.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.isTracking()"
"android.widget.ListPopupWindow.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"android.widget.ListPopupWindow.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.isCanceled()"
"android.widget.ListPopupWindow.onKeyPreIme(int, KeyEvent)","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.DispatcherState.handleUpEvent(android.view.KeyEvent)"
"android.widget.ListPopupWindow.onKeyPreIme(int, KeyEvent)","android.view.View.getKeyDispatcherState()"
"android.widget.ListPopupWindow.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.getAction()"
"android.widget.ListPopupWindow.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.DispatcherState.startTracking(android.view.KeyEvent, android.widget.ListPopupWindow)"
"android.widget.ListPopupWindow.onForwardedEvent(MotionEvent, int)","android.view.MotionEvent.findPointerIndex(int)"
"android.widget.ListPopupWindow.onForwardedEvent(MotionEvent, int)","android.view.MotionEvent.getX(int)"
"android.widget.ListPopupWindow.onForwardedEvent(MotionEvent, int)","android.view.MotionEvent.getActionMasked()"
"android.widget.ListPopupWindow.onForwardedEvent(MotionEvent, int)","android.view.MotionEvent.getY(int)"
"android.widget.ListPopupWindow.onForwardedEvent(MotionEvent, int)","com.android.internal.widget.AutoScrollHelper.setEnabled(boolean)"
"android.widget.ListPopupWindow.getSelectedItemId()","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.isInputMethodNotNeeded()","android.widget.PopupWindow.getInputMethodMode()"
"android.widget.ListPopupWindow.onLongPress()","android.view.View.onTouchEvent(android.view.MotionEvent)"
"android.widget.ListPopupWindow.onLongPress()","android.os.SystemClock.uptimeMillis()"
"android.widget.ListPopupWindow.onLongPress()","android.view.View.isEnabled()"
"android.widget.ListPopupWindow.onLongPress()","android.view.MotionEvent.recycle()"
"android.widget.ListPopupWindow.onLongPress()","android.view.View.isLongClickable()"
"android.widget.ListPopupWindow.onLongPress()","android.widget.ListPopupWindow.ForwardingListener.onForwardingStarted()"
"android.widget.ListPopupWindow.onLongPress()","android.widget.ListPopupWindow.ForwardingListener.clearCallbacks()"
"android.widget.ListPopupWindow.onLongPress()","android.view.ViewParent.requestDisallowInterceptTouchEvent(boolean)"
"android.widget.ListPopupWindow.onLongPress()","android.view.View.getParent()"
"android.widget.ListPopupWindow.onLongPress()","android.view.MotionEvent.obtain(long, long, int, int, int, int)"
"android.widget.ListPopupWindow.isShowing()","android.widget.PopupWindow.isShowing()"
"android.widget.ListPopupWindow.setAdapter(ListAdapter)","android.widget.Adapter.registerDataSetObserver(android.database.DataSetObserver)"
"android.widget.ListPopupWindow.setAdapter(ListAdapter)","android.widget.Adapter.unregisterDataSetObserver(android.database.DataSetObserver)"
"android.widget.ListPopupWindow.getSelectedView()","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.getSoftInputMode()","android.widget.PopupWindow.getSoftInputMode()"
"android.widget.ListPopupWindow.clickPressedItem(View, int)","android.animation.Animator.addListener(android.animation.AnimatorListenerAdapter)"
"android.widget.ListPopupWindow.clickPressedItem(View, int)","android.animation.Animator.cancel()"
"android.widget.ListPopupWindow.clickPressedItem(View, int)","android.animation.Animator.setDuration(long)"
"android.widget.ListPopupWindow.clickPressedItem(View, int)","android.animation.Animator.setInterpolator(android.view.animation.AccelerateDecelerateInterpolator)"
"android.widget.ListPopupWindow.clickPressedItem(View, int)","android.animation.Animator.start()"
"android.widget.ListPopupWindow.setPressedItem(View, int, float, float)","android.view.View.getLeft()"
"android.widget.ListPopupWindow.setPressedItem(View, int, float, float)","android.animation.Animator.cancel()"
"android.widget.ListPopupWindow.setPressedItem(View, int, float, float)","android.view.View.setPressed(boolean)"
"android.widget.ListPopupWindow.setPressedItem(View, int, float, float)","android.view.View.getTop()"
"android.widget.ListPopupWindow.setPressedItem(View, int, float, float)","android.view.View.isPressed()"
"android.widget.ListPopupWindow.setPressedItem(View, int, float, float)","android.view.View.drawableHotspotChanged(float, float)"
"android.widget.ListPopupWindow.setOnDismissListener(PopupWindow.OnDismissListener)","android.widget.PopupWindow.setOnDismissListener(android.widget.PopupWindow.OnDismissListener)"
"android.widget.ListPopupWindow.run()","android.widget.PopupWindow.setInputMethodMode(int)"
"android.widget.ListPopupWindow.run()","android.widget.ListPopupWindow.show()"
"android.widget.ListPopupWindow.setModal(boolean)","android.widget.PopupWindow.setFocusable(boolean)"
"android.widget.ListPopupWindow.onForwardingStopped()","android.widget.ListPopupWindow.dismiss()"
"android.widget.ListPopupWindow.onForwardingStopped()","android.widget.ListPopupWindow.isShowing()"
"android.widget.ListPopupWindow.onForwardingStopped()","android.widget.ListPopupWindow.ForwardingListener.getPopup()"
"android.service.notification.ConditionProviderService.onSubscribe(Uri)","android.os.Message.sendToTarget()"
"android.service.notification.ConditionProviderService.onSubscribe(Uri)","android.os.Handler.obtainMessage(int, android.net.Uri)"
"android.service.notification.ConditionProviderService.onUnsubscribe(Uri)","android.os.Message.sendToTarget()"
"android.service.notification.ConditionProviderService.onUnsubscribe(Uri)","android.os.Handler.obtainMessage(int, android.net.Uri)"
"android.service.notification.ConditionProviderService.notifyCondition(Condition)","android.service.notification.ConditionProviderService.notifyConditions(android.service.notification.Condition[])"
"android.service.notification.ConditionProviderService.onRequestConditions(int)","android.os.Handler.obtainMessage(int, int, int)"
"android.service.notification.ConditionProviderService.onRequestConditions(int)","android.os.Message.sendToTarget()"
"android.service.notification.ConditionProviderService.notifyConditions(Condition[])","android.service.notification.ConditionProviderService.isBound()"
"android.service.notification.ConditionProviderService.onConnected()","android.os.Message.sendToTarget()"
"android.service.notification.ConditionProviderService.onConnected()","android.os.Handler.obtainMessage(int)"
"android.service.notification.ConditionProviderService.handleMessage(Message)","android.service.notification.ConditionProviderService.onSubscribe(android.net.Uri)"
"android.service.notification.ConditionProviderService.handleMessage(Message)","android.service.notification.ConditionProviderService.onConnected()"
"android.service.notification.ConditionProviderService.handleMessage(Message)","android.service.notification.ConditionProviderService.onUnsubscribe(android.net.Uri)"
"android.service.notification.ConditionProviderService.handleMessage(Message)","android.service.notification.ConditionProviderService.onRequestConditions(int)"
"android.bluetooth.le.AdvertiseSettings.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.gesture.GestureStroke.deserialize(DataInputStream)","java.io.DataInputStream.readInt()"
"android.gesture.GestureStroke.deserialize(DataInputStream)","android.gesture.GesturePoint.deserialize(java.io.DataInputStream)"
"android.gesture.GestureStroke.deserialize(DataInputStream)","java.util.ArrayList.add(android.gesture.GesturePoint)"
"android.gesture.GestureStroke.serialize(DataOutputStream)","java.io.DataOutputStream.writeFloat(float)"
"android.gesture.GestureStroke.serialize(DataOutputStream)","java.io.DataOutputStream.writeLong(long)"
"android.gesture.GestureStroke.serialize(DataOutputStream)","java.io.DataOutputStream.writeInt(int)"
"android.gesture.GestureStroke.getPath()","android.gesture.GestureStroke.makePath()"
"android.gesture.GestureStroke.toPath(float, float, int)","java.lang.Math.abs(float)"
"android.gesture.GestureStroke.toPath(float, float, int)","android.gesture.GestureUtils.scale(float[], float, float)"
"android.gesture.GestureStroke.toPath(float, float, int)","android.gesture.GestureUtils.temporalSampling(android.gesture.GestureStroke, int)"
"android.gesture.GestureStroke.computeOrientedBoundingBox()","android.gesture.GestureUtils.computeOrientedBoundingBox(float[])"
"android.gesture.GestureStroke.makePath()","java.lang.Math.abs(float)"
"android.gesture.GestureStroke.draw(Canvas, Paint)","android.gesture.GestureStroke.makePath()"
"android.widget.TextClock.onAttachedToWindow()","java.lang.Runnable.run()"
"android.widget.TextClock.registerObserver()","android.content.ContentResolver.registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver)"
"android.widget.TextClock.registerObserver()","android.content.ContentResolver.registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver, int)"
"android.widget.TextClock.createTime(String)","java.util.Calendar.getInstance()"
"android.widget.TextClock.createTime(String)","java.util.Calendar.getInstance(java.util.TimeZone)"
"android.widget.TextClock.createTime(String)","java.util.TimeZone.getTimeZone(java.lang.String)"
"android.widget.TextClock.run()","android.os.SystemClock.uptimeMillis()"
"android.widget.TextClock.chooseFormat(boolean)","java.lang.Runnable.run()"
"android.widget.TextClock.chooseFormat(boolean)","android.text.format.DateFormat.hasSeconds(java.lang.CharSequence)"
"android.widget.TextClock.registerReceiver()","android.content.IntentFilter.addAction(java.lang.String)"
"android.widget.TextClock.onReceive(Context, Intent)","android.content.Intent.getStringExtra(java.lang.String)"
"android.widget.TextClock.onReceive(Context, Intent)","java.lang.String.equals(java.lang.String)"
"android.widget.TextClock.onReceive(Context, Intent)","android.content.Intent.getAction()"
"android.widget.TextClock.unregisterObserver()","android.content.ContentResolver.unregisterContentObserver(android.database.ContentObserver)"
"android.widget.TextClock.onTimeChanged()","java.util.Calendar.setTimeInMillis(long)"
"android.widget.TextClock.onTimeChanged()","java.lang.System.currentTimeMillis()"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.inputmethodservice.InputMethodService.initialize()"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.view.inputmethod.InputConnection.reportFullscreenMode(boolean)"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.inputmethodservice.InputMethodService.setExtractView(android.view.View)"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.inputmethodservice.InputMethodService.onCreateExtractTextView()"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.inputmethodservice.InputMethodService.onConfigureWindow(android.view.Window, boolean, boolean)"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.inputmethodservice.InputMethodService.onEvaluateFullscreenMode()"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.inputmethodservice.InputMethodService.startExtractingText(boolean)"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.inputmethodservice.InputMethodService.updateExtractFrameVisibility()"
"android.inputmethodservice.InputMethodService.updateFullscreenMode()","android.app.Dialog.getWindow()"
"android.inputmethodservice.InputMethodService.sendKeyChar(char)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.sendKeyChar(char)","android.inputmethodservice.InputMethodService.sendDownUpKeyEvents(int)"
"android.inputmethodservice.InputMethodService.sendKeyChar(char)","android.view.inputmethod.InputConnection.commitText(java.lang.String, int)"
"android.inputmethodservice.InputMethodService.sendKeyChar(char)","java.lang.String.valueOf(char)"
"android.inputmethodservice.InputMethodService.sendKeyChar(char)","android.inputmethodservice.InputMethodService.sendDefaultEditorAction(boolean)"
"android.inputmethodservice.InputMethodService.onShowInputRequested(int, boolean)","android.inputmethodservice.InputMethodService.onEvaluateInputViewShown()"
"android.inputmethodservice.InputMethodService.onShowInputRequested(int, boolean)","android.content.ContextWrapper.getResources()"
"android.inputmethodservice.InputMethodService.onShowInputRequested(int, boolean)","android.content.res.Resources.getConfiguration()"
"android.inputmethodservice.InputMethodService.onShowInputRequested(int, boolean)","android.inputmethodservice.InputMethodService.onEvaluateFullscreenMode()"
"android.inputmethodservice.InputMethodService.initViews()","android.inputmethodservice.InputMethodService.getCandidatesHiddenVisibility()"
"android.inputmethodservice.InputMethodService.initViews()","android.provider.Settings.Global.getInt(android.content.ContentResolver, java.lang.String, int)"
"android.inputmethodservice.InputMethodService.initViews()","android.content.ContextWrapper.getContentResolver()"
"android.inputmethodservice.InputMethodService.initViews()","android.view.View.setSystemUiVisibility(int)"
"android.inputmethodservice.InputMethodService.initViews()","android.view.View.getViewTreeObserver()"
"android.inputmethodservice.InputMethodService.initViews()","android.view.ViewTreeObserver.addOnComputeInternalInsetsListener(android.view.ViewTreeObserver.OnComputeInternalInsetsListener)"
"android.inputmethodservice.InputMethodService.initViews()","android.app.Dialog.setContentView(android.view.View)"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.inputmethodservice.InputMethodService.onDisplayCompletions(android.view.inputmethod.CompletionInfo[])"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.inputmethodservice.InputMethodService.onEvaluateInputViewShown()"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.inputmethodservice.InputMethodService.onShowInputRequested(int, boolean)"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.inputmethodservice.InputMethodService.doHideWindow()"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.inputmethodservice.InputMethodService.initViews()"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.inputmethodservice.InputMethodService.getCurrentInputEditorInfo()"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.inputmethodservice.InputMethodService.doStartInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo, boolean)"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.inputmethodservice.InputMethodService.showWindow(boolean)"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.app.Service.onConfigurationChanged(android.content.res.Configuration)"
"android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)","android.view.inputmethod.InputMethodManager.setImeWindowStatus(android.os.IBinder, int, int)"
"android.inputmethodservice.InputMethodService.hideSoftInput(int, ResultReceiver)","android.inputmethodservice.InputMethodService.isInputViewShown()"
"android.inputmethodservice.InputMethodService.hideSoftInput(int, ResultReceiver)","android.inputmethodservice.InputMethodService.doHideWindow()"
"android.inputmethodservice.InputMethodService.hideSoftInput(int, ResultReceiver)","android.os.ResultReceiver.send(int, null)"
"android.inputmethodservice.InputMethodService.attachToken(IBinder)","android.inputmethodservice.SoftInputWindow.setToken(android.os.IBinder)"
"android.inputmethodservice.InputMethodService.showStatusIcon(int)","android.view.inputmethod.InputMethodManager.showStatusIcon(android.os.IBinder, java.lang.String, int)"
"android.inputmethodservice.InputMethodService.showStatusIcon(int)","android.content.ContextWrapper.getPackageName()"
"android.inputmethodservice.InputMethodService.reportExtractedMovement(int, int)","android.inputmethodservice.InputMethodService.onExtractedCursorMovement(int, int)"
"android.inputmethodservice.InputMethodService.updateExtractFrameVisibility()","android.inputmethodservice.InputMethodService.isFullscreenMode()"
"android.inputmethodservice.InputMethodService.updateExtractFrameVisibility()","android.inputmethodservice.InputMethodService.updateCandidatesVisibility(boolean)"
"android.inputmethodservice.InputMethodService.requestShowSelf(int)","android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod(android.os.IBinder, int)"
"android.inputmethodservice.InputMethodService.sendDefaultEditorAction(boolean)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.sendDefaultEditorAction(boolean)","android.inputmethodservice.InputMethodService.getCurrentInputEditorInfo()"
"android.inputmethodservice.InputMethodService.sendDefaultEditorAction(boolean)","android.view.inputmethod.InputConnection.performEditorAction(int)"
"android.inputmethodservice.InputMethodService.getInputMethodWindowRecommendedHeight()","android.view.inputmethod.InputMethodManager.getInputMethodWindowVisibleHeight()"
"android.inputmethodservice.InputMethodService.viewClicked(boolean)","android.inputmethodservice.InputMethodService.onViewClicked(boolean)"
"android.inputmethodservice.InputMethodService.viewClicked(boolean)","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isEnabled()"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.inputmethodservice.InputMethodService.initialize()"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.inputmethodservice.InputMethodService.onStartInputView(android.view.inputmethod.EditorInfo, boolean)"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.inputmethodservice.InputMethodService.updateFullscreenMode()"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.inputmethodservice.InputMethodService.onCreateCandidatesView()"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.inputmethodservice.InputMethodService.onWindowShown()"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.app.Dialog.show()"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.inputmethodservice.InputMethodService.onStartCandidatesView(android.view.inputmethod.EditorInfo, boolean)"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.inputmethodservice.InputMethodService.setCandidatesView(android.view.View)"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.inputmethodservice.InputMethodService.startExtractingText(boolean)"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.inputmethodservice.InputMethodService.updateInputViewShown()"
"android.inputmethodservice.InputMethodService.showWindowInner(boolean)","android.view.inputmethod.InputMethodManager.setImeWindowStatus(android.os.IBinder, int, int)"
"android.inputmethodservice.InputMethodService.showSoftInput(int, ResultReceiver)","android.inputmethodservice.InputMethodService.onShowInputRequested(int, boolean)"
"android.inputmethodservice.InputMethodService.showSoftInput(int, ResultReceiver)","android.inputmethodservice.InputMethodService.isInputViewShown()"
"android.inputmethodservice.InputMethodService.showSoftInput(int, ResultReceiver)","android.inputmethodservice.InputMethodService.showWindow(boolean)"
"android.inputmethodservice.InputMethodService.showSoftInput(int, ResultReceiver)","android.os.ResultReceiver.send(int, null)"
"android.inputmethodservice.InputMethodService.showSoftInput(int, ResultReceiver)","android.view.inputmethod.InputMethodManager.setImeWindowStatus(android.os.IBinder, int, int)"
"android.inputmethodservice.InputMethodService.onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo)","android.inputmethodservice.InputMethodService.onComputeInsets(android.inputmethodservice.InputMethodService.Insets)"
"android.inputmethodservice.InputMethodService.onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo)","android.view.View.getHeight()"
"android.inputmethodservice.InputMethodService.onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo)","android.inputmethodservice.InputMethodService.isExtractViewShown()"
"android.inputmethodservice.InputMethodService.onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo)","android.inputmethodservice.InputMethodService.getWindow()"
"android.inputmethodservice.InputMethodService.onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo)","android.view.Window.getDecorView()"
"android.inputmethodservice.InputMethodService.onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo)","android.view.ViewTreeObserver.InternalInsetsInfo.setTouchableInsets(int)"
"android.inputmethodservice.InputMethodService.onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo)","android.app.Dialog.getWindow()"
"android.inputmethodservice.InputMethodService.onClick(View)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onClick(View)","android.inputmethodservice.InputMethodService.getCurrentInputEditorInfo()"
"android.inputmethodservice.InputMethodService.onClick(View)","android.view.inputmethod.InputConnection.performEditorAction(int)"
"android.inputmethodservice.InputMethodService.startInput(InputConnection, EditorInfo)","android.inputmethodservice.InputMethodService.doStartInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo, boolean)"
"android.inputmethodservice.InputMethodService.setCandidatesViewShown(boolean)","android.inputmethodservice.InputMethodService.updateCandidatesVisibility(boolean)"
"android.inputmethodservice.InputMethodService.setCandidatesViewShown(boolean)","android.inputmethodservice.InputMethodService.doHideWindow()"
"android.inputmethodservice.InputMethodService.setCandidatesViewShown(boolean)","android.inputmethodservice.InputMethodService.showWindow(boolean)"
"android.inputmethodservice.InputMethodService.onExtractedReplaceText(int, int, CharSequence)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onExtractedReplaceText(int, int, CharSequence)","android.view.inputmethod.InputConnection.commitText(java.lang.CharSequence, int)"
"android.inputmethodservice.InputMethodService.onExtractedReplaceText(int, int, CharSequence)","android.view.inputmethod.InputConnection.setComposingRegion(int, int)"
"android.inputmethodservice.InputMethodService.onEvaluateFullscreenMode()","android.content.ContextWrapper.getResources()"
"android.inputmethodservice.InputMethodService.onEvaluateFullscreenMode()","android.content.res.Resources.getConfiguration()"
"android.inputmethodservice.InputMethodService.updateInputViewShown()","android.inputmethodservice.InputMethodService.onEvaluateInputViewShown()"
"android.inputmethodservice.InputMethodService.updateInputViewShown()","android.inputmethodservice.InputMethodService.initialize()"
"android.inputmethodservice.InputMethodService.updateInputViewShown()","android.inputmethodservice.InputMethodService.onCreateInputView()"
"android.inputmethodservice.InputMethodService.updateInputViewShown()","android.inputmethodservice.InputMethodService.setInputView(android.view.View)"
"android.inputmethodservice.InputMethodService.onFinishInputView(boolean)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onFinishInputView(boolean)","android.view.inputmethod.InputConnection.finishComposingText()"
"android.inputmethodservice.InputMethodService.onExtractTextContextMenuItem(int)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onExtractTextContextMenuItem(int)","android.view.inputmethod.InputConnection.performContextMenuAction(int)"
"android.inputmethodservice.InputMethodService.setExtractView(View)","android.inputmethodservice.InputMethodService.startExtractingText(boolean)"
"android.inputmethodservice.InputMethodService.updateExtractedText(int, ExtractedText)","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isEnabled()"
"android.inputmethodservice.InputMethodService.updateExtractedText(int, ExtractedText)","android.inputmethodservice.InputMethodService.onUpdateExtractedText(int, android.view.inputmethod.ExtractedText)"
"android.inputmethodservice.InputMethodService.onUpdateExtractingVisibility(EditorInfo)","android.inputmethodservice.InputMethodService.setExtractViewShown(boolean)"
"android.inputmethodservice.InputMethodService.changeInputMethodSubtype(InputMethodSubtype)","android.inputmethodservice.InputMethodService.onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)"
"android.inputmethodservice.InputMethodService.getMaxWidth()","android.view.Display.getWidth()"
"android.inputmethodservice.InputMethodService.getMaxWidth()","android.view.WindowManager.getDefaultDisplay()"
"android.inputmethodservice.InputMethodService.getMaxWidth()","android.content.ContextWrapper.getSystemService(java.lang.String)"
"android.inputmethodservice.InputMethodService.toggleSoftInput(int, int)","android.inputmethodservice.InputMethodService.onToggleSoftInput(int, int)"
"android.inputmethodservice.InputMethodService.restartInput(InputConnection, EditorInfo)","android.inputmethodservice.InputMethodService.doStartInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo, boolean)"
"android.inputmethodservice.InputMethodService.updateCursor(Rect)","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isEnabled()"
"android.inputmethodservice.InputMethodService.onExtractingInputChanged(EditorInfo)","android.inputmethodservice.InputMethodService.requestHideSelf(int)"
"android.inputmethodservice.InputMethodService.updateSelection(int, int, int, int, int, int)","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isEnabled()"
"android.inputmethodservice.InputMethodService.updateSelection(int, int, int, int, int, int)","android.inputmethodservice.InputMethodService.onUpdateSelection(int, int, int, int, int, int)"
"android.inputmethodservice.InputMethodService.hideWindow()","android.inputmethodservice.InputMethodService.onWindowHidden()"
"android.inputmethodservice.InputMethodService.hideWindow()","android.app.Dialog.hide()"
"android.inputmethodservice.InputMethodService.hideWindow()","android.inputmethodservice.InputMethodService.finishViews()"
"android.inputmethodservice.InputMethodService.onFinishInput()","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onFinishInput()","android.view.inputmethod.InputConnection.finishComposingText()"
"android.inputmethodservice.InputMethodService.onToggleSoftInput(int, int)","android.inputmethodservice.InputMethodService.requestHideSelf(int)"
"android.inputmethodservice.InputMethodService.onToggleSoftInput(int, int)","android.inputmethodservice.InputMethodService.isInputViewShown()"
"android.inputmethodservice.InputMethodService.onToggleSoftInput(int, int)","android.inputmethodservice.InputMethodService.requestShowSelf(int)"
"android.inputmethodservice.InputMethodService.onUpdateSelection(int, int, int, int, int, int)","android.inputmethodservice.InputMethodService.isFullscreenMode()"
"android.inputmethodservice.InputMethodService.finishInput()","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isEnabled()"
"android.inputmethodservice.InputMethodService.finishInput()","android.inputmethodservice.InputMethodService.doFinishInput()"
"android.inputmethodservice.InputMethodService.handleBack(boolean)","android.inputmethodservice.InputMethodService.isExtractViewShown()"
"android.inputmethodservice.InputMethodService.handleBack(boolean)","android.inputmethodservice.InputMethodService.requestHideSelf(int)"
"android.inputmethodservice.InputMethodService.handleBack(boolean)","android.inputmethodservice.InputMethodService.doHideWindow()"
"android.inputmethodservice.InputMethodService.handleBack(boolean)","android.inputmethodservice.InputMethodService.setCandidatesViewShown(boolean)"
"android.inputmethodservice.InputMethodService.onExtractedCursorMovement(int, int)","android.inputmethodservice.InputMethodService.setCandidatesViewShown(boolean)"
"android.inputmethodservice.InputMethodService.onUpdateExtractingViews(EditorInfo)","android.inputmethodservice.InputMethodService.isExtractViewShown()"
"android.inputmethodservice.InputMethodService.updateCursorAnchorInfo(CursorAnchorInfo)","android.inputmethodservice.InputMethodService.onUpdateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)"
"android.inputmethodservice.InputMethodService.updateCursorAnchorInfo(CursorAnchorInfo)","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isEnabled()"
"android.inputmethodservice.InputMethodService.unbindInput()","android.inputmethodservice.InputMethodService.onUnbindInput()"
"android.inputmethodservice.InputMethodService.onExtractedSelectionChanged(int, int)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onExtractedSelectionChanged(int, int)","android.view.inputmethod.InputConnection.setSelection(int, int)"
"android.inputmethodservice.InputMethodService.setExtractViewShown(boolean)","android.inputmethodservice.InputMethodService.updateExtractFrameVisibility()"
"android.inputmethodservice.InputMethodService.onFinishCandidatesView(boolean)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onFinishCandidatesView(boolean)","android.view.inputmethod.InputConnection.finishComposingText()"
"android.inputmethodservice.InputMethodService.getCandidatesHiddenVisibility()","android.inputmethodservice.InputMethodService.isExtractViewShown()"
"android.inputmethodservice.InputMethodService.onConfigureWindow(Window, boolean, boolean)","android.view.Window.getAttributes()"
"android.inputmethodservice.InputMethodService.onConfigureWindow(Window, boolean, boolean)","android.view.Window.setLayout(int, int)"
"android.inputmethodservice.InputMethodService.onConfigureWindow(Window, boolean, boolean)","android.app.Dialog.getWindow()"
"android.inputmethodservice.InputMethodService.onExtractedSetSpan(Object, int, int, int)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onExtractedSetSpan(Object, int, int, int)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.inputmethodservice.InputMethodService.onExtractedSetSpan(Object, int, int, int)","android.view.inputmethod.InputConnection.commitText(java.lang.CharSequence, int)"
"android.inputmethodservice.InputMethodService.onExtractedSetSpan(Object, int, int, int)","android.view.inputmethod.InputConnection.setComposingRegion(int, int)"
"android.inputmethodservice.InputMethodService.onExtractedSetSpan(Object, int, int, int)","android.view.inputmethod.InputConnection.setSelection(int, int)"
"android.inputmethodservice.InputMethodService.onExtractedSetSpan(Object, int, int, int)","android.view.inputmethod.InputConnection.getSelectedText(int)"
"android.inputmethodservice.InputMethodService.onExtractedSetSpan(Object, int, int, int)","java.lang.CharSequence.length()"
"android.inputmethodservice.InputMethodService.requestHideSelf(int)","android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod(android.os.IBinder, int)"
"android.inputmethodservice.InputMethodService.onExtractedTextClicked()","android.inputmethodservice.InputMethodService.setCandidatesViewShown(boolean)"
"android.inputmethodservice.InputMethodService.updateCandidatesVisibility(boolean)","android.inputmethodservice.InputMethodService.getCandidatesHiddenVisibility()"
"android.inputmethodservice.InputMethodService.sendDownUpKeyEvents(int)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.sendDownUpKeyEvents(int)","android.os.SystemClock.uptimeMillis()"
"android.inputmethodservice.InputMethodService.sendDownUpKeyEvents(int)","android.view.inputmethod.InputConnection.sendKeyEvent(android.view.KeyEvent)"
"android.inputmethodservice.InputMethodService.switchInputMethod(String)","android.view.inputmethod.InputMethodManager.setInputMethod(android.os.IBinder, java.lang.String)"
"android.inputmethodservice.InputMethodService.doHideWindow()","android.inputmethodservice.InputMethodService.hideWindow()"
"android.inputmethodservice.InputMethodService.doHideWindow()","android.view.inputmethod.InputMethodManager.setImeWindowStatus(android.os.IBinder, int, int)"
"android.inputmethodservice.InputMethodService.finishViews()","android.inputmethodservice.InputMethodService.onFinishCandidatesView(boolean)"
"android.inputmethodservice.InputMethodService.finishViews()","android.inputmethodservice.InputMethodService.onFinishInputView(boolean)"
"android.inputmethodservice.InputMethodService.onCurrentInputMethodSubtypeChanged(InputMethodSubtype)","android.content.Context.getString(int)"
"android.inputmethodservice.InputMethodService.onCurrentInputMethodSubtypeChanged(InputMethodSubtype)","android.view.inputmethod.InputMethodSubtype.getExtraValue()"
"android.inputmethodservice.InputMethodService.onCurrentInputMethodSubtypeChanged(InputMethodSubtype)","android.view.inputmethod.InputMethodSubtype.getLocale()"
"android.inputmethodservice.InputMethodService.onCurrentInputMethodSubtypeChanged(InputMethodSubtype)","android.view.inputmethod.InputMethodSubtype.getNameResId()"
"android.inputmethodservice.InputMethodService.onCurrentInputMethodSubtypeChanged(InputMethodSubtype)","android.view.inputmethod.InputMethodSubtype.getMode()"
"android.inputmethodservice.InputMethodService.doFinishInput()","android.inputmethodservice.InputMethodService.onFinishInput()"
"android.inputmethodservice.InputMethodService.doFinishInput()","android.inputmethodservice.InputMethodService.onFinishCandidatesView(boolean)"
"android.inputmethodservice.InputMethodService.doFinishInput()","android.inputmethodservice.InputMethodService.onFinishInputView(boolean)"
"android.inputmethodservice.InputMethodService.initialize()","android.inputmethodservice.InputMethodService.onInitializeInterface()"
"android.inputmethodservice.InputMethodService.showWindow(boolean)","android.inputmethodservice.InputMethodService.showWindowInner(boolean)"
"android.inputmethodservice.InputMethodService.displayCompletions(CompletionInfo[])","android.inputmethodservice.InputMethodService.onDisplayCompletions(android.view.inputmethod.CompletionInfo[])"
"android.inputmethodservice.InputMethodService.displayCompletions(CompletionInfo[])","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isEnabled()"
"android.inputmethodservice.InputMethodService.hideStatusIcon()","android.view.inputmethod.InputMethodManager.hideStatusIcon(android.os.IBinder)"
"android.inputmethodservice.InputMethodService.onComputeInsets(Insets)","android.inputmethodservice.InputMethodService.isFullscreenMode()"
"android.inputmethodservice.InputMethodService.onComputeInsets(Insets)","android.view.View.getHeight()"
"android.inputmethodservice.InputMethodService.onComputeInsets(Insets)","android.inputmethodservice.InputMethodService.getWindow()"
"android.inputmethodservice.InputMethodService.onComputeInsets(Insets)","android.view.Window.getDecorView()"
"android.inputmethodservice.InputMethodService.onComputeInsets(Insets)","android.app.Dialog.getWindow()"
"android.inputmethodservice.InputMethodService.dump(FileDescriptor, PrintWriter, String[])","android.content.ContextWrapper.getResources()"
"android.inputmethodservice.InputMethodService.dump(FileDescriptor, PrintWriter, String[])","android.content.res.Resources.getConfiguration()"
"android.inputmethodservice.InputMethodService.dump(FileDescriptor, PrintWriter, String[])","android.util.Printer.println(java.lang.String)"
"android.inputmethodservice.InputMethodService.dump(FileDescriptor, PrintWriter, String[])","java.lang.Integer.toHexString(int)"
"android.inputmethodservice.InputMethodService.dump(FileDescriptor, PrintWriter, String[])","java.lang.CharSequence.length()"
"android.inputmethodservice.InputMethodService.dump(FileDescriptor, PrintWriter, String[])","android.view.inputmethod.EditorInfo.dump(android.util.Printer, java.lang.String)"
"android.inputmethodservice.InputMethodService.onKeyUp(int, KeyEvent)","android.view.KeyEvent.isTracking()"
"android.inputmethodservice.InputMethodService.onKeyUp(int, KeyEvent)","android.inputmethodservice.InputMethodService.doMovementKey(int, android.view.KeyEvent, int)"
"android.inputmethodservice.InputMethodService.onKeyUp(int, KeyEvent)","android.inputmethodservice.InputMethodService.handleBack(boolean)"
"android.inputmethodservice.InputMethodService.onKeyUp(int, KeyEvent)","android.view.KeyEvent.isCanceled()"
"android.inputmethodservice.InputMethodService.onKeyUp(int, KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.inputmethodservice.InputMethodService.appPrivateCommand(String, Bundle)","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isEnabled()"
"android.inputmethodservice.InputMethodService.appPrivateCommand(String, Bundle)","android.inputmethodservice.InputMethodService.onAppPrivateCommand(java.lang.String, android.os.Bundle)"
"android.inputmethodservice.InputMethodService.onKeyDown(int, KeyEvent)","android.inputmethodservice.InputMethodService.doMovementKey(int, android.view.KeyEvent, int)"
"android.inputmethodservice.InputMethodService.onKeyDown(int, KeyEvent)","android.inputmethodservice.InputMethodService.handleBack(boolean)"
"android.inputmethodservice.InputMethodService.onKeyDown(int, KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.inputmethodservice.InputMethodService.onKeyDown(int, KeyEvent)","android.view.KeyEvent.startTracking()"
"android.inputmethodservice.InputMethodService.onExtractedDeleteText(int, int)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.onExtractedDeleteText(int, int)","android.view.inputmethod.InputConnection.deleteSurroundingText(int, int)"
"android.inputmethodservice.InputMethodService.onExtractedDeleteText(int, int)","android.view.inputmethod.InputConnection.setSelection(int, int)"
"android.inputmethodservice.InputMethodService.doMovementKey(int, KeyEvent, int)","android.inputmethodservice.InputMethodService.isExtractViewShown()"
"android.inputmethodservice.InputMethodService.doMovementKey(int, KeyEvent, int)","android.inputmethodservice.InputMethodService.isInputViewShown()"
"android.inputmethodservice.InputMethodService.doMovementKey(int, KeyEvent, int)","android.inputmethodservice.InputMethodService.reportExtractedMovement(int, int)"
"android.inputmethodservice.InputMethodService.doMovementKey(int, KeyEvent, int)","android.view.KeyEvent.changeAction(android.view.KeyEvent, int)"
"android.inputmethodservice.InputMethodService.startExtractingText(boolean)","android.inputmethodservice.InputMethodService.isFullscreenMode()"
"android.inputmethodservice.InputMethodService.startExtractingText(boolean)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.startExtractingText(boolean)","android.inputmethodservice.InputMethodService.onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo)"
"android.inputmethodservice.InputMethodService.startExtractingText(boolean)","android.inputmethodservice.InputMethodService.onExtractingInputChanged(android.view.inputmethod.EditorInfo)"
"android.inputmethodservice.InputMethodService.startExtractingText(boolean)","android.inputmethodservice.InputMethodService.getCurrentInputStarted()"
"android.inputmethodservice.InputMethodService.startExtractingText(boolean)","android.inputmethodservice.InputMethodService.onUpdateExtractingViews(android.view.inputmethod.EditorInfo)"
"android.inputmethodservice.InputMethodService.startExtractingText(boolean)","android.view.inputmethod.InputConnection.getExtractedText(android.view.inputmethod.ExtractedTextRequest, int)"
"android.inputmethodservice.InputMethodService.startExtractingText(boolean)","android.inputmethodservice.InputMethodService.getCurrentInputEditorInfo()"
"android.inputmethodservice.InputMethodService.onEvaluateInputViewShown()","android.content.ContextWrapper.getResources()"
"android.inputmethodservice.InputMethodService.onEvaluateInputViewShown()","android.content.res.Resources.getConfiguration()"
"android.inputmethodservice.InputMethodService.onDestroy()","android.view.ViewTreeObserver.removeOnComputeInternalInsetsListener(android.view.ViewTreeObserver.OnComputeInternalInsetsListener)"
"android.inputmethodservice.InputMethodService.onDestroy()","android.inputmethodservice.InputMethodService.doFinishInput()"
"android.inputmethodservice.InputMethodService.onDestroy()","android.app.Service.onDestroy()"
"android.inputmethodservice.InputMethodService.onDestroy()","android.view.Window.setWindowAnimations(int)"
"android.inputmethodservice.InputMethodService.onDestroy()","android.view.View.getViewTreeObserver()"
"android.inputmethodservice.InputMethodService.onDestroy()","android.app.Dialog.dismiss()"
"android.inputmethodservice.InputMethodService.onDestroy()","android.app.Dialog.getWindow()"
"android.inputmethodservice.InputMethodService.onCreate()","android.content.ContextWrapper.setTheme(int)"
"android.inputmethodservice.InputMethodService.onCreate()","android.view.Window.addFlags(int)"
"android.inputmethodservice.InputMethodService.onCreate()","android.app.Service.onCreate()"
"android.inputmethodservice.InputMethodService.onCreate()","android.content.ContextWrapper.getSystemService(java.lang.String)"
"android.inputmethodservice.InputMethodService.onCreate()","android.inputmethodservice.InputMethodService.initViews()"
"android.inputmethodservice.InputMethodService.onCreate()","android.view.Window.setLayout(int, int)"
"android.inputmethodservice.InputMethodService.onCreate()","android.app.Dialog.getWindow()"
"android.inputmethodservice.InputMethodService.doStartInput(InputConnection, EditorInfo, boolean)","android.inputmethodservice.InputMethodService.onStartInput(android.view.inputmethod.EditorInfo, boolean)"
"android.inputmethodservice.InputMethodService.doStartInput(InputConnection, EditorInfo, boolean)","android.inputmethodservice.InputMethodService.initialize()"
"android.inputmethodservice.InputMethodService.doStartInput(InputConnection, EditorInfo, boolean)","android.inputmethodservice.InputMethodService.onStartInputView(android.view.inputmethod.EditorInfo, boolean)"
"android.inputmethodservice.InputMethodService.doStartInput(InputConnection, EditorInfo, boolean)","android.inputmethodservice.InputMethodService.doFinishInput()"
"android.inputmethodservice.InputMethodService.doStartInput(InputConnection, EditorInfo, boolean)","android.inputmethodservice.InputMethodService.onStartCandidatesView(android.view.inputmethod.EditorInfo, boolean)"
"android.inputmethodservice.InputMethodService.doStartInput(InputConnection, EditorInfo, boolean)","android.inputmethodservice.InputMethodService.startExtractingText(boolean)"
"android.inputmethodservice.InputMethodService.enableHardwareAcceleration()","android.app.ActivityManager.isHighEndGfx()"
"android.inputmethodservice.InputMethodService.onKeyMultiple(int, int, KeyEvent)","android.inputmethodservice.InputMethodService.doMovementKey(int, android.view.KeyEvent, int)"
"android.inputmethodservice.InputMethodService.bindInput(InputBinding)","android.inputmethodservice.InputMethodService.initialize()"
"android.inputmethodservice.InputMethodService.bindInput(InputBinding)","android.view.inputmethod.InputBinding.getConnection()"
"android.inputmethodservice.InputMethodService.bindInput(InputBinding)","android.inputmethodservice.InputMethodService.getCurrentInputConnection()"
"android.inputmethodservice.InputMethodService.bindInput(InputBinding)","android.view.inputmethod.InputConnection.reportFullscreenMode(boolean)"
"android.inputmethodservice.InputMethodService.bindInput(InputBinding)","android.inputmethodservice.InputMethodService.onBindInput()"
"android.os.StatFs.restat(String)","android.os.StatFs.doStat(java.lang.String)"
"android.transition.PatternPathMotion.setPatternPath(Path)","android.transition.PatternPathMotion.distance(float, float)"
"android.transition.PatternPathMotion.setPatternPath(Path)","java.lang.Math.atan2(float, float)"
"android.transition.PatternPathMotion.getPath(float, float, float, float)","android.transition.PatternPathMotion.distance(float, float)"
"android.transition.PatternPathMotion.getPath(float, float, float, float)","java.lang.Math.atan2(float, float)"
"android.transition.PatternPathMotion.distance(float, float)","android.util.FloatMath.sqrt(float)"
"android.speech.tts.SilencePlaybackQueueItem.stop(int)","android.os.ConditionVariable.open()"
"android.speech.tts.SilencePlaybackQueueItem.run()","android.speech.tts.PlaybackQueueItem.getDispatcher()"
"android.speech.tts.SilencePlaybackQueueItem.run()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnStop()"
"android.speech.tts.SilencePlaybackQueueItem.run()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnStart()"
"android.speech.tts.SilencePlaybackQueueItem.run()","android.os.ConditionVariable.block(long)"
"android.speech.tts.SilencePlaybackQueueItem.run()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnSuccess()"
"com.android.internal.widget.AutoScrollHelper.requestStop()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.getValueAt(long)"
"com.android.internal.widget.AutoScrollHelper.requestStop()","com.android.internal.widget.AutoScrollHelper.constrain(int, int, int)"
"com.android.internal.widget.AutoScrollHelper.requestStop()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","android.view.MotionEvent.getY()"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","android.view.View.getWidth()"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","android.view.View.getHeight()"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","com.android.internal.widget.AutoScrollHelper.ClampedScroller.setTargetVelocity(float, float)"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","android.view.MotionEvent.getActionMasked()"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","com.android.internal.widget.AutoScrollHelper.shouldAnimate()"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","com.android.internal.widget.AutoScrollHelper.startAnimating()"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","com.android.internal.widget.AutoScrollHelper.computeTargetVelocity(int, float, int, int)"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","android.view.MotionEvent.getX()"
"com.android.internal.widget.AutoScrollHelper.onTouch(View, MotionEvent)","com.android.internal.widget.AutoScrollHelper.requestStop()"
"com.android.internal.widget.AutoScrollHelper.computeScrollDelta()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.getValueAt(long)"
"com.android.internal.widget.AutoScrollHelper.computeScrollDelta()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.interpolateValue(float)"
"com.android.internal.widget.AutoScrollHelper.computeScrollDelta()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"com.android.internal.widget.AutoScrollHelper.getEdgeValue(float, float, float, float)","com.android.internal.widget.AutoScrollHelper.constrain(float, float, float)"
"com.android.internal.widget.AutoScrollHelper.getEdgeValue(float, float, float, float)","com.android.internal.widget.AutoScrollHelper.constrainEdgeValue(float, float)"
"com.android.internal.widget.AutoScrollHelper.getEdgeValue(float, float, float, float)","android.animation.TimeInterpolator.getInterpolation(float)"
"com.android.internal.widget.AutoScrollHelper.getEdgeValue(float, float, float, float)","com.android.internal.widget.AutoScrollHelper.constrain(float, int, int)"
"com.android.internal.widget.AutoScrollHelper.run()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.getDeltaY()"
"com.android.internal.widget.AutoScrollHelper.run()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.isFinished()"
"com.android.internal.widget.AutoScrollHelper.run()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.getDeltaX()"
"com.android.internal.widget.AutoScrollHelper.run()","com.android.internal.widget.AutoScrollHelper.scrollTargetBy(int, int)"
"com.android.internal.widget.AutoScrollHelper.run()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.start()"
"com.android.internal.widget.AutoScrollHelper.run()","com.android.internal.widget.AutoScrollHelper.shouldAnimate()"
"com.android.internal.widget.AutoScrollHelper.run()","android.view.View.postOnAnimation(com.android.internal.widget.AutoScrollHelper.ScrollAnimationRunnable)"
"com.android.internal.widget.AutoScrollHelper.run()","com.android.internal.widget.AutoScrollHelper.cancelTargetTouch()"
"com.android.internal.widget.AutoScrollHelper.run()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.computeScrollDelta()"
"com.android.internal.widget.AutoScrollHelper.cancelTargetTouch()","android.view.View.onTouchEvent(android.view.MotionEvent)"
"com.android.internal.widget.AutoScrollHelper.cancelTargetTouch()","android.os.SystemClock.uptimeMillis()"
"com.android.internal.widget.AutoScrollHelper.cancelTargetTouch()","android.view.MotionEvent.recycle()"
"com.android.internal.widget.AutoScrollHelper.cancelTargetTouch()","android.view.MotionEvent.obtain(long, long, int, int, int, int)"
"com.android.internal.widget.AutoScrollHelper.computeTargetVelocity(int, float, float, float)","com.android.internal.widget.AutoScrollHelper.constrain(float, float, float)"
"com.android.internal.widget.AutoScrollHelper.computeTargetVelocity(int, float, float, float)","com.android.internal.widget.AutoScrollHelper.getEdgeValue(float, float, float, float)"
"com.android.internal.widget.AutoScrollHelper.getHorizontalDirection()","java.lang.Math.abs(float)"
"com.android.internal.widget.AutoScrollHelper.getVerticalDirection()","java.lang.Math.abs(float)"
"com.android.internal.widget.AutoScrollHelper.canTargetScrollVertically(int)","android.view.View.getBottom()"
"com.android.internal.widget.AutoScrollHelper.canTargetScrollVertically(int)","android.view.View.getTop()"
"com.android.internal.widget.AutoScrollHelper.getValueAt(long)","com.android.internal.widget.AutoScrollHelper.constrain(float, int, int)"
"com.android.internal.widget.AutoScrollHelper.startAnimating()","java.lang.Runnable.run()"
"com.android.internal.widget.AutoScrollHelper.startAnimating()","android.view.View.postOnAnimationDelayed(java.lang.Runnable, int)"
"com.android.internal.widget.AutoScrollHelper.start()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"com.android.internal.widget.AutoScrollHelper.isFinished()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"com.android.internal.widget.AutoScrollHelper.shouldAnimate()","com.android.internal.widget.AutoScrollHelper.canTargetScrollVertically(int)"
"com.android.internal.widget.AutoScrollHelper.shouldAnimate()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.getVerticalDirection()"
"com.android.internal.widget.AutoScrollHelper.shouldAnimate()","com.android.internal.widget.AutoScrollHelper.ClampedScroller.getHorizontalDirection()"
"com.android.internal.widget.AutoScrollHelper.shouldAnimate()","com.android.internal.widget.AutoScrollHelper.canTargetScrollHorizontally(int)"
"com.android.internal.widget.AutoScrollHelper.setEnabled(boolean)","com.android.internal.widget.AutoScrollHelper.requestStop()"
"android.view.Gravity.applyDisplay(int, Rect, Rect, int)","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.view.Gravity.apply(int, int, int, Rect, Rect, int)","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.view.Gravity.apply(int, int, int, Rect, int, int, Rect, int)","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.os.FileBridge.fsync()","android.os.FileBridge.FileBridgeOutputStream.writeCommandAndBlock(int, java.lang.String)"
"android.os.FileBridge.run()","android.os.FileBridge.forceClose()"
"android.os.FileBridge.close()","android.os.FileBridge.FileBridgeOutputStream.writeCommandAndBlock(int, java.lang.String)"
"android.util.MapCollections.removeAllHelper(Map, Collection)","java.util.Map.size()"
"android.util.MapCollections.removeAllHelper(Map, Collection)","java.util.Iterator.next()"
"android.util.MapCollections.removeAllHelper(Map, Collection)","java.util.Iterator.hasNext()"
"android.util.MapCollections.removeAllHelper(Map, Collection)","java.util.Map.remove(?)"
"android.util.MapCollections.removeAllHelper(Map, Collection)","java.util.Collection.iterator()"
"android.util.MapCollections.getValue()","android.util.MapCollections.colGetEntry(int, int)"
"android.util.MapCollections.setValue(V)","android.util.MapCollections.colSetValue(int, V)"
"android.util.MapCollections.equals(Object)","android.util.MapCollections.equalsSetHelper(android.util.MapCollections.KeySet, java.lang.Object)"
"android.util.MapCollections.containsAll(Collection)","java.util.Iterator.next()"
"android.util.MapCollections.containsAll(Collection)","android.util.MapCollections.ValuesCollection.contains(?)"
"android.util.MapCollections.containsAll(Collection)","java.util.Iterator.hasNext()"
"android.util.MapCollections.containsAll(Collection)","java.util.Collection.iterator()"
"android.util.MapCollections.isEmpty()","android.util.MapCollections.colGetSize()"
"android.util.MapCollections.remove(Object)","android.util.MapCollections.colRemoveAt(int)"
"android.util.MapCollections.remove(Object)","android.util.MapCollections.colIndexOfValue(java.lang.Object)"
"android.util.MapCollections.toString()","android.util.MapCollections.MapIterator.getValue()"
"android.util.MapCollections.toString()","android.util.MapCollections.MapIterator.getKey()"
"android.util.MapCollections.hashCode()","android.util.MapCollections.colGetEntry(int, int)"
"android.util.MapCollections.hashCode()","java.lang.Object.hashCode()"
"android.util.MapCollections.hashCode()","android.util.MapCollections.colGetSize()"
"android.util.MapCollections.size()","android.util.MapCollections.colGetSize()"
"android.util.MapCollections.containsAllHelper(Map, Collection)","java.util.Map.containsKey(?)"
"android.util.MapCollections.containsAllHelper(Map, Collection)","java.util.Iterator.next()"
"android.util.MapCollections.containsAllHelper(Map, Collection)","java.util.Iterator.hasNext()"
"android.util.MapCollections.containsAllHelper(Map, Collection)","java.util.Collection.iterator()"
"android.util.MapCollections.removeAll(Collection)","android.util.MapCollections.colRemoveAt(int)"
"android.util.MapCollections.removeAll(Collection)","android.util.MapCollections.colGetEntry(int, int)"
"android.util.MapCollections.removeAll(Collection)","android.util.MapCollections.colGetSize()"
"android.util.MapCollections.removeAll(Collection)","java.util.Collection.contains(java.lang.Object)"
"android.util.MapCollections.retainAllHelper(Map, Collection)","java.util.Map.size()"
"android.util.MapCollections.retainAllHelper(Map, Collection)","java.util.Iterator.next()"
"android.util.MapCollections.retainAllHelper(Map, Collection)","java.util.Iterator.hasNext()"
"android.util.MapCollections.retainAllHelper(Map, Collection)","java.util.Iterator.remove()"
"android.util.MapCollections.retainAllHelper(Map, Collection)","java.util.Set.iterator()"
"android.util.MapCollections.retainAllHelper(Map, Collection)","java.util.Map.keySet()"
"android.util.MapCollections.retainAllHelper(Map, Collection)","java.util.Collection.contains(K)"
"android.util.MapCollections.toArray()","android.util.MapCollections.toArrayHelper(int)"
"android.util.MapCollections.toArrayHelper(int)","android.util.MapCollections.colGetEntry(int, int)"
"android.util.MapCollections.toArrayHelper(int)","android.util.MapCollections.colGetSize()"
"android.util.MapCollections.toArrayHelper(T[], int)","java.lang.Class.getComponentType()"
"android.util.MapCollections.toArrayHelper(T[], int)","java.lang.Object.getClass()"
"android.util.MapCollections.toArrayHelper(T[], int)","android.util.MapCollections.colGetEntry(int, int)"
"android.util.MapCollections.toArrayHelper(T[], int)","java.lang.reflect.Array.newInstance(java.lang.Class<?>, int)"
"android.util.MapCollections.toArrayHelper(T[], int)","android.util.MapCollections.colGetSize()"
"android.util.MapCollections.retainAll(Collection)","android.util.MapCollections.colRemoveAt(int)"
"android.util.MapCollections.retainAll(Collection)","android.util.MapCollections.colGetEntry(int, int)"
"android.util.MapCollections.retainAll(Collection)","android.util.MapCollections.colGetSize()"
"android.util.MapCollections.retainAll(Collection)","java.util.Collection.contains(java.lang.Object)"
"android.util.MapCollections.equalsSetHelper(Set, Object)","java.util.Set.size()"
"android.util.MapCollections.equalsSetHelper(Set, Object)","java.util.Set.containsAll(java.util.Set<?>)"
"android.util.MapCollections.getKey()","android.util.MapCollections.colGetEntry(int, int)"
"android.util.MapCollections.remove()","android.util.MapCollections.colRemoveAt(int)"
"android.util.MapCollections.contains(Object)","android.util.MapCollections.colIndexOfValue(java.lang.Object)"
"android.util.MapCollections.toArray(T[])","android.util.MapCollections.toArrayHelper(T[], int)"
"android.util.MapCollections.clear()","android.util.MapCollections.colClear()"
"android.net.NetworkUtils.parcelInetAddress(Parcel, InetAddress, int)","android.os.Parcel.writeByteArray(byte[])"
"android.net.NetworkUtils.parcelInetAddress(Parcel, InetAddress, int)","java.net.InetAddress.getAddress()"
"android.net.NetworkUtils.trimV4AddrZeros(String)","java.lang.String.split(java.lang.String)"
"android.net.NetworkUtils.trimV4AddrZeros(String)","java.lang.StringBuilder.append(int)"
"android.net.NetworkUtils.trimV4AddrZeros(String)","java.lang.StringBuilder.toString()"
"android.net.NetworkUtils.trimV4AddrZeros(String)","java.lang.StringBuilder.append(char)"
"android.net.NetworkUtils.trimV4AddrZeros(String)","java.lang.String.length()"
"android.net.NetworkUtils.trimV4AddrZeros(String)","java.lang.Integer.parseInt(java.lang.String)"
"android.net.NetworkUtils.intToInetAddress(int)","java.net.InetAddress.getByAddress(byte[])"
"android.net.NetworkUtils.hexToInet6Address(String)","java.lang.String.format(java.util.Locale, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.net.NetworkUtils.hexToInet6Address(String)","android.net.NetworkUtils.numericToInetAddress(java.lang.String)"
"android.net.NetworkUtils.hexToInet6Address(String)","java.lang.String.substring(int, int)"
"android.net.NetworkUtils.parseIpAndMask(String)","java.lang.String.split(java.lang.String, int)"
"android.net.NetworkUtils.parseIpAndMask(String)","java.lang.Integer.parseInt(java.lang.String)"
"android.net.NetworkUtils.makeStrings(Collection)","java.util.Collection.size()"
"android.net.NetworkUtils.makeStrings(Collection)","java.net.InetAddress.getHostAddress()"
"android.net.NetworkUtils.netmaskIntToPrefixLength(int)","java.lang.Integer.bitCount(int)"
"android.net.NetworkUtils.unparcelInetAddress(Parcel)","android.os.Parcel.createByteArray()"
"android.net.NetworkUtils.unparcelInetAddress(Parcel)","java.net.InetAddress.getByAddress(byte[])"
"android.net.NetworkUtils.getNetworkPart(InetAddress, int)","android.net.NetworkUtils.maskRawAddress(byte[], int)"
"android.net.NetworkUtils.getNetworkPart(InetAddress, int)","java.lang.Throwable.toString()"
"android.net.NetworkUtils.getNetworkPart(InetAddress, int)","java.net.InetAddress.getByAddress(byte[])"
"android.net.NetworkUtils.getNetworkPart(InetAddress, int)","java.net.InetAddress.getAddress()"
"android.net.NetworkUtils.prefixLengthToNetmaskInt(int)","java.lang.Integer.reverseBytes(int)"
"android.net.NetworkUtils.inetAddressToInt(Inet4Address)","java.net.Inet4Address.getAddress()"
"android.hardware.camera2.params.StreamConfigurationMap.arrayContains(T[], T)","java.util.Objects.equals(T, T)"
"android.hardware.camera2.params.StreamConfigurationMap.imageFormatToInternal(int[])","android.hardware.camera2.params.StreamConfigurationMap.imageFormatToInternal(int)"
"android.hardware.camera2.params.StreamConfigurationMap.getInputSizes(int)","android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatSizes(int, boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Surface)","android.hardware.camera2.params.StreamConfiguration.isOutput()"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Surface)","android.util.Size.equals(android.util.Size)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Surface)","android.hardware.camera2.legacy.LegacyCameraDevice.detectSurfaceType(android.view.Surface)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Surface)","android.hardware.camera2.params.StreamConfiguration.getFormat()"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Surface)","android.hardware.camera2.legacy.LegacyCameraDevice.getSurfaceSize(android.view.Surface)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Surface)","android.hardware.camera2.legacy.LegacyCameraDevice.isFlexibleConsumer(android.view.Surface)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Surface)","android.hardware.camera2.params.StreamConfiguration.getSize()"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Surface)","android.util.Size.getWidth()"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Surface)","com.android.internal.util.Preconditions.checkNotNull(android.view.Surface, java.lang.String)"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatSizes(int, boolean)","android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatSupported(int, boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatSizes(int, boolean)","android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatSizes(int, boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatSizes(int, boolean)","android.hardware.camera2.params.StreamConfigurationMap.imageFormatToInternal(int)"
"android.hardware.camera2.params.StreamConfigurationMap.getInputFormats()","android.hardware.camera2.params.StreamConfigurationMap.getPublicFormats(boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, Size, int)","android.hardware.camera2.params.StreamConfigurationDuration.getWidth()"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, Size, int)","android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatSizes(int, boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, Size, int)","android.hardware.camera2.params.StreamConfigurationDuration.getFormat()"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, Size, int)","android.hardware.camera2.params.StreamConfigurationMap.getDurations(int)"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, Size, int)","android.hardware.camera2.params.StreamConfigurationDuration.getHeight()"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, Size, int)","android.util.Size.getWidth()"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, Size, int)","android.hardware.camera2.params.StreamConfigurationMap.arrayContains(android.util.Size[], android.util.Size)"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, Size, int)","android.util.Size.getHeight()"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, Size, int)","android.hardware.camera2.params.StreamConfigurationDuration.getDuration()"
"android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatSupported(int, boolean)","android.hardware.camera2.params.StreamConfigurationMap.getInputFormats()"
"android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatSupported(int, boolean)","android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormat(int)"
"android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatSupported(int, boolean)","android.hardware.camera2.params.StreamConfigurationMap.getOutputFormats()"
"android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatSupported(int, boolean)","java.lang.String.format(java.lang.String, int)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(Class)","com.android.internal.util.Preconditions.checkNotNull(java.lang.Class<T>, java.lang.String)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputStallDuration(int, Size)","android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, android.util.Size, int)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputStallDuration(int, Size)","android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatSupported(int, boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputStallDuration(int, Size)","android.hardware.camera2.params.StreamConfigurationMap.imageFormatToInternal(int)"
"android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormat(int)","java.lang.String.format(java.lang.String, int)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputSizes(Class)","android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatSizes(int, boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputSizes(Class)","android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(java.lang.Class<T>)"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRangesFor(Size)","android.util.Size.equals(android.util.Size)"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRangesFor(Size)","java.util.HashMap.get(android.util.Size)"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRangesFor(Size)","android.hardware.camera2.params.HighSpeedVideoConfiguration.getFpsRange()"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRangesFor(Size)","android.hardware.camera2.params.HighSpeedVideoConfiguration.getSize()"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRangesFor(Size)","java.lang.String.format(java.lang.String, android.util.Size)"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatSizes(int, boolean)","android.hardware.camera2.params.StreamConfiguration.isOutput()"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatSizes(int, boolean)","android.hardware.camera2.params.StreamConfigurationMap.getFormatsMap(boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatSizes(int, boolean)","java.util.HashMap.get(int)"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatSizes(int, boolean)","android.hardware.camera2.params.StreamConfiguration.getFormat()"
"android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatSizes(int, boolean)","android.hardware.camera2.params.StreamConfiguration.getSize()"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizesFor(Range)","java.util.HashMap.get(android.util.Range<java.lang.Integer>)"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizesFor(Range)","java.lang.String.format(java.lang.String, android.util.Range<java.lang.Integer>)"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizesFor(Range)","android.hardware.camera2.params.HighSpeedVideoConfiguration.getFpsRange()"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizesFor(Range)","android.util.Range.equals(android.util.Range<java.lang.Integer>)"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizesFor(Range)","android.hardware.camera2.params.HighSpeedVideoConfiguration.getSize()"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputMinFrameDuration(int, Size)","android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, android.util.Size, int)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputMinFrameDuration(int, Size)","android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatSupported(int, boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputMinFrameDuration(int, Size)","com.android.internal.util.Preconditions.checkNotNull(android.util.Size, java.lang.String)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputMinFrameDuration(int, Size)","android.hardware.camera2.params.StreamConfigurationMap.imageFormatToInternal(int)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputFormats()","android.hardware.camera2.params.StreamConfigurationMap.getPublicFormats(boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatCount(boolean)","android.hardware.camera2.params.StreamConfigurationMap.getFormatsMap(boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatCount(boolean)","java.util.HashMap.containsKey(int)"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatCount(boolean)","java.util.HashMap.size()"
"android.hardware.camera2.params.StreamConfigurationMap.equals(Object)","java.util.Arrays.equals(android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfiguration[])"
"android.hardware.camera2.params.StreamConfigurationMap.equals(Object)","java.util.Arrays.equals(android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[])"
"android.hardware.camera2.params.StreamConfigurationMap.equals(Object)","java.util.Arrays.equals(android.hardware.camera2.params.HighSpeedVideoConfiguration[], android.hardware.camera2.params.HighSpeedVideoConfiguration[])"
"android.hardware.camera2.params.StreamConfigurationMap.hashCode()","android.hardware.camera2.utils.HashCodeHelpers.hashCode(android.hardware.camera2.params.StreamConfiguration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.StreamConfigurationDuration[], android.hardware.camera2.params.HighSpeedVideoConfiguration[])"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputStallDuration(Class, Size)","android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, android.util.Size, int)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputStallDuration(Class, Size)","android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(java.lang.Class<T>)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(int)","android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormat(int)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(int)","android.hardware.camera2.params.StreamConfigurationMap.getFormatsMap(boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(int)","java.util.HashMap.containsKey(int)"
"android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(int)","android.hardware.camera2.params.StreamConfigurationMap.imageFormatToInternal(int)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputMinFrameDuration(Class, Size)","android.hardware.camera2.params.StreamConfigurationMap.getInternalFormatDuration(int, android.util.Size, int)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputMinFrameDuration(Class, Size)","android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor(java.lang.Class<T>)"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputSizes(int)","android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatSizes(int, boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizes()","java.util.HashMap.keySet()"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizes()","java.util.Set.size()"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizes()","java.util.Set.toArray(android.util.Size[])"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRanges()","java.util.HashMap.keySet()"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRanges()","java.util.Set.toArray(android.util.Range[])"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRanges()","java.util.Set.size()"
"android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatInternal(int)","android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormat(int)"
"android.hardware.camera2.params.StreamConfigurationMap.imageFormatToPublic(int[])","android.hardware.camera2.params.StreamConfigurationMap.imageFormatToPublic(int)"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormats(boolean)","android.hardware.camera2.params.StreamConfigurationMap.getPublicFormatCount(boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormats(boolean)","android.hardware.camera2.params.StreamConfigurationMap.getFormatsMap(boolean)"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormats(boolean)","android.hardware.camera2.params.StreamConfigurationMap.imageFormatToPublic(int[])"
"android.hardware.camera2.params.StreamConfigurationMap.getPublicFormats(boolean)","java.util.HashMap.keySet()"
"android.util.Rational.toString()","android.util.Rational.isNegInf()"
"android.util.Rational.toString()","android.util.Rational.isPosInf()"
"android.util.Rational.toString()","android.util.Rational.isNaN()"
"android.util.Rational.isZero()","android.util.Rational.isFinite()"
"android.util.Rational.readObject(java.io.ObjectInputStream)","java.io.ObjectInputStream.defaultReadObject()"
"android.util.Rational.readObject(java.io.ObjectInputStream)","android.util.Rational.gcd(int, int)"
"android.util.Rational.shortValue()","android.util.Rational.intValue()"
"android.util.Rational.longValue()","android.util.Rational.isNegInf()"
"android.util.Rational.longValue()","android.util.Rational.isPosInf()"
"android.util.Rational.longValue()","android.util.Rational.isNaN()"
"android.util.Rational.compareTo(Rational)","android.util.Rational.isNegInf()"
"android.util.Rational.compareTo(Rational)","android.util.Rational.isPosInf()"
"android.util.Rational.compareTo(Rational)","android.util.Rational.isNaN()"
"android.util.Rational.compareTo(Rational)","com.android.internal.util.Preconditions.checkNotNull(android.util.Rational, java.lang.String)"
"android.util.Rational.compareTo(Rational)","android.util.Rational.equals(android.util.Rational)"
"android.util.Rational.intValue()","android.util.Rational.isNegInf()"
"android.util.Rational.intValue()","android.util.Rational.isPosInf()"
"android.util.Rational.intValue()","android.util.Rational.isNaN()"
"android.util.Rational.toFloat()","android.util.Rational.floatValue()"
"android.util.Rational.gcd(int, int)","java.lang.Math.abs(int)"
"android.util.Rational.parseRational(String)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String, java.lang.String)"
"android.util.Rational.parseRational(String)","android.util.Rational.invalidRational(java.lang.String)"
"android.util.Rational.parseRational(String)","java.lang.String.substring(int)"
"android.util.Rational.parseRational(String)","java.lang.String.substring(int, int)"
"android.util.Rational.parseRational(String)","java.lang.String.equals(java.lang.String)"
"android.util.Rational.parseRational(String)","java.lang.String.indexOf(char)"
"android.util.Rational.parseRational(String)","java.lang.Integer.parseInt(java.lang.String)"
"android.util.Rational.equals(Object)","android.util.Rational.equals(android.util.Rational)"
"com.android.internal.util.State.getName()","java.lang.String.substring(int)"
"com.android.internal.util.State.getName()","java.lang.Object.getClass()"
"com.android.internal.util.State.getName()","java.lang.Class.getName()"
"com.android.internal.util.State.getName()","java.lang.String.lastIndexOf(char)"
"android.view.Surface.isValid()","android.view.Surface.nativeIsValid(long)"
"android.view.Surface.updateSurface()","android.view.Surface.nHwuiSetSurface(long, long)"
"android.view.Surface.setNativeObjectLocked(long)","android.view.Surface.HwuiContext.updateSurface()"
"android.view.Surface.finalize()","java.lang.Object.finalize()"
"android.view.Surface.finalize()","android.view.Surface.release()"
"android.view.Surface.release()","android.view.Surface.nativeRelease(long)"
"android.view.Surface.release()","android.view.Surface.setNativeObjectLocked(int)"
"android.view.Surface.release()","android.view.Surface.HwuiContext.destroy()"
"android.view.Surface.unlockCanvasAndPost(Canvas)","android.view.Surface.checkNotReleasedLocked()"
"android.view.Surface.toString()","java.lang.System.identityHashCode(android.view.Surface)"
"android.view.Surface.toString()","java.lang.Integer.toHexString(int)"
"android.view.Surface.unlockSwCanvasAndPost(Canvas)","android.view.Surface.nativeRelease(long)"
"android.view.Surface.destroy()","android.view.Surface.nHwuiDestroy(long)"
"android.view.Surface.transferFrom(Surface)","android.view.Surface.nativeRelease(long)"
"android.view.Surface.transferFrom(Surface)","android.view.Surface.setNativeObjectLocked(long)"
"android.view.Surface.transferFrom(Surface)","android.view.Surface.setNativeObjectLocked(int)"
"android.view.Surface.writeToParcel(Parcel, int)","android.view.Surface.nativeWriteToParcel(long, android.os.Parcel)"
"android.view.Surface.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.view.Surface.writeToParcel(Parcel, int)","android.view.Surface.release()"
"android.view.Surface.copyFrom(SurfaceControl)","android.view.Surface.nativeCreateFromSurfaceControl(long)"
"android.view.Surface.copyFrom(SurfaceControl)","android.view.Surface.nativeRelease(long)"
"android.view.Surface.copyFrom(SurfaceControl)","android.view.Surface.setNativeObjectLocked(long)"
"android.view.Surface.lockHardwareCanvas()","android.view.Surface.HwuiContext.lockCanvas(int, int)"
"android.view.Surface.lockHardwareCanvas()","android.view.Surface.nativeGetWidth(long)"
"android.view.Surface.lockHardwareCanvas()","android.view.Surface.nativeGetHeight(long)"
"android.view.Surface.lockHardwareCanvas()","android.view.Surface.checkNotReleasedLocked()"
"android.view.Surface.isConsumerRunningBehind()","android.view.Surface.nativeIsConsumerRunningBehind(long)"
"android.view.Surface.isConsumerRunningBehind()","android.view.Surface.checkNotReleasedLocked()"
"android.view.Surface.createFromParcel(Parcel)","android.view.Surface.readFromParcel(android.os.Parcel)"
"android.view.Surface.unlockAndPost(Canvas)","android.view.RenderNode.end(android.view.HardwareCanvas)"
"android.view.Surface.unlockAndPost(Canvas)","android.view.Surface.nHwuiDraw(long)"
"android.view.Surface.allocateBuffers()","android.view.Surface.nativeAllocateBuffers(long)"
"android.view.Surface.allocateBuffers()","android.view.Surface.checkNotReleasedLocked()"
"android.view.Surface.lockCanvas(Rect)","android.view.Surface.checkNotReleasedLocked()"
"android.view.Surface.lockCanvas(int, int)","android.view.RenderNode.start(int, int)"
"android.view.Surface.readFromParcel(Parcel)","android.os.Parcel.readString()"
"android.view.Surface.readFromParcel(Parcel)","android.view.Surface.setNativeObjectLocked(long)"
"android.view.Surface.readFromParcel(Parcel)","android.view.Surface.nativeReadFromParcel(long, android.os.Parcel)"
"android.database.CrossProcessCursorWrapper.getWindow()","android.database.CrossProcessCursor.getWindow()"
"android.database.CrossProcessCursorWrapper.fillWindow(int, CursorWindow)","android.database.CrossProcessCursor.fillWindow(int, android.database.CursorWindow)"
"android.database.CrossProcessCursorWrapper.fillWindow(int, CursorWindow)","android.database.DatabaseUtils.cursorFillWindow(android.database.Cursor, int, android.database.CursorWindow)"
"android.database.CrossProcessCursorWrapper.onMove(int, int)","android.database.CrossProcessCursor.onMove(int, int)"
"android.accounts.ChooseAccountActivity.getView(int, View, ViewGroup)","android.view.View.getTag()"
"android.accounts.ChooseAccountActivity.getView(int, View, ViewGroup)","android.view.View.setTag(android.accounts.ChooseAccountActivity.ViewHolder)"
"android.accounts.ChooseAccountActivity.onListItemClick(ListView, View, int, long)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.accounts.ChooseAccountActivity.onListItemClick(ListView, View, int, long)","android.accounts.ChooseAccountActivity.finish()"
"android.accounts.ChooseAccountActivity.getAuthDescriptions()","java.util.HashMap.put(java.lang.String, android.accounts.AuthenticatorDescription)"
"android.accounts.ChooseAccountActivity.getAuthDescriptions()","android.accounts.AccountManager.getAuthenticatorTypes()"
"android.accounts.ChooseAccountActivity.getAuthDescriptions()","android.accounts.AccountManager.get(android.accounts.ChooseAccountActivity)"
"android.accounts.ChooseAccountActivity.finish()","android.accounts.AccountManagerResponse.onResult(android.os.Bundle)"
"android.accounts.ChooseAccountActivity.finish()","android.app.Activity.finish()"
"android.accounts.ChooseAccountActivity.finish()","android.accounts.AccountManagerResponse.onError(int, java.lang.String)"
"android.accounts.ChooseAccountActivity.getDrawableForType(String)","android.content.ContextWrapper.createPackageContext(java.lang.String, int)"
"android.accounts.ChooseAccountActivity.getDrawableForType(String)","android.util.Log.isLoggable(java.lang.String, int)"
"android.accounts.ChooseAccountActivity.getDrawableForType(String)","java.util.HashMap.get(java.lang.String)"
"android.accounts.ChooseAccountActivity.getDrawableForType(String)","java.util.HashMap.containsKey(java.lang.String)"
"android.accounts.ChooseAccountActivity.getDrawableForType(String)","android.content.Context.getDrawable(int)"
"android.accounts.ChooseAccountActivity.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.accounts.ChooseAccountActivity.onCreate(Bundle)","android.app.Activity.setResult(int)"
"android.accounts.ChooseAccountActivity.onCreate(Bundle)","android.accounts.ChooseAccountActivity.finish()"
"android.accounts.ChooseAccountActivity.onCreate(Bundle)","android.content.Intent.getParcelableExtra(java.lang.String)"
"android.accounts.ChooseAccountActivity.onCreate(Bundle)","android.accounts.ChooseAccountActivity.getDrawableForType(java.lang.String)"
"android.accounts.ChooseAccountActivity.onCreate(Bundle)","android.content.Intent.getParcelableArrayExtra(java.lang.String)"
"android.accounts.ChooseAccountActivity.onCreate(Bundle)","android.app.Activity.getIntent()"
"android.accounts.ChooseAccountActivity.onCreate(Bundle)","android.accounts.ChooseAccountActivity.getAuthDescriptions()"
"android.hardware.SerialManager.openSerialPort(String, int)","android.hardware.SerialPort.open(android.os.ParcelFileDescriptor, int)"
"android.widget.RadioButton.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.RadioButton.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.RadioButton.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.RadioButton.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"com.android.internal.view.IInputConnectionWrapper.obtainMessage(int)","android.os.Handler.obtainMessage(int)"
"com.android.internal.view.IInputConnectionWrapper.deleteSurroundingText(int, int)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.deleteSurroundingText(int, int)","com.android.internal.view.IInputConnectionWrapper.obtainMessageII(int, int, int)"
"com.android.internal.view.IInputConnectionWrapper.obtainMessageIO(int, int, Object)","android.os.Handler.obtainMessage(int, int, int, java.lang.Object)"
"com.android.internal.view.IInputConnectionWrapper.setComposingRegion(int, int)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.setComposingRegion(int, int)","com.android.internal.view.IInputConnectionWrapper.obtainMessageII(int, int, int)"
"com.android.internal.view.IInputConnectionWrapper.obtainMessageO(int, Object)","android.os.Handler.obtainMessage(int, int, int, java.lang.Object)"
"com.android.internal.view.IInputConnectionWrapper.reportFullscreenMode(boolean)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.reportFullscreenMode(boolean)","com.android.internal.view.IInputConnectionWrapper.obtainMessageII(int, int, int)"
"com.android.internal.view.IInputConnectionWrapper.clearMetaKeyStates(int)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.clearMetaKeyStates(int)","com.android.internal.view.IInputConnectionWrapper.obtainMessageII(int, int, int)"
"com.android.internal.view.IInputConnectionWrapper.beginBatchEdit()","com.android.internal.view.IInputConnectionWrapper.obtainMessage(int)"
"com.android.internal.view.IInputConnectionWrapper.beginBatchEdit()","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.sendKeyEvent(KeyEvent)","com.android.internal.view.IInputConnectionWrapper.obtainMessageO(int, android.view.KeyEvent)"
"com.android.internal.view.IInputConnectionWrapper.sendKeyEvent(KeyEvent)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.endBatchEdit()","com.android.internal.view.IInputConnectionWrapper.obtainMessage(int)"
"com.android.internal.view.IInputConnectionWrapper.endBatchEdit()","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.obtainMessageISC(int, int, int, IInputContextCallback)","android.os.Handler.obtainMessage(int, int, int, com.android.internal.view.IInputConnectionWrapper.SomeArgs)"
"com.android.internal.view.IInputConnectionWrapper.dispatchMessage(Message)","android.os.Handler.sendMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.dispatchMessage(Message)","android.os.Looper.myLooper()"
"com.android.internal.view.IInputConnectionWrapper.dispatchMessage(Message)","com.android.internal.view.IInputConnectionWrapper.executeMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.dispatchMessage(Message)","android.os.Message.recycle()"
"com.android.internal.view.IInputConnectionWrapper.obtainMessageII(int, int, int)","android.os.Handler.obtainMessage(int, int, int)"
"com.android.internal.view.IInputConnectionWrapper.performPrivateCommand(String, Bundle)","com.android.internal.view.IInputConnectionWrapper.obtainMessageOO(int, java.lang.String, android.os.Bundle)"
"com.android.internal.view.IInputConnectionWrapper.performPrivateCommand(String, Bundle)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.setSelection(int, int)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.setSelection(int, int)","com.android.internal.view.IInputConnectionWrapper.obtainMessageII(int, int, int)"
"com.android.internal.view.IInputConnectionWrapper.handleMessage(Message)","com.android.internal.view.IInputConnectionWrapper.executeMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.obtainMessageIISC(int, int, int, int, IInputContextCallback)","android.os.Handler.obtainMessage(int, int, int, com.android.internal.view.IInputConnectionWrapper.SomeArgs)"
"com.android.internal.view.IInputConnectionWrapper.performContextMenuAction(int)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.performContextMenuAction(int)","com.android.internal.view.IInputConnectionWrapper.obtainMessageII(int, int, int)"
"com.android.internal.view.IInputConnectionWrapper.commitText(CharSequence, int)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.commitText(CharSequence, int)","com.android.internal.view.IInputConnectionWrapper.obtainMessageIO(int, int, java.lang.CharSequence)"
"com.android.internal.view.IInputConnectionWrapper.performEditorAction(int)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.performEditorAction(int)","com.android.internal.view.IInputConnectionWrapper.obtainMessageII(int, int, int)"
"com.android.internal.view.IInputConnectionWrapper.obtainMessageOO(int, Object, Object)","android.os.Handler.obtainMessage(int, int, int, com.android.internal.view.IInputConnectionWrapper.SomeArgs)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.commitText(java.lang.CharSequence, int)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.reportFullscreenMode(boolean)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.setComposingRegion(int, int)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.endBatchEdit()"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.setSelection(int, int)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.performContextMenuAction(int)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.performPrivateCommand(java.lang.String, android.os.Bundle)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","java.lang.ref.Reference.get()"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.beginBatchEdit()"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.finishComposingText()"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.clearMetaKeyStates(int)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","com.android.internal.view.IInputConnectionWrapper.isActive()"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.deleteSurroundingText(int, int)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.commitCorrection(android.view.inputmethod.CorrectionInfo)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.performEditorAction(int)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.setComposingText(java.lang.CharSequence, int)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.sendKeyEvent(android.view.KeyEvent)"
"com.android.internal.view.IInputConnectionWrapper.executeMessage(Message)","android.view.inputmethod.InputConnection.commitCompletion(android.view.inputmethod.CompletionInfo)"
"com.android.internal.view.IInputConnectionWrapper.commitCorrection(CorrectionInfo)","com.android.internal.view.IInputConnectionWrapper.obtainMessageO(int, android.view.inputmethod.CorrectionInfo)"
"com.android.internal.view.IInputConnectionWrapper.commitCorrection(CorrectionInfo)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.setComposingText(CharSequence, int)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.setComposingText(CharSequence, int)","com.android.internal.view.IInputConnectionWrapper.obtainMessageIO(int, int, java.lang.CharSequence)"
"com.android.internal.view.IInputConnectionWrapper.obtainMessageOSC(int, Object, int, IInputContextCallback)","android.os.Handler.obtainMessage(int, int, int, com.android.internal.view.IInputConnectionWrapper.SomeArgs)"
"com.android.internal.view.IInputConnectionWrapper.finishComposingText()","com.android.internal.view.IInputConnectionWrapper.obtainMessage(int)"
"com.android.internal.view.IInputConnectionWrapper.finishComposingText()","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.commitCompletion(CompletionInfo)","com.android.internal.view.IInputConnectionWrapper.obtainMessageO(int, android.view.inputmethod.CompletionInfo)"
"com.android.internal.view.IInputConnectionWrapper.commitCompletion(CompletionInfo)","com.android.internal.view.IInputConnectionWrapper.dispatchMessage(android.os.Message)"
"com.android.internal.view.IInputConnectionWrapper.obtainMessageIOSC(int, int, Object, int, IInputContextCallback)","android.os.Handler.obtainMessage(int, int, int, com.android.internal.view.IInputConnectionWrapper.SomeArgs)"
"android.hardware.hdmi.HdmiHotplugEvent.createFromParcel(Parcel)","android.os.Parcel.readByte()"
"android.hardware.hdmi.HdmiHotplugEvent.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.hdmi.HdmiHotplugEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeByte(byte)"
"android.hardware.hdmi.HdmiHotplugEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.bluetooth.BluetoothInputDevice.getProtocolMode(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.getProtocolMode(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.getProtocolMode(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.getPriority(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.getPriority(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.getPriority(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.disconnect(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.disconnect(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.disconnect(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.isEnabled()","android.bluetooth.BluetoothAdapter.getState()"
"android.bluetooth.BluetoothInputDevice.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.virtualUnplug(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.virtualUnplug(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.virtualUnplug(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.close()","android.content.Context.unbindService(android.content.ServiceConnection)"
"android.bluetooth.BluetoothInputDevice.close()","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.close()","android.bluetooth.BluetoothAdapter.getBluetoothManager()"
"android.bluetooth.BluetoothInputDevice.getReport(BluetoothDevice, byte, byte, int)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.getReport(BluetoothDevice, byte, byte, int)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.getReport(BluetoothDevice, byte, byte, int)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.sendData(BluetoothDevice, String)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.sendData(BluetoothDevice, String)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.sendData(BluetoothDevice, String)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.connect(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.connect(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.connect(BluetoothDevice)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.onServiceConnected(ComponentName, IBinder)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceConnected(int, android.bluetooth.BluetoothInputDevice)"
"android.bluetooth.BluetoothInputDevice.onServiceDisconnected(ComponentName)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceDisconnected(int)"
"android.bluetooth.BluetoothInputDevice.doBind()","android.content.Context.getPackageManager()"
"android.bluetooth.BluetoothInputDevice.doBind()","android.content.Intent.setComponent(android.content.ComponentName)"
"android.bluetooth.BluetoothInputDevice.doBind()","android.os.Process.myUserHandle()"
"android.bluetooth.BluetoothInputDevice.doBind()","android.content.Intent.resolveSystemService(android.content.pm.PackageManager, int)"
"android.bluetooth.BluetoothInputDevice.doBind()","android.content.Context.bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)"
"android.bluetooth.BluetoothInputDevice.getConnectedDevices()","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.getConnectedDevices()","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.setReport(BluetoothDevice, byte, String)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.setReport(BluetoothDevice, byte, String)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.setReport(BluetoothDevice, byte, String)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.setProtocolMode(BluetoothDevice, int)","android.bluetooth.BluetoothInputDevice.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothInputDevice.setProtocolMode(BluetoothDevice, int)","android.bluetooth.BluetoothInputDevice.isEnabled()"
"android.bluetooth.BluetoothInputDevice.setProtocolMode(BluetoothDevice, int)","android.bluetooth.BluetoothInputDevice.log(java.lang.String)"
"android.bluetooth.BluetoothInputDevice.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothDevice.getAddress()"
"android.bluetooth.BluetoothInputDevice.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothAdapter.checkBluetoothAddress(java.lang.String)"
"android.net.MobileLinkQualityInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.MobileLinkQualityInfo.writeToParcel(Parcel, int)","android.net.LinkQualityInfo.writeToParcel(android.os.Parcel, int, int)"
"android.net.MobileLinkQualityInfo.createFromParcelBody(Parcel)","android.net.LinkQualityInfo.initializeFromParcel(android.os.Parcel)"
"android.net.MobileLinkQualityInfo.createFromParcelBody(Parcel)","android.os.Parcel.readInt()"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","android.animation.Animator.createConstantState()"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","android.animation.AnimatorInflater.getChangingConfigs(android.content.res.Resources, int)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","android.content.res.ConfigurationBoundResourceCache.put(int, android.content.res.Resources.Theme, android.content.res.ConstantState<android.animation.Animator>)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","android.content.res.Resources.getAnimation(int)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","android.content.res.ConfigurationBoundResourceCache.get(int, android.content.res.Resources.Theme)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","android.content.res.ConstantState.newInstance(android.content.res.Resources, android.content.res.Resources.Theme)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","android.content.res.Resources.getAnimatorCache()"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","java.lang.Integer.toHexString(int)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","android.content.res.XmlResourceParser.close()"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int, float)","android.animation.Animator.appendChangingConfigurations(int)"
"android.animation.AnimatorInflater.setupValues(ValueAnimator, TypedArray, boolean, boolean, int, boolean, int)","android.content.res.TypedArray.getColor(int, int)"
"android.animation.AnimatorInflater.setupValues(ValueAnimator, TypedArray, boolean, boolean, int, boolean, int)","android.animation.ValueAnimator.setFloatValues(float, float)"
"android.animation.AnimatorInflater.setupValues(ValueAnimator, TypedArray, boolean, boolean, int, boolean, int)","android.content.res.TypedArray.getFloat(int, float)"
"android.animation.AnimatorInflater.setupValues(ValueAnimator, TypedArray, boolean, boolean, int, boolean, int)","android.content.res.TypedArray.getInt(int, int)"
"android.animation.AnimatorInflater.setupValues(ValueAnimator, TypedArray, boolean, boolean, int, boolean, int)","android.content.res.TypedArray.getDimension(int, float)"
"android.animation.AnimatorInflater.setupValues(ValueAnimator, TypedArray, boolean, boolean, int, boolean, int)","android.animation.ValueAnimator.setIntValues(int)"
"android.animation.AnimatorInflater.setupValues(ValueAnimator, TypedArray, boolean, boolean, int, boolean, int)","android.animation.ValueAnimator.setIntValues(int, int)"
"android.animation.AnimatorInflater.setupValues(ValueAnimator, TypedArray, boolean, boolean, int, boolean, int)","android.animation.ValueAnimator.setFloatValues(float)"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.util.PathParser.createPathFromPathData(java.lang.String)"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.animation.PathKeyframes.createYIntKeyframes()"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.animation.PathKeyframes.createXFloatKeyframes()"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder)"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.animation.ObjectAnimator.setPropertyName(java.lang.String)"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.animation.PathKeyframes.createYFloatKeyframes()"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.content.res.TypedArray.getPositionDescription()"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.animation.PathKeyframes.createXIntKeyframes()"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.animation.PropertyValuesHolder.ofKeyframes(java.lang.String, android.animation.Keyframes)"
"android.animation.AnimatorInflater.setupObjectAnimator(ValueAnimator, TypedArray, boolean, float)","android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder, android.animation.PropertyValuesHolder)"
"android.animation.AnimatorInflater.setupAnimatorForPath(ValueAnimator, TypedArray)","android.util.PathParser.createNodesFromPathData(java.lang.String)"
"android.animation.AnimatorInflater.setupAnimatorForPath(ValueAnimator, TypedArray)","android.content.res.TypedArray.getPositionDescription()"
"android.animation.AnimatorInflater.setupAnimatorForPath(ValueAnimator, TypedArray)","android.util.PathParser.deepCopyNodes(android.util.PathParser.PathDataNode[])"
"android.animation.AnimatorInflater.setupAnimatorForPath(ValueAnimator, TypedArray)","android.util.PathParser.canMorph(android.util.PathParser.PathDataNode[], android.util.PathParser.PathDataNode[])"
"android.animation.AnimatorInflater.setupAnimatorForPath(ValueAnimator, TypedArray)","android.animation.ValueAnimator.setObjectValues(java.lang.Object)"
"android.animation.AnimatorInflater.setupAnimatorForPath(ValueAnimator, TypedArray)","android.animation.ValueAnimator.setObjectValues(android.util.PathParser.PathDataNode[], android.util.PathParser.PathDataNode[])"
"android.animation.AnimatorInflater.parseAnimatorFromTypeArray(ValueAnimator, TypedArray, TypedArray, float)","android.animation.ArgbEvaluator.getInstance()"
"android.animation.AnimatorInflater.parseAnimatorFromTypeArray(ValueAnimator, TypedArray, TypedArray, float)","android.animation.AnimatorInflater.setupValues(android.animation.ValueAnimator, android.content.res.TypedArray, boolean, boolean, int, boolean, int)"
"android.animation.AnimatorInflater.parseAnimatorFromTypeArray(ValueAnimator, TypedArray, TypedArray, float)","android.animation.AnimatorInflater.setupAnimatorForPath(android.animation.ValueAnimator, android.content.res.TypedArray)"
"android.animation.AnimatorInflater.parseAnimatorFromTypeArray(ValueAnimator, TypedArray, TypedArray, float)","android.animation.ValueAnimator.setDuration(long)"
"android.animation.AnimatorInflater.parseAnimatorFromTypeArray(ValueAnimator, TypedArray, TypedArray, float)","android.animation.ValueAnimator.setEvaluator(android.animation.TypeEvaluator)"
"android.animation.AnimatorInflater.parseAnimatorFromTypeArray(ValueAnimator, TypedArray, TypedArray, float)","android.animation.AnimatorInflater.setupObjectAnimator(android.animation.ValueAnimator, android.content.res.TypedArray, boolean, float)"
"android.animation.AnimatorInflater.parseAnimatorFromTypeArray(ValueAnimator, TypedArray, TypedArray, float)","android.animation.ValueAnimator.setStartDelay(long)"
"android.animation.AnimatorInflater.evaluate(float, PathParser.PathDataNode[], PathParser.PathDataNode[])","android.util.PathParser.PathDataNode.interpolatePathDataNode(android.util.PathParser.PathDataNode, android.util.PathParser.PathDataNode, float)"
"android.animation.AnimatorInflater.evaluate(float, PathParser.PathDataNode[], PathParser.PathDataNode[])","android.util.PathParser.deepCopyNodes(android.util.PathParser.PathDataNode[])"
"android.animation.AnimatorInflater.evaluate(float, PathParser.PathDataNode[], PathParser.PathDataNode[])","android.util.PathParser.canMorph(android.util.PathParser.PathDataNode[], android.util.PathParser.PathDataNode[])"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","java.util.ArrayList.size()"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","android.animation.AnimatorSet.playSequentially(android.animation.Animator[])"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","android.content.res.TypedArray.recycle()"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","java.util.ArrayList.add(android.animation.Animator)"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","java.lang.String.equals(java.lang.String)"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","android.animation.AnimatorInflater.loadObjectAnimator(android.content.res.Resources, android.content.res.Resources.Theme, android.util.AttributeSet, float)"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","android.animation.AnimatorSet.playTogether(android.animation.Animator[])"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","android.animation.Animator.appendChangingConfigurations(int)"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","android.content.res.TypedArray.getChangingConfigurations()"
"android.animation.AnimatorInflater.createAnimatorFromXml(Resources, Theme, XmlPullParser, AttributeSet, AnimatorSet, int, float)","android.animation.AnimatorInflater.loadAnimator(android.content.res.Resources, android.content.res.Resources.Theme, android.util.AttributeSet, null, float)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, AttributeSet, ValueAnimator, float)","android.view.animation.AnimationUtils.loadInterpolator(android.content.res.Resources, android.content.res.Resources.Theme, int)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, AttributeSet, ValueAnimator, float)","android.animation.ValueAnimator.setInterpolator(android.view.animation.Interpolator)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, AttributeSet, ValueAnimator, float)","android.content.res.TypedArray.recycle()"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, AttributeSet, ValueAnimator, float)","android.animation.Animator.appendChangingConfigurations(int)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, AttributeSet, ValueAnimator, float)","android.animation.AnimatorInflater.parseAnimatorFromTypeArray(android.animation.ValueAnimator, android.content.res.TypedArray, android.content.res.TypedArray, float)"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, AttributeSet, ValueAnimator, float)","android.content.res.TypedArray.getChangingConfigurations()"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, AttributeSet, ValueAnimator, float)","android.view.animation.BaseInterpolator.getChangingConfiguration()"
"android.animation.AnimatorInflater.loadObjectAnimator(Resources, Theme, AttributeSet, float)","android.animation.AnimatorInflater.loadAnimator(android.content.res.Resources, android.content.res.Resources.Theme, android.util.AttributeSet, android.animation.ObjectAnimator, float)"
"android.animation.AnimatorInflater.createStateListAnimatorFromXml(Context, XmlPullParser, AttributeSet)","android.util.AttributeSet.getAttributeNameResource(int)"
"android.animation.AnimatorInflater.createStateListAnimatorFromXml(Context, XmlPullParser, AttributeSet)","android.util.AttributeSet.getAttributeBooleanValue(int, boolean)"
"android.animation.AnimatorInflater.createStateListAnimatorFromXml(Context, XmlPullParser, AttributeSet)","android.animation.AnimatorInflater.loadAnimator(android.content.Context, int)"
"android.animation.AnimatorInflater.createStateListAnimatorFromXml(Context, XmlPullParser, AttributeSet)","android.animation.StateListAnimator.addState(int[], android.animation.Animator)"
"android.animation.AnimatorInflater.createStateListAnimatorFromXml(Context, XmlPullParser, AttributeSet)","android.util.StateSet.trimStateSet(int[], int)"
"android.animation.AnimatorInflater.createStateListAnimatorFromXml(Context, XmlPullParser, AttributeSet)","android.util.AttributeSet.getAttributeResourceValue(int, int)"
"android.animation.AnimatorInflater.loadAnimator(Context, int)","android.content.Context.getTheme()"
"android.animation.AnimatorInflater.loadAnimator(Context, int)","android.content.Context.getResources()"
"android.animation.AnimatorInflater.loadAnimator(Context, int)","android.animation.AnimatorInflater.loadAnimator(android.content.res.Resources, android.content.res.Resources.Theme, int)"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.content.Context.getTheme()"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.animation.AnimatorInflater.getChangingConfigs(android.content.res.Resources, int)"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.animation.StateListAnimator.createConstantState()"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.content.res.Resources.getAnimation(int)"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.animation.StateListAnimator.appendChangingConfigurations(int)"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.content.Context.getResources()"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.content.res.Resources.getStateListAnimatorCache()"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.content.res.ConfigurationBoundResourceCache.get(int, android.content.res.Resources.Theme)"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.content.res.ConstantState.newInstance(android.content.res.Resources, android.content.res.Resources.Theme)"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.content.res.ConfigurationBoundResourceCache.put(int, android.content.res.Resources.Theme, android.content.res.ConstantState<android.animation.StateListAnimator>)"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","java.lang.Integer.toHexString(int)"
"android.animation.AnimatorInflater.loadStateListAnimator(Context, int)","android.content.res.XmlResourceParser.close()"
"android.animation.AnimatorInflater.loadAnimator(Resources, Theme, int)","android.animation.AnimatorInflater.loadAnimator(android.content.res.Resources, android.content.res.Resources.Theme, int, int)"
"android.animation.AnimatorInflater.getChangingConfigs(Resources, int)","android.content.res.Resources.getValue(int, android.util.TypedValue, boolean)"
"android.webkit.CookieManager.getCookie(WebAddress)","android.webkit.CookieManager.getCookie(java.lang.String)"
"android.webkit.CookieManager.getCookie(WebAddress)","android.net.WebAddress.toString()"
"android.webkit.CookieManager.allowFileSchemeCookies()","android.webkit.CookieManager.allowFileSchemeCookiesImpl()"
"android.webkit.CookieManager.allowFileSchemeCookies()","android.webkit.CookieManager.getInstance()"
"android.webkit.CookieManager.setAcceptFileSchemeCookies(boolean)","android.webkit.CookieManager.setAcceptFileSchemeCookiesImpl(boolean)"
"android.webkit.CookieManager.setAcceptFileSchemeCookies(boolean)","android.webkit.CookieManager.getInstance()"
"android.webkit.CookieManager.getInstance()","android.webkit.WebViewFactory.getProvider()"
"android.webkit.CookieManager.getInstance()","android.webkit.WebViewFactoryProvider.getCookieManager()"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.getEnumValue(T)","java.util.HashMap.get(java.lang.Class<?>)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.getEnumValue(T)","java.lang.Object.getClass()"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.getEnumValue(T)","java.lang.Enum.ordinal()"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.marshal(T, ByteBuffer)","java.nio.ByteBuffer.put(byte)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.marshal(T, ByteBuffer)","java.lang.String.format(java.lang.String, int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.marshal(T, ByteBuffer)","android.hardware.camera2.marshal.impl.MarshalQueryableEnum.getEnumValue(T)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.marshal(T, ByteBuffer)","java.nio.ByteBuffer.putInt(int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.getEnumFromValue(Class, int)","java.util.HashMap.get(java.lang.Class<T>)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.getEnumFromValue(Class, int)","java.lang.Class.getEnumConstants()"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.getEnumFromValue(Class, int)","java.lang.String.format(java.lang.String, int, java.lang.Class<T>, boolean)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.getNativeSize()","android.hardware.camera2.marshal.MarshalHelpers.getPrimitiveTypeSize(int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.isTypeMappingSupported(TypeReference, int)","java.lang.Class.isEnum()"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.isTypeMappingSupported(TypeReference, int)","android.hardware.camera2.utils.TypeReference.getType()"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.isTypeMappingSupported(TypeReference, int)","java.lang.Class.getDeclaredConstructor(java.lang.Class<java.lang.String>, java.lang.Class<int>)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.unmarshal(ByteBuffer)","java.nio.ByteBuffer.getInt()"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.unmarshal(ByteBuffer)","android.hardware.camera2.marshal.impl.MarshalQueryableEnum.getEnumFromValue(java.lang.Class<T>, int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.unmarshal(ByteBuffer)","java.nio.ByteBuffer.get()"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.registerEnumValues(Class, int[])","java.util.HashMap.put(java.lang.Class<T>, int[])"
"android.hardware.camera2.marshal.impl.MarshalQueryableEnum.registerEnumValues(Class, int[])","java.lang.Class.getEnumConstants()"
"android.content.ClipboardManager.removePrimaryClipChangedListener(OnPrimaryClipChangedListener)","java.util.ArrayList.size()"
"android.content.ClipboardManager.removePrimaryClipChangedListener(OnPrimaryClipChangedListener)","java.util.ArrayList.remove(android.content.ClipboardManager.OnPrimaryClipChangedListener)"
"android.content.ClipboardManager.setText(CharSequence)","android.content.ClipData.newPlainText(null, java.lang.CharSequence)"
"android.content.ClipboardManager.setText(CharSequence)","android.content.ClipboardManager.setPrimaryClip(android.content.ClipData)"
"android.content.ClipboardManager.setPrimaryClip(ClipData)","android.content.ClipData.prepareToLeaveProcess()"
"android.content.ClipboardManager.addPrimaryClipChangedListener(OnPrimaryClipChangedListener)","java.util.ArrayList.size()"
"android.content.ClipboardManager.addPrimaryClipChangedListener(OnPrimaryClipChangedListener)","java.util.ArrayList.add(android.content.ClipboardManager.OnPrimaryClipChangedListener)"
"android.content.ClipboardManager.getService()","android.os.ServiceManager.getService(java.lang.String)"
"android.content.ClipboardManager.handleMessage(Message)","android.content.ClipboardManager.reportPrimaryClipChanged()"
"android.content.ClipboardManager.reportPrimaryClipChanged()","java.util.ArrayList.size()"
"android.content.ClipboardManager.reportPrimaryClipChanged()","android.content.ClipboardManager.OnPrimaryClipChangedListener.onPrimaryClipChanged()"
"android.content.ClipboardManager.reportPrimaryClipChanged()","java.util.ArrayList.toArray()"
"android.content.ClipboardManager.getText()","android.content.ClipData.getItemCount()"
"android.content.ClipboardManager.getText()","android.content.ClipData.Item.coerceToText(android.content.Context)"
"android.content.ClipboardManager.getText()","android.content.ClipData.getItemAt(int)"
"android.content.ClipboardManager.getText()","android.content.ClipboardManager.getPrimaryClip()"
"com.android.server.LocalServices.getService(Class)","android.util.ArrayMap.get(java.lang.Class<T>)"
"com.android.server.LocalServices.addService(Class, T)","android.util.ArrayMap.put(java.lang.Class<T>, T)"
"com.android.server.LocalServices.addService(Class, T)","android.util.ArrayMap.containsKey(java.lang.Class<T>)"
"android.net.SSLSessionCache.install(SSLSessionCache, SSLContext)","javax.net.ssl.SSLContext.getClientSessionContext()"
"android.webkit.WebView.canGoForward()","android.webkit.WebViewProvider.canGoForward()"
"android.webkit.WebView.clearHistory()","android.webkit.WebViewProvider.clearHistory()"
"android.webkit.WebView.requestImageRef(Message)","android.webkit.WebViewProvider.requestImageRef(android.os.Message)"
"android.webkit.WebView.findHierarchyView(String, int)","android.webkit.WebViewProvider.findHierarchyView(java.lang.String, int)"
"android.webkit.WebView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.webkit.WebView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.webkit.WebView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.webkit.WebViewProvider.ViewDelegate.onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.webkit.WebView.isPrivateBrowsingEnabled()","android.webkit.WebViewProvider.isPrivateBrowsingEnabled()"
"android.webkit.WebView.onResume()","android.webkit.WebViewProvider.onResume()"
"android.webkit.WebView.canGoBack()","android.webkit.WebViewProvider.canGoBack()"
"android.webkit.WebView.canZoomOut()","android.webkit.WebViewProvider.canZoomOut()"
"android.webkit.WebView.getScale()","android.webkit.WebViewProvider.getScale()"
"android.webkit.WebView.zoomIn()","android.webkit.WebViewProvider.zoomIn()"
"android.webkit.WebView.computeHorizontalScrollRange()","android.webkit.WebViewProvider.ScrollDelegate.computeHorizontalScrollRange()"
"android.webkit.WebView.computeHorizontalScrollRange()","android.webkit.WebViewProvider.getScrollDelegate()"
"android.webkit.WebView.pageUp(boolean)","android.webkit.WebViewProvider.pageUp(boolean)"
"android.webkit.WebView.getAccessibilityNodeProvider()","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.getAccessibilityNodeProvider()","android.webkit.WebViewProvider.ViewDelegate.getAccessibilityNodeProvider()"
"android.webkit.WebView.getCertificate()","android.webkit.WebViewProvider.getCertificate()"
"android.webkit.WebView.getContentWidth()","android.webkit.WebViewProvider.getContentWidth()"
"android.webkit.WebView.findAllAsync(String)","android.webkit.WebViewProvider.findAllAsync(java.lang.String)"
"android.webkit.WebView.onKeyDown(int, KeyEvent)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onKeyDown(int, KeyEvent)","android.webkit.WebViewProvider.ViewDelegate.onKeyDown(int, android.view.KeyEvent)"
"android.webkit.WebView.createPrintDocumentAdapter(String)","android.webkit.WebViewProvider.createPrintDocumentAdapter(java.lang.String)"
"android.webkit.WebView.showFindDialog(String, boolean)","android.webkit.WebViewProvider.showFindDialog(java.lang.String, boolean)"
"android.webkit.WebView.loadDataWithBaseURL(String, String, String, String, String)","android.webkit.WebViewProvider.loadDataWithBaseURL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.webkit.WebView.setScrollBarStyle(int)","android.webkit.WebViewProvider.ViewDelegate.setScrollBarStyle(int)"
"android.webkit.WebView.setScrollBarStyle(int)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.destroy()","android.webkit.WebViewProvider.destroy()"
"android.webkit.WebView.setMapTrackballToArrowKeys(boolean)","android.webkit.WebViewProvider.setMapTrackballToArrowKeys(boolean)"
"android.webkit.WebView.addJavascriptInterface(Object, String)","android.webkit.WebViewProvider.addJavascriptInterface(java.lang.Object, java.lang.String)"
"android.webkit.WebView.findNext(boolean)","android.webkit.WebViewProvider.findNext(boolean)"
"android.webkit.WebView.onScrollChanged(int, int, int, int)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onScrollChanged(int, int, int, int)","android.webkit.WebViewProvider.ViewDelegate.onScrollChanged(int, int, int, int)"
"android.webkit.WebView.canGoBackOrForward(int)","android.webkit.WebViewProvider.canGoBackOrForward(int)"
"android.webkit.WebView.setHorizontalScrollbarOverlay(boolean)","android.webkit.WebViewProvider.setHorizontalScrollbarOverlay(boolean)"
"android.webkit.WebView.setPictureListener(PictureListener)","android.webkit.WebViewProvider.setPictureListener(android.webkit.WebView.PictureListener)"
"android.webkit.WebView.clearFormData()","android.webkit.WebViewProvider.clearFormData()"
"android.webkit.WebView.documentHasImages(Message)","android.webkit.WebViewProvider.documentHasImages(android.os.Message)"
"android.webkit.WebView.onFindResultReceived(int, int, boolean)","android.webkit.WebView.FindListener.onFindResultReceived(int, int, boolean)"
"android.webkit.WebView.restorePicture(Bundle, File)","android.webkit.WebViewProvider.restorePicture(android.os.Bundle, java.io.File)"
"android.webkit.WebView.onCreateInputConnection(EditorInfo)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onCreateInputConnection(EditorInfo)","android.webkit.WebViewProvider.ViewDelegate.onCreateInputConnection(android.view.inputmethod.EditorInfo)"
"android.webkit.WebView.overlayHorizontalScrollbar()","android.webkit.WebViewProvider.overlayHorizontalScrollbar()"
"android.webkit.WebView.setHttpAuthUsernamePassword(String, String, String, String)","android.webkit.WebViewProvider.setHttpAuthUsernamePassword(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.webkit.WebView.setDownloadListener(DownloadListener)","android.webkit.WebViewProvider.setDownloadListener(android.webkit.DownloadListener)"
"android.webkit.WebView.setOverScrollMode(int)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.setOverScrollMode(int)","android.webkit.WebViewProvider.ViewDelegate.setOverScrollMode(int)"
"android.webkit.WebView.stopLoading()","android.webkit.WebViewProvider.stopLoading()"
"android.webkit.WebView.setVerticalScrollbarOverlay(boolean)","android.webkit.WebViewProvider.setVerticalScrollbarOverlay(boolean)"
"android.webkit.WebView.dispatchKeyEvent(KeyEvent)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.dispatchKeyEvent(KeyEvent)","android.webkit.WebViewProvider.ViewDelegate.dispatchKeyEvent(android.view.KeyEvent)"
"android.webkit.WebView.onGenericMotionEvent(MotionEvent)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onGenericMotionEvent(MotionEvent)","android.webkit.WebViewProvider.ViewDelegate.onGenericMotionEvent(android.view.MotionEvent)"
"android.webkit.WebView.findAll(String)","android.os.StrictMode.noteSlowCall(java.lang.String)"
"android.webkit.WebView.findAll(String)","android.webkit.WebViewProvider.findAll(java.lang.String)"
"android.webkit.WebView.onConfigurationChanged(Configuration)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onConfigurationChanged(Configuration)","android.webkit.WebViewProvider.ViewDelegate.onConfigurationChanged(android.content.res.Configuration)"
"android.webkit.WebView.getVisibleTitleHeight()","android.webkit.WebViewProvider.getVisibleTitleHeight()"
"android.webkit.WebView.savePassword(String, String, String)","android.webkit.WebViewProvider.savePassword(java.lang.String, java.lang.String, java.lang.String)"
"android.webkit.WebView.setWebViewClient(WebViewClient)","android.webkit.WebViewProvider.setWebViewClient(android.webkit.WebViewClient)"
"android.webkit.WebView.getTitle()","android.webkit.WebViewProvider.getTitle()"
"android.webkit.WebView.computeScroll()","android.webkit.WebViewProvider.ScrollDelegate.computeScroll()"
"android.webkit.WebView.computeScroll()","android.webkit.WebViewProvider.getScrollDelegate()"
"android.webkit.WebView.getZoomControls()","android.webkit.WebViewProvider.getZoomControls()"
"android.webkit.WebView.resumeTimers()","android.webkit.WebViewProvider.resumeTimers()"
"android.webkit.WebView.saveState(Bundle)","android.webkit.WebViewProvider.saveState(android.os.Bundle)"
"android.webkit.WebView.goBack()","android.webkit.WebViewProvider.goBack()"
"android.webkit.WebView.checkThread()","android.os.Looper.getMainLooper()"
"android.webkit.WebView.checkThread()","android.os.Looper.myLooper()"
"android.webkit.WebView.checkThread()","java.lang.Thread.currentThread()"
"android.webkit.WebView.checkThread()","android.os.StrictMode.onWebViewMethodCalledOnWrongThread(java.lang.Throwable)"
"android.webkit.WebView.checkThread()","java.lang.Thread.getName()"
"android.webkit.WebView.notifyFindDialogDismissed()","android.webkit.WebViewProvider.notifyFindDialogDismissed()"
"android.webkit.WebView.loadData(String, String, String)","android.webkit.WebViewProvider.loadData(java.lang.String, java.lang.String, java.lang.String)"
"android.webkit.WebView.onKeyMultiple(int, int, KeyEvent)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onKeyMultiple(int, int, KeyEvent)","android.webkit.WebViewProvider.ViewDelegate.onKeyMultiple(int, int, android.view.KeyEvent)"
"android.webkit.WebView.zoomBy(float)","android.webkit.WebViewProvider.zoomBy(float)"
"android.webkit.WebView.goForward()","android.webkit.WebViewProvider.goForward()"
"android.webkit.WebView.freeMemory()","android.webkit.WebViewProvider.freeMemory()"
"android.webkit.WebView.setLayoutParams(ViewGroup.LayoutParams)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.setLayoutParams(ViewGroup.LayoutParams)","android.webkit.WebViewProvider.ViewDelegate.setLayoutParams(android.view.ViewGroup.LayoutParams)"
"android.webkit.WebView.computeVerticalScrollRange()","android.webkit.WebViewProvider.ScrollDelegate.computeVerticalScrollRange()"
"android.webkit.WebView.computeVerticalScrollRange()","android.webkit.WebViewProvider.getScrollDelegate()"
"android.webkit.WebView.setNetworkAvailable(boolean)","android.webkit.WebViewProvider.setNetworkAvailable(boolean)"
"android.webkit.WebView.loadUrl(String)","android.webkit.WebViewProvider.loadUrl(java.lang.String)"
"android.webkit.WebView.setBackgroundColor(int)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.setBackgroundColor(int)","android.webkit.WebViewProvider.ViewDelegate.setBackgroundColor(int)"
"android.webkit.WebView.capturePicture()","android.webkit.WebViewProvider.capturePicture()"
"android.webkit.WebView.onPause()","android.webkit.WebViewProvider.onPause()"
"android.webkit.WebView.performLongClick()","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.performLongClick()","android.webkit.WebViewProvider.ViewDelegate.performLongClick()"
"android.webkit.WebView.setWebChromeClient(WebChromeClient)","android.webkit.WebViewProvider.setWebChromeClient(android.webkit.WebChromeClient)"
"android.webkit.WebView.onTouchEvent(MotionEvent)","android.webkit.WebViewProvider.ViewDelegate.onTouchEvent(android.view.MotionEvent)"
"android.webkit.WebView.onTouchEvent(MotionEvent)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.getContentHeight()","android.webkit.WebViewProvider.getContentHeight()"
"android.webkit.WebView.computeHorizontalScrollOffset()","android.webkit.WebViewProvider.ScrollDelegate.computeHorizontalScrollOffset()"
"android.webkit.WebView.computeHorizontalScrollOffset()","android.webkit.WebViewProvider.getScrollDelegate()"
"android.webkit.WebView.savePicture(Bundle, File)","android.webkit.WebViewProvider.savePicture(android.os.Bundle, java.io.File)"
"android.webkit.WebView.onStartTemporaryDetach()","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onStartTemporaryDetach()","android.webkit.WebViewProvider.ViewDelegate.onStartTemporaryDetach()"
"android.webkit.WebView.onWindowVisibilityChanged(int)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onWindowVisibilityChanged(int)","android.webkit.WebViewProvider.ViewDelegate.onWindowVisibilityChanged(int)"
"android.webkit.WebView.reload()","android.webkit.WebViewProvider.reload()"
"android.webkit.WebView.saveWebArchive(String, boolean, ValueCallback)","android.webkit.WebViewProvider.saveWebArchive(java.lang.String, boolean, android.webkit.ValueCallback<java.lang.String>)"
"android.webkit.WebView.copyBackForwardList()","android.webkit.WebViewProvider.copyBackForwardList()"
"android.webkit.WebView.postUrl(String, byte[])","android.webkit.URLUtil.isNetworkUrl(java.lang.String)"
"android.webkit.WebView.postUrl(String, byte[])","android.webkit.WebViewProvider.loadUrl(java.lang.String)"
"android.webkit.WebView.postUrl(String, byte[])","android.webkit.WebViewProvider.postUrl(java.lang.String, byte[])"
"android.webkit.WebView.onOverScrolled(int, int, boolean, boolean)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onOverScrolled(int, int, boolean, boolean)","android.webkit.WebViewProvider.ViewDelegate.onOverScrolled(int, int, boolean, boolean)"
"android.webkit.WebView.pageDown(boolean)","android.webkit.WebViewProvider.pageDown(boolean)"
"android.webkit.WebView.getSettings()","android.webkit.WebViewProvider.getSettings()"
"android.webkit.WebView.computeVerticalScrollOffset()","android.webkit.WebViewProvider.ScrollDelegate.computeVerticalScrollOffset()"
"android.webkit.WebView.computeVerticalScrollOffset()","android.webkit.WebViewProvider.getScrollDelegate()"
"android.webkit.WebView.onWindowFocusChanged(boolean)","android.webkit.WebViewProvider.ViewDelegate.onWindowFocusChanged(boolean)"
"android.webkit.WebView.onWindowFocusChanged(boolean)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.restoreState(Bundle)","android.webkit.WebViewProvider.restoreState(android.os.Bundle)"
"android.webkit.WebView.getProgress()","android.webkit.WebViewProvider.getProgress()"
"android.webkit.WebView.saveWebArchive(String)","android.webkit.WebViewProvider.saveWebArchive(java.lang.String)"
"android.webkit.WebView.onFinishTemporaryDetach()","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onFinishTemporaryDetach()","android.webkit.WebViewProvider.ViewDelegate.onFinishTemporaryDetach()"
"android.webkit.WebView.performAccessibilityAction(int, Bundle)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.performAccessibilityAction(int, Bundle)","android.webkit.WebViewProvider.ViewDelegate.performAccessibilityAction(int, android.os.Bundle)"
"android.webkit.WebView.invokeZoomPicker()","android.webkit.WebViewProvider.invokeZoomPicker()"
"android.webkit.WebView.canZoomIn()","android.webkit.WebViewProvider.canZoomIn()"
"android.webkit.WebView.shouldDelayChildPressedState()","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.shouldDelayChildPressedState()","android.webkit.WebViewProvider.ViewDelegate.shouldDelayChildPressedState()"
"android.webkit.WebView.clearMatches()","android.webkit.WebViewProvider.clearMatches()"
"android.webkit.WebView.onMeasure(int, int)","android.webkit.WebViewProvider.ViewDelegate.onMeasure(int, int)"
"android.webkit.WebView.onMeasure(int, int)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.clearView()","android.webkit.WebViewProvider.clearView()"
"android.webkit.WebView.removeJavascriptInterface(String)","android.webkit.WebViewProvider.removeJavascriptInterface(java.lang.String)"
"android.webkit.WebView.setFrame(int, int, int, int)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.setFrame(int, int, int, int)","android.webkit.WebViewProvider.ViewDelegate.setFrame(int, int, int, int)"
"android.webkit.WebView.requestFocusNodeHref(Message)","android.webkit.WebViewProvider.requestFocusNodeHref(android.os.Message)"
"android.webkit.WebView.onAttachedToWindow()","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onAttachedToWindow()","android.webkit.WebViewProvider.ViewDelegate.onAttachedToWindow()"
"android.webkit.WebView.onHoverEvent(MotionEvent)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onHoverEvent(MotionEvent)","android.webkit.WebViewProvider.ViewDelegate.onHoverEvent(android.view.MotionEvent)"
"android.webkit.WebView.getUrl()","android.webkit.WebViewProvider.getUrl()"
"android.webkit.WebView.onDetachedFromWindowInternal()","android.webkit.WebViewProvider.ViewDelegate.onDetachedFromWindow()"
"android.webkit.WebView.onDetachedFromWindowInternal()","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onVisibilityChanged(View, int)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onVisibilityChanged(View, int)","android.webkit.WebViewProvider.ViewDelegate.onVisibilityChanged(android.view.View, int)"
"android.webkit.WebView.getOriginalUrl()","android.webkit.WebViewProvider.getOriginalUrl()"
"android.webkit.WebView.computeVerticalScrollExtent()","android.webkit.WebViewProvider.ScrollDelegate.computeVerticalScrollExtent()"
"android.webkit.WebView.computeVerticalScrollExtent()","android.webkit.WebViewProvider.getScrollDelegate()"
"android.webkit.WebView.clearCache(boolean)","android.webkit.WebViewProvider.clearCache(boolean)"
"android.webkit.WebView.zoomOut()","android.webkit.WebViewProvider.zoomOut()"
"android.webkit.WebView.onTrackballEvent(MotionEvent)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onTrackballEvent(MotionEvent)","android.webkit.WebViewProvider.ViewDelegate.onTrackballEvent(android.view.MotionEvent)"
"android.webkit.WebView.onSizeChanged(int, int, int, int)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onSizeChanged(int, int, int, int)","android.webkit.WebViewProvider.ViewDelegate.onSizeChanged(int, int, int, int)"
"android.webkit.WebView.setCertificate(SslCertificate)","android.webkit.WebViewProvider.setCertificate(android.net.http.SslCertificate)"
"android.webkit.WebView.getFavicon()","android.webkit.WebViewProvider.getFavicon()"
"android.webkit.WebView.getHitTestResult()","android.webkit.WebViewProvider.getHitTestResult()"
"android.webkit.WebView.getFactory()","android.webkit.WebViewFactory.getProvider()"
"android.webkit.WebView.onKeyUp(int, KeyEvent)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onKeyUp(int, KeyEvent)","android.webkit.WebViewProvider.ViewDelegate.onKeyUp(int, android.view.KeyEvent)"
"android.webkit.WebView.getHttpAuthUsernamePassword(String, String)","android.webkit.WebViewProvider.getHttpAuthUsernamePassword(java.lang.String, java.lang.String)"
"android.webkit.WebView.loadUrl(String, Map)","java.util.Map.Entry.getValue()"
"android.webkit.WebView.loadUrl(String, Map)","java.util.Map.entrySet()"
"android.webkit.WebView.loadUrl(String, Map)","android.webkit.WebViewProvider.loadUrl(java.lang.String, java.util.Map<java.lang.String, java.lang.String>)"
"android.webkit.WebView.loadUrl(String, Map)","java.lang.StringBuilder.append(java.lang.String)"
"android.webkit.WebView.loadUrl(String, Map)","java.util.Map.Entry.getKey()"
"android.webkit.WebView.isPaused()","android.webkit.WebViewProvider.isPaused()"
"android.webkit.WebView.pauseTimers()","android.webkit.WebViewProvider.pauseTimers()"
"android.webkit.WebView.dumpViewHierarchyWithProperties(BufferedWriter, int)","android.webkit.WebViewProvider.dumpViewHierarchyWithProperties(java.io.BufferedWriter, int)"
"android.webkit.WebView.clearSslPreferences()","android.webkit.WebViewProvider.clearSslPreferences()"
"android.webkit.WebView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.webkit.WebViewProvider.ViewDelegate.onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)"
"android.webkit.WebView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.webkit.WebViewProvider.getViewDelegate()"
"android.webkit.WebView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.webkit.WebView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.webkit.WebView.setupFindListenerIfNeeded()","android.webkit.WebViewProvider.setFindListener(android.webkit.WebView.FindListenerDistributor)"
"android.webkit.WebView.overlayVerticalScrollbar()","android.webkit.WebViewProvider.overlayVerticalScrollbar()"
"android.webkit.WebView.evaluateJavascript(String, ValueCallback)","android.webkit.WebViewProvider.evaluateJavaScript(java.lang.String, android.webkit.ValueCallback<java.lang.String>)"
"android.webkit.WebView.goBackOrForward(int)","android.webkit.WebViewProvider.goBackOrForward(int)"
"android.webkit.WebView.createPrintDocumentAdapter()","android.webkit.WebViewProvider.createPrintDocumentAdapter(java.lang.String)"
"android.webkit.WebView.flingScroll(int, int)","android.webkit.WebViewProvider.flingScroll(int, int)"
"android.webkit.WebView.setInitialScale(int)","android.webkit.WebViewProvider.setInitialScale(int)"
"android.webkit.WebView.getTouchIconUrl()","android.webkit.WebViewProvider.getTouchIconUrl()"
"android.app.UiAutomation.connect()","android.os.SystemClock.uptimeMillis()"
"android.app.UiAutomation.connect()","java.lang.Object.wait(long)"
"android.app.UiAutomation.connect()","android.app.UiAutomation.throwIfConnectedLocked()"
"android.app.UiAutomation.connect()","android.app.UiAutomation.isConnectedLocked()"
"android.app.UiAutomation.executeShellCommand(String)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.executeShellCommand(String)","android.os.ParcelFileDescriptor.createPipe()"
"android.app.UiAutomation.setRotation(int)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.findFocus(int)","android.view.accessibility.AccessibilityInteractionClient.getInstance()"
"android.app.UiAutomation.findFocus(int)","android.view.accessibility.AccessibilityInteractionClient.findFocus(int, int, long, int)"
"android.app.UiAutomation.getWindowContentFrameStats(int)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.clearWindowAnimationFrameStats()","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.injectInputEvent(InputEvent, boolean)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.obtain(android.view.accessibility.AccessibilityEvent)"
"android.app.UiAutomation.onAccessibilityEvent(AccessibilityEvent)","java.lang.Object.notifyAll()"
"android.app.UiAutomation.onAccessibilityEvent(AccessibilityEvent)","java.util.ArrayList.add(android.view.accessibility.AccessibilityEvent)"
"android.app.UiAutomation.onAccessibilityEvent(AccessibilityEvent)","android.app.UiAutomation.OnAccessibilityEventListener.onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.app.UiAutomation.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.getEventTime()"
"android.app.UiAutomation.getRootInActiveWindow()","android.view.accessibility.AccessibilityInteractionClient.getRootInActiveWindow(int)"
"android.app.UiAutomation.getRootInActiveWindow()","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.getRootInActiveWindow()","android.view.accessibility.AccessibilityInteractionClient.getInstance()"
"android.app.UiAutomation.disconnect()","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.getWindowAnimationFrameStats()","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.getServiceInfo()","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.app.UiAutomation.getServiceInfo()","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.getServiceInfo()","android.view.accessibility.AccessibilityInteractionClient.getInstance()"
"android.app.UiAutomation.takeScreenshot()","android.hardware.display.DisplayManagerGlobal.getRealDisplay(int)"
"android.app.UiAutomation.takeScreenshot()","android.view.Display.getRotation()"
"android.app.UiAutomation.takeScreenshot()","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.takeScreenshot()","android.hardware.display.DisplayManagerGlobal.getInstance()"
"android.app.UiAutomation.clearWindowContentFrameStats(int)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.init(int, IBinder)","java.lang.Object.notifyAll()"
"android.app.UiAutomation.getWindows()","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.getWindows()","android.view.accessibility.AccessibilityInteractionClient.getInstance()"
"android.app.UiAutomation.getWindows()","android.view.accessibility.AccessibilityInteractionClient.getWindows(int)"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","android.view.accessibility.AccessibilityEvent.recycle()"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","java.lang.Runnable.run()"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","android.os.SystemClock.uptimeMillis()"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","java.lang.Object.notifyAll()"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","java.util.ArrayList.isEmpty()"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","java.lang.Object.wait(long)"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","android.view.accessibility.AccessibilityEvent.getEventTime()"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","android.app.UiAutomation.AccessibilityEventFilter.accept(android.view.accessibility.AccessibilityEvent)"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","java.util.ArrayList.remove(int)"
"android.app.UiAutomation.executeAndWaitForEvent(Runnable, AccessibilityEventFilter, long)","java.util.ArrayList.clear()"
"android.app.UiAutomation.setServiceInfo(AccessibilityServiceInfo)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.app.UiAutomation.setServiceInfo(AccessibilityServiceInfo)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.setServiceInfo(AccessibilityServiceInfo)","android.view.accessibility.AccessibilityInteractionClient.getInstance()"
"android.app.UiAutomation.setServiceInfo(AccessibilityServiceInfo)","android.view.accessibility.AccessibilityInteractionClient.clearCache()"
"android.app.UiAutomation.getConnectionId()","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.setRunAsMonkey(boolean)","android.app.IActivityManager.setUserIsMonkey(boolean)"
"android.app.UiAutomation.setRunAsMonkey(boolean)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.setRunAsMonkey(boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.UiAutomation.waitForIdle(long, long)","android.os.SystemClock.uptimeMillis()"
"android.app.UiAutomation.waitForIdle(long, long)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.waitForIdle(long, long)","java.lang.Object.wait(long)"
"android.app.UiAutomation.throwIfNotConnectedLocked()","android.app.UiAutomation.isConnectedLocked()"
"android.app.UiAutomation.performGlobalAction(int)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.app.UiAutomation.performGlobalAction(int)","android.app.UiAutomation.throwIfNotConnectedLocked()"
"android.app.UiAutomation.performGlobalAction(int)","android.view.accessibility.AccessibilityInteractionClient.getInstance()"
"android.text.method.TextKeyListener.getPrefs(Context)","android.text.method.TextKeyListener.initPrefs(android.content.Context)"
"android.text.method.TextKeyListener.getPrefs(Context)","java.lang.ref.Reference.get()"
"android.text.method.TextKeyListener.onChange(boolean)","java.lang.ref.Reference.get()"
"android.text.method.TextKeyListener.onChange(boolean)","android.text.method.TextKeyListener.updatePrefs(android.content.ContentResolver)"
"android.text.method.TextKeyListener.initPrefs(Context)","android.content.ContentResolver.registerContentObserver(android.net.Uri, boolean, android.text.method.TextKeyListener.SettingsObserver)"
"android.text.method.TextKeyListener.initPrefs(Context)","android.content.Context.getContentResolver()"
"android.text.method.TextKeyListener.initPrefs(Context)","android.text.method.TextKeyListener.updatePrefs(android.content.ContentResolver)"
"android.text.method.TextKeyListener.shouldCap(Capitalize, CharSequence, int)","android.text.TextUtils.getCapsMode(java.lang.CharSequence, int, int)"
"android.text.method.TextKeyListener.clear(Editable)","android.text.Editable.clear()"
"android.text.method.TextKeyListener.clear(Editable)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.QwertyKeyListener.Replaced>)"
"android.text.method.TextKeyListener.clear(Editable)","android.text.Spannable.removeSpan(android.text.method.QwertyKeyListener.Replaced)"
"android.text.method.TextKeyListener.clear(Editable)","java.lang.CharSequence.length()"
"android.text.method.TextKeyListener.clear(Editable)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.TextKeyListener.updatePrefs(ContentResolver)","android.provider.Settings.System.getInt(android.content.ContentResolver, java.lang.String, int)"
"android.text.method.TextKeyListener.onSpanChanged(Spannable, Object, int, int, int, int)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.TextKeyListener.getKeyListener(KeyEvent)","android.view.KeyEvent.getKeyCharacterMap()"
"android.text.method.TextKeyListener.getKeyListener(KeyEvent)","android.text.method.QwertyKeyListener.getInstanceForFullKeyboard()"
"android.text.method.TextKeyListener.getKeyListener(KeyEvent)","android.view.KeyCharacterMap.getKeyboardType()"
"android.text.method.TextKeyListener.getKeyListener(KeyEvent)","android.text.method.MultiTapKeyListener.getInstance(boolean, android.text.method.TextKeyListener.Capitalize)"
"android.text.method.TextKeyListener.getKeyListener(KeyEvent)","android.text.method.TextKeyListener.NullKeyListener.getInstance()"
"android.text.method.TextKeyListener.getKeyListener(KeyEvent)","android.text.method.QwertyKeyListener.getInstance(boolean, android.text.method.TextKeyListener.Capitalize)"
"android.text.method.TextKeyListener.release()","java.lang.ref.Reference.get()"
"android.text.method.TextKeyListener.release()","android.content.ContentResolver.unregisterContentObserver(android.text.method.TextKeyListener.SettingsObserver)"
"android.text.method.TextKeyListener.release()","java.lang.ref.Reference.clear()"
"android.text.method.TextKeyListener.getInstance(boolean, Capitalize)","java.lang.Enum.ordinal()"
"android.view.inputmethod.InputMethodSubtype.getExtraValueHashMap()","java.lang.String.split(java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.getExtraValueHashMap()","java.util.HashMap.put(java.lang.String, java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.getExtraValueHashMap()","java.util.HashMap.put(java.lang.String, null)"
"android.view.inputmethod.InputMethodSubtype.sort(Context, int, InputMethodInfo, List)","android.view.inputmethod.InputMethodInfo.getSubtypeCount()"
"android.view.inputmethod.InputMethodSubtype.sort(Context, int, InputMethodInfo, List)","android.view.inputmethod.InputMethodInfo.getSubtypeAt(int)"
"android.view.inputmethod.InputMethodSubtype.sort(Context, int, InputMethodInfo, List)","java.util.ArrayList.add(android.view.inputmethod.InputMethodSubtype)"
"android.view.inputmethod.InputMethodSubtype.sort(Context, int, InputMethodInfo, List)","java.util.HashSet.remove(android.view.inputmethod.InputMethodSubtype)"
"android.view.inputmethod.InputMethodSubtype.sort(Context, int, InputMethodInfo, List)","java.util.HashSet.contains(android.view.inputmethod.InputMethodSubtype)"
"android.view.inputmethod.InputMethodSubtype.hashCodeInternal(String, String, String, boolean, boolean, boolean)","java.util.Arrays.hashCode(java.lang.Object[])"
"android.view.inputmethod.InputMethodSubtype.containsExtraValueKey(String)","android.view.inputmethod.InputMethodSubtype.getExtraValueHashMap()"
"android.view.inputmethod.InputMethodSubtype.containsExtraValueKey(String)","java.util.HashMap.containsKey(java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.getDisplayName(Context, String, ApplicationInfo)","java.lang.String.format(java.lang.String, java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.getDisplayName(Context, String, ApplicationInfo)","android.view.inputmethod.InputMethodSubtype.constructLocaleFromString(java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.getDisplayName(Context, String, ApplicationInfo)","android.content.Context.getPackageManager()"
"android.view.inputmethod.InputMethodSubtype.getDisplayName(Context, String, ApplicationInfo)","java.lang.CharSequence.toString()"
"android.view.inputmethod.InputMethodSubtype.getDisplayName(Context, String, ApplicationInfo)","android.content.pm.PackageManager.getText(java.lang.String, int, android.content.pm.ApplicationInfo)"
"android.view.inputmethod.InputMethodSubtype.getDisplayName(Context, String, ApplicationInfo)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.view.inputmethod.InputMethodSubtype.getDisplayName(Context, String, ApplicationInfo)","android.view.inputmethod.InputMethodSubtype.containsExtraValueKey(java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.getDisplayName(Context, String, ApplicationInfo)","java.util.Locale.getDisplayName()"
"android.view.inputmethod.InputMethodSubtype.getDisplayName(Context, String, ApplicationInfo)","android.view.inputmethod.InputMethodSubtype.getExtraValueOf(java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.getExtraValueOf(String)","java.util.HashMap.get(java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.getExtraValueOf(String)","android.view.inputmethod.InputMethodSubtype.getExtraValueHashMap()"
"android.view.inputmethod.InputMethodSubtype.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.view.inputmethod.InputMethodSubtype.equals(Object)","android.view.inputmethod.InputMethodSubtype.getExtraValue()"
"android.view.inputmethod.InputMethodSubtype.equals(Object)","android.view.inputmethod.InputMethodSubtype.getLocale()"
"android.view.inputmethod.InputMethodSubtype.equals(Object)","android.view.inputmethod.InputMethodSubtype.hashCode()"
"android.view.inputmethod.InputMethodSubtype.equals(Object)","android.view.inputmethod.InputMethodSubtype.getMode()"
"android.view.inputmethod.InputMethodSubtype.equals(Object)","android.view.inputmethod.InputMethodSubtype.isAuxiliary()"
"android.view.inputmethod.InputMethodSubtype.equals(Object)","java.lang.String.equals(java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.equals(Object)","android.view.inputmethod.InputMethodSubtype.overridesImplicitlyEnabledSubtype()"
"android.view.inputmethod.InputMethodSubtype.equals(Object)","android.view.inputmethod.InputMethodSubtype.isAsciiCapable()"
"android.view.inputmethod.InputMethodSubtype.constructLocaleFromString(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.view.inputmethod.InputMethodSubtype.constructLocaleFromString(String)","java.lang.String.split(java.lang.String, int)"
"android.bluetooth.BluetoothHealth.registerAppConfiguration(String, int, int, int, BluetoothHealthCallback)","android.bluetooth.BluetoothHealth.log(java.lang.String)"
"android.bluetooth.BluetoothHealth.registerAppConfiguration(String, int, int, int, BluetoothHealthCallback)","android.bluetooth.BluetoothHealth.checkAppParam(java.lang.String, int, int, android.bluetooth.BluetoothHealthCallback)"
"android.bluetooth.BluetoothHealth.registerAppConfiguration(String, int, int, int, BluetoothHealthCallback)","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.close()","android.bluetooth.BluetoothHealth.log(java.lang.String)"
"android.bluetooth.BluetoothHealth.close()","android.content.Context.unbindService(android.content.ServiceConnection)"
"android.bluetooth.BluetoothHealth.close()","android.bluetooth.BluetoothAdapter.getBluetoothManager()"
"android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.onServiceConnected(ComponentName, IBinder)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceConnected(int, android.bluetooth.BluetoothHealth)"
"android.bluetooth.BluetoothHealth.onHealthAppConfigurationStatusChange(BluetoothHealthAppConfiguration, int)","android.bluetooth.BluetoothHealthCallback.onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration, int)"
"android.bluetooth.BluetoothHealth.unregisterAppConfiguration(BluetoothHealthAppConfiguration)","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.connectChannelToSource(BluetoothDevice, BluetoothHealthAppConfiguration)","android.bluetooth.BluetoothHealth.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHealth.connectChannelToSource(BluetoothDevice, BluetoothHealthAppConfiguration)","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.isEnabled()","android.bluetooth.BluetoothHealth.log(java.lang.String)"
"android.bluetooth.BluetoothHealth.isEnabled()","android.bluetooth.BluetoothAdapter.getDefaultAdapter()"
"android.bluetooth.BluetoothHealth.isEnabled()","android.bluetooth.BluetoothAdapter.getState()"
"android.bluetooth.BluetoothHealth.doBind()","android.content.Context.getPackageManager()"
"android.bluetooth.BluetoothHealth.doBind()","android.content.Intent.setComponent(android.content.ComponentName)"
"android.bluetooth.BluetoothHealth.doBind()","android.os.Process.myUserHandle()"
"android.bluetooth.BluetoothHealth.doBind()","android.content.Intent.resolveSystemService(android.content.pm.PackageManager, int)"
"android.bluetooth.BluetoothHealth.doBind()","android.content.Context.bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)"
"android.bluetooth.BluetoothHealth.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothHealth.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHealth.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(String, int, BluetoothHealthCallback)","android.bluetooth.BluetoothHealth.log(java.lang.String)"
"android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(String, int, BluetoothHealthCallback)","android.bluetooth.BluetoothHealth.registerAppConfiguration(java.lang.String, int, int, int, android.bluetooth.BluetoothHealthCallback)"
"android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(String, int, BluetoothHealthCallback)","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.getMainChannelFd(BluetoothDevice, BluetoothHealthAppConfiguration)","android.bluetooth.BluetoothHealth.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHealth.getMainChannelFd(BluetoothDevice, BluetoothHealthAppConfiguration)","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.getConnectedDevices()","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.connectChannelToSink(BluetoothDevice, BluetoothHealthAppConfiguration, int)","android.bluetooth.BluetoothHealth.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHealth.connectChannelToSink(BluetoothDevice, BluetoothHealthAppConfiguration, int)","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.onServiceDisconnected(ComponentName)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceDisconnected(int)"
"android.bluetooth.BluetoothHealth.onHealthChannelStateChange(BluetoothHealthAppConfiguration, BluetoothDevice, int, int, ParcelFileDescriptor, int)","android.bluetooth.BluetoothHealthCallback.onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration, android.bluetooth.BluetoothDevice, int, int, android.os.ParcelFileDescriptor, int)"
"android.bluetooth.BluetoothHealth.disconnectChannel(BluetoothDevice, BluetoothHealthAppConfiguration, int)","android.bluetooth.BluetoothHealth.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHealth.disconnectChannel(BluetoothDevice, BluetoothHealthAppConfiguration, int)","android.bluetooth.BluetoothHealth.isEnabled()"
"android.bluetooth.BluetoothHealth.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothDevice.getAddress()"
"android.bluetooth.BluetoothHealth.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothAdapter.checkBluetoothAddress(java.lang.String)"
"android.hardware.hdmi.HdmiDeviceInfo.toString()","java.lang.StringBuffer.append(int)"
"android.hardware.hdmi.HdmiDeviceInfo.toString()","java.lang.StringBuffer.toString()"
"android.hardware.hdmi.HdmiDeviceInfo.toString()","java.lang.String.format(java.lang.String, int)"
"android.hardware.hdmi.HdmiDeviceInfo.toString()","java.lang.StringBuffer.append(java.lang.String)"
"android.hardware.hdmi.HdmiDeviceInfo.isSourceType()","android.hardware.hdmi.HdmiDeviceInfo.isMhlDevice()"
"android.hardware.hdmi.HdmiDeviceInfo.isSourceType()","android.hardware.hdmi.HdmiDeviceInfo.isCecDevice()"
"android.hardware.hdmi.HdmiDeviceInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.hardware.hdmi.HdmiDeviceInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.hdmi.HdmiDeviceInfo.equals(Object)","java.lang.String.equals(java.lang.String)"
"android.hardware.hdmi.HdmiDeviceInfo.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.hardware.hdmi.HdmiDeviceInfo.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.view.accessibility.AccessibilityManager.handleMessage(Message)","android.view.accessibility.AccessibilityManager.setStateLocked(int)"
"android.view.accessibility.AccessibilityManager.handleMessage(Message)","android.view.accessibility.AccessibilityManager.handleNotifyAccessibilityStateChanged()"
"android.view.accessibility.AccessibilityManager.handleMessage(Message)","android.view.accessibility.AccessibilityManager.handleNotifyHighTextContrastStateChanged()"
"android.view.accessibility.AccessibilityManager.handleMessage(Message)","android.view.accessibility.AccessibilityManager.handleNotifyTouchExplorationStateChanged()"
"android.view.accessibility.AccessibilityManager.getInstance(Context)","android.os.Binder.getCallingUid()"
"android.view.accessibility.AccessibilityManager.getInstance(Context)","android.os.ServiceManager.getService(java.lang.String)"
"android.view.accessibility.AccessibilityManager.getInstance(Context)","android.os.UserHandle.myUserId()"
"android.view.accessibility.AccessibilityManager.removeTouchExplorationStateChangeListener(TouchExplorationStateChangeListener)","java.util.concurrent.CopyOnWriteArrayList.remove(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener)"
"android.view.accessibility.AccessibilityManager.removeAccessibilityInteractionConnection(IWindow)","android.view.accessibility.AccessibilityManager.getServiceLocked()"
"android.view.accessibility.AccessibilityManager.removeHighTextContrastStateChangeListener(HighTextContrastChangeListener)","java.util.concurrent.CopyOnWriteArrayList.remove(android.view.accessibility.AccessibilityManager.HighTextContrastChangeListener)"
"android.view.accessibility.AccessibilityManager.setStateLocked(int)","android.os.Handler.sendEmptyMessage(int)"
"android.view.accessibility.AccessibilityManager.interrupt()","android.view.accessibility.AccessibilityManager.getServiceLocked()"
"android.view.accessibility.AccessibilityManager.getServiceLocked()","android.view.accessibility.AccessibilityManager.tryConnectToServiceLocked()"
"android.view.accessibility.AccessibilityManager.isEnabled()","android.view.accessibility.AccessibilityManager.getServiceLocked()"
"android.view.accessibility.AccessibilityManager.removeAccessibilityStateChangeListener(AccessibilityStateChangeListener)","java.util.concurrent.CopyOnWriteArrayList.remove(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener)"
"android.view.accessibility.AccessibilityManager.addTouchExplorationStateChangeListener(TouchExplorationStateChangeListener)","java.util.concurrent.CopyOnWriteArrayList.add(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener)"
"android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.recycle()"
"android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(AccessibilityEvent)","android.os.Binder.clearCallingIdentity()"
"android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(AccessibilityEvent)","android.os.Binder.restoreCallingIdentity(long)"
"android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(AccessibilityEvent)","android.os.SystemClock.uptimeMillis()"
"android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.setEventTime(long)"
"android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityManager.getServiceLocked()"
"android.view.accessibility.AccessibilityManager.addHighTextContrastStateChangeListener(HighTextContrastChangeListener)","java.util.concurrent.CopyOnWriteArrayList.add(android.view.accessibility.AccessibilityManager.HighTextContrastChangeListener)"
"android.view.accessibility.AccessibilityManager.getEnabledAccessibilityServiceList(int)","java.util.Collections.unmodifiableList(java.util.List<android.accessibilityservice.AccessibilityServiceInfo>)"
"android.view.accessibility.AccessibilityManager.getEnabledAccessibilityServiceList(int)","java.util.Collections.emptyList()"
"android.view.accessibility.AccessibilityManager.getEnabledAccessibilityServiceList(int)","android.view.accessibility.AccessibilityManager.getServiceLocked()"
"android.view.accessibility.AccessibilityManager.handleNotifyAccessibilityStateChanged()","android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener.onAccessibilityStateChanged(boolean)"
"android.view.accessibility.AccessibilityManager.addAccessibilityStateChangeListener(AccessibilityStateChangeListener)","java.util.concurrent.CopyOnWriteArrayList.add(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener)"
"android.view.accessibility.AccessibilityManager.addAccessibilityInteractionConnection(IWindow, IAccessibilityInteractionConnection)","android.view.accessibility.AccessibilityManager.getServiceLocked()"
"android.view.accessibility.AccessibilityManager.handleNotifyTouchExplorationStateChanged()","android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener.onTouchExplorationStateChanged(boolean)"
"android.view.accessibility.AccessibilityManager.isHighTextContrastEnabled()","android.view.accessibility.AccessibilityManager.getServiceLocked()"
"android.view.accessibility.AccessibilityManager.getAccessibilityServiceList()","android.view.accessibility.AccessibilityManager.getInstalledAccessibilityServiceList()"
"android.view.accessibility.AccessibilityManager.getAccessibilityServiceList()","java.util.Collections.unmodifiableList(java.util.List<android.content.pm.ServiceInfo>)"
"android.view.accessibility.AccessibilityManager.getAccessibilityServiceList()","java.util.List.size()"
"android.view.accessibility.AccessibilityManager.getAccessibilityServiceList()","java.util.List.add(android.content.pm.ServiceInfo)"
"android.view.accessibility.AccessibilityManager.getAccessibilityServiceList()","android.accessibilityservice.AccessibilityServiceInfo.getResolveInfo()"
"android.view.accessibility.AccessibilityManager.getAccessibilityServiceList()","java.util.List.get(int)"
"android.view.accessibility.AccessibilityManager.getInstalledAccessibilityServiceList()","java.util.Collections.unmodifiableList(java.util.List<android.accessibilityservice.AccessibilityServiceInfo>)"
"android.view.accessibility.AccessibilityManager.getInstalledAccessibilityServiceList()","java.util.Collections.emptyList()"
"android.view.accessibility.AccessibilityManager.getInstalledAccessibilityServiceList()","android.view.accessibility.AccessibilityManager.getServiceLocked()"
"android.view.accessibility.AccessibilityManager.isTouchExplorationEnabled()","android.view.accessibility.AccessibilityManager.getServiceLocked()"
"android.view.accessibility.AccessibilityManager.handleNotifyHighTextContrastStateChanged()","android.view.accessibility.AccessibilityManager.HighTextContrastChangeListener.onHighTextContrastStateChanged(boolean)"
"android.view.accessibility.AccessibilityManager.tryConnectToServiceLocked()","android.view.accessibility.AccessibilityManager.setStateLocked(int)"
"android.view.accessibility.AccessibilityManager.tryConnectToServiceLocked()","android.os.ServiceManager.getService(java.lang.String)"
"android.hardware.camera2.utils.SizeAreaComparator.compare(Size, Size)","android.util.Size.equals(android.util.Size)"
"android.hardware.camera2.utils.SizeAreaComparator.compare(Size, Size)","com.android.internal.util.Preconditions.checkNotNull(android.util.Size, java.lang.String)"
"android.hardware.camera2.utils.SizeAreaComparator.compare(Size, Size)","android.util.Size.getWidth()"
"android.hardware.camera2.utils.SizeAreaComparator.compare(Size, Size)","android.util.Size.getHeight()"
"android.hardware.camera2.utils.SizeAreaComparator.findLargestByArea(List)","java.util.Collections.max(java.util.List<android.util.Size>, android.hardware.camera2.utils.SizeAreaComparator)"
"android.hardware.camera2.utils.SizeAreaComparator.findLargestByArea(List)","com.android.internal.util.Preconditions.checkNotNull(java.util.List<android.util.Size>, java.lang.String)"
"android.net.LocalSocketImpl.finalize()","android.net.LocalSocketImpl.close()"
"android.net.LocalSocketImpl.read(byte[])","android.net.LocalSocketImpl.SocketInputStream.read(byte[], int, int)"
"android.net.LocalSocketImpl.write(byte[], int, int)","android.net.LocalSocketImpl.writeba_native(byte[], int, int, java.io.FileDescriptor)"
"android.net.LocalSocketImpl.shutdownInput()","android.net.LocalSocketImpl.shutdown(java.io.FileDescriptor, boolean)"
"android.net.LocalSocketImpl.write(int)","android.net.LocalSocketImpl.write_native(int, java.io.FileDescriptor)"
"android.net.LocalSocketImpl.available()","java.io.InputStream.available()"
"android.net.LocalSocketImpl.available()","android.net.LocalSocketImpl.getInputStream()"
"android.net.LocalSocketImpl.toString()","java.lang.Object.toString()"
"android.net.LocalSocketImpl.connect(LocalSocketAddress, int)","android.net.LocalSocketAddress.getNamespace()"
"android.net.LocalSocketImpl.connect(LocalSocketAddress, int)","android.net.LocalSocketAddress.getName()"
"android.net.LocalSocketImpl.connect(LocalSocketAddress, int)","android.net.LocalSocketImpl.connectLocal(java.io.FileDescriptor, java.lang.String, int)"
"android.net.LocalSocketImpl.connect(LocalSocketAddress, int)","android.net.LocalSocketAddress.Namespace.getId()"
"android.net.LocalSocketImpl.listen(int)","android.net.LocalSocketImpl.listen_native(java.io.FileDescriptor, int)"
"android.net.LocalSocketImpl.read()","android.net.LocalSocketImpl.read_native(java.io.FileDescriptor)"
"android.net.LocalSocketImpl.accept(LocalSocketImpl)","android.net.LocalSocketImpl.accept(java.io.FileDescriptor, android.net.LocalSocketImpl)"
"android.net.LocalSocketImpl.getPeerCredentials()","android.net.LocalSocketImpl.getPeerCredentials_native(java.io.FileDescriptor)"
"android.net.LocalSocketImpl.getOption(int)","android.net.LocalSocketImpl.getOption_native(java.io.FileDescriptor, int)"
"android.net.LocalSocketImpl.flush()","android.net.LocalSocketImpl.pending_native(java.io.FileDescriptor)"
"android.net.LocalSocketImpl.flush()","java.lang.Thread.sleep(int)"
"android.net.LocalSocketImpl.read(byte[], int, int)","android.net.LocalSocketImpl.readba_native(byte[], int, int, java.io.FileDescriptor)"
"android.net.LocalSocketImpl.write(byte[])","android.net.LocalSocketImpl.SocketOutputStream.write(byte[], int, int)"
"android.net.LocalSocketImpl.bind(LocalSocketAddress)","android.net.LocalSocketImpl.bindLocal(java.io.FileDescriptor, java.lang.String, int)"
"android.net.LocalSocketImpl.bind(LocalSocketAddress)","android.net.LocalSocketAddress.getNamespace()"
"android.net.LocalSocketImpl.bind(LocalSocketAddress)","android.net.LocalSocketAddress.getName()"
"android.net.LocalSocketImpl.bind(LocalSocketAddress)","android.net.LocalSocketAddress.Namespace.getId()"
"android.net.LocalSocketImpl.setOption(int, Object)","android.net.LocalSocketImpl.setOption_native(java.io.FileDescriptor, int, int, int)"
"android.net.LocalSocketImpl.shutdownOutput()","android.net.LocalSocketImpl.shutdown(java.io.FileDescriptor, boolean)"
"android.nfc.tech.NfcV.get(Tag)","android.nfc.Tag.hasTech(int)"
"android.nfc.tech.NfcV.transceive(byte[])","android.nfc.tech.BasicTagTechnology.transceive(byte[], boolean)"
"android.nfc.tech.NfcV.getMaxTransceiveLength()","android.nfc.tech.BasicTagTechnology.getMaxTransceiveLengthInternal()"
"android.util.Singleton.get()","android.util.Singleton.create()"
"android.content.SyncContext.setStatusText(String)","android.content.SyncContext.updateHeartbeat()"
"android.content.SyncContext.updateHeartbeat()","android.os.SystemClock.elapsedRealtime()"
"android.preference.SeekBarPreference.onRestoreInstanceState(Parcelable)","android.view.AbsSavedState.getSuperState()"
"android.preference.SeekBarPreference.onRestoreInstanceState(Parcelable)","java.lang.Object.equals(java.lang.Class<android.preference.SeekBarPreference.SavedState>)"
"android.preference.SeekBarPreference.onRestoreInstanceState(Parcelable)","java.lang.Object.getClass()"
"android.preference.SeekBarPreference.onRestoreInstanceState(Parcelable)","android.preference.Preference.onRestoreInstanceState(android.os.Parcelable)"
"android.preference.SeekBarPreference.onBindView(View)","android.preference.Preference.onBindView(android.view.View)"
"android.preference.SeekBarPreference.onKey(View, int, KeyEvent)","android.view.KeyEvent.getAction()"
"android.preference.SeekBarPreference.onGetDefaultValue(TypedArray, int)","android.content.res.TypedArray.getInt(int, int)"
"android.preference.SeekBarPreference.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"android.preference.SeekBarPreference.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.preference.SeekBarPreference.onSaveInstanceState()","android.preference.Preference.onSaveInstanceState()"
"com.android.internal.widget.PreferenceImageView.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"com.android.internal.widget.PreferenceImageView.onMeasure(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"com.android.internal.widget.PreferenceImageView.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.accounts.AuthenticatorDescription.equals(Object)","java.lang.String.equals(java.lang.String)"
"android.accounts.AuthenticatorDescription.writeToParcel(Parcel, int)","android.os.Parcel.writeByte(byte)"
"android.accounts.AuthenticatorDescription.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.accounts.AuthenticatorDescription.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.accounts.AuthenticatorDescription.hashCode()","java.lang.String.hashCode()"
"android.widget.LinearLayout.debug(String)","android.view.ViewGroup.LayoutParams.sizeToString(int)"
"android.widget.LinearLayout.layoutVertical(int, int, int, int)","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.widget.LinearLayout.layoutVertical(int, int, int, int)","android.view.View.getVisibility()"
"android.widget.LinearLayout.layoutVertical(int, int, int, int)","android.view.View.getMeasuredWidth()"
"android.widget.LinearLayout.layoutVertical(int, int, int, int)","android.view.View.getLayoutParams()"
"android.widget.LinearLayout.layoutVertical(int, int, int, int)","android.view.View.getMeasuredHeight()"
"android.widget.LinearLayout.layoutHorizontal(int, int, int, int)","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.widget.LinearLayout.layoutHorizontal(int, int, int, int)","android.view.View.getVisibility()"
"android.widget.LinearLayout.layoutHorizontal(int, int, int, int)","android.view.View.getMeasuredWidth()"
"android.widget.LinearLayout.layoutHorizontal(int, int, int, int)","android.view.View.getLayoutParams()"
"android.widget.LinearLayout.layoutHorizontal(int, int, int, int)","android.view.View.getBaseline()"
"android.widget.LinearLayout.layoutHorizontal(int, int, int, int)","android.view.View.getMeasuredHeight()"
"android.widget.LinearLayout.getBaseline()","android.view.View.getLayoutParams()"
"android.widget.LinearLayout.getBaseline()","android.view.View.getBaseline()"
"android.widget.LinearLayout.setChildFrame(View, int, int, int, int)","android.view.View.layout(int, int, int, int)"
"android.widget.LinearLayout.setWeightSum(float)","java.lang.Math.max(float, float)"
"android.widget.LinearLayout.measureHorizontal(int, int)","android.view.View.getVisibility()"
"android.widget.LinearLayout.measureHorizontal(int, int)","android.view.View.getLayoutParams()"
"android.widget.LinearLayout.measureHorizontal(int, int)","android.view.View.getMeasuredWidth()"
"android.widget.LinearLayout.measureHorizontal(int, int)","android.view.View.getBaseline()"
"android.widget.LinearLayout.measureHorizontal(int, int)","android.view.View.getMeasuredHeight()"
"android.widget.LinearLayout.measureHorizontal(int, int)","android.view.View.measure(int, int)"
"android.widget.LinearLayout.measureHorizontal(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.LinearLayout.measureHorizontal(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.LinearLayout.measureHorizontal(int, int)","java.lang.Math.max(int, int)"
"android.widget.LinearLayout.drawDividersVertical(Canvas)","android.view.View.getBottom()"
"android.widget.LinearLayout.drawDividersVertical(Canvas)","android.view.View.getVisibility()"
"android.widget.LinearLayout.drawDividersVertical(Canvas)","android.view.View.getLayoutParams()"
"android.widget.LinearLayout.drawDividersVertical(Canvas)","android.view.View.getTop()"
"android.widget.LinearLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.LinearLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.LinearLayout.drawDividersHorizontal(Canvas)","android.view.View.getLeft()"
"android.widget.LinearLayout.drawDividersHorizontal(Canvas)","android.view.View.getVisibility()"
"android.widget.LinearLayout.drawDividersHorizontal(Canvas)","android.view.View.getLayoutParams()"
"android.widget.LinearLayout.drawDividersHorizontal(Canvas)","android.view.View.getRight()"
"android.widget.LinearLayout.measureVertical(int, int)","android.view.View.getVisibility()"
"android.widget.LinearLayout.measureVertical(int, int)","android.view.View.getLayoutParams()"
"android.widget.LinearLayout.measureVertical(int, int)","android.view.View.getMeasuredWidth()"
"android.widget.LinearLayout.measureVertical(int, int)","android.view.View.getMeasuredHeight()"
"android.widget.LinearLayout.measureVertical(int, int)","android.view.View.measure(int, int)"
"android.widget.LinearLayout.measureVertical(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.LinearLayout.measureVertical(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.LinearLayout.measureVertical(int, int)","java.lang.Math.max(int, int)"
"android.widget.LinearLayout.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.LinearLayout.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.LinearLayout.forceUniformWidth(int, int)","android.view.View.getVisibility()"
"android.widget.LinearLayout.forceUniformWidth(int, int)","android.view.View.getLayoutParams()"
"android.widget.LinearLayout.forceUniformWidth(int, int)","android.view.View.getMeasuredHeight()"
"android.widget.LinearLayout.forceUniformHeight(int, int)","android.view.View.getVisibility()"
"android.widget.LinearLayout.forceUniformHeight(int, int)","android.view.View.getLayoutParams()"
"android.widget.LinearLayout.forceUniformHeight(int, int)","android.view.View.getMeasuredWidth()"
"android.content.pm.VerifierDeviceIdentity.generate(Random)","java.util.Random.nextLong()"
"android.content.pm.VerifierDeviceIdentity.generate()","android.content.pm.VerifierDeviceIdentity.generate(java.security.SecureRandom)"
"android.content.pm.VerifierDeviceIdentity.parse(String)","android.content.pm.VerifierDeviceIdentity.decodeBase32(byte[])"
"android.content.pm.VerifierDeviceIdentity.parse(String)","java.lang.String.getBytes(java.lang.String)"
"android.content.pm.VerifierDeviceIdentity.encodeBase32(long)","java.lang.String.valueOf(char[])"
"android.content.pm.VerifierDeviceIdentity.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.app.admin.DeviceAdminInfo.loadLabel(PackageManager)","android.content.pm.ResolveInfo.loadLabel(android.content.pm.PackageManager)"
"android.app.admin.DeviceAdminInfo.loadIcon(PackageManager)","android.content.pm.ResolveInfo.loadIcon(android.content.pm.PackageManager)"
"android.app.admin.DeviceAdminInfo.getUsedPolicies()","java.util.ArrayList.size()"
"android.app.admin.DeviceAdminInfo.getUsedPolicies()","java.util.ArrayList.add(android.app.admin.DeviceAdminInfo.PolicyInfo)"
"android.app.admin.DeviceAdminInfo.getUsedPolicies()","android.app.admin.DeviceAdminInfo.usesPolicy(int)"
"android.app.admin.DeviceAdminInfo.getUsedPolicies()","java.util.ArrayList.get(int)"
"android.app.admin.DeviceAdminInfo.writeToParcel(Parcel, int)","android.content.pm.ResolveInfo.writeToParcel(android.os.Parcel, int)"
"android.app.admin.DeviceAdminInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.app.admin.DeviceAdminInfo.dump(Printer, String)","android.util.Printer.println(java.lang.String)"
"android.app.admin.DeviceAdminInfo.dump(Printer, String)","android.content.pm.ResolveInfo.dump(android.util.Printer, java.lang.String)"
"android.app.admin.DeviceAdminInfo.getTagForPolicy(int)","android.util.SparseArray.get(int)"
"android.app.admin.DeviceAdminInfo.loadDescription(PackageManager)","android.content.pm.PackageManager.getText(java.lang.String, int, android.content.pm.ApplicationInfo)"
"android.nfc.tech.Ndef.canMakeReadOnly()","android.nfc.Tag.getTagService()"
"android.nfc.tech.Ndef.makeReadOnly()","android.nfc.tech.BasicTagTechnology.checkConnected()"
"android.nfc.tech.Ndef.makeReadOnly()","android.nfc.Tag.getTagService()"
"android.nfc.tech.Ndef.getNdefMessage()","android.nfc.Tag.getServiceHandle()"
"android.nfc.tech.Ndef.getNdefMessage()","android.nfc.tech.BasicTagTechnology.checkConnected()"
"android.nfc.tech.Ndef.getNdefMessage()","android.nfc.Tag.getTagService()"
"android.nfc.tech.Ndef.get(Tag)","android.nfc.Tag.hasTech(int)"
"android.nfc.tech.Ndef.writeNdefMessage(NdefMessage)","android.nfc.Tag.getServiceHandle()"
"android.nfc.tech.Ndef.writeNdefMessage(NdefMessage)","android.nfc.tech.BasicTagTechnology.checkConnected()"
"android.nfc.tech.Ndef.writeNdefMessage(NdefMessage)","android.nfc.Tag.getTagService()"
"android.view.GestureDetector.isConsideredDoubleTap(MotionEvent, MotionEvent, MotionEvent)","android.view.MotionEvent.getY()"
"android.view.GestureDetector.isConsideredDoubleTap(MotionEvent, MotionEvent, MotionEvent)","android.view.MotionEvent.getEventTime()"
"android.view.GestureDetector.isConsideredDoubleTap(MotionEvent, MotionEvent, MotionEvent)","android.view.MotionEvent.getX()"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.getDoubleTapSlop()"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.getMinimumFlingVelocity()"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.getScaledTouchSlop()"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.get(android.content.Context)"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.getScaledDoubleTapTouchSlop()"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.getScaledDoubleTapSlop()"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.getScaledMinimumFlingVelocity()"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.getTouchSlop()"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.getMaximumFlingVelocity()"
"android.view.GestureDetector.init(Context)","android.view.ViewConfiguration.getScaledMaximumFlingVelocity()"
"android.view.GestureDetector.cancel()","android.view.VelocityTracker.recycle()"
"android.view.GestureDetector.cancel()","android.os.Handler.removeMessages(int)"
"android.view.GestureDetector.dispatchLongPress()","android.view.GestureDetector.OnGestureListener.onLongPress(android.view.MotionEvent)"
"android.view.GestureDetector.dispatchLongPress()","android.os.Handler.removeMessages(int)"
"android.view.GestureDetector.handleMessage(Message)","android.view.GestureDetector.OnGestureListener.onShowPress(android.view.MotionEvent)"
"android.view.GestureDetector.handleMessage(Message)","android.view.GestureDetector.dispatchLongPress()"
"android.view.GestureDetector.handleMessage(Message)","android.view.GestureDetector.OnDoubleTapListener.onSingleTapConfirmed(android.view.MotionEvent)"
"android.view.GestureDetector.cancelTaps()","android.os.Handler.removeMessages(int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.OnDoubleTapListener.onDoubleTapEvent(android.view.MotionEvent)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.MotionEvent.getX(int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.cancelTaps()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.os.Handler.removeMessages(int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.MotionEvent.obtain(android.view.MotionEvent)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.MotionEvent.getActionIndex()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.os.Handler.sendEmptyMessageDelayed(int, int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.OnGestureListener.onScroll(android.view.MotionEvent, android.view.MotionEvent, float, float)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.cancel()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.isConsideredDoubleTap(android.view.MotionEvent, android.view.MotionEvent, android.view.MotionEvent)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.OnDoubleTapListener.onSingleTapConfirmed(android.view.MotionEvent)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.OnGestureListener.onFling(android.view.MotionEvent, android.view.MotionEvent, float, float)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.os.Handler.hasMessages(int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.MotionEvent.recycle()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","java.lang.Math.abs(float)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.InputEventConsistencyVerifier.onTouchEvent(android.view.MotionEvent, int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.MotionEvent.getY(int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.VelocityTracker.obtain()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.VelocityTracker.getYVelocity(int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.VelocityTracker.getXVelocity(int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.VelocityTracker.recycle()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.MotionEvent.getPointerCount()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.OnGestureListener.onSingleTapUp(android.view.MotionEvent)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.VelocityTracker.clear()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.OnGestureListener.onDown(android.view.MotionEvent)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.InputEventConsistencyVerifier.onUnhandledEvent(android.view.MotionEvent, int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.VelocityTracker.computeCurrentVelocity(int, int)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.os.Handler.sendEmptyMessageAtTime(int, long)"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.MotionEvent.getDownTime()"
"android.view.GestureDetector.onTouchEvent(MotionEvent)","android.view.GestureDetector.OnDoubleTapListener.onDoubleTap(android.view.MotionEvent)"
"android.text.format.Formatter.formatIpAddress(int)","android.net.NetworkUtils.intToInetAddress(int)"
"android.text.format.Formatter.formatIpAddress(int)","java.net.InetAddress.getHostAddress()"
"android.text.format.Formatter.formatFileSize(Context, long, boolean)","java.lang.String.format(java.lang.String, float)"
"android.text.format.Formatter.formatShortFileSize(Context, long)","android.text.format.Formatter.formatFileSize(android.content.Context, long, boolean)"
"android.text.format.Formatter.formatFileSize(Context, long)","android.text.format.Formatter.formatFileSize(android.content.Context, long, boolean)"
"android.text.format.Formatter.formatShortElapsedTimeRoundingUpToMinutes(Context, long)","android.text.format.Formatter.formatShortElapsedTime(android.content.Context, long)"
"android.provider.SearchRecentSuggestions.waitForSave()","java.util.concurrent.Semaphore.availablePermits()"
"android.provider.SearchRecentSuggestions.waitForSave()","java.util.concurrent.Semaphore.acquireUninterruptibly()"
"android.provider.SearchRecentSuggestions.saveRecentQueryBlocking(String, String)","android.provider.SearchRecentSuggestions.truncateHistory(android.content.ContentResolver, int)"
"android.provider.SearchRecentSuggestions.saveRecentQueryBlocking(String, String)","android.content.ContentValues.put(java.lang.String, long)"
"android.provider.SearchRecentSuggestions.saveRecentQueryBlocking(String, String)","android.content.Context.getContentResolver()"
"android.provider.SearchRecentSuggestions.saveRecentQueryBlocking(String, String)","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.provider.SearchRecentSuggestions.saveRecentQueryBlocking(String, String)","java.lang.System.currentTimeMillis()"
"android.provider.SearchRecentSuggestions.saveRecentQueryBlocking(String, String)","android.content.ContentResolver.insert(android.net.Uri, android.content.ContentValues)"
"android.provider.SearchRecentSuggestions.saveRecentQuery(String, String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.provider.SearchRecentSuggestions.saveRecentQuery(String, String)","java.lang.Thread.start()"
"android.provider.SearchRecentSuggestions.saveRecentQuery(String, String)","java.util.concurrent.Semaphore.release()"
"android.provider.SearchRecentSuggestions.saveRecentQuery(String, String)","android.provider.SearchRecentSuggestions.saveRecentQueryBlocking(java.lang.String, java.lang.String)"
"android.provider.SearchRecentSuggestions.truncateHistory(ContentResolver, int)","java.lang.String.valueOf(int)"
"android.provider.SearchRecentSuggestions.truncateHistory(ContentResolver, int)","android.content.ContentResolver.delete(android.net.Uri, java.lang.String, null)"
"android.provider.SearchRecentSuggestions.clearHistory()","android.provider.SearchRecentSuggestions.truncateHistory(android.content.ContentResolver, int)"
"android.provider.SearchRecentSuggestions.clearHistory()","android.content.Context.getContentResolver()"
"android.util.ArrayMap.clear()","android.util.ArrayMap.freeArrays(int[], java.lang.Object[], int)"
"android.util.ArrayMap.indexOfValue(Object)","java.lang.Object.equals(java.lang.Object)"
"android.util.ArrayMap.values()","android.util.ArrayMap.getCollection()"
"android.util.ArrayMap.values()","android.util.MapCollections.getValues()"
"android.util.ArrayMap.containsAll(Collection)","android.util.MapCollections.containsAllHelper(android.util.ArrayMap<K, V>, java.util.Collection<?>)"
"android.util.ArrayMap.append(K, V)","java.lang.Throwable.fillInStackTrace()"
"android.util.ArrayMap.append(K, V)","android.util.ArrayMap.put(K, V)"
"android.util.ArrayMap.append(K, V)","java.lang.Object.hashCode()"
"android.util.ArrayMap.containsValue(Object)","android.util.ArrayMap.indexOfValue(java.lang.Object)"
"android.util.ArrayMap.ensureCapacity(int)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.util.ArrayMap.ensureCapacity(int)","android.util.ArrayMap.allocArrays(int)"
"android.util.ArrayMap.ensureCapacity(int)","android.util.ArrayMap.freeArrays(int[], java.lang.Object[], int)"
"android.util.ArrayMap.ensureCapacity(int)","java.lang.System.arraycopy(java.lang.Object[], int, java.lang.Object[], int, int)"
"android.util.ArrayMap.removeAll(Collection)","android.util.MapCollections.removeAllHelper(android.util.ArrayMap<K, V>, java.util.Collection<?>)"
"android.util.ArrayMap.keySet()","android.util.ArrayMap.getCollection()"
"android.util.ArrayMap.keySet()","android.util.MapCollections.getKeySet()"
"android.util.ArrayMap.indexOfKey(Object)","android.util.ArrayMap.indexOf(java.lang.Object, int)"
"android.util.ArrayMap.indexOfKey(Object)","java.lang.Object.hashCode()"
"android.util.ArrayMap.indexOfKey(Object)","android.util.ArrayMap.indexOfNull()"
"android.util.ArrayMap.putAll(ArrayMap)","android.util.ArrayMap.keyAt(int)"
"android.util.ArrayMap.putAll(ArrayMap)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.util.ArrayMap.putAll(ArrayMap)","android.util.ArrayMap.ensureCapacity(int)"
"android.util.ArrayMap.putAll(ArrayMap)","android.util.ArrayMap.put(K, V)"
"android.util.ArrayMap.putAll(ArrayMap)","android.util.ArrayMap.valueAt(int)"
"android.util.ArrayMap.putAll(ArrayMap)","java.lang.System.arraycopy(java.lang.Object[], int, java.lang.Object[], int, int)"
"android.util.ArrayMap.putAll(Map)","java.util.Map.size()"
"android.util.ArrayMap.putAll(Map)","java.util.Map.Entry.getValue()"
"android.util.ArrayMap.putAll(Map)","java.util.Map.entrySet()"
"android.util.ArrayMap.putAll(Map)","android.util.ArrayMap.ensureCapacity(int)"
"android.util.ArrayMap.putAll(Map)","android.util.ArrayMap.put(? extends K, ? extends V)"
"android.util.ArrayMap.putAll(Map)","java.util.Map.Entry.getKey()"
"android.util.ArrayMap.removeAt(int)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.util.ArrayMap.removeAt(int)","android.util.ArrayMap.allocArrays(int)"
"android.util.ArrayMap.removeAt(int)","android.util.ArrayMap.freeArrays(int[], java.lang.Object[], int)"
"android.util.ArrayMap.removeAt(int)","java.lang.System.arraycopy(java.lang.Object[], int, java.lang.Object[], int, int)"
"android.util.ArrayMap.indexOf(Object, int)","android.util.ContainerHelpers.binarySearch(int[], int, int)"
"android.util.ArrayMap.indexOf(Object, int)","java.lang.Object.equals(java.lang.Object)"
"android.util.ArrayMap.containsKey(Object)","android.util.ArrayMap.indexOfKey(java.lang.Object)"
"android.util.ArrayMap.equals(Object)","android.util.ArrayMap.keyAt(int)"
"android.util.ArrayMap.equals(Object)","java.util.Map.size()"
"android.util.ArrayMap.equals(Object)","java.util.Map.get(K)"
"android.util.ArrayMap.equals(Object)","java.lang.Object.equals(java.lang.Object)"
"android.util.ArrayMap.equals(Object)","android.util.ArrayMap.valueAt(int)"
"android.util.ArrayMap.equals(Object)","android.util.ArrayMap.size()"
"android.util.ArrayMap.equals(Object)","java.util.Map.containsKey(K)"
"android.util.ArrayMap.indexOfNull()","android.util.ContainerHelpers.binarySearch(int[], int, int)"
"android.util.ArrayMap.toString()","android.util.ArrayMap.keyAt(int)"
"android.util.ArrayMap.toString()","java.lang.StringBuilder.append(java.lang.Object)"
"android.util.ArrayMap.toString()","android.util.ArrayMap.isEmpty()"
"android.util.ArrayMap.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.util.ArrayMap.toString()","android.util.ArrayMap.valueAt(int)"
"android.util.ArrayMap.toString()","java.lang.StringBuilder.toString()"
"android.util.ArrayMap.toString()","java.lang.StringBuilder.append(char)"
"android.util.ArrayMap.hashCode()","java.lang.Object.hashCode()"
"android.util.ArrayMap.get(Object)","android.util.ArrayMap.indexOfKey(java.lang.Object)"
"android.util.ArrayMap.remove(Object)","android.util.ArrayMap.indexOfKey(java.lang.Object)"
"android.util.ArrayMap.remove(Object)","android.util.ArrayMap.removeAt(int)"
"android.util.ArrayMap.entrySet()","android.util.ArrayMap.getCollection()"
"android.util.ArrayMap.entrySet()","android.util.MapCollections.getEntrySet()"
"android.util.ArrayMap.validate()","java.lang.Object.equals(java.lang.Object)"
"android.util.ArrayMap.getCollection()","android.util.ArrayMap.indexOfKey(java.lang.Object)"
"android.util.ArrayMap.getCollection()","android.util.ArrayMap.put(K, V)"
"android.util.ArrayMap.getCollection()","android.util.ArrayMap.indexOfValue(java.lang.Object)"
"android.util.ArrayMap.getCollection()","android.util.ArrayMap.setValueAt(int, V)"
"android.util.ArrayMap.getCollection()","android.util.ArrayMap.removeAt(int)"
"android.util.ArrayMap.getCollection()","android.util.ArrayMap.clear()"
"android.util.ArrayMap.put(K, V)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.util.ArrayMap.put(K, V)","android.util.ArrayMap.allocArrays(int)"
"android.util.ArrayMap.put(K, V)","android.util.ArrayMap.indexOf(K, int)"
"android.util.ArrayMap.put(K, V)","android.util.ArrayMap.freeArrays(int[], java.lang.Object[], int)"
"android.util.ArrayMap.put(K, V)","java.lang.Object.hashCode()"
"android.util.ArrayMap.put(K, V)","android.util.ArrayMap.indexOfNull()"
"android.util.ArrayMap.put(K, V)","java.lang.System.arraycopy(java.lang.Object[], int, java.lang.Object[], int, int)"
"android.util.ArrayMap.retainAll(Collection)","android.util.MapCollections.retainAllHelper(android.util.ArrayMap<K, V>, java.util.Collection<?>)"
"android.content.res.AssetManager.skip(long)","android.content.res.AssetManager.seekAsset(long, int, int)"
"android.content.res.AssetManager.skip(long)","android.content.res.AssetManager.seekAsset(long, long, int)"
"android.content.res.AssetManager.getResourceBagText(int, int)","android.content.res.StringBlock.get(int)"
"android.content.res.AssetManager.getResourceBagText(int, int)","android.util.TypedValue.coerceToString()"
"android.content.res.AssetManager.getResourceBagText(int, int)","android.content.res.AssetManager.loadResourceBagValue(int, int, android.util.TypedValue, boolean)"
"android.content.res.AssetManager.getSystem()","android.content.res.AssetManager.ensureSystemAssets()"
"android.content.res.AssetManager.releaseTheme(long)","android.content.res.AssetManager.decRefsLocked(long)"
"android.content.res.AssetManager.releaseTheme(long)","android.content.res.AssetManager.deleteTheme(long)"
"android.content.res.AssetManager.finalize()","android.content.res.AssetManager.AssetInputStream.close()"
"android.content.res.AssetManager.createTheme()","android.content.res.AssetManager.newTheme()"
"android.content.res.AssetManager.createTheme()","android.content.res.AssetManager.incRefsLocked(long)"
"android.content.res.AssetManager.available()","android.content.res.AssetManager.getAssetRemainingLength(long)"
"android.content.res.AssetManager.openNonAsset(int, String)","android.content.res.AssetManager.openNonAsset(int, java.lang.String, int)"
"android.content.res.AssetManager.decRefsLocked(long)","java.util.HashMap.remove(long)"
"android.content.res.AssetManager.decRefsLocked(long)","android.content.res.AssetManager.destroy()"
"android.content.res.AssetManager.ensureSystemAssets()","android.content.res.AssetManager.makeStringBlocks(null)"
"android.content.res.AssetManager.openNonAsset(String, int)","android.content.res.AssetManager.openNonAsset(int, java.lang.String, int)"
"android.content.res.AssetManager.openXmlBlockAsset(String)","android.content.res.AssetManager.openXmlBlockAsset(int, java.lang.String)"
"android.content.res.AssetManager.reset()","android.content.res.AssetManager.seekAsset(long, long, int)"
"android.content.res.AssetManager.getResourceTextArray(int)","android.content.res.StringBlock.get(int)"
"android.content.res.AssetManager.getResourceTextArray(int)","android.content.res.AssetManager.getArrayStringInfo(int)"
"android.content.res.AssetManager.mark(int)","android.content.res.AssetManager.seekAsset(long, int, int)"
"android.content.res.AssetManager.openNonAssetFd(String)","android.content.res.AssetManager.openNonAssetFd(int, java.lang.String)"
"android.content.res.AssetManager.openXmlBlockAsset(int, String)","android.content.res.AssetManager.incRefsLocked(int)"
"android.content.res.AssetManager.openXmlBlockAsset(int, String)","android.content.res.AssetManager.openXmlAssetNative(int, java.lang.String)"
"android.content.res.AssetManager.openXmlBlockAsset(int, String)","java.lang.Object.hashCode()"
"android.content.res.AssetManager.openNonAssetFd(int, String)","android.content.res.AssetManager.openNonAssetFdNative(int, java.lang.String, long[])"
"android.content.res.AssetManager.getResourceValue(int, int, TypedValue, boolean)","android.content.res.StringBlock.get(int)"
"android.content.res.AssetManager.getResourceValue(int, int, TypedValue, boolean)","android.content.res.AssetManager.loadResourceValue(int, short, android.util.TypedValue, boolean)"
"android.content.res.AssetManager.getResourceText(int)","android.content.res.StringBlock.get(int)"
"android.content.res.AssetManager.getResourceText(int)","android.util.TypedValue.coerceToString()"
"android.content.res.AssetManager.getResourceText(int)","android.content.res.AssetManager.loadResourceValue(int, short, android.util.TypedValue, boolean)"
"android.content.res.AssetManager.openFd(String)","android.content.res.AssetManager.openAssetFd(java.lang.String, long[])"
"android.content.res.AssetManager.openXmlResourceParser(int, String)","android.content.res.XmlBlock.close()"
"android.content.res.AssetManager.openXmlResourceParser(int, String)","android.content.res.AssetManager.openXmlBlockAsset(int, java.lang.String)"
"android.content.res.AssetManager.openXmlResourceParser(int, String)","android.content.res.XmlBlock.newParser()"
"android.content.res.AssetManager.read()","android.content.res.AssetManager.readAssetChar(long)"
"android.content.res.AssetManager.getResourceStringArray(int)","android.content.res.AssetManager.getArrayStringResource(int)"
"android.content.res.AssetManager.read(byte[], int, int)","android.content.res.AssetManager.readAsset(long, byte[], int, int)"
"android.content.res.AssetManager.close()","android.content.res.AssetManager.decRefsLocked(int)"
"android.content.res.AssetManager.close()","java.lang.Object.hashCode()"
"android.content.res.AssetManager.close()","android.content.res.AssetManager.destroyAsset(long)"
"android.content.res.AssetManager.getPooledStringForCookie(int, int)","android.content.res.StringBlock.get(int)"
"android.content.res.AssetManager.getThemeValue(long, int, TypedValue, boolean)","android.content.res.AssetManager.loadThemeAttributeValue(long, int, android.util.TypedValue, boolean)"
"android.content.res.AssetManager.getThemeValue(long, int, TypedValue, boolean)","android.content.res.StringBlock.get(int)"
"android.content.res.AssetManager.getThemeValue(long, int, TypedValue, boolean)","android.content.res.AssetManager.ensureStringBlocks()"
"android.content.res.AssetManager.ensureStringBlocks()","android.content.res.AssetManager.makeStringBlocks(android.content.res.StringBlock[])"
"android.content.res.AssetManager.incRefsLocked(long)","java.util.HashMap.put(long, java.lang.RuntimeException)"
"android.content.res.AssetManager.incRefsLocked(long)","java.lang.Throwable.fillInStackTrace()"
"android.content.res.AssetManager.openXmlResourceParser(String)","android.content.res.AssetManager.openXmlResourceParser(int, java.lang.String)"
"android.content.res.AssetManager.open(String, int)","android.content.res.AssetManager.incRefsLocked(int)"
"android.content.res.AssetManager.open(String, int)","java.lang.Object.hashCode()"
"android.content.res.AssetManager.open(String, int)","android.content.res.AssetManager.openAsset(java.lang.String, int)"
"android.content.res.AssetManager.makeStringBlocks(StringBlock[])","android.content.res.AssetManager.getNativeStringBlock(int)"
"android.content.res.AssetManager.makeStringBlocks(StringBlock[])","android.content.res.AssetManager.getStringBlockCount()"
"android.content.res.AssetManager.read(byte[])","android.content.res.AssetManager.readAsset(long, byte[], int, int)"
"android.content.res.AssetManager.openNonAsset(int, String, int)","android.content.res.AssetManager.openNonAssetNative(int, java.lang.String, int)"
"android.content.res.AssetManager.openNonAsset(int, String, int)","android.content.res.AssetManager.incRefsLocked(int)"
"android.content.res.AssetManager.openNonAsset(int, String, int)","java.lang.Object.hashCode()"
"android.content.res.AssetManager.addAssetPath(String)","android.content.res.AssetManager.addAssetPathNative(java.lang.String)"
"android.content.res.AssetManager.addAssetPath(String)","android.content.res.AssetManager.makeStringBlocks(android.content.res.StringBlock[])"
"android.content.res.AssetManager.openNonAsset(String)","android.content.res.AssetManager.openNonAsset(int, java.lang.String, int)"
"android.content.res.AssetManager.open(String)","android.content.res.AssetManager.open(java.lang.String, int)"
"android.content.res.AssetManager.xmlBlockGone(int)","android.content.res.AssetManager.decRefsLocked(int)"
"android.content.res.AssetManager.addAssetPaths(String[])","android.content.res.AssetManager.addAssetPath(java.lang.String)"
"com.android.internal.os.InstallerConnection.patchoat(String, int, boolean, String, String)","com.android.internal.os.InstallerConnection.execute(java.lang.String)"
"com.android.internal.os.InstallerConnection.patchoat(String, int, boolean, String, String)","java.lang.StringBuilder.append(int)"
"com.android.internal.os.InstallerConnection.patchoat(String, int, boolean, String, String)","java.lang.StringBuilder.append(java.lang.String)"
"com.android.internal.os.InstallerConnection.patchoat(String, int, boolean, String, String)","java.lang.StringBuilder.toString()"
"com.android.internal.os.InstallerConnection.patchoat(String, int, boolean, String, String)","java.lang.StringBuilder.append(char)"
"com.android.internal.os.InstallerConnection.readFully(byte[], int)","com.android.internal.os.InstallerConnection.disconnect()"
"com.android.internal.os.InstallerConnection.readReply()","com.android.internal.os.InstallerConnection.readFully(byte[], int)"
"com.android.internal.os.InstallerConnection.readReply()","com.android.internal.os.InstallerConnection.disconnect()"
"com.android.internal.os.InstallerConnection.dexopt(String, int, boolean, String, String, boolean)","com.android.internal.os.InstallerConnection.execute(java.lang.String)"
"com.android.internal.os.InstallerConnection.dexopt(String, int, boolean, String, String, boolean)","java.lang.StringBuilder.append(int)"
"com.android.internal.os.InstallerConnection.dexopt(String, int, boolean, String, String, boolean)","java.lang.StringBuilder.append(java.lang.String)"
"com.android.internal.os.InstallerConnection.dexopt(String, int, boolean, String, String, boolean)","java.lang.StringBuilder.toString()"
"com.android.internal.os.InstallerConnection.dexopt(String, int, boolean, String, String, boolean)","java.lang.StringBuilder.append(char)"
"com.android.internal.os.InstallerConnection.execute(String)","com.android.internal.os.InstallerConnection.transact(java.lang.String)"
"com.android.internal.os.InstallerConnection.execute(String)","java.lang.Integer.parseInt(java.lang.String)"
"com.android.internal.os.InstallerConnection.patchoat(String, int, boolean, String)","com.android.internal.os.InstallerConnection.patchoat(java.lang.String, int, boolean, java.lang.String, java.lang.String)"
"com.android.internal.os.InstallerConnection.transact(String)","com.android.internal.os.InstallerConnection.writeCommand(java.lang.String)"
"com.android.internal.os.InstallerConnection.transact(String)","com.android.internal.os.InstallerConnection.connect()"
"com.android.internal.os.InstallerConnection.transact(String)","com.android.internal.os.InstallerConnection.readReply()"
"com.android.internal.os.InstallerConnection.dexopt(String, int, boolean, String)","com.android.internal.os.InstallerConnection.dexopt(java.lang.String, int, boolean, java.lang.String, java.lang.String, boolean)"
"com.android.internal.os.InstallerConnection.connect()","android.net.LocalSocket.connect(android.net.LocalSocketAddress)"
"com.android.internal.os.InstallerConnection.connect()","android.net.LocalSocket.getInputStream()"
"com.android.internal.os.InstallerConnection.connect()","com.android.internal.os.InstallerConnection.disconnect()"
"com.android.internal.os.InstallerConnection.connect()","android.net.LocalSocket.getOutputStream()"
"com.android.internal.os.InstallerConnection.writeCommand(String)","java.lang.String.getBytes()"
"com.android.internal.os.InstallerConnection.writeCommand(String)","java.io.OutputStream.write(byte[], int, int)"
"com.android.internal.os.InstallerConnection.writeCommand(String)","com.android.internal.os.InstallerConnection.disconnect()"
"android.nfc.BeamShareData.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.os.UserHandle, int)"
"android.nfc.BeamShareData.writeToParcel(Parcel, int)","android.os.Parcel.writeTypedArray(android.net.Uri[], int)"
"android.nfc.BeamShareData.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.nfc.BeamShareData.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.nfc.NdefMessage, int)"
"android.nfc.BeamShareData.createFromParcel(Parcel)","android.os.Parcel.readParcelable(java.lang.ClassLoader)"
"android.nfc.BeamShareData.createFromParcel(Parcel)","java.lang.Class.getClassLoader()"
"android.nfc.BeamShareData.createFromParcel(Parcel)","android.os.Parcel.readTypedArray(android.net.Uri[], android.os.Parcelable.Creator<android.net.Uri>)"
"android.nfc.BeamShareData.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.camera2.utils.TypeReference.getRawType()","android.hardware.camera2.utils.TypeReference.getRawType(java.lang.reflect.Type)"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","android.hardware.camera2.utils.TypeReference.toString(java.lang.reflect.Type[], java.lang.StringBuilder)"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","java.lang.reflect.GenericArrayType.getGenericComponentType()"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","java.lang.reflect.ParameterizedType.getActualTypeArguments()"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","java.lang.StringBuilder.append(java.lang.String)"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","android.hardware.camera2.utils.TypeReference.toString(java.lang.reflect.Type, java.lang.StringBuilder)"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","java.lang.Class.getName()"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","java.lang.reflect.ParameterizedType.getRawType()"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","java.lang.Object.toString()"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","java.lang.reflect.TypeVariable.getName()"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","android.hardware.camera2.utils.TypeReference.toString(java.lang.reflect.TypeVariable<java.lang.Class<?>>[], java.lang.StringBuilder)"
"android.hardware.camera2.utils.TypeReference.toString(Type, StringBuilder)","java.lang.Class.getTypeParameters()"
"android.hardware.camera2.utils.TypeReference.getArrayClass(Class)","java.lang.Object.getClass()"
"android.hardware.camera2.utils.TypeReference.getArrayClass(Class)","java.lang.reflect.Array.newInstance(java.lang.Class<?>, int)"
"android.hardware.camera2.utils.TypeReference.getComponentType()","android.hardware.camera2.utils.TypeReference.getComponentType(java.lang.reflect.Type)"
"android.hardware.camera2.utils.TypeReference.getComponentType()","android.hardware.camera2.utils.TypeReference.createSpecializedTypeReference(java.lang.reflect.Type)"
"android.hardware.camera2.utils.TypeReference.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.hardware.camera2.utils.TypeReference.toString()","android.hardware.camera2.utils.TypeReference.getType()"
"android.hardware.camera2.utils.TypeReference.toString()","android.hardware.camera2.utils.TypeReference.toString(java.lang.reflect.Type, java.lang.StringBuilder)"
"android.hardware.camera2.utils.TypeReference.toString()","java.lang.StringBuilder.toString()"
"android.hardware.camera2.utils.TypeReference.getComponentType(Type)","com.android.internal.util.Preconditions.checkNotNull(java.lang.reflect.Type, java.lang.String)"
"android.hardware.camera2.utils.TypeReference.getComponentType(Type)","java.lang.Class.getComponentType()"
"android.hardware.camera2.utils.TypeReference.getComponentType(Type)","java.lang.reflect.GenericArrayType.getGenericComponentType()"
"android.hardware.camera2.utils.TypeReference.toString(Type[], StringBuilder)","java.lang.StringBuilder.append(java.lang.String)"
"android.hardware.camera2.utils.TypeReference.toString(Type[], StringBuilder)","android.hardware.camera2.utils.TypeReference.toString(java.lang.reflect.Type, java.lang.StringBuilder)"
"android.hardware.camera2.utils.TypeReference.getRawType(Type[])","android.hardware.camera2.utils.TypeReference.getRawType(java.lang.reflect.Type)"
"android.hardware.camera2.utils.TypeReference.equals(Object)","java.lang.Object.equals(java.lang.reflect.Type)"
"android.hardware.camera2.utils.TypeReference.containsTypeVariable(Type[])","android.hardware.camera2.utils.TypeReference.containsTypeVariable(java.lang.reflect.Type)"
"android.hardware.camera2.utils.TypeReference.containsTypeVariable(Type)","android.hardware.camera2.utils.TypeReference.containsTypeVariable(java.lang.reflect.Type)"
"android.hardware.camera2.utils.TypeReference.containsTypeVariable(Type)","java.lang.reflect.WildcardType.getUpperBounds()"
"android.hardware.camera2.utils.TypeReference.containsTypeVariable(Type)","java.lang.reflect.ParameterizedType.getActualTypeArguments()"
"android.hardware.camera2.utils.TypeReference.containsTypeVariable(Type)","java.lang.Class.getDeclaringClass()"
"android.hardware.camera2.utils.TypeReference.containsTypeVariable(Type)","java.lang.reflect.WildcardType.getLowerBounds()"
"android.hardware.camera2.utils.TypeReference.containsTypeVariable(Type)","android.hardware.camera2.utils.TypeReference.containsTypeVariable(java.lang.Class<?>)"
"android.hardware.camera2.utils.TypeReference.containsTypeVariable(Type)","android.hardware.camera2.utils.TypeReference.containsTypeVariable(java.lang.reflect.Type[])"
"android.hardware.camera2.utils.TypeReference.containsTypeVariable(Type)","java.lang.Class.getTypeParameters()"
"android.hardware.camera2.utils.TypeReference.getRawType(Type)","android.hardware.camera2.utils.TypeReference.getRawType(java.lang.reflect.Type[])"
"android.hardware.camera2.utils.TypeReference.getRawType(Type)","android.hardware.camera2.utils.TypeReference.getArrayClass(java.lang.Class<?>)"
"android.hardware.camera2.utils.TypeReference.getRawType(Type)","java.lang.reflect.WildcardType.getUpperBounds()"
"android.hardware.camera2.utils.TypeReference.getRawType(Type)","java.lang.reflect.GenericArrayType.getGenericComponentType()"
"android.hardware.camera2.utils.TypeReference.getRawType(Type)","java.lang.reflect.ParameterizedType.getRawType()"
"android.hardware.camera2.utils.TypeReference.getRawType(Type)","android.hardware.camera2.utils.TypeReference.getRawType(java.lang.reflect.Type)"
"android.os.UserManager.getUserRestrictions()","android.os.UserManager.getUserRestrictions(android.os.UserHandle)"
"android.os.UserManager.getUserRestrictions()","android.os.Process.myUserHandle()"
"android.os.UserManager.getUserHandle()","android.os.UserHandle.myUserId()"
"android.os.UserManager.getSerialNumberForUser(UserHandle)","android.os.UserManager.getUserSerialNumber(int)"
"android.os.UserManager.getSerialNumberForUser(UserHandle)","android.os.UserHandle.getIdentifier()"
"android.os.UserManager.getUserForSerialNumber(long)","android.os.UserManager.getUserHandle(int)"
"android.os.UserManager.setUserRestrictions(Bundle)","android.os.UserManager.setUserRestrictions(android.os.Bundle, android.os.UserHandle)"
"android.os.UserManager.setUserRestrictions(Bundle)","android.os.Process.myUserHandle()"
"android.os.UserManager.supportsMultipleUsers()","android.os.UserManager.getMaxSupportedUsers()"
"android.os.UserManager.getBadgedLabelForUser(CharSequence, UserHandle)","android.content.Context.getPackageManager()"
"android.os.UserManager.getBadgedLabelForUser(CharSequence, UserHandle)","android.content.pm.PackageManager.getUserBadgedLabel(java.lang.CharSequence, android.os.UserHandle)"
"android.os.UserManager.setUserRestriction(String, boolean, UserHandle)","android.os.UserManager.getUserRestrictions(android.os.UserHandle)"
"android.os.UserManager.setUserRestriction(String, boolean, UserHandle)","android.os.UserManager.setUserRestrictions(android.os.Bundle, android.os.UserHandle)"
"android.os.UserManager.setUserRestriction(String, boolean, UserHandle)","android.os.BaseBundle.putBoolean(java.lang.String, boolean)"
"android.os.UserManager.isUserAGoat()","android.content.Context.getPackageManager()"
"android.os.UserManager.isUserAGoat()","android.content.pm.PackageManager.isPackageAvailable(java.lang.String)"
"android.os.UserManager.isUserRunningOrStopping(UserHandle)","android.app.IActivityManager.isUserRunning(int, boolean)"
"android.os.UserManager.isUserRunningOrStopping(UserHandle)","android.os.UserHandle.getIdentifier()"
"android.os.UserManager.isUserRunningOrStopping(UserHandle)","android.app.ActivityManagerNative.getDefault()"
"android.os.UserManager.createGuest(Context, String)","android.os.UserManager.createUser(java.lang.String, int)"
"android.os.UserManager.createGuest(Context, String)","android.content.Context.getContentResolver()"
"android.os.UserManager.createGuest(Context, String)","android.provider.Settings.Secure.putStringForUser(android.content.ContentResolver, java.lang.String, java.lang.String, int)"
"android.os.UserManager.createGuest(Context, String)","android.os.BaseBundle.putBoolean(java.lang.String, boolean)"
"android.os.UserManager.canAddMoreUsers()","java.util.List.size()"
"android.os.UserManager.canAddMoreUsers()","android.os.UserManager.getUsers(boolean)"
"android.os.UserManager.canAddMoreUsers()","android.content.pm.UserInfo.isGuest()"
"android.os.UserManager.canAddMoreUsers()","java.util.List.get(int)"
"android.os.UserManager.canAddMoreUsers()","android.os.UserManager.getMaxSupportedUsers()"
"android.os.UserManager.addDefaultUserRestrictions(Bundle)","android.os.BaseBundle.putBoolean(java.lang.String, boolean)"
"android.os.UserManager.isUserRunning(UserHandle)","android.app.IActivityManager.isUserRunning(int, boolean)"
"android.os.UserManager.isUserRunning(UserHandle)","android.os.UserHandle.getIdentifier()"
"android.os.UserManager.isUserRunning(UserHandle)","android.app.ActivityManagerNative.getDefault()"
"android.os.UserManager.setUserRestriction(String, boolean)","android.os.UserManager.getUserRestrictions()"
"android.os.UserManager.setUserRestriction(String, boolean)","android.os.UserManager.setUserRestrictions(android.os.Bundle)"
"android.os.UserManager.setUserRestriction(String, boolean)","android.os.BaseBundle.putBoolean(java.lang.String, boolean)"
"android.os.UserManager.getMaxSupportedUsers()","android.app.ActivityManager.isLowRamDeviceStatic()"
"android.os.UserManager.getMaxSupportedUsers()","java.lang.String.startsWith(java.lang.String)"
"android.os.UserManager.createSecondaryUser(String, int)","android.os.UserManager.addDefaultUserRestrictions(android.os.Bundle)"
"android.os.UserManager.getUserProfiles()","java.util.ArrayList.add(android.os.UserHandle)"
"android.os.UserManager.get(Context)","android.content.Context.getSystemService(java.lang.String)"
"android.os.UserManager.getUserCount()","java.util.List.size()"
"android.os.UserManager.getUserCount()","android.os.UserManager.getUsers()"
"android.os.UserManager.isGuestUser()","android.os.UserManager.getUserInfo(int)"
"android.os.UserManager.isGuestUser()","android.content.pm.UserInfo.isGuest()"
"android.os.UserManager.isGuestUser()","android.os.UserHandle.myUserId()"
"android.os.UserManager.isManagedProfile()","android.content.pm.UserInfo.isManagedProfile()"
"android.os.UserManager.isManagedProfile()","android.os.UserManager.getUserInfo(int)"
"android.os.UserManager.isManagedProfile()","android.os.UserHandle.myUserId()"
"android.os.UserManager.hasUserRestriction(String)","android.os.Process.myUserHandle()"
"android.os.UserManager.hasUserRestriction(String)","android.os.UserManager.hasUserRestriction(java.lang.String, android.os.UserHandle)"
"android.os.UserManager.isUserSwitcherEnabled()","android.content.Context.getContentResolver()"
"android.os.UserManager.isUserSwitcherEnabled()","android.provider.Settings.Global.getInt(android.content.ContentResolver, java.lang.String, int)"
"android.os.UserManager.isUserSwitcherEnabled()","android.content.pm.UserInfo.supportsSwitchTo()"
"android.os.UserManager.isUserSwitcherEnabled()","android.os.UserManager.getUsers(boolean)"
"android.app.ActivityManager.stopLockTaskMode()","android.app.IActivityManager.stopLockTaskMode()"
"android.app.ActivityManager.stopLockTaskMode()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.addAppTask(Activity, Intent, TaskDescription, Bitmap)","android.app.ActivityManager.ensureAppTaskThumbnailSizeLocked()"
"android.app.ActivityManager.getRunningAppProcesses()","android.app.IActivityManager.getRunningAppProcesses()"
"android.app.ActivityManager.getRunningAppProcesses()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.isUserAMonkey()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.isUserAMonkey()","android.app.IActivityManager.isUserAMonkey()"
"android.app.ActivityManager.restoreFromXml(String, String)","android.app.ActivityManager.TaskDescription.setPrimaryColor(int)"
"android.app.ActivityManager.restoreFromXml(String, String)","java.lang.Long.parseLong(java.lang.String, int)"
"android.app.ActivityManager.restoreFromXml(String, String)","java.lang.String.equals(java.lang.String)"
"android.app.ActivityManager.restoreFromXml(String, String)","android.app.ActivityManager.TaskDescription.setLabel(java.lang.String)"
"android.app.ActivityManager.restoreFromXml(String, String)","android.app.ActivityManager.TaskDescription.setIconFilename(java.lang.String)"
"android.app.ActivityManager.getRunningExternalApplications()","android.app.IActivityManager.getRunningExternalApplications()"
"android.app.ActivityManager.getRunningExternalApplications()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.readFromParcel(Parcel)","android.os.Parcel.readStringArray()"
"android.app.ActivityManager.readFromParcel(Parcel)","android.content.ComponentName.readFromParcel(android.os.Parcel)"
"android.app.ActivityManager.readFromParcel(Parcel)","android.os.Parcel.readString()"
"android.app.ActivityManager.readFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.app.ActivityManager.ensureAppTaskThumbnailSizeLocked()","android.app.IActivityManager.getAppTaskThumbnailSize()"
"android.app.ActivityManager.ensureAppTaskThumbnailSizeLocked()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getRunningServices(int)","android.app.IActivityManager.getServices(int, int)"
"android.app.ActivityManager.getRunningServices(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.switchUser(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.switchUser(int)","android.app.IActivityManager.switchUser(int)"
"android.app.ActivityManager.getDefaultAppRecentsLimitStatic()","android.app.ActivityManager.getMaxRecentTasksStatic()"
"android.app.ActivityManager.isRunningInTestHarness()","android.os.SystemProperties.getBoolean(java.lang.String, boolean)"
"android.app.ActivityManager.moveTaskToFront(int, int)","android.app.ActivityManager.moveTaskToFront(int, int, null)"
"android.app.ActivityManager.staticGetMemoryClass()","android.os.SystemProperties.get(java.lang.String, java.lang.String)"
"android.app.ActivityManager.staticGetMemoryClass()","android.app.ActivityManager.staticGetLargeMemoryClass()"
"android.app.ActivityManager.staticGetMemoryClass()","java.lang.String.substring(int, int)"
"android.app.ActivityManager.staticGetMemoryClass()","java.lang.String.equals(java.lang.String)"
"android.app.ActivityManager.staticGetMemoryClass()","java.lang.Integer.parseInt(java.lang.String)"
"android.app.ActivityManager.staticGetMemoryClass()","java.lang.String.length()"
"android.app.ActivityManager.writeToParcel(Parcel, int)","android.os.Parcel.writeStringArray(java.lang.String[])"
"android.app.ActivityManager.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.app.ActivityManager.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.app.ActivityManager.writeToParcel(Parcel, int)","android.content.ComponentName.writeToParcel(android.content.ComponentName, android.os.Parcel)"
"android.app.ActivityManager.handleIncomingUser(int, int, int, boolean, boolean, String, String)","android.os.UserHandle.getUserId(int)"
"android.app.ActivityManager.handleIncomingUser(int, int, int, boolean, boolean, String, String)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.handleIncomingUser(int, int, int, boolean, boolean, String, String)","android.app.IActivityManager.handleIncomingUser(int, int, int, boolean, boolean, java.lang.String, java.lang.String)"
"android.app.ActivityManager.getMemoryClass()","android.app.ActivityManager.staticGetMemoryClass()"
"android.app.ActivityManager.getProcessesInErrorState()","android.app.IActivityManager.getProcessesInErrorState()"
"android.app.ActivityManager.getProcessesInErrorState()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.removeTask(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.removeTask(int)","android.app.IActivityManager.removeTask(int)"
"android.app.ActivityManager.getMaxAppRecentsLimitStatic()","android.app.ActivityManager.getMaxRecentTasksStatic()"
"android.app.ActivityManager.checkComponentPermission(String, int, int, boolean)","android.os.UserHandle.isIsolated(int)"
"android.app.ActivityManager.checkComponentPermission(String, int, int, boolean)","android.os.UserHandle.isSameApp(int, int)"
"android.app.ActivityManager.getCurrentUser()","android.app.IActivityManager.getCurrentUser()"
"android.app.ActivityManager.getCurrentUser()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getPackageAskScreenCompat(String)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getPackageAskScreenCompat(String)","android.app.IActivityManager.getPackageAskScreenCompat(java.lang.String)"
"android.app.ActivityManager.setPackageAskScreenCompat(String, boolean)","android.app.IActivityManager.setPackageAskScreenCompat(java.lang.String, boolean)"
"android.app.ActivityManager.setPackageAskScreenCompat(String, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getProcessMemoryInfo(int[])","android.app.IActivityManager.getProcessMemoryInfo(int[])"
"android.app.ActivityManager.getProcessMemoryInfo(int[])","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.toString(String)","java.lang.StringBuilder.append(int)"
"android.app.ActivityManager.toString(String)","java.lang.StringBuilder.append(java.lang.String)"
"android.app.ActivityManager.toString(String)","java.lang.StringBuilder.toString()"
"android.app.ActivityManager.toString()","android.app.ActivityManager.StackInfo.toString(java.lang.String)"
"android.app.ActivityManager.isInLockTaskMode()","android.app.IActivityManager.isInLockTaskMode()"
"android.app.ActivityManager.isInLockTaskMode()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getAppTaskThumbnailSize()","android.app.ActivityManager.ensureAppTaskThumbnailSizeLocked()"
"android.app.ActivityManager.isLowRamDeviceStatic()","android.os.SystemProperties.get(java.lang.String, java.lang.String)"
"android.app.ActivityManager.isLowRamDeviceStatic()","java.lang.String.equals(java.lang.String)"
"android.app.ActivityManager.restartPackage(String)","android.app.ActivityManager.killBackgroundProcesses(java.lang.String)"
"android.app.ActivityManager.startActivity(Context, Intent, Bundle)","android.app.ActivityThread.currentActivityThread()"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","java.io.PrintWriter.println(java.lang.String)"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","com.android.internal.os.TransferPipe.setBufferPrefix(java.lang.String)"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","com.android.internal.os.TransferPipe.go(java.io.FileDescriptor, int)"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","com.android.internal.os.TransferPipe.kill()"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","com.android.internal.os.TransferPipe.getWriteFd()"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","android.os.ServiceManager.checkService(java.lang.String)"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","java.io.PrintWriter.flush()"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","android.os.IBinder.dumpAsync(java.io.FileDescriptor, java.lang.String[])"
"android.app.ActivityManager.dumpService(PrintWriter, FileDescriptor, String, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.app.ActivityManager.isHighEndGfx()","android.app.ActivityManager.isLowRamDeviceStatic()"
"android.app.ActivityManager.isInHomeStack(int)","android.app.IActivityManager.isInHomeStack(int)"
"android.app.ActivityManager.isInHomeStack(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getRecentTasksForUser(int, int, int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getRecentTasksForUser(int, int, int)","android.app.IActivityManager.getRecentTasks(int, int, int)"
"android.app.ActivityManager.getMaxRecentTasksStatic()","android.app.ActivityManager.isLowRamDeviceStatic()"
"android.app.ActivityManager.getLauncherLargeIconDensity()","android.content.Context.getResources()"
"android.app.ActivityManager.getLauncherLargeIconDensity()","android.content.res.Resources.getConfiguration()"
"android.app.ActivityManager.getLauncherLargeIconDensity()","android.content.res.Resources.getDisplayMetrics()"
"android.app.ActivityManager.getRunningTasks(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getRunningTasks(int)","android.app.IActivityManager.getTasks(int, int)"
"android.app.ActivityManager.isLowRamDevice()","android.app.ActivityManager.isLowRamDeviceStatic()"
"android.app.ActivityManager.isUserRunning(int)","android.app.IActivityManager.isUserRunning(int, boolean)"
"android.app.ActivityManager.isUserRunning(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getRecentTasks(int, int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getRecentTasks(int, int)","android.app.IActivityManager.getRecentTasks(int, int, int)"
"android.app.ActivityManager.getRecentTasks(int, int)","android.os.UserHandle.myUserId()"
"android.app.ActivityManager.killBackgroundProcesses(String)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.killBackgroundProcesses(String)","android.app.IActivityManager.killBackgroundProcesses(java.lang.String, int)"
"android.app.ActivityManager.killBackgroundProcesses(String)","android.os.UserHandle.myUserId()"
"android.app.ActivityManager.getAppTasks()","android.content.Context.getPackageName()"
"android.app.ActivityManager.getAppTasks()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getAppTasks()","android.app.IActivityManager.getAppTasks(java.lang.String)"
"android.app.ActivityManager.getAppTasks()","java.util.ArrayList.add(android.app.ActivityManager.AppTask)"
"android.app.ActivityManager.setFrontActivityScreenCompatMode(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.setFrontActivityScreenCompatMode(int)","android.app.IActivityManager.setFrontActivityScreenCompatMode(int)"
"android.app.ActivityManager.getMemoryInfo(MemoryInfo)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getMemoryInfo(MemoryInfo)","android.app.IActivityManager.getMemoryInfo(android.app.ActivityManager.MemoryInfo)"
"android.app.ActivityManager.dumpPackageStateStatic(FileDescriptor, String)","android.app.ActivityManager.dumpService(java.io.PrintWriter, java.io.FileDescriptor, java.lang.String, java.lang.String[])"
"android.app.ActivityManager.dumpPackageStateStatic(FileDescriptor, String)","java.io.PrintWriter.println()"
"android.app.ActivityManager.dumpPackageStateStatic(FileDescriptor, String)","java.io.PrintWriter.flush()"
"android.app.ActivityManager.dumpPackageState(FileDescriptor, String)","android.app.ActivityManager.dumpPackageStateStatic(java.io.FileDescriptor, java.lang.String)"
"android.app.ActivityManager.getLargeMemoryClass()","android.app.ActivityManager.staticGetLargeMemoryClass()"
"android.app.ActivityManager.forceStopPackageAsUser(String, int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.forceStopPackageAsUser(String, int)","android.app.IActivityManager.forceStopPackage(java.lang.String, int)"
"android.app.ActivityManager.getTaskThumbnail(int)","android.app.IActivityManager.getTaskThumbnail(int)"
"android.app.ActivityManager.getTaskThumbnail(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getPackageScreenCompatMode(String)","android.app.IActivityManager.getPackageScreenCompatMode(java.lang.String)"
"android.app.ActivityManager.getPackageScreenCompatMode(String)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getIcon()","android.app.ActivityManager.TaskDescription.loadTaskDescriptionIcon(java.lang.String)"
"android.app.ActivityManager.getFrontActivityScreenCompatMode()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getFrontActivityScreenCompatMode()","android.app.IActivityManager.getFrontActivityScreenCompatMode()"
"android.app.ActivityManager.getLauncherLargeIconSizeInner(Context)","android.content.Context.getResources()"
"android.app.ActivityManager.getLauncherLargeIconSizeInner(Context)","android.content.res.Resources.getConfiguration()"
"android.app.ActivityManager.getLauncherLargeIconSizeInner(Context)","android.content.res.Resources.getDisplayMetrics()"
"android.app.ActivityManager.getLauncherLargeIconSize()","android.app.ActivityManager.getLauncherLargeIconSizeInner(android.content.Context)"
"android.app.ActivityManager.getMyMemoryState(RunningAppProcessInfo)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.getMyMemoryState(RunningAppProcessInfo)","android.app.IActivityManager.getMyMemoryState(android.app.ActivityManager.RunningAppProcessInfo)"
"android.app.ActivityManager.loadTaskDescriptionIcon(String)","android.app.IActivityManager.getTaskDescriptionIcon(java.lang.String)"
"android.app.ActivityManager.loadTaskDescriptionIcon(String)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.setPackageScreenCompatMode(String, int)","android.app.IActivityManager.setPackageScreenCompatMode(java.lang.String, int)"
"android.app.ActivityManager.setPackageScreenCompatMode(String, int)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.staticGetLargeMemoryClass()","android.os.SystemProperties.get(java.lang.String, java.lang.String)"
"android.app.ActivityManager.staticGetLargeMemoryClass()","java.lang.String.substring(int, int)"
"android.app.ActivityManager.staticGetLargeMemoryClass()","java.lang.Integer.parseInt(java.lang.String)"
"android.app.ActivityManager.staticGetLargeMemoryClass()","java.lang.String.length()"
"android.app.ActivityManager.getRunningServiceControlPanel(ComponentName)","android.app.IActivityManager.getRunningServiceControlPanel(android.content.ComponentName)"
"android.app.ActivityManager.getRunningServiceControlPanel(ComponentName)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.forceStopPackage(String)","android.app.ActivityManager.forceStopPackageAsUser(java.lang.String, int)"
"android.app.ActivityManager.forceStopPackage(String)","android.os.UserHandle.myUserId()"
"android.app.ActivityManager.getDeviceConfigurationInfo()","android.app.IActivityManager.getDeviceConfigurationInfo()"
"android.app.ActivityManager.getDeviceConfigurationInfo()","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.moveTaskToFront(int, int, Bundle)","android.app.IActivityManager.moveTaskToFront(int, int, android.os.Bundle)"
"android.app.ActivityManager.moveTaskToFront(int, int, Bundle)","android.app.ActivityManagerNative.getDefault()"
"android.app.ActivityManager.startLockTaskMode(int)","android.app.IActivityManager.startLockTaskMode(int)"
"android.app.ActivityManager.startLockTaskMode(int)","android.app.ActivityManagerNative.getDefault()"
"android.hardware.camera2.utils.CameraRuntimeException.asChecked()","java.lang.Throwable.getStackTrace()"
"android.hardware.camera2.utils.CameraRuntimeException.asChecked()","java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])"
"android.widget.StackView.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.StackView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.StackView.setYProgress(float)","android.view.View.setVisibility(int)"
"android.widget.StackView.setYProgress(float)","android.view.View.getVisibility()"
"android.widget.StackView.setYProgress(float)","android.view.View.getLayoutParams()"
"android.widget.StackView.setYProgress(float)","java.lang.Float.compare(float, float)"
"android.widget.StackView.setYProgress(float)","android.view.View.getAlpha()"
"android.widget.StackView.setYProgress(float)","android.view.View.setRotationX(float)"
"android.widget.StackView.setYProgress(float)","java.lang.Math.max(int, float)"
"android.widget.StackView.setYProgress(float)","android.view.View.getLayerType()"
"android.widget.StackView.setYProgress(float)","android.widget.StackView.StackSlider.rotationInterpolator(float)"
"android.widget.StackView.setYProgress(float)","java.lang.Math.min(float, float)"
"android.widget.StackView.setYProgress(float)","android.view.View.setAlpha(float)"
"android.widget.StackView.setYProgress(float)","android.widget.StackView.StackSlider.viewAlphaInterpolator(float)"
"android.widget.StackView.showPrevious()","android.widget.StackView.StackSlider.setXProgress(int)"
"android.widget.StackView.showPrevious()","android.widget.StackView.StackSlider.setYProgress(int)"
"android.widget.StackView.setXProgress(float)","android.view.View.getLayoutParams()"
"android.widget.StackView.setXProgress(float)","java.lang.Math.max(float, float)"
"android.widget.StackView.setXProgress(float)","java.lang.Math.min(float, float)"
"android.widget.StackView.createResOutline(View, int)","android.widget.StackView.HolographicHelper.createOutline(android.view.View, int, int)"
"android.widget.StackView.beginGestureIfNeeded(float)","java.lang.Math.abs(float)"
"android.widget.StackView.createClickOutline(View, int)","android.widget.StackView.HolographicHelper.createOutline(android.view.View, int, int)"
"android.widget.StackView.dispatchDraw(Canvas)","android.view.View.getVisibility()"
"android.widget.StackView.dispatchDraw(Canvas)","android.view.View.getLayoutParams()"
"android.widget.StackView.dispatchDraw(Canvas)","android.view.View.getAlpha()"
"android.widget.StackView.invalidateGlobalRegion(View, Rect)","android.view.View.getParent()"
"android.widget.StackView.showOnly(int, boolean)","android.view.View.bringToFront()"
"android.widget.StackView.showOnly(int, boolean)","java.util.HashMap.get(int)"
"android.widget.StackView.getDurationForNeutralPosition(float)","android.widget.StackView.StackSlider.getDuration(boolean, float)"
"android.widget.StackView.onLayout()","java.lang.Math.round(float)"
"android.widget.StackView.onLayout()","java.lang.Float.compare(float, float)"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.animation.ObjectAnimator.start()"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.animation.ObjectAnimator.ofPropertyValuesHolder(android.widget.StackView.StackSlider, android.animation.PropertyValuesHolder, android.animation.PropertyValuesHolder)"
"android.widget.StackView.handlePointerUp(MotionEvent)","java.lang.System.currentTimeMillis()"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.view.MotionEvent.getY(int)"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.widget.StackView.StackSlider.getDurationForNeutralPosition()"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.view.VelocityTracker.getYVelocity(int)"
"android.widget.StackView.handlePointerUp(MotionEvent)","java.lang.Math.round(float)"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.view.VelocityTracker.recycle()"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.view.MotionEvent.findPointerIndex(int)"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.animation.PropertyValuesHolder.ofFloat(java.lang.String, float)"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.animation.ValueAnimator.setInterpolator(android.view.animation.LinearInterpolator)"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.view.VelocityTracker.computeCurrentVelocity(int, int)"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.widget.StackView.StackSlider.getDurationForOffscreenPosition()"
"android.widget.StackView.handlePointerUp(MotionEvent)","android.animation.ObjectAnimator.setDuration(int)"
"android.widget.StackView.initStackView()","android.view.ViewConfiguration.getScaledTouchSlop()"
"android.widget.StackView.initStackView()","java.lang.Math.ceil(float)"
"android.widget.StackView.initStackView()","android.content.Context.getResources()"
"android.widget.StackView.initStackView()","android.view.ViewConfiguration.getScaledMaximumFlingVelocity()"
"android.widget.StackView.initStackView()","android.content.res.Resources.getDisplayMetrics()"
"android.widget.StackView.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredWidth()"
"android.widget.StackView.onLayout(boolean, int, int, int, int)","android.view.View.getLayoutParams()"
"android.widget.StackView.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredHeight()"
"android.widget.StackView.onLayout(boolean, int, int, int, int)","android.view.View.layout(int, int, int, int)"
"android.widget.StackView.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getX(int)"
"android.widget.StackView.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getPointerCount()"
"android.widget.StackView.onSecondaryPointerUp(MotionEvent)","android.view.VelocityTracker.clear()"
"android.widget.StackView.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getY(int)"
"android.widget.StackView.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getActionIndex()"
"android.widget.StackView.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"android.widget.StackView.onGenericMotionEvent(MotionEvent)","android.view.MotionEvent.getSource()"
"android.widget.StackView.onGenericMotionEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.widget.StackView.onGenericMotionEvent(MotionEvent)","android.view.MotionEvent.getAxisValue(int)"
"android.widget.StackView.cancelSliderAnimator()","java.lang.ref.Reference.get()"
"android.widget.StackView.cancelSliderAnimator()","android.animation.ValueAnimator.cancel()"
"android.widget.StackView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.StackView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setScrollable(boolean)"
"android.widget.StackView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.StackView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.addAction(int)"
"android.widget.StackView.getDurationForOffscreenPosition()","android.widget.StackView.StackSlider.getDuration(boolean, int)"
"android.widget.StackView.setupStackSlider(View, int)","android.view.View.bringToFront()"
"android.widget.StackView.setupStackSlider(View, int)","android.view.View.setVisibility(int)"
"android.widget.StackView.setupStackSlider(View, int)","android.widget.StackView.StackSlider.setMode(int)"
"android.widget.StackView.setupStackSlider(View, int)","android.widget.StackView.StackSlider.setView(android.view.View)"
"android.widget.StackView.getDurationForNeutralPosition()","android.widget.StackView.StackSlider.getDuration(boolean, int)"
"android.widget.StackView.setOffsets(int, int)","android.view.View.getLeft()"
"android.widget.StackView.setOffsets(int, int)","android.view.View.getBottom()"
"android.widget.StackView.setOffsets(int, int)","android.view.View.getTop()"
"android.widget.StackView.setOffsets(int, int)","java.lang.Math.max(int, int)"
"android.widget.StackView.setOffsets(int, int)","android.view.View.getRight()"
"android.widget.StackView.setOffsets(int, int)","android.view.View.requestLayout()"
"android.widget.StackView.setOffsets(int, int)","java.lang.Math.min(int, int)"
"android.widget.StackView.cancelTransformAnimator()","java.lang.ref.Reference.get()"
"android.widget.StackView.cancelTransformAnimator()","android.animation.ValueAnimator.cancel()"
"android.widget.StackView.onMeasure(int, int)","java.lang.Math.round(float)"
"android.widget.StackView.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.StackView.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.widget.StackView.transformViewAtIndex(int, View, boolean)","android.animation.ObjectAnimator.start()"
"android.widget.StackView.transformViewAtIndex(int, View, boolean)","android.view.View.setScaleX(float)"
"android.widget.StackView.transformViewAtIndex(int, View, boolean)","android.animation.PropertyValuesHolder.ofFloat(java.lang.String, float)"
"android.widget.StackView.transformViewAtIndex(int, View, boolean)","android.view.View.setTranslationX(float)"
"android.widget.StackView.transformViewAtIndex(int, View, boolean)","android.view.View.setTranslationY(float)"
"android.widget.StackView.transformViewAtIndex(int, View, boolean)","android.view.View.setScaleY(float)"
"android.widget.StackView.transformViewAtIndex(int, View, boolean)","android.animation.ObjectAnimator.setDuration(int)"
"android.widget.StackView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getY()"
"android.widget.StackView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.findPointerIndex(int)"
"android.widget.StackView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.widget.StackView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getY(int)"
"android.widget.StackView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getX()"
"android.widget.StackView.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"android.widget.StackView.showNext()","android.widget.StackView.StackSlider.setXProgress(int)"
"android.widget.StackView.showNext()","android.widget.StackView.StackSlider.setYProgress(int)"
"android.widget.StackView.pacedScroll(boolean)","java.lang.System.currentTimeMillis()"
"android.widget.StackView.onTouchEvent(MotionEvent)","android.widget.StackView.StackSlider.setXProgress(float)"
"android.widget.StackView.onTouchEvent(MotionEvent)","android.view.MotionEvent.findPointerIndex(int)"
"android.widget.StackView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getX(int)"
"android.widget.StackView.onTouchEvent(MotionEvent)","android.widget.StackView.StackSlider.setYProgress(float)"
"android.widget.StackView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.widget.StackView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getY(int)"
"android.widget.StackView.onTouchEvent(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"android.widget.StackView.onTouchEvent(MotionEvent)","android.view.VelocityTracker.obtain()"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.getRotationX()"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.setRotationX(int)"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.setRotationX(float)"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.getMeasuredHeight()"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.setTranslationY(float)"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.setTranslationX(float)"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.setTranslationY(int)"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.getTranslationX()"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.getTranslationY()"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.setRotation(int)"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.setTranslationX(int)"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.getMeasuredWidth()"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.setRotation(float)"
"android.widget.StackView.createOutline(View, int, int)","android.view.View.getRotation()"
"android.widget.StackView.getDuration(boolean, float)","android.widget.StackView.StackSlider.getDuration(boolean, int)"
"android.widget.StackView.getDuration(boolean, float)","java.lang.Math.pow(float, int)"
"android.widget.StackView.getDuration(boolean, float)","android.view.View.getLayoutParams()"
"android.widget.StackView.getDuration(boolean, float)","java.lang.Math.sqrt(double)"
"android.widget.StackView.getDuration(boolean, float)","java.lang.Math.abs(float)"
"android.widget.StackView.getDuration(boolean, float)","java.lang.Math.pow(int, int)"
"android.widget.StackView.createOrReuseLayoutParams(View)","android.view.View.getLayoutParams()"
"android.widget.StackView.advance()","java.lang.System.currentTimeMillis()"
"android.widget.StackView.highlightAlphaInterpolator(float)","android.widget.StackView.StackSlider.cubic(float)"
"android.widget.StackView.cubic(float)","java.lang.Math.pow(float, int)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.widget.StackView.StackSlider.setXProgress(float)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.animation.ObjectAnimator.start()"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.view.View.setVisibility(int)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.view.View.setRotationX(float)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.animation.ObjectAnimator.ofPropertyValuesHolder(android.widget.StackView.StackSlider, android.animation.PropertyValuesHolder, android.animation.PropertyValuesHolder)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.widget.StackView.StackSlider.getDurationForNeutralPosition(int)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.widget.StackView.StackSlider.getDurationForOffscreenPosition(int)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.view.View.setAlpha(float)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","java.lang.Math.round(float)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.widget.StackView.StackSlider.setYProgress(float)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.view.View.getLayoutParams()"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.animation.PropertyValuesHolder.ofFloat(java.lang.String, float)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.animation.ValueAnimator.setInterpolator(android.view.animation.LinearInterpolator)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.widget.StackView.StackSlider.setView(android.view.View)"
"android.widget.StackView.transformViewForTransition(int, int, View, boolean)","android.animation.ObjectAnimator.setDuration(int)"
"android.widget.StackView.getDurationForOffscreenPosition(float)","android.widget.StackView.StackSlider.getDuration(boolean, float)"
"android.widget.StackView.measureChildren()","java.lang.Math.round(float)"
"android.widget.StackView.measureChildren()","android.view.View.getMeasuredWidth()"
"android.widget.StackView.measureChildren()","android.view.View.getMeasuredHeight()"
"android.widget.StackView.measureChildren()","android.view.View.measure(int, int)"
"android.widget.StackView.measureChildren()","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.net.dhcp.DhcpInformPacket.toString()","android.net.dhcp.DhcpPacket.toString()"
"android.net.dhcp.DhcpInformPacket.doNextOp(DhcpStateMachine)","android.net.dhcp.DhcpStateMachine.onInformReceived(int, byte[], java.net.InetAddress, byte[])"
"android.net.dhcp.DhcpInformPacket.finishPacket(ByteBuffer)","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"android.net.dhcp.DhcpInformPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlv(java.nio.ByteBuffer, byte, byte)"
"android.net.dhcp.DhcpInformPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlv(java.nio.ByteBuffer, byte, byte[])"
"android.net.dhcp.DhcpInformPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlvEnd(java.nio.ByteBuffer)"
"android.net.dhcp.DhcpInformPacket.buildPacket(int, short, short)","java.nio.ByteBuffer.flip()"
"android.net.dhcp.DhcpInformPacket.buildPacket(int, short, short)","java.nio.ByteBuffer.allocate(int)"
"android.net.dhcp.DhcpInformPacket.buildPacket(int, short, short)","android.net.dhcp.DhcpPacket.fillInPacket(int, java.net.InetAddress, java.net.InetAddress, short, short, java.nio.ByteBuffer, byte, boolean)"
"android.hardware.soundtrigger.KeyphraseMetadata.supportsLocale(Locale)","android.util.ArraySet.contains(java.util.Locale)"
"android.hardware.soundtrigger.KeyphraseMetadata.supportsLocale(Locale)","android.util.ArraySet.isEmpty()"
"android.hardware.soundtrigger.KeyphraseMetadata.supportsPhrase(String)","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.hardware.soundtrigger.KeyphraseMetadata.supportsPhrase(String)","java.lang.String.isEmpty()"
"android.preference.GenericInflater.onCreateItem(String, AttributeSet)","android.preference.GenericInflater.createItem(java.lang.String, java.lang.String, android.util.AttributeSet)"
"android.preference.GenericInflater.rInflate(XmlPullParser, T, AttributeSet)","java.io.PrintStream.println(java.lang.String)"
"android.preference.GenericInflater.rInflate(XmlPullParser, T, AttributeSet)","android.preference.GenericInflater.Parent.addItemFromInflater(T)"
"android.preference.GenericInflater.createItemFromTag(XmlPullParser, String, AttributeSet)","java.io.PrintStream.println(java.lang.String)"
"android.preference.GenericInflater.createItemFromTag(XmlPullParser, String, AttributeSet)","android.preference.GenericInflater.Factory.onCreateItem(java.lang.String, android.content.Context, android.util.AttributeSet)"
"android.preference.GenericInflater.createItemFromTag(XmlPullParser, String, AttributeSet)","android.preference.GenericInflater.onCreateItem(java.lang.String, android.util.AttributeSet)"
"android.preference.GenericInflater.createItemFromTag(XmlPullParser, String, AttributeSet)","java.lang.Throwable.initCause(java.lang.ClassNotFoundException)"
"android.preference.GenericInflater.createItemFromTag(XmlPullParser, String, AttributeSet)","android.preference.GenericInflater.createItem(java.lang.String, null, android.util.AttributeSet)"
"android.preference.GenericInflater.createItemFromTag(XmlPullParser, String, AttributeSet)","java.lang.String.indexOf(char)"
"android.preference.GenericInflater.createItemFromTag(XmlPullParser, String, AttributeSet)","android.util.AttributeSet.getPositionDescription()"
"android.preference.GenericInflater.inflate(XmlPullParser, P, boolean)","java.io.PrintStream.println(java.lang.String)"
"android.preference.GenericInflater.inflate(XmlPullParser, P, boolean)","android.preference.GenericInflater.onMergeRoots(P, boolean, P)"
"android.preference.GenericInflater.inflate(int, P, boolean)","java.io.PrintStream.println(java.lang.String)"
"android.preference.GenericInflater.inflate(int, P, boolean)","android.content.Context.getResources()"
"android.preference.GenericInflater.inflate(int, P, boolean)","android.preference.GenericInflater.getContext()"
"android.preference.GenericInflater.inflate(int, P, boolean)","android.content.res.Resources.getXml(int)"
"android.preference.GenericInflater.inflate(int, P, boolean)","android.content.res.XmlResourceParser.close()"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","java.lang.Throwable.initCause(java.lang.NoSuchMethodException)"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","android.content.Context.getClassLoader()"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","java.util.HashMap.get(java.lang.String)"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","java.lang.Object.getClass()"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","java.lang.ClassLoader.loadClass(java.lang.String)"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","java.lang.Class.getName()"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","java.util.HashMap.put(java.lang.String, java.lang.reflect.Constructor)"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","java.lang.Class.getConstructor(java.lang.Class[])"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","java.lang.reflect.Constructor.newInstance(java.lang.Object[])"
"android.preference.GenericInflater.createItem(String, String, AttributeSet)","android.util.AttributeSet.getPositionDescription()"
"android.preference.GenericInflater.onCreateItem(String, Context, AttributeSet)","android.preference.GenericInflater.Factory.onCreateItem(java.lang.String, android.content.Context, android.util.AttributeSet)"
"android.widget.TimePickerClockDelegate.canReach(int)","android.widget.TimePickerClockDelegate.Node.containsKey(int)"
"android.widget.TimePickerClockDelegate.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.TimePickerClockDelegate.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.TimePickerClockDelegate.setupListeners()","android.view.View.setOnKeyListener(android.view.View.OnKeyListener)"
"android.widget.TimePickerClockDelegate.setupListeners()","android.view.View.setFocusable(boolean)"
"android.widget.TimePickerClockDelegate.setupListeners()","android.view.View.setOnFocusChangeListener(android.view.View.OnFocusChangeListener)"
"android.widget.TimePickerClockDelegate.computeStableWidth(TextView, int)","java.lang.String.format(java.lang.String, int)"
"android.widget.TimePickerClockDelegate.writeToParcel(Parcel, int)","android.os.Parcel.writeList(java.util.ArrayList<java.lang.Integer>)"
"android.widget.TimePickerClockDelegate.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"android.widget.TimePickerClockDelegate.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.widget.TimePickerClockDelegate.onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfo)","android.view.View.AccessibilityDelegate.onInitializeAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo)"
"android.widget.TimePickerClockDelegate.onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.addAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)"
"android.widget.TimePickerClockDelegate.addChild(Node)","java.util.ArrayList.add(android.widget.TimePickerClockDelegate.Node)"
"android.widget.TimePickerClockDelegate.updateHeaderMinute(int, boolean)","java.lang.String.format(java.util.Locale, java.lang.String, int)"
"android.widget.TimePickerClockDelegate.updateDisplay(boolean)","java.util.ArrayList.isEmpty()"
"android.widget.TimePickerClockDelegate.updateDisplay(boolean)","java.lang.String.replace(char, char)"
"android.widget.TimePickerClockDelegate.updateDisplay(boolean)","java.lang.String.format(java.lang.String, int)"
"android.widget.TimePickerClockDelegate.deleteLastTypedKey()","java.util.ArrayList.size()"
"android.widget.TimePickerClockDelegate.deleteLastTypedKey()","java.util.ArrayList.remove(int)"
"android.widget.TimePickerClockDelegate.updateHeaderHour(int, boolean)","java.lang.String.charAt(int)"
"android.widget.TimePickerClockDelegate.updateHeaderHour(int, boolean)","java.lang.String.format(java.lang.String, int)"
"android.widget.TimePickerClockDelegate.updateHeaderHour(int, boolean)","android.text.format.DateFormat.getBestDateTimePattern(java.util.Locale, java.lang.String)"
"android.widget.TimePickerClockDelegate.updateHeaderHour(int, boolean)","java.lang.String.length()"
"android.widget.TimePickerClockDelegate.tryAnnounceForAccessibility(CharSequence, boolean)","java.lang.Object.equals(java.lang.CharSequence)"
"android.widget.TimePickerClockDelegate.getEnteredTime(boolean[])","java.util.ArrayList.size()"
"android.widget.TimePickerClockDelegate.getEnteredTime(boolean[])","java.util.ArrayList.get(int)"
"android.widget.TimePickerClockDelegate.processKeyUp(int)","java.util.ArrayList.isEmpty()"
"android.widget.TimePickerClockDelegate.processKeyUp(int)","java.util.ArrayList.clear()"
"android.widget.TimePickerClockDelegate.updateHeaderAmPm()","android.view.View.setVisibility(int)"
"android.widget.TimePickerClockDelegate.updateHeaderAmPm()","java.lang.String.startsWith(java.lang.String)"
"android.widget.TimePickerClockDelegate.updateHeaderAmPm()","android.view.View.getParent()"
"android.widget.TimePickerClockDelegate.updateHeaderAmPm()","android.text.format.DateFormat.getBestDateTimePattern(java.util.Locale, java.lang.String)"
"android.widget.TimePickerClockDelegate.onClick(View)","android.view.View.getId()"
"android.widget.TimePickerClockDelegate.onValueSelected(int, int, boolean)","java.util.ArrayList.clear()"
"android.widget.TimePickerClockDelegate.finishKbMode()","java.util.ArrayList.isEmpty()"
"android.widget.TimePickerClockDelegate.finishKbMode()","java.util.ArrayList.clear()"
"android.widget.TimePickerClockDelegate.getAmOrPmKeyCode(int)","java.lang.CharSequence.charAt(int)"
"android.widget.TimePickerClockDelegate.getAmOrPmKeyCode(int)","android.view.KeyCharacterMap.load(int)"
"android.widget.TimePickerClockDelegate.getAmOrPmKeyCode(int)","android.view.KeyEvent.getKeyCode()"
"android.widget.TimePickerClockDelegate.getAmOrPmKeyCode(int)","java.lang.CharSequence.length()"
"android.widget.TimePickerClockDelegate.getAmOrPmKeyCode(int)","android.view.KeyCharacterMap.getEvents(char[])"
"android.widget.TimePickerClockDelegate.getAmOrPmKeyCode(int)","java.lang.String.toLowerCase(java.util.Locale)"
"android.widget.TimePickerClockDelegate.getAmOrPmKeyCode(int)","java.lang.Math.min(int, int)"
"android.widget.TimePickerClockDelegate.onKey(View, int, KeyEvent)","android.view.KeyEvent.getAction()"
"android.widget.TimePickerClockDelegate.isTypedTimeLegalSoFar()","android.widget.TimePickerClockDelegate.Node.canReach(int)"
"android.widget.TimePickerClockDelegate.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.TimePickerClockDelegate.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.TimePickerClockDelegate.generateLegalTimesTree()","android.widget.TimePickerClockDelegate.Node.addChild(android.widget.TimePickerClockDelegate.Node)"
"android.widget.TimePickerClockDelegate.onPopulateAccessibilityEvent(AccessibilityEvent)","java.util.Calendar.getTimeInMillis()"
"android.widget.TimePickerClockDelegate.onPopulateAccessibilityEvent(AccessibilityEvent)","java.util.List.add(java.lang.String)"
"android.widget.TimePickerClockDelegate.onPopulateAccessibilityEvent(AccessibilityEvent)","android.text.format.DateUtils.formatDateTime(android.content.Context, long, int)"
"android.widget.TimePickerClockDelegate.onPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.getText()"
"android.widget.TimePickerClockDelegate.lastIndexOfAny(String, char[])","java.lang.String.charAt(int)"
"android.widget.TimePickerClockDelegate.lastIndexOfAny(String, char[])","java.lang.String.length()"
"android.widget.TimePickerClockDelegate.updateHeaderSeparator()","java.lang.String.charAt(int)"
"android.widget.TimePickerClockDelegate.updateHeaderSeparator()","android.text.format.DateFormat.getBestDateTimePattern(java.util.Locale, java.lang.String)"
"android.widget.TimePickerClockDelegate.updateHeaderSeparator()","java.lang.Character.toString(char)"
"android.widget.TimePickerClockDelegate.setCurrentLocale(Locale)","java.util.Calendar.getInstance(java.util.Locale)"
"android.widget.TimePickerClockDelegate.addKeyIfLegal(int)","java.util.ArrayList.size()"
"android.widget.TimePickerClockDelegate.addKeyIfLegal(int)","java.util.ArrayList.add(int, int)"
"android.widget.TimePickerClockDelegate.addKeyIfLegal(int)","java.util.ArrayList.add(int)"
"android.net.RouteInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.net.RouteInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeByteArray(byte[])"
"android.net.RouteInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.RouteInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.net.IpPrefix, int)"
"android.net.RouteInfo.writeToParcel(Parcel, int)","java.net.InetAddress.getAddress()"
"android.net.RouteInfo.getDestinationLinkAddress()","android.net.IpPrefix.getAddress()"
"android.net.RouteInfo.getDestinationLinkAddress()","android.net.IpPrefix.getPrefixLength()"
"android.net.RouteInfo.isIPv6Default()","android.net.IpPrefix.getAddress()"
"android.net.RouteInfo.isIPv6Default()","android.net.RouteInfo.isDefaultRoute()"
"android.net.RouteInfo.createFromParcel(Parcel)","android.os.Parcel.createByteArray()"
"android.net.RouteInfo.createFromParcel(Parcel)","android.os.Parcel.readParcelable(null)"
"android.net.RouteInfo.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.net.RouteInfo.createFromParcel(Parcel)","java.net.InetAddress.getByAddress(byte[])"
"android.net.RouteInfo.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.net.RouteInfo.matches(InetAddress)","android.net.IpPrefix.getAddress()"
"android.net.RouteInfo.matches(InetAddress)","android.net.IpPrefix.getPrefixLength()"
"android.net.RouteInfo.matches(InetAddress)","android.net.NetworkUtils.getNetworkPart(java.net.InetAddress, int)"
"android.net.RouteInfo.matches(InetAddress)","java.net.InetAddress.equals(java.net.InetAddress)"
"android.net.RouteInfo.toString()","android.net.IpPrefix.toString()"
"android.net.RouteInfo.toString()","java.net.InetAddress.getHostAddress()"
"android.net.RouteInfo.isIPv4Default()","android.net.IpPrefix.getAddress()"
"android.net.RouteInfo.isIPv4Default()","android.net.RouteInfo.isDefaultRoute()"
"android.net.RouteInfo.hashCode()","java.lang.String.hashCode()"
"android.net.RouteInfo.hashCode()","android.net.IpPrefix.hashCode()"
"android.net.RouteInfo.hashCode()","java.net.InetAddress.hashCode()"
"android.net.RouteInfo.makeHostRoute(InetAddress, String)","android.net.RouteInfo.makeHostRoute(java.net.InetAddress, null, java.lang.String)"
"android.net.RouteInfo.isDefaultRoute()","android.net.IpPrefix.getPrefixLength()"
"android.net.RouteInfo.isHost()","android.net.IpPrefix.getAddress()"
"android.net.RouteInfo.isHost()","android.net.IpPrefix.getPrefixLength()"
"android.net.RouteInfo.selectBestRoute(Collection, InetAddress)","android.net.NetworkUtils.addressTypeMatches(java.net.InetAddress, java.net.InetAddress)"
"android.net.RouteInfo.selectBestRoute(Collection, InetAddress)","android.net.IpPrefix.getAddress()"
"android.net.RouteInfo.selectBestRoute(Collection, InetAddress)","android.net.RouteInfo.matches(java.net.InetAddress)"
"android.net.RouteInfo.selectBestRoute(Collection, InetAddress)","android.net.IpPrefix.getPrefixLength()"
"android.net.RouteInfo.equals(Object)","java.util.Objects.equals(android.net.IpPrefix, android.net.IpPrefix)"
"android.net.RouteInfo.equals(Object)","android.net.RouteInfo.getType()"
"android.net.RouteInfo.equals(Object)","android.net.RouteInfo.getDestination()"
"android.net.RouteInfo.equals(Object)","java.util.Objects.equals(java.net.InetAddress, java.net.InetAddress)"
"android.net.RouteInfo.equals(Object)","java.util.Objects.equals(java.lang.String, java.lang.String)"
"android.net.RouteInfo.equals(Object)","android.net.RouteInfo.getInterface()"
"android.net.RouteInfo.equals(Object)","android.net.RouteInfo.getGateway()"
"android.app.admin.DevicePolicyManager.setProfileOwner(String, String, int)","android.app.admin.DevicePolicyManager.setProfileOwner(android.content.ComponentName, java.lang.String, int)"
"android.app.admin.DevicePolicyManager.getPasswordMinimumLength(ComponentName)","android.app.admin.DevicePolicyManager.getPasswordMinimumLength(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getPasswordMinimumLength(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.setActiveAdmin(ComponentName, boolean)","android.app.admin.DevicePolicyManager.setActiveAdmin(android.content.ComponentName, boolean, int)"
"android.app.admin.DevicePolicyManager.setActiveAdmin(ComponentName, boolean)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getPasswordHistoryLength(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getPasswordHistoryLength(ComponentName)","android.app.admin.DevicePolicyManager.getPasswordHistoryLength(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.isProfileOwnerApp(String)","android.content.ComponentName.getPackageName()"
"android.app.admin.DevicePolicyManager.isProfileOwnerApp(String)","java.lang.String.equals(java.lang.String)"
"android.app.admin.DevicePolicyManager.getPasswordMinimumSymbols(ComponentName)","android.app.admin.DevicePolicyManager.getPasswordMinimumSymbols(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getPasswordMinimumSymbols(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getMaximumFailedPasswordsForWipe(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getMaximumFailedPasswordsForWipe(ComponentName)","android.app.admin.DevicePolicyManager.getMaximumFailedPasswordsForWipe(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.hasCaCertInstalled(ComponentName, byte[])","android.app.admin.DevicePolicyManager.getCaCertAlias(byte[])"
"android.app.admin.DevicePolicyManager.getPasswordMinimumLowerCase(ComponentName)","android.app.admin.DevicePolicyManager.getPasswordMinimumLowerCase(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getPasswordMinimumLowerCase(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getCaCertAlias(byte[])","java.security.cert.CertificateFactory.getInstance(java.lang.String)"
"android.app.admin.DevicePolicyManager.getCaCertAlias(byte[])","java.security.cert.CertificateFactory.generateCertificate(java.io.ByteArrayInputStream)"
"android.app.admin.DevicePolicyManager.getTrustAgentConfiguration(ComponentName, ComponentName)","android.app.admin.DevicePolicyManager.getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getTrustAgentConfiguration(ComponentName, ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.net.InetSocketAddress.getHostName()"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.net.Proxy.type()"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","android.net.Proxy.validate(java.lang.String, java.lang.String, java.lang.String)"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.lang.String.trim()"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.net.Proxy.equals(java.net.Proxy)"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.lang.StringBuilder.append(java.lang.String)"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.lang.StringBuilder.toString()"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.net.InetSocketAddress.getPort()"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.lang.Integer.toString(int)"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.lang.Enum.equals(java.net.Proxy.Type)"
"android.app.admin.DevicePolicyManager.setGlobalProxy(ComponentName, Proxy, List)","java.net.Proxy.address()"
"android.app.admin.DevicePolicyManager.getPasswordMinimumNumeric(ComponentName)","android.app.admin.DevicePolicyManager.getPasswordMinimumNumeric(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getPasswordMinimumNumeric(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getPasswordMinimumLetters(ComponentName)","android.app.admin.DevicePolicyManager.getPasswordMinimumLetters(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getPasswordMinimumLetters(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getActiveAdmins()","android.app.admin.DevicePolicyManager.getActiveAdminsAsUser(int)"
"android.app.admin.DevicePolicyManager.getActiveAdmins()","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getCameraDisabled(ComponentName)","android.app.admin.DevicePolicyManager.getCameraDisabled(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getCameraDisabled(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getAccountTypesWithManagementDisabled()","android.app.admin.DevicePolicyManager.getAccountTypesWithManagementDisabledAsUser(int)"
"android.app.admin.DevicePolicyManager.getAccountTypesWithManagementDisabled()","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.setDeviceOwner(String)","android.app.admin.DevicePolicyManager.setDeviceOwner(java.lang.String, null)"
"android.app.admin.DevicePolicyManager.getMaximumTimeToLock(ComponentName)","android.app.admin.DevicePolicyManager.getMaximumTimeToLock(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getMaximumTimeToLock(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getPasswordMinimumUpperCase(ComponentName)","android.app.admin.DevicePolicyManager.getPasswordMinimumUpperCase(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getPasswordMinimumUpperCase(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getKeyguardDisabledFeatures(ComponentName)","android.app.admin.DevicePolicyManager.getKeyguardDisabledFeatures(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getKeyguardDisabledFeatures(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getProfileOwner()","android.os.Process.myUserHandle()"
"android.app.admin.DevicePolicyManager.getProfileOwner()","android.os.UserHandle.getIdentifier()"
"android.app.admin.DevicePolicyManager.getProfileOwner()","android.app.admin.DevicePolicyManager.getProfileOwnerAsUser(int)"
"android.app.admin.DevicePolicyManager.setActiveProfileOwner(ComponentName, String)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.isAdminActive(ComponentName)","android.app.admin.DevicePolicyManager.isAdminActiveAsUser(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.isAdminActive(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getCrossProfileWidgetProviders(ComponentName)","java.util.Collections.emptyList()"
"android.app.admin.DevicePolicyManager.getPasswordQuality(ComponentName)","android.app.admin.DevicePolicyManager.getPasswordQuality(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getPasswordQuality(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getPasswordMinimumNonLetter(ComponentName)","android.app.admin.DevicePolicyManager.getPasswordMinimumNonLetter(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getPasswordMinimumNonLetter(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.uninstallCaCert(ComponentName, byte[])","android.app.admin.DevicePolicyManager.getCaCertAlias(byte[])"
"android.app.admin.DevicePolicyManager.getStorageEncryptionStatus()","android.app.admin.DevicePolicyManager.getStorageEncryptionStatus(int)"
"android.app.admin.DevicePolicyManager.getStorageEncryptionStatus()","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.isDeviceOwner(String)","android.app.admin.DevicePolicyManager.isDeviceOwnerApp(java.lang.String)"
"android.app.admin.DevicePolicyManager.getScreenCaptureDisabled(ComponentName)","android.app.admin.DevicePolicyManager.getScreenCaptureDisabled(android.content.ComponentName, int)"
"android.app.admin.DevicePolicyManager.getScreenCaptureDisabled(ComponentName)","android.os.UserHandle.myUserId()"
"android.app.admin.DevicePolicyManager.getAdminInfo(ComponentName)","android.content.Context.getPackageManager()"
"android.app.admin.DevicePolicyManager.getAdminInfo(ComponentName)","android.content.pm.PackageManager.getReceiverInfo(android.content.ComponentName, int)"
"android.inputmethodservice.SoftInputWindow.setToken(IBinder)","android.view.Window.setAttributes(android.view.WindowManager.LayoutParams)"
"android.inputmethodservice.SoftInputWindow.setToken(IBinder)","android.view.Window.getAttributes()"
"android.inputmethodservice.SoftInputWindow.setToken(IBinder)","android.app.Dialog.getWindow()"
"android.inputmethodservice.SoftInputWindow.onKeyDown(int, KeyEvent)","android.view.KeyEvent.Callback.onKeyDown(int, android.view.KeyEvent)"
"android.inputmethodservice.SoftInputWindow.onKeyDown(int, KeyEvent)","android.app.Dialog.onKeyDown(int, android.view.KeyEvent)"
"android.inputmethodservice.SoftInputWindow.initDockWindow()","android.view.Window.setFlags(int, int)"
"android.inputmethodservice.SoftInputWindow.initDockWindow()","android.inputmethodservice.SoftInputWindow.updateWidthHeight(android.view.WindowManager.LayoutParams)"
"android.inputmethodservice.SoftInputWindow.initDockWindow()","android.view.Window.setAttributes(android.view.WindowManager.LayoutParams)"
"android.inputmethodservice.SoftInputWindow.initDockWindow()","android.view.Window.getAttributes()"
"android.inputmethodservice.SoftInputWindow.initDockWindow()","android.app.Dialog.getWindow()"
"android.inputmethodservice.SoftInputWindow.getGravity()","android.view.Window.getAttributes()"
"android.inputmethodservice.SoftInputWindow.getGravity()","android.app.Dialog.getWindow()"
"android.inputmethodservice.SoftInputWindow.onKeyLongPress(int, KeyEvent)","android.view.KeyEvent.Callback.onKeyLongPress(int, android.view.KeyEvent)"
"android.inputmethodservice.SoftInputWindow.onKeyLongPress(int, KeyEvent)","android.app.Dialog.onKeyLongPress(int, android.view.KeyEvent)"
"android.inputmethodservice.SoftInputWindow.onKeyMultiple(int, int, KeyEvent)","android.view.KeyEvent.Callback.onKeyMultiple(int, int, android.view.KeyEvent)"
"android.inputmethodservice.SoftInputWindow.onKeyMultiple(int, int, KeyEvent)","android.app.Dialog.onKeyMultiple(int, int, android.view.KeyEvent)"
"android.inputmethodservice.SoftInputWindow.onWindowFocusChanged(boolean)","android.view.KeyEvent.DispatcherState.reset()"
"android.inputmethodservice.SoftInputWindow.onWindowFocusChanged(boolean)","android.app.Dialog.onWindowFocusChanged(boolean)"
"android.inputmethodservice.SoftInputWindow.setGravity(int)","android.inputmethodservice.SoftInputWindow.updateWidthHeight(android.view.WindowManager.LayoutParams)"
"android.inputmethodservice.SoftInputWindow.setGravity(int)","android.view.Window.setAttributes(android.view.WindowManager.LayoutParams)"
"android.inputmethodservice.SoftInputWindow.setGravity(int)","android.view.Window.getAttributes()"
"android.inputmethodservice.SoftInputWindow.setGravity(int)","android.app.Dialog.getWindow()"
"android.inputmethodservice.SoftInputWindow.dispatchTouchEvent(MotionEvent)","android.app.Dialog.dispatchTouchEvent(android.view.MotionEvent)"
"android.inputmethodservice.SoftInputWindow.dispatchTouchEvent(MotionEvent)","android.view.MotionEvent.recycle()"
"android.inputmethodservice.SoftInputWindow.onKeyUp(int, KeyEvent)","android.view.KeyEvent.Callback.onKeyUp(int, android.view.KeyEvent)"
"android.inputmethodservice.SoftInputWindow.onKeyUp(int, KeyEvent)","android.app.Dialog.onKeyUp(int, android.view.KeyEvent)"
"android.inputmethodservice.SoftInputWindow.onBackPressed()","android.inputmethodservice.SoftInputWindow.Callback.onBackPressed()"
"android.inputmethodservice.SoftInputWindow.onBackPressed()","android.app.Dialog.onBackPressed()"
"android.content.IntentSender.createFromParcel(Parcel)","android.os.Parcel.readStrongBinder()"
"android.content.IntentSender.sendIntent(Context, int, Intent, OnFinished, Handler, String)","android.content.Context.getContentResolver()"
"android.content.IntentSender.sendIntent(Context, int, Intent, OnFinished, Handler, String)","android.content.Intent.resolveTypeIfNeeded(android.content.ContentResolver)"
"android.content.IntentSender.run()","android.content.IntentSender.OnFinished.onSendFinished(android.content.IntentSender, android.content.Intent, int, java.lang.String, android.os.Bundle)"
"android.content.IntentSender.readIntentSenderOrNullFromParcel(Parcel)","android.os.Parcel.readStrongBinder()"
"android.content.IntentSender.sendIntent(Context, int, Intent, OnFinished, Handler)","android.content.IntentSender.sendIntent(android.content.Context, int, android.content.Intent, android.content.IntentSender.OnFinished, android.os.Handler, null)"
"android.content.IntentSender.toString()","java.lang.System.identityHashCode(android.content.IntentSender)"
"android.content.IntentSender.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.content.IntentSender.toString()","java.lang.StringBuilder.toString()"
"android.content.IntentSender.toString()","java.lang.StringBuilder.append(char)"
"android.content.IntentSender.toString()","java.lang.Integer.toHexString(int)"
"android.content.IntentSender.performReceive(Intent, int, String, Bundle, boolean, boolean, int)","android.content.IntentSender.FinishedDispatcher.run()"
"android.content.IntentSender.getCreatorUserHandle()","android.os.UserHandle.getUserId(int)"
"android.database.sqlite.SQLiteClosable.close()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteClosable.onAllReferencesReleasedFromContainer()","android.database.sqlite.SQLiteClosable.onAllReferencesReleased()"
"android.database.sqlite.SQLiteClosable.releaseReference()","android.database.sqlite.SQLiteClosable.onAllReferencesReleased()"
"android.database.sqlite.SQLiteClosable.releaseReferenceFromContainer()","android.database.sqlite.SQLiteClosable.onAllReferencesReleasedFromContainer()"
"android.database.DefaultDatabaseErrorHandler.onCorruption(SQLiteDatabase)","android.database.sqlite.SQLiteDatabase.isOpen()"
"android.database.DefaultDatabaseErrorHandler.onCorruption(SQLiteDatabase)","android.database.sqlite.SQLiteDatabase.getPath()"
"android.database.DefaultDatabaseErrorHandler.onCorruption(SQLiteDatabase)","android.database.sqlite.SQLiteDatabase.getAttachedDbs()"
"android.database.DefaultDatabaseErrorHandler.onCorruption(SQLiteDatabase)","android.database.DefaultDatabaseErrorHandler.deleteDatabaseFile(java.lang.String)"
"android.database.DefaultDatabaseErrorHandler.onCorruption(SQLiteDatabase)","android.database.sqlite.SQLiteClosable.close()"
"android.database.DefaultDatabaseErrorHandler.deleteDatabaseFile(String)","java.lang.String.trim()"
"android.database.DefaultDatabaseErrorHandler.deleteDatabaseFile(String)","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.database.DefaultDatabaseErrorHandler.deleteDatabaseFile(String)","android.database.sqlite.SQLiteDatabase.deleteDatabase(java.io.File)"
"android.database.DefaultDatabaseErrorHandler.deleteDatabaseFile(String)","java.lang.String.length()"
"android.os.CountDownTimer.cancel()","android.os.Handler.removeMessages(int)"
"android.os.CountDownTimer.start()","android.os.Handler.sendMessage(android.os.Message)"
"android.os.CountDownTimer.start()","android.os.SystemClock.elapsedRealtime()"
"android.os.CountDownTimer.start()","android.os.CountDownTimer.onFinish()"
"android.os.CountDownTimer.start()","android.os.Handler.obtainMessage(int)"
"android.os.CountDownTimer.handleMessage(Message)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"android.os.CountDownTimer.handleMessage(Message)","android.os.SystemClock.elapsedRealtime()"
"android.os.CountDownTimer.handleMessage(Message)","android.os.CountDownTimer.onTick(long)"
"android.os.CountDownTimer.handleMessage(Message)","android.os.Handler.obtainMessage(int)"
"android.os.CountDownTimer.handleMessage(Message)","android.os.CountDownTimer.onFinish()"
"android.os.PersistableBundle.getPersistableBundle(String)","android.os.BaseBundle.typeWarning(java.lang.String, java.lang.Object, java.lang.String, java.lang.ClassCastException)"
"android.os.PersistableBundle.getPersistableBundle(String)","android.os.BaseBundle.unparcel()"
"android.os.PersistableBundle.getPersistableBundle(String)","android.util.ArrayMap.get(java.lang.String)"
"android.os.PersistableBundle.writeToParcel(Parcel, int)","android.os.Parcel.pushAllowFds(boolean)"
"android.os.PersistableBundle.writeToParcel(Parcel, int)","android.os.Parcel.restoreAllowFds(boolean)"
"android.os.PersistableBundle.writeToParcel(Parcel, int)","android.os.BaseBundle.writeToParcelInner(android.os.Parcel, int)"
"android.os.PersistableBundle.toString()","android.util.ArrayMap.toString()"
"android.os.PersistableBundle.toString()","android.os.Parcel.dataSize()"
"android.os.PersistableBundle.createFromParcel(Parcel)","android.os.Parcel.readPersistableBundle()"
"android.os.PersistableBundle.saveToXml(XmlSerializer)","android.os.BaseBundle.unparcel()"
"android.os.PersistableBundle.readThisUnknownObjectXml(XmlPullParser, String)","java.lang.String.equals(java.lang.String)"
"android.os.PersistableBundle.forPair(String, String)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.os.PersistableBundle.putPersistableBundle(String, PersistableBundle)","android.util.ArrayMap.put(java.lang.String, android.os.PersistableBundle)"
"android.os.PersistableBundle.putPersistableBundle(String, PersistableBundle)","android.os.BaseBundle.unparcel()"
"android.content.pm.PermissionInfo.toString()","java.lang.System.identityHashCode(android.content.pm.PermissionInfo)"
"android.content.pm.PermissionInfo.toString()","java.lang.Integer.toHexString(int)"
"android.content.pm.PermissionInfo.loadDescription(PackageManager)","android.content.pm.PackageManager.getText(java.lang.String, int, null)"
"android.content.pm.PermissionInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.content.pm.PermissionInfo.writeToParcel(Parcel, int)","android.content.pm.PackageItemInfo.writeToParcel(android.os.Parcel, int)"
"android.content.pm.PermissionInfo.writeToParcel(Parcel, int)","android.text.TextUtils.writeToParcel(java.lang.CharSequence, android.os.Parcel, int)"
"android.content.pm.PermissionInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.res.XmlBlock.newParser()","android.content.res.XmlBlock.nativeCreateParseState(long)"
"android.content.res.XmlBlock.getTextCharacters(int[])","java.lang.String.getChars(int, int, char[], int)"
"android.content.res.XmlBlock.getTextCharacters(int[])","java.lang.String.length()"
"android.content.res.XmlBlock.getAttributeName(int)","java.io.PrintStream.println(java.lang.String)"
"android.content.res.XmlBlock.getAttributeName(int)","java.lang.String.valueOf(int)"
"android.content.res.XmlBlock.getAttributeValue(int)","java.io.PrintStream.println(java.lang.String)"
"android.content.res.XmlBlock.getAttributeValue(int)","android.util.TypedValue.coerceToString(int, int)"
"android.content.res.XmlBlock.getAttributeValue(int)","java.lang.String.valueOf(int)"
"android.content.res.XmlBlock.getAttributeValue(String, String)","java.io.PrintStream.println(java.lang.String)"
"android.content.res.XmlBlock.decOpenCountLocked()","android.content.res.AssetManager.xmlBlockGone(int)"
"android.content.res.XmlBlock.decOpenCountLocked()","java.lang.Object.hashCode()"
"android.content.res.XmlBlock.decOpenCountLocked()","android.content.res.XmlBlock.nativeDestroy(long)"
"android.content.res.XmlBlock.finalize()","android.content.res.XmlBlock.close()"
"android.content.res.XmlBlock.getAttributeNamespace(int)","java.io.PrintStream.println(java.lang.String)"
"android.content.res.XmlBlock.getAttributeNamespace(int)","java.lang.String.valueOf(int)"
"android.net.NetworkMisc.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.net.NetworkMisc.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.NetworkMisc.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.net.NetworkMisc.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.bluetooth.BluetoothHeadset.disableWBS()","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.enableWBS()","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.close()","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.close()","android.bluetooth.BluetoothAdapter.getBluetoothManager()"
"android.bluetooth.BluetoothHeadset.close()","android.bluetooth.BluetoothHeadset.doUnbind()"
"android.bluetooth.BluetoothHeadset.clccResponse(int, int, int, int, boolean, String, int)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.connect(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.connect(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.connect(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.isAudioOn()","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.isAudioOn()","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.handleMessage(Message)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceConnected(int, android.bluetooth.BluetoothHeadset)"
"android.bluetooth.BluetoothHeadset.handleMessage(Message)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceDisconnected(int)"
"android.bluetooth.BluetoothHeadset.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.isDisabled()","android.bluetooth.BluetoothAdapter.getState()"
"android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.startVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.startVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.startVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.startScoUsingVirtualVoiceCall(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.getConnectedDevices()","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.getConnectedDevices()","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.connectAudio()","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.isAudioConnected(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.isAudioConnected(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.isAudioConnected(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.disconnectAudio()","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.getPriority(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.rejectIncomingConnect(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(BluetoothDevice, String, String)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(BluetoothDevice, String, String)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(BluetoothDevice, String, String)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothDevice.getAddress()"
"android.bluetooth.BluetoothHeadset.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothAdapter.checkBluetoothAddress(java.lang.String)"
"android.bluetooth.BluetoothHeadset.phoneStateChanged(int, int, int, String, int)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.getBatteryUsageHint(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.getBatteryUsageHint(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.getBatteryUsageHint(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.stopVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.stopVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.stopVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.disconnect(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.disconnect(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.disconnect(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.getAudioState(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isDisabled()"
"android.bluetooth.BluetoothHeadset.getAudioState(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.acceptIncomingConnect(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.acceptIncomingConnect(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isEnabled()"
"android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall(BluetoothDevice)","android.bluetooth.BluetoothHeadset.log(java.lang.String)"
"android.bluetooth.BluetoothHeadset.stopScoUsingVirtualVoiceCall(BluetoothDevice)","android.bluetooth.BluetoothHeadset.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadset.isEnabled()","android.bluetooth.BluetoothAdapter.getState()"
"android.gesture.GesturePoint.deserialize(DataInputStream)","java.io.DataInputStream.readFloat()"
"android.gesture.GesturePoint.deserialize(DataInputStream)","java.io.DataInputStream.readLong()"
"android.provider.UserDictionary.addWord(Context, String, int, String, Locale)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.provider.UserDictionary.addWord(Context, String, int, String, Locale)","java.util.Locale.toString()"
"android.provider.UserDictionary.addWord(Context, String, int, String, Locale)","android.content.Context.getContentResolver()"
"android.provider.UserDictionary.addWord(Context, String, int, String, Locale)","android.content.ContentValues.put(java.lang.String, int)"
"android.provider.UserDictionary.addWord(Context, String, int, String, Locale)","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.provider.UserDictionary.addWord(Context, String, int, String, Locale)","android.content.ContentResolver.insert(android.net.Uri, android.content.ContentValues)"
"android.provider.UserDictionary.addWord(Context, String, int, int)","android.provider.UserDictionary.Words.addWord(android.content.Context, java.lang.String, int, null, java.util.Locale)"
"android.provider.UserDictionary.addWord(Context, String, int, int)","java.util.Locale.getDefault()"
"android.app.backup.RestoreDescription.createFromParcel(Parcel)","java.lang.String.equals(java.lang.String)"
"android.app.backup.RestoreDescription.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.app.backup.RestoreDescription.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.database.CursorWindow.copyStringToBuffer(int, int, CharArrayBuffer)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.copyStringToBuffer(int, int, CharArrayBuffer)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.copyStringToBuffer(int, int, CharArrayBuffer)","android.database.CursorWindow.nativeCopyStringToBuffer(long, int, int, android.database.CharArrayBuffer)"
"android.database.CursorWindow.recordClosingOfWindow(long)","android.util.LongSparseArray.delete(long)"
"android.database.CursorWindow.recordClosingOfWindow(long)","android.util.LongSparseArray.size()"
"android.database.CursorWindow.onAllReferencesReleased()","android.database.CursorWindow.dispose()"
"android.database.CursorWindow.freeLastRow()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.freeLastRow()","android.database.CursorWindow.nativeFreeLastRow(long)"
"android.database.CursorWindow.freeLastRow()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.recordNewWindow(int, long)","android.util.Log.isLoggable(java.lang.String, int)"
"android.database.CursorWindow.recordNewWindow(int, long)","android.util.LongSparseArray.put(long, int)"
"android.database.CursorWindow.putLong(long, int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.putLong(long, int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.putLong(long, int, int)","android.database.CursorWindow.nativePutLong(long, long, int, int)"
"android.database.CursorWindow.isNull(int, int)","android.database.CursorWindow.getType(int, int)"
"android.database.CursorWindow.isString(int, int)","android.database.CursorWindow.getType(int, int)"
"android.database.CursorWindow.getDouble(int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.getDouble(int, int)","android.database.CursorWindow.nativeGetDouble(long, int, int)"
"android.database.CursorWindow.getDouble(int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.finalize()","java.lang.Object.finalize()"
"android.database.CursorWindow.finalize()","android.database.CursorWindow.dispose()"
"android.database.CursorWindow.getType(int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.getType(int, int)","android.database.CursorWindow.nativeGetType(long, int, int)"
"android.database.CursorWindow.getType(int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.getNumRows()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.getNumRows()","android.database.CursorWindow.nativeGetNumRows(long)"
"android.database.CursorWindow.getNumRows()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.clear()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.clear()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.clear()","android.database.CursorWindow.nativeClear(long)"
"android.database.CursorWindow.printStats()","android.util.SparseIntArray.size()"
"android.database.CursorWindow.printStats()","android.util.SparseIntArray.get(int)"
"android.database.CursorWindow.printStats()","android.util.SparseIntArray.put(int, int)"
"android.database.CursorWindow.printStats()","java.lang.StringBuilder.append(java.lang.String)"
"android.database.CursorWindow.printStats()","java.lang.StringBuilder.toString()"
"android.database.CursorWindow.printStats()","android.os.Process.myPid()"
"android.database.CursorWindow.printStats()","android.util.SparseIntArray.keyAt(int)"
"android.database.CursorWindow.printStats()","java.lang.AbstractStringBuilder.length()"
"android.database.CursorWindow.printStats()","android.util.LongSparseArray.size()"
"android.database.CursorWindow.printStats()","android.util.LongSparseArray.valueAt(int)"
"android.database.CursorWindow.printStats()","java.lang.AbstractStringBuilder.substring(int, int)"
"android.database.CursorWindow.isBlob(int, int)","android.database.CursorWindow.getType(int, int)"
"android.database.CursorWindow.putDouble(double, int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.putDouble(double, int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.putDouble(double, int, int)","android.database.CursorWindow.nativePutDouble(long, double, int, int)"
"android.database.CursorWindow.writeToParcel(Parcel, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.writeToParcel(Parcel, int)","android.database.CursorWindow.nativeWriteToParcel(long, android.os.Parcel)"
"android.database.CursorWindow.writeToParcel(Parcel, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.database.CursorWindow.setNumColumns(int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.setNumColumns(int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.setNumColumns(int)","android.database.CursorWindow.nativeSetNumColumns(long, int)"
"android.database.CursorWindow.getString(int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.getString(int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.getString(int, int)","android.database.CursorWindow.nativeGetString(long, int, int)"
"android.database.CursorWindow.dispose()","android.database.CursorWindow.nativeDispose(long)"
"android.database.CursorWindow.dispose()","android.database.CursorWindow.recordClosingOfWindow(long)"
"android.database.CursorWindow.getFloat(int, int)","android.database.CursorWindow.getDouble(int, int)"
"android.database.CursorWindow.getLong(int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.getLong(int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.getLong(int, int)","android.database.CursorWindow.nativeGetLong(long, int, int)"
"android.database.CursorWindow.isLong(int, int)","android.database.CursorWindow.getType(int, int)"
"android.database.CursorWindow.toString()","java.lang.Long.toHexString(long)"
"android.database.CursorWindow.toString()","android.database.CursorWindow.getName()"
"android.database.CursorWindow.putString(String, int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.putString(String, int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.putString(String, int, int)","android.database.CursorWindow.nativePutString(long, java.lang.String, int, int)"
"android.database.CursorWindow.isFloat(int, int)","android.database.CursorWindow.getType(int, int)"
"android.database.CursorWindow.allocRow()","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.allocRow()","android.database.CursorWindow.nativeAllocRow(long)"
"android.database.CursorWindow.allocRow()","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.getInt(int, int)","android.database.CursorWindow.getLong(int, int)"
"android.database.CursorWindow.getBlob(int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.getBlob(int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.getBlob(int, int)","android.database.CursorWindow.nativeGetBlob(long, int, int)"
"android.database.CursorWindow.getShort(int, int)","android.database.CursorWindow.getLong(int, int)"
"android.database.CursorWindow.putNull(int, int)","android.database.CursorWindow.nativePutNull(long, int, int)"
"android.database.CursorWindow.putNull(int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.putNull(int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.putBlob(byte[], int, int)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.CursorWindow.putBlob(byte[], int, int)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.CursorWindow.putBlob(byte[], int, int)","android.database.CursorWindow.nativePutBlob(long, byte[], int, int)"
"android.database.CursorWindow.newFromParcel(Parcel)","android.os.Parcelable.Creator.createFromParcel(android.os.Parcel)"
"android.speech.srec.MicrophoneInputStream.close()","android.speech.srec.MicrophoneInputStream.AudioRecordDelete(long)"
"android.speech.srec.MicrophoneInputStream.close()","android.speech.srec.MicrophoneInputStream.AudioRecordStop(long)"
"android.speech.srec.MicrophoneInputStream.read(byte[])","android.speech.srec.MicrophoneInputStream.AudioRecordRead(long, byte[], int, int)"
"android.speech.srec.MicrophoneInputStream.finalize()","android.speech.srec.MicrophoneInputStream.close()"
"android.speech.srec.MicrophoneInputStream.read(byte[], int, int)","android.speech.srec.MicrophoneInputStream.AudioRecordRead(long, byte[], int, int)"
"android.speech.srec.MicrophoneInputStream.read()","android.speech.srec.MicrophoneInputStream.AudioRecordRead(long, byte[], int, int)"
"android.view.animation.TranslateAnimation.initialize(int, int, int, int)","android.view.animation.Animation.initialize(int, int, int, int)"
"android.view.animation.TranslateAnimation.initialize(int, int, int, int)","android.view.animation.Animation.resolveSize(int, float, int, int)"
"android.database.sqlite.SQLiteQuery.fillWindow(CursorWindow, int, int, boolean)","android.database.sqlite.SQLiteClosable.acquireReference()"
"android.database.sqlite.SQLiteQuery.fillWindow(CursorWindow, int, int, boolean)","android.database.sqlite.SQLiteProgram.getConnectionFlags()"
"android.database.sqlite.SQLiteQuery.fillWindow(CursorWindow, int, int, boolean)","android.database.sqlite.SQLiteProgram.onCorruption()"
"android.database.sqlite.SQLiteQuery.fillWindow(CursorWindow, int, int, boolean)","android.database.sqlite.SQLiteSession.executeForCursorWindow(java.lang.String, java.lang.Object[], android.database.CursorWindow, int, int, boolean, int, android.os.CancellationSignal)"
"android.database.sqlite.SQLiteQuery.fillWindow(CursorWindow, int, int, boolean)","android.database.sqlite.SQLiteProgram.getSession()"
"android.database.sqlite.SQLiteQuery.fillWindow(CursorWindow, int, int, boolean)","android.database.sqlite.SQLiteClosable.releaseReference()"
"android.database.sqlite.SQLiteQuery.fillWindow(CursorWindow, int, int, boolean)","android.database.sqlite.SQLiteProgram.getSql()"
"android.database.sqlite.SQLiteQuery.fillWindow(CursorWindow, int, int, boolean)","android.database.sqlite.SQLiteProgram.getBindArgs()"
"android.database.sqlite.SQLiteQuery.toString()","android.database.sqlite.SQLiteProgram.getSql()"
"com.android.internal.os.BackgroundThread.getHandler()","com.android.internal.os.BackgroundThread.ensureThreadLocked()"
"com.android.internal.os.BackgroundThread.get()","com.android.internal.os.BackgroundThread.ensureThreadLocked()"
"com.android.internal.os.BackgroundThread.ensureThreadLocked()","android.os.HandlerThread.getLooper()"
"com.android.internal.os.BackgroundThread.ensureThreadLocked()","java.lang.Thread.start()"
"android.view.RenderNodeAnimator.processDelayed(long)","android.view.RenderNodeAnimator.doStart()"
"android.view.RenderNodeAnimator.start()","android.view.RenderNodeAnimator.nSetStartDelay(long, long)"
"android.view.RenderNodeAnimator.start()","android.view.RenderNodeAnimator.doStart()"
"android.view.RenderNodeAnimator.start()","android.view.RenderNodeAnimator.cancel()"
"android.view.RenderNodeAnimator.start()","android.view.RenderNodeAnimator.DelayedAnimationHelper.addDelayedAnimation(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.start()","android.view.RenderNodeAnimator.getHelper()"
"android.view.RenderNodeAnimator.start()","com.android.internal.util.VirtualRefBasePtr.get()"
"android.view.RenderNodeAnimator.start()","android.view.RenderNodeAnimator.applyInterpolator()"
"android.view.RenderNodeAnimator.run()","android.view.RenderNodeAnimator.processDelayed(long)"
"android.view.RenderNodeAnimator.run()","java.util.ArrayList.set(int, android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.run()","java.util.ArrayList.size()"
"android.view.RenderNodeAnimator.run()","android.view.RenderNodeAnimator.DelayedAnimationHelper.scheduleCallback()"
"android.view.RenderNodeAnimator.run()","android.view.Choreographer.getFrameTime()"
"android.view.RenderNodeAnimator.run()","java.util.ArrayList.remove(int)"
"android.view.RenderNodeAnimator.run()","java.util.ArrayList.get(int)"
"android.view.RenderNodeAnimator.moveToRunningState()","android.view.RenderNodeAnimator.nStart(long)"
"android.view.RenderNodeAnimator.moveToRunningState()","android.view.RenderNodeAnimator.notifyStartListeners()"
"android.view.RenderNodeAnimator.moveToRunningState()","com.android.internal.util.VirtualRefBasePtr.get()"
"android.view.RenderNodeAnimator.mapViewPropertyToRenderProperty(int)","android.util.SparseIntArray.get(int)"
"android.view.RenderNodeAnimator.end()","android.view.RenderNodeAnimator.doStart()"
"android.view.RenderNodeAnimator.end()","android.view.RenderNodeAnimator.onFinished()"
"android.view.RenderNodeAnimator.end()","android.view.RenderNodeAnimator.nEnd(long)"
"android.view.RenderNodeAnimator.end()","android.view.RenderNodeAnimator.DelayedAnimationHelper.removeDelayedAnimation(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.end()","android.view.View.invalidateViewProperty(boolean, boolean)"
"android.view.RenderNodeAnimator.end()","android.view.RenderNodeAnimator.getHelper()"
"android.view.RenderNodeAnimator.end()","com.android.internal.util.VirtualRefBasePtr.get()"
"android.view.RenderNodeAnimator.applyInterpolator()","com.android.internal.view.animation.FallbackLUTInterpolator.createNativeInterpolator(android.animation.TimeInterpolator, long)"
"android.view.RenderNodeAnimator.applyInterpolator()","android.view.RenderNodeAnimator.nSetInterpolator(long, long)"
"android.view.RenderNodeAnimator.applyInterpolator()","android.view.RenderNodeAnimator.nGetDuration(long)"
"android.view.RenderNodeAnimator.applyInterpolator()","android.view.RenderNodeAnimator.isNativeInterpolator(android.animation.TimeInterpolator)"
"android.view.RenderNodeAnimator.applyInterpolator()","com.android.internal.view.animation.NativeInterpolatorFactory.createNativeInterpolator()"
"android.view.RenderNodeAnimator.applyInterpolator()","com.android.internal.util.VirtualRefBasePtr.get()"
"android.view.RenderNodeAnimator.cancel()","java.util.ArrayList.size()"
"android.view.RenderNodeAnimator.cancel()","android.view.RenderNodeAnimator.cloneListeners()"
"android.view.RenderNodeAnimator.cancel()","android.animation.Animator.AnimatorListener.onAnimationCancel(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.cancel()","android.view.RenderNodeAnimator.DelayedAnimationHelper.removeDelayedAnimation(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.cancel()","android.view.RenderNodeAnimator.moveToRunningState()"
"android.view.RenderNodeAnimator.cancel()","android.view.RenderNodeAnimator.getHelper()"
"android.view.RenderNodeAnimator.cancel()","android.view.RenderNodeAnimator.end()"
"android.view.RenderNodeAnimator.cancel()","java.util.ArrayList.get(int)"
"android.view.RenderNodeAnimator.isNativeInterpolator(TimeInterpolator)","java.lang.Object.getClass()"
"android.view.RenderNodeAnimator.isNativeInterpolator(TimeInterpolator)","java.lang.Class.isAnnotationPresent(java.lang.Class<com.android.internal.view.animation.HasNativeInterpolator>)"
"android.view.RenderNodeAnimator.onFinished()","android.view.RenderNodeAnimator.releaseNativePtr()"
"android.view.RenderNodeAnimator.onFinished()","java.util.ArrayList.size()"
"android.view.RenderNodeAnimator.onFinished()","android.view.RenderNodeAnimator.cloneListeners()"
"android.view.RenderNodeAnimator.onFinished()","android.view.RenderNodeAnimator.notifyStartListeners()"
"android.view.RenderNodeAnimator.onFinished()","android.view.RenderNodeAnimator.DelayedAnimationHelper.removeDelayedAnimation(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.onFinished()","android.animation.Animator.AnimatorListener.onAnimationEnd(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.onFinished()","android.view.RenderNodeAnimator.getHelper()"
"android.view.RenderNodeAnimator.onFinished()","java.util.ArrayList.get(int)"
"android.view.RenderNodeAnimator.setTarget(RenderNode)","android.view.RenderNode.addAnimator(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.setTarget(RenderNode)","android.view.RenderNodeAnimator.nSetListener(long, android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.setTarget(RenderNode)","android.view.RenderNodeAnimator.checkMutable()"
"android.view.RenderNodeAnimator.setTarget(RenderNode)","com.android.internal.util.VirtualRefBasePtr.get()"
"android.view.RenderNodeAnimator.addDelayedAnimation(RenderNodeAnimator)","android.view.RenderNodeAnimator.DelayedAnimationHelper.scheduleCallback()"
"android.view.RenderNodeAnimator.addDelayedAnimation(RenderNodeAnimator)","java.util.ArrayList.add(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.setAllowRunningAsynchronously(boolean)","android.view.RenderNodeAnimator.nSetAllowRunningAsync(long, boolean)"
"android.view.RenderNodeAnimator.setAllowRunningAsynchronously(boolean)","android.view.RenderNodeAnimator.checkMutable()"
"android.view.RenderNodeAnimator.setAllowRunningAsynchronously(boolean)","com.android.internal.util.VirtualRefBasePtr.get()"
"android.view.RenderNodeAnimator.getHelper()","java.lang.ThreadLocal.set(android.view.RenderNodeAnimator.DelayedAnimationHelper)"
"android.view.RenderNodeAnimator.getHelper()","java.lang.ThreadLocal.get()"
"android.view.RenderNodeAnimator.getNativeAnimator()","com.android.internal.util.VirtualRefBasePtr.get()"
"android.view.RenderNodeAnimator.notifyStartListeners()","android.animation.Animator.AnimatorListener.onAnimationStart(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.notifyStartListeners()","java.util.ArrayList.size()"
"android.view.RenderNodeAnimator.notifyStartListeners()","android.view.RenderNodeAnimator.cloneListeners()"
"android.view.RenderNodeAnimator.notifyStartListeners()","java.util.ArrayList.get(int)"
"android.view.RenderNodeAnimator.removeDelayedAnimation(RenderNodeAnimator)","java.util.ArrayList.remove(android.view.RenderNodeAnimator)"
"android.view.RenderNodeAnimator.releaseNativePtr()","com.android.internal.util.VirtualRefBasePtr.release()"
"android.view.RenderNodeAnimator.setDuration(long)","android.view.RenderNodeAnimator.nSetDuration(long, long)"
"android.view.RenderNodeAnimator.setDuration(long)","android.animation.ValueAnimator.getDurationScale()"
"android.view.RenderNodeAnimator.setDuration(long)","android.view.RenderNodeAnimator.checkMutable()"
"android.view.RenderNodeAnimator.setDuration(long)","com.android.internal.util.VirtualRefBasePtr.get()"
"android.view.RenderNodeAnimator.callOnFinished(RenderNodeAnimator)","android.view.RenderNodeAnimator.onFinished()"
"android.view.RenderNodeAnimator.setInterpolator(TimeInterpolator)","android.view.RenderNodeAnimator.checkMutable()"
"android.view.RenderNodeAnimator.doStart()","android.view.RenderNodeAnimator.moveToRunningState()"
"android.view.RenderNodeAnimator.doStart()","android.view.View.invalidateViewProperty(boolean, boolean)"
"android.view.RenderNodeAnimator.cloneListeners()","android.animation.Animator.getListeners()"
"android.view.RenderNodeAnimator.cloneListeners()","java.util.ArrayList.clone()"
"android.view.RenderNodeAnimator.setStartValue(float)","android.view.RenderNodeAnimator.nSetStartValue(long, float)"
"android.view.RenderNodeAnimator.setStartValue(float)","android.view.RenderNodeAnimator.checkMutable()"
"android.view.RenderNodeAnimator.setStartValue(float)","com.android.internal.util.VirtualRefBasePtr.get()"
"android.view.RenderNodeAnimator.setStartDelay(long)","android.animation.ValueAnimator.getDurationScale()"
"android.view.RenderNodeAnimator.setStartDelay(long)","android.view.RenderNodeAnimator.checkMutable()"
"android.view.RenderNodeAnimator.scheduleCallback()","android.view.Choreographer.postCallback(int, android.view.RenderNodeAnimator.DelayedAnimationHelper, null)"
"com.android.internal.widget.multiwaveview.TargetDrawable.setDrawable(Resources, int)","com.android.internal.widget.multiwaveview.TargetDrawable.resizeDrawables()"
"com.android.internal.widget.multiwaveview.TargetDrawable.setDrawable(Resources, int)","android.content.res.Resources.getDrawable(int)"
"com.android.internal.widget.multiwaveview.TargetDrawable.setDrawable(Resources, int)","com.android.internal.widget.multiwaveview.TargetDrawable.setState(int[])"
"android.app.RemoteServiceException.scheduleReceiver(Intent, ActivityInfo, CompatibilityInfo, int, String, Bundle, boolean, int, int)","android.app.ActivityThread.ApplicationThread.updateProcessState(int, boolean)"
"android.app.RemoteServiceException.scheduleReceiver(Intent, ActivityInfo, CompatibilityInfo, int, String, Bundle, boolean, int, int)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.ReceiverData)"
"android.app.RemoteServiceException.scheduleReceiver(Intent, ActivityInfo, CompatibilityInfo, int, String, Bundle, boolean, int, int)","android.app.ApplicationThreadNative.asBinder()"
"android.app.RemoteServiceException.unscheduleGcIdler()","android.os.Handler.removeMessages(int)"
"android.app.RemoteServiceException.unscheduleGcIdler()","android.os.MessageQueue.removeIdleHandler(android.app.ActivityThread.GcIdler)"
"android.app.RemoteServiceException.unscheduleGcIdler()","android.os.Looper.myQueue()"
"android.app.RemoteServiceException.scheduleLowMemory()","android.app.ActivityThread.sendMessage(int, null)"
"android.app.RemoteServiceException.getPackageInfoNoCheck(ApplicationInfo, CompatibilityInfo)","android.app.ActivityThread.getPackageInfo(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, null, boolean, boolean, boolean)"
"android.app.RemoteServiceException.sendActivityResult(IBinder, String, int, int, Intent)","java.util.ArrayList.add(android.app.ResultInfo)"
"android.app.RemoteServiceException.sendActivityResult(IBinder, String, int, int, Intent)","android.app.ActivityThread.ApplicationThread.scheduleSendResult(android.os.IBinder, java.util.ArrayList<android.app.ResultInfo>)"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","android.app.IActivityManager.unbindFinished(android.os.IBinder, android.content.Intent, boolean)"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","android.content.Intent.setExtrasClassLoader(java.lang.ClassLoader)"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","android.content.ContextWrapper.getClassLoader()"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","android.content.Intent.prepareToEnterProcess()"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","android.app.Service.onUnbind(android.content.Intent)"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","android.app.IActivityManager.serviceDoneExecuting(android.os.IBinder, int, int, int)"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleUnbindService(BindServiceData)","android.app.Instrumentation.onException(android.app.Service, java.lang.Exception)"
"android.app.RemoteServiceException.setSchedulingGroup(int)","android.os.Process.myPid()"
"android.app.RemoteServiceException.setSchedulingGroup(int)","android.os.Process.setProcessGroup(int, int)"
"android.app.RemoteServiceException.handleLowMemory()","java.util.ArrayList.size()"
"android.app.RemoteServiceException.handleLowMemory()","android.content.ComponentCallbacks.onLowMemory()"
"android.app.RemoteServiceException.handleLowMemory()","com.android.internal.os.BinderInternal.forceGc(java.lang.String)"
"android.app.RemoteServiceException.handleLowMemory()","android.app.ActivityThread.collectComponentCallbacks(boolean, null)"
"android.app.RemoteServiceException.handleLowMemory()","android.os.Process.myUid()"
"android.app.RemoteServiceException.handleLowMemory()","android.util.EventLog.writeEvent(int, int)"
"android.app.RemoteServiceException.handleLowMemory()","android.database.sqlite.SQLiteDatabase.releaseMemory()"
"android.app.RemoteServiceException.handleLowMemory()","java.util.ArrayList.get(int)"
"android.app.RemoteServiceException.scheduleGcIdler()","android.os.Handler.removeMessages(int)"
"android.app.RemoteServiceException.scheduleGcIdler()","android.os.MessageQueue.addIdleHandler(android.app.ActivityThread.GcIdler)"
"android.app.RemoteServiceException.scheduleGcIdler()","android.os.Looper.myQueue()"
"android.app.RemoteServiceException.scheduleNewIntent(List, IBinder)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.NewIntentData)"
"android.app.RemoteServiceException.applyCompatConfiguration(int)","android.app.ResourcesManager.applyCompatConfiguration(int, android.content.res.Configuration)"
"android.app.RemoteServiceException.applyCompatConfiguration(int)","android.content.res.Configuration.setTo(android.content.res.Configuration)"
"android.app.RemoteServiceException.scheduleBindService(IBinder, Intent, boolean, int)","android.app.ActivityThread.ApplicationThread.updateProcessState(int, boolean)"
"android.app.RemoteServiceException.scheduleBindService(IBinder, Intent, boolean, int)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.BindServiceData)"
"android.app.RemoteServiceException.handleDumpService(DumpComponentInfo)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleDumpService(DumpComponentInfo)","android.os.StrictMode.allowThreadDiskWrites()"
"android.app.RemoteServiceException.handleDumpService(DumpComponentInfo)","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.app.RemoteServiceException.handleDumpService(DumpComponentInfo)","android.os.StrictMode.setThreadPolicy(android.os.StrictMode.ThreadPolicy)"
"android.app.RemoteServiceException.handleDumpService(DumpComponentInfo)","android.app.Service.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.app.RemoteServiceException.handleDumpService(DumpComponentInfo)","java.io.PrintWriter.flush()"
"android.app.RemoteServiceException.installProviderAuthoritiesLocked(IContentProvider, ContentProvider, IActivityManager.ContentProviderHolder)","android.os.UserHandle.getUserId(int)"
"android.app.RemoteServiceException.installProviderAuthoritiesLocked(IContentProvider, ContentProvider, IActivityManager.ContentProviderHolder)","android.util.ArrayMap.put(android.app.ActivityThread.ProviderKey, android.app.ActivityThread.ProviderClientRecord)"
"android.app.RemoteServiceException.installProviderAuthoritiesLocked(IContentProvider, ContentProvider, IActivityManager.ContentProviderHolder)","java.util.regex.Pattern.split(java.lang.String)"
"android.app.RemoteServiceException.installProviderAuthoritiesLocked(IContentProvider, ContentProvider, IActivityManager.ContentProviderHolder)","android.util.ArrayMap.get(android.app.ActivityThread.ProviderKey)"
"android.app.RemoteServiceException.registerOnActivityPausedListener(Activity, OnActivityPausedListener)","android.util.ArrayMap.get(android.app.Activity)"
"android.app.RemoteServiceException.registerOnActivityPausedListener(Activity, OnActivityPausedListener)","android.util.ArrayMap.put(android.app.Activity, java.util.ArrayList<android.app.OnActivityPausedListener>)"
"android.app.RemoteServiceException.registerOnActivityPausedListener(Activity, OnActivityPausedListener)","java.util.ArrayList.add(android.app.OnActivityPausedListener)"
"android.app.RemoteServiceException.deliverNewIntents(ActivityClientRecord, List)","android.app.Instrumentation.callActivityOnNewIntent(android.app.Activity, com.android.internal.content.ReferrerIntent)"
"android.app.RemoteServiceException.deliverNewIntents(ActivityClientRecord, List)","android.content.Intent.setExtrasClassLoader(java.lang.ClassLoader)"
"android.app.RemoteServiceException.deliverNewIntents(ActivityClientRecord, List)","android.content.ContextWrapper.getClassLoader()"
"android.app.RemoteServiceException.deliverNewIntents(ActivityClientRecord, List)","android.content.Intent.prepareToEnterProcess()"
"android.app.RemoteServiceException.deliverNewIntents(ActivityClientRecord, List)","java.util.List.size()"
"android.app.RemoteServiceException.deliverNewIntents(ActivityClientRecord, List)","android.app.FragmentManagerImpl.noteStateNotSaved()"
"android.app.RemoteServiceException.deliverNewIntents(ActivityClientRecord, List)","java.util.List.get(int)"
"android.app.RemoteServiceException.performUserLeavingActivity(ActivityClientRecord)","android.app.Instrumentation.callActivityOnUserLeaving(android.app.Activity)"
"android.app.RemoteServiceException.profilerControl(boolean, ProfilerInfo, int)","android.app.ActivityThread.sendMessage(int, android.app.ProfilerInfo, int, int)"
"android.app.RemoteServiceException.performStopActivity(IBinder, boolean)","android.app.ActivityThread.performStopActivityInner(android.app.ActivityThread.ActivityClientRecord, null, boolean, boolean)"
"android.app.RemoteServiceException.performStopActivity(IBinder, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.getTopLevelResources(String, String[], String[], String[], int, Configuration, LoadedApk)","android.app.ResourcesManager.getTopLevelResources(java.lang.String, java.lang.String[], java.lang.String[], java.lang.String[], int, android.content.res.Configuration, android.content.res.CompatibilityInfo, null)"
"android.app.RemoteServiceException.getTopLevelResources(String, String[], String[], String[], int, Configuration, LoadedApk)","android.app.LoadedApk.getCompatibilityInfo()"
"android.app.RemoteServiceException.scheduleConfigurationChanged(Configuration)","android.app.ActivityThread.ApplicationThread.updatePendingConfiguration(android.content.res.Configuration)"
"android.app.RemoteServiceException.scheduleConfigurationChanged(Configuration)","android.app.ActivityThread.sendMessage(int, android.content.res.Configuration)"
"android.app.RemoteServiceException.handleEnterAnimationComplete(IBinder)","android.app.Activity.dispatchEnterAnimationComplete()"
"android.app.RemoteServiceException.handleEnterAnimationComplete(IBinder)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleUnstableProviderDied(IBinder, boolean)","android.app.ActivityThread.handleUnstableProviderDiedLocked(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.setCoreSettings(Bundle)","android.app.ActivityThread.sendMessage(int, android.os.Bundle)"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.unscheduleGcIdler()"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.view.WindowManagerGlobal.initialize()"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.IActivityManager.finishActivity(android.os.IBinder, int, null, boolean)"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.handleResumeActivity(android.os.IBinder, boolean, boolean, boolean)"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.handleConfigurationChanged(null, null)"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.ActivityClientRecord.isPreHoneycomb()"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.callActivityOnPause(android.app.Activity)"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.Profiler.setProfiler(android.app.ProfilerInfo)"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.Profiler.startProfiling()"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.performLaunchActivity(android.app.ActivityThread.ActivityClientRecord, android.content.Intent)"
"android.app.RemoteServiceException.handleLaunchActivity(ActivityClientRecord, Intent)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.onCoreSettingsChange()","android.app.ActivityThread.requestRelaunchActivity(android.os.IBinder, null, null, int, boolean, null, boolean)"
"android.app.RemoteServiceException.onCoreSettingsChange()","android.util.ArrayMap.entrySet()"
"android.app.RemoteServiceException.onCoreSettingsChange()","android.os.BaseBundle.getInt(java.lang.String, int)"
"android.app.RemoteServiceException.onCoreSettingsChange()","java.util.Map.Entry.getKey()"
"android.app.RemoteServiceException.handleUnstableProviderDiedLocked(IBinder, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleUnstableProviderDiedLocked(IBinder, boolean)","android.os.IInterface.asBinder()"
"android.app.RemoteServiceException.handleUnstableProviderDiedLocked(IBinder, boolean)","android.app.IActivityManager.unstableProviderDied(android.os.IBinder)"
"android.app.RemoteServiceException.handleUnstableProviderDiedLocked(IBinder, boolean)","android.util.ArrayMap.valueAt(int)"
"android.app.RemoteServiceException.handleUnstableProviderDiedLocked(IBinder, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleUnstableProviderDiedLocked(IBinder, boolean)","android.util.ArrayMap.remove(android.os.IBinder)"
"android.app.RemoteServiceException.handleUnstableProviderDiedLocked(IBinder, boolean)","android.util.ArrayMap.removeAt(int)"
"android.app.RemoteServiceException.handleUnstableProviderDiedLocked(IBinder, boolean)","android.util.ArrayMap.size()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ContextImpl.getClassLoader()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ActivityThread.installContentProviders(android.app.Application, java.util.List<android.content.pm.ProviderInfo>)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.ServiceManager.getService(java.lang.String)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.lang.String.equals(java.lang.String)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.Instrumentation.callApplicationOnCreate(android.app.Application)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.Debug.waitForDebugger()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ActivityThread.applyCompatConfiguration(int)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.Handler.sendEmptyMessageDelayed(int, int)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ActivityManager.isHighEndGfx()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.io.File.toString()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.lang.ClassLoader.loadClass(java.lang.String)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.lang.Object.getClass()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.util.TimeZone.setDefault(null)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.StrictMode.setThreadPolicy(android.os.StrictMode.ThreadPolicy)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ActivityThread.Profiler.startProfiling()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.lang.Class.getName()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ActivityThread.getPackageInfoNoCheck(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ActivityThread.setupGraphicsSupport(android.app.LoadedApk, java.io.File)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.net.Proxy.setHttpProxySystemProperty(android.net.ProxyInfo)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.io.File.getParentFile()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.lang.Class.newInstance()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.LoadedApk.getLibDir()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.Process.setArgV0(java.lang.String)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.view.HardwareRenderer.disable(boolean)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.lang.System.setProperty(java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.Process.isIsolated()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.BaseBundle.getString(java.lang.String)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.Debug.changeDebugPort(int)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.Message.updateCheckRecycle(int)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.Instrumentation.onException(android.app.Application, java.lang.Exception)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.LoadedApk.getAppDir()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.util.Locale.setDefault(java.util.Locale)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ActivityThread.getPackageInfo(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, java.lang.ClassLoader, boolean, boolean, boolean)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.StrictMode.allowThreadDiskWrites()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.io.File.mkdirs()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ContextImpl.getPackageManager()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.StrictMode.conditionallyEnableDebugLogging()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ActivityThread.updateDefaultDensity()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.Trace.setAppTracingAllowed(boolean)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.LoadedApk.getSplitAppDirs()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.content.ComponentName.getClassName()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","java.io.File.getAbsolutePath()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ContextImpl.createAppContext(android.app.ActivityThread, android.app.LoadedApk)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.ddm.DdmHandleAppName.setAppName(java.lang.String, int)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.LoadedApk.makeApplication(boolean, null)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ContextImpl.getCacheDir()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.Debug.startMethodTracing(java.lang.String, int)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.AsyncTask.setDefaultExecutor(java.util.concurrent.Executor)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.UserHandle.myUserId()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.StrictMode.enableDeathOnNetwork()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ResourcesManager.applyConfigurationToResourcesLocked(android.content.res.Configuration, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.IActivityManager.showWaitingForDebugger(android.app.ActivityThread.ApplicationThread, boolean)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.content.pm.PackageManager.getInstrumentationInfo(android.content.ComponentName, int)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.os.BaseBundle.getInt(java.lang.String, int)"
"android.app.RemoteServiceException.handleBindApplication(AppBindData)","android.app.Instrumentation.onCreate(android.os.Bundle)"
"android.app.RemoteServiceException.handleSendResult(ResultData)","android.app.ActivityThread.updateVisibility(android.app.ActivityThread.ActivityClientRecord, boolean)"
"android.app.RemoteServiceException.handleSendResult(ResultData)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleSendResult(ResultData)","android.app.Instrumentation.callActivityOnPause(android.app.Activity)"
"android.app.RemoteServiceException.handleSendResult(ResultData)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleSendResult(ResultData)","android.app.Activity.performResume()"
"android.app.RemoteServiceException.handleSendResult(ResultData)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.handleSendResult(ResultData)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.handleSendResult(ResultData)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.handleSendResult(ResultData)","android.app.ActivityThread.deliverResults(android.app.ActivityThread.ActivityClientRecord, java.util.List<android.app.ResultInfo>)"
"android.app.RemoteServiceException.scheduleDestroyActivity(IBinder, boolean, int)","android.app.ActivityThread.sendMessage(int, android.os.IBinder, int, int)"
"android.app.RemoteServiceException.currentPackageName()","android.app.ActivityThread.currentActivityThread()"
"android.app.RemoteServiceException.handleSetCoreSettings(Bundle)","android.app.ActivityThread.onCoreSettingsChange()"
"android.app.RemoteServiceException.incProviderRefLocked(ProviderRefCount, boolean)","android.app.IActivityManager.refContentProvider(android.os.IBinder, int, int)"
"android.app.RemoteServiceException.incProviderRefLocked(ProviderRefCount, boolean)","android.os.Handler.removeMessages(int, android.app.ActivityThread.ProviderRefCount)"
"android.app.RemoteServiceException.incProviderRefLocked(ProviderRefCount, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.maybeSnapshot()","android.content.pm.PackageManager.getPackageInfo(java.lang.String, int)"
"android.app.RemoteServiceException.maybeSnapshot()","android.content.Context.getPackageManager()"
"android.app.RemoteServiceException.maybeSnapshot()","com.android.internal.os.SamplingProfilerIntegration.writeSnapshot(java.lang.String, android.content.pm.PackageInfo)"
"android.app.RemoteServiceException.maybeSnapshot()","android.app.ActivityThread.getSystemContext()"
"android.app.RemoteServiceException.maybeSnapshot()","com.android.internal.os.SamplingProfilerIntegration.isEnabled()"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.app.ActivityThread.performPauseActivity(android.os.IBinder, boolean, boolean)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.app.ActivityThread.unscheduleGcIdler()"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","java.util.List.addAll(java.util.List<com.android.internal.content.ReferrerIntent>)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.app.ActivityThread.updateDefaultDensity()"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.app.ActivityThread.ActivityClientRecord.isPreHoneycomb()"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.app.ActivityThread.callCallActivityOnSaveInstanceState(android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","java.util.ArrayList.size()"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.content.res.Configuration.isOtherSeqNewer(android.content.res.Configuration)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.app.ActivityThread.handleConfigurationChanged(android.content.res.Configuration, null)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.app.ActivityThread.handleLaunchActivity(android.app.ActivityThread.ActivityClientRecord, android.content.Intent)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","java.util.List.addAll(java.util.List<android.app.ResultInfo>)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","java.util.ArrayList.remove(int)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.content.res.Configuration.diff(android.content.res.Configuration)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","android.app.ActivityThread.handleDestroyActivity(android.os.IBinder, boolean, int, boolean)"
"android.app.RemoteServiceException.handleRelaunchActivity(ActivityClientRecord)","java.util.ArrayList.get(int)"
"android.app.RemoteServiceException.scheduleSuicide()","android.app.ActivityThread.sendMessage(int, null)"
"android.app.RemoteServiceException.scheduleCreateBackupAgent(ApplicationInfo, CompatibilityInfo, int)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.CreateBackupAgentData)"
"android.app.RemoteServiceException.currentApplication()","android.app.ActivityThread.currentActivityThread()"
"android.app.RemoteServiceException.performStopActivityInner(ActivityClientRecord, StopInfo, boolean, boolean)","android.app.ActivityThread.callCallActivityOnSaveInstanceState(android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.performStopActivityInner(ActivityClientRecord, StopInfo, boolean, boolean)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.performStopActivityInner(ActivityClientRecord, StopInfo, boolean, boolean)","android.app.Activity.performStop()"
"android.app.RemoteServiceException.performStopActivityInner(ActivityClientRecord, StopInfo, boolean, boolean)","android.app.Activity.onCreateDescription()"
"android.app.RemoteServiceException.performStopActivityInner(ActivityClientRecord, StopInfo, boolean, boolean)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.performStopActivityInner(ActivityClientRecord, StopInfo, boolean, boolean)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.performStopActivityInner(ActivityClientRecord, StopInfo, boolean, boolean)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.updatePackageCompatibilityInfo(String, CompatibilityInfo)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.UpdateCompatibilityData)"
"android.app.RemoteServiceException.performPauseActivity(IBinder, boolean, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.performPauseActivity(IBinder, boolean, boolean)","android.app.ActivityThread.performPauseActivity(android.app.ActivityThread.ActivityClientRecord, boolean, boolean)"
"android.app.RemoteServiceException.dumpActivity(FileDescriptor, IBinder, String, String[])","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.DumpComponentInfo, int, int, boolean)"
"android.app.RemoteServiceException.dumpActivity(FileDescriptor, IBinder, String, String[])","android.os.ParcelFileDescriptor.dup(java.io.FileDescriptor)"
"android.app.RemoteServiceException.completeRemoveProvider(ProviderRefCount)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.completeRemoveProvider(ProviderRefCount)","android.app.IActivityManager.removeContentProvider(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.completeRemoveProvider(ProviderRefCount)","android.os.IInterface.asBinder()"
"android.app.RemoteServiceException.completeRemoveProvider(ProviderRefCount)","android.util.ArrayMap.valueAt(int)"
"android.app.RemoteServiceException.completeRemoveProvider(ProviderRefCount)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.completeRemoveProvider(ProviderRefCount)","android.util.ArrayMap.remove(android.os.IBinder)"
"android.app.RemoteServiceException.completeRemoveProvider(ProviderRefCount)","android.util.ArrayMap.removeAt(int)"
"android.app.RemoteServiceException.completeRemoveProvider(ProviderRefCount)","android.util.ArrayMap.size()"
"android.app.RemoteServiceException.acquireExistingProvider(Context, String, int, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.acquireExistingProvider(Context, String, int, boolean)","android.app.ActivityThread.incProviderRefLocked(android.app.ActivityThread.ProviderRefCount, boolean)"
"android.app.RemoteServiceException.acquireExistingProvider(Context, String, int, boolean)","android.os.IInterface.asBinder()"
"android.app.RemoteServiceException.acquireExistingProvider(Context, String, int, boolean)","android.app.ActivityThread.handleUnstableProviderDiedLocked(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.acquireExistingProvider(Context, String, int, boolean)","android.os.IBinder.isBinderAlive()"
"android.app.RemoteServiceException.acquireExistingProvider(Context, String, int, boolean)","android.util.ArrayMap.get(android.app.ActivityThread.ProviderKey)"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.content.Intent.setExtrasClassLoader(java.lang.ClassLoader)"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.content.ContextWrapper.getClassLoader()"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.content.Intent.prepareToEnterProcess()"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.app.Service.onBind(android.content.Intent)"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.app.ActivityThread.ensureJitEnabled()"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.app.IActivityManager.serviceDoneExecuting(android.os.IBinder, int, int, int)"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.app.Instrumentation.onException(android.app.Service, java.lang.Exception)"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.app.Service.onRebind(android.content.Intent)"
"android.app.RemoteServiceException.handleBindService(BindServiceData)","android.app.IActivityManager.publishService(android.os.IBinder, android.content.Intent, android.os.IBinder)"
"android.app.RemoteServiceException.handleDestroyBackupAgent(CreateBackupAgentData)","android.app.backup.BackupAgent.onDestroy()"
"android.app.RemoteServiceException.handleDestroyBackupAgent(CreateBackupAgentData)","android.app.ActivityThread.getPackageInfoNoCheck(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.handleDestroyBackupAgent(CreateBackupAgentData)","java.lang.Throwable.printStackTrace()"
"android.app.RemoteServiceException.handleDestroyBackupAgent(CreateBackupAgentData)","android.util.ArrayMap.get(java.lang.String)"
"android.app.RemoteServiceException.handleDestroyBackupAgent(CreateBackupAgentData)","android.util.ArrayMap.remove(java.lang.String)"
"android.app.RemoteServiceException.dispatchPackageBroadcast(int, String[])","android.app.ActivityThread.sendMessage(int, java.lang.String[], int)"
"android.app.RemoteServiceException.unstableProviderDied(IBinder)","android.app.ActivityThread.sendMessage(int, android.os.IBinder)"
"android.app.RemoteServiceException.scheduleOnNewActivityOptions(IBinder, ActivityOptions)","android.app.ActivityThread.sendMessage(int, android.util.Pair<android.os.IBinder, android.app.ActivityOptions>)"
"android.app.RemoteServiceException.sendMessage(int, Object, int, int)","android.app.ActivityThread.sendMessage(int, java.lang.Object, int, int, boolean)"
"android.app.RemoteServiceException.queueIdle()","android.app.ActivityThread.doGcIfNeeded()"
"android.app.RemoteServiceException.handleStopActivity(IBinder, boolean, int)","android.app.ActivityThread.updateVisibility(android.app.ActivityThread.ActivityClientRecord, boolean)"
"android.app.RemoteServiceException.handleStopActivity(IBinder, boolean, int)","android.app.ActivityThread.ActivityClientRecord.isPreHoneycomb()"
"android.app.RemoteServiceException.handleStopActivity(IBinder, boolean, int)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleStopActivity(IBinder, boolean, int)","android.os.Handler.post(android.app.ActivityThread.StopInfo)"
"android.app.RemoteServiceException.handleStopActivity(IBinder, boolean, int)","android.app.ActivityThread.performStopActivityInner(android.app.ActivityThread.ActivityClientRecord, android.app.ActivityThread.StopInfo, boolean, boolean)"
"android.app.RemoteServiceException.handleStopActivity(IBinder, boolean, int)","android.app.QueuedWork.waitToFinish()"
"android.app.RemoteServiceException.scheduleStopActivity(IBinder, boolean, int)","android.app.ActivityThread.sendMessage(int, android.os.IBinder, int, int)"
"android.app.RemoteServiceException.handleDumpHeap(boolean, DumpHeapData)","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.app.RemoteServiceException.handleDumpHeap(boolean, DumpHeapData)","android.os.Debug.dumpHprofData(java.lang.String, java.io.FileDescriptor)"
"android.app.RemoteServiceException.handleDumpHeap(boolean, DumpHeapData)","android.os.Debug.dumpNativeHeap(java.io.FileDescriptor)"
"android.app.RemoteServiceException.handleDumpHeap(boolean, DumpHeapData)","android.os.ParcelFileDescriptor.close()"
"android.app.RemoteServiceException.updatePendingConfiguration(Configuration)","android.content.res.Configuration.isOtherSeqNewer(android.content.res.Configuration)"
"android.app.RemoteServiceException.scheduleSleeping(IBinder, boolean)","android.app.ActivityThread.sendMessage(int, android.os.IBinder, int)"
"android.app.RemoteServiceException.scheduleExit()","android.app.ActivityThread.sendMessage(int, null)"
"android.app.RemoteServiceException.handleProfilerControl(boolean, ProfilerInfo, int)","android.app.ActivityThread.Profiler.setProfiler(android.app.ProfilerInfo)"
"android.app.RemoteServiceException.handleProfilerControl(boolean, ProfilerInfo, int)","android.app.ActivityThread.Profiler.startProfiling()"
"android.app.RemoteServiceException.handleProfilerControl(boolean, ProfilerInfo, int)","android.app.ActivityThread.Profiler.stopProfiling()"
"android.app.RemoteServiceException.handleProfilerControl(boolean, ProfilerInfo, int)","android.os.ParcelFileDescriptor.close()"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","android.content.res.Configuration.updateFrom(android.content.res.Configuration)"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","android.content.res.Configuration.isOtherSeqNewer(android.content.res.Configuration)"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","java.util.ArrayList.size()"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","android.app.ActivityThread.performConfigurationChanged(android.content.ComponentCallbacks2, android.content.res.Configuration)"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","android.app.ResourcesManager.applyConfigurationToResourcesLocked(android.content.res.Configuration, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","android.app.ActivityThread.collectComponentCallbacks(boolean, android.content.res.Configuration)"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","android.app.ActivityThread.updateDefaultDensity()"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","android.content.res.Configuration.diff(android.content.res.Configuration)"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","java.util.ArrayList.get(int)"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","android.app.ActivityThread.applyCompatConfiguration(int)"
"android.app.RemoteServiceException.handleConfigurationChanged(Configuration, CompatibilityInfo)","android.app.ActivityThread.freeTextLayoutCachesIfNeeded(int)"
"android.app.RemoteServiceException.codeToString(int)","java.lang.Integer.toString(int)"
"android.app.RemoteServiceException.getPackageInfo(String, CompatibilityInfo, int, int)","android.content.res.Resources.getAssets()"
"android.app.RemoteServiceException.getPackageInfo(String, CompatibilityInfo, int, int)","android.app.LoadedApk.isSecurityViolation()"
"android.app.RemoteServiceException.getPackageInfo(String, CompatibilityInfo, int, int)","java.lang.ref.Reference.get()"
"android.app.RemoteServiceException.getPackageInfo(String, CompatibilityInfo, int, int)","android.content.res.AssetManager.isUpToDate()"
"android.app.RemoteServiceException.getPackageInfo(String, CompatibilityInfo, int, int)","android.util.ArrayMap.get(java.lang.String)"
"android.app.RemoteServiceException.getPackageInfo(String, CompatibilityInfo, int, int)","android.app.ActivityThread.getPackageInfo(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, int)"
"android.app.RemoteServiceException.installSystemProviders(List)","android.app.ActivityThread.installContentProviders(android.app.Application, java.util.List<android.content.pm.ProviderInfo>)"
"android.app.RemoteServiceException.getIntentBeingBroadcast()","java.lang.ThreadLocal.get()"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.app.IActivityManager.activityDestroyed(android.os.IBinder)"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.app.Activity.getWindowManager()"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.view.View.getWindowToken()"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.app.ActivityThread.performDestroyActivity(android.os.IBinder, boolean, int, boolean)"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.view.WindowManagerGlobal.closeAll(android.os.IBinder, java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.app.ActivityThread.cleanUpPendingRemoveWindows(android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","java.lang.Object.getClass()"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.app.ContextImpl.scheduleFinalCleanup(java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","java.lang.Class.getName()"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.content.ContextWrapper.getBaseContext()"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.view.WindowManager.removeViewImmediate(android.view.View)"
"android.app.RemoteServiceException.handleDestroyActivity(IBinder, boolean, int, boolean)","android.view.WindowManagerGlobal.getInstance()"
"android.app.RemoteServiceException.requestAssistContextExtras(IBinder, IBinder, int)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.RequestAssistContextExtras)"
"android.app.RemoteServiceException.scheduleDestroyBackupAgent(ApplicationInfo, CompatibilityInfo)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.CreateBackupAgentData)"
"android.app.RemoteServiceException.attach(boolean)","android.app.ContextImpl.createAppContext(android.app.ActivityThread, android.app.LoadedApk)"
"android.app.RemoteServiceException.attach(boolean)","android.ddm.DdmHandleAppName.setAppName(java.lang.String, int)"
"android.app.RemoteServiceException.attach(boolean)","android.view.ViewRootImpl.addFirstDrawHandler(java.lang.Runnable)"
"android.app.RemoteServiceException.attach(boolean)","java.lang.Runtime.maxMemory()"
"android.app.RemoteServiceException.attach(boolean)","java.lang.Runtime.totalMemory()"
"android.app.RemoteServiceException.attach(boolean)","android.app.Application.onCreate()"
"android.app.RemoteServiceException.attach(boolean)","android.app.LoadedApk.makeApplication(boolean, null)"
"android.app.RemoteServiceException.attach(boolean)","android.app.ActivityThread.sendMessage(int, android.content.res.Configuration)"
"android.app.RemoteServiceException.attach(boolean)","android.view.ViewRootImpl.addConfigCallback(android.content.ComponentCallbacks2)"
"android.app.RemoteServiceException.attach(boolean)","com.android.internal.os.BinderInternal.addGcWatcher(java.lang.Runnable)"
"android.app.RemoteServiceException.attach(boolean)","java.lang.Runtime.getRuntime()"
"android.app.RemoteServiceException.attach(boolean)","android.app.ResourcesManager.applyConfigurationToResourcesLocked(android.content.res.Configuration, null)"
"android.app.RemoteServiceException.attach(boolean)","android.os.UserHandle.myUserId()"
"android.app.RemoteServiceException.attach(boolean)","java.lang.Runtime.freeMemory()"
"android.app.RemoteServiceException.attach(boolean)","android.app.IActivityManager.releaseSomeActivities(android.app.ActivityThread.ApplicationThread)"
"android.app.RemoteServiceException.attach(boolean)","android.app.IActivityManager.attachApplication(android.app.ActivityThread.ApplicationThread)"
"android.app.RemoteServiceException.attach(boolean)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.attach(boolean)","android.content.res.Configuration.isOtherSeqNewer(android.content.res.Configuration)"
"android.app.RemoteServiceException.attach(boolean)","android.app.ActivityThread.ensureJitEnabled()"
"android.app.RemoteServiceException.attach(boolean)","com.android.internal.os.RuntimeInit.setApplicationObject(android.os.IBinder)"
"android.app.RemoteServiceException.attach(boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.attach(boolean)","android.app.ActivityThread.getSystemContext()"
"android.app.RemoteServiceException.attach(boolean)","android.app.ApplicationThreadNative.asBinder()"
"android.app.RemoteServiceException.equals(Object)","java.util.Objects.equals(java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.handleDispatchPackageBroadcast(int, String[])","java.lang.ref.Reference.get()"
"android.app.RemoteServiceException.handleDispatchPackageBroadcast(int, String[])","android.app.ApplicationPackageManager.handlePackageBroadcast(int, java.lang.String[], boolean)"
"android.app.RemoteServiceException.handleDispatchPackageBroadcast(int, String[])","android.util.ArrayMap.get(java.lang.String)"
"android.app.RemoteServiceException.handleDispatchPackageBroadcast(int, String[])","android.util.ArrayMap.remove(java.lang.String)"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.ContextImpl.createAppContext(android.app.ActivityThread, android.app.LoadedApk)"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.ActivityThread.unscheduleGcIdler()"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","java.lang.Class.newInstance()"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.IActivityManager.backupAgentCreated(java.lang.String, android.os.IBinder)"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.backup.BackupAgent.onBind()"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.ContextImpl.setOuterContext(android.app.backup.BackupAgent)"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.util.ArrayMap.get(java.lang.String)"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.backup.BackupAgent.attach(android.app.ContextImpl)"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.LoadedApk.getClassLoader()"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.backup.BackupAgent.onCreate()"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","java.lang.ClassLoader.loadClass(java.lang.String)"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.util.ArrayMap.put(java.lang.String, android.app.backup.BackupAgent)"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.os.Process.myUid()"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleCreateBackupAgent(CreateBackupAgentData)","android.app.ActivityThread.getPackageInfoNoCheck(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.processInBackground()","android.os.Handler.removeMessages(int)"
"android.app.RemoteServiceException.processInBackground()","android.os.Handler.sendMessage(android.os.Message)"
"android.app.RemoteServiceException.processInBackground()","android.os.Handler.obtainMessage(int)"
"android.app.RemoteServiceException.scheduleInstallProvider(ProviderInfo)","android.app.ActivityThread.sendMessage(int, android.content.pm.ProviderInfo)"
"android.app.RemoteServiceException.printRow(PrintWriter, String, Object[])","java.io.PrintWriter.println(java.lang.String)"
"android.app.RemoteServiceException.printRow(PrintWriter, String, Object[])","java.lang.String.format(java.lang.String, java.lang.Object[])"
"android.app.RemoteServiceException.scheduleServiceArgs(IBinder, boolean, int, int, Intent)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.ServiceArgsData)"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, ClassLoader, boolean, boolean, boolean)","android.content.res.Resources.getAssets()"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, ClassLoader, boolean, boolean, boolean)","java.lang.ref.Reference.get()"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, ClassLoader, boolean, boolean, boolean)","android.app.LoadedApk.installSystemApplicationInfo(android.content.pm.ApplicationInfo, java.lang.ClassLoader)"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, ClassLoader, boolean, boolean, boolean)","android.app.LoadedApk.getClassLoader()"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, ClassLoader, boolean, boolean, boolean)","android.content.res.AssetManager.isUpToDate()"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, ClassLoader, boolean, boolean, boolean)","android.util.ArrayMap.put(java.lang.String, java.lang.ref.WeakReference<android.app.LoadedApk>)"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, ClassLoader, boolean, boolean, boolean)","android.app.ActivityThread.getSystemContext()"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, ClassLoader, boolean, boolean, boolean)","java.lang.String.equals(java.lang.String)"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, ClassLoader, boolean, boolean, boolean)","android.util.ArrayMap.get(java.lang.String)"
"android.app.RemoteServiceException.addText(String, String)","android.os.DropBoxManager.addText(java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.handleDumpActivity(DumpComponentInfo)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleDumpActivity(DumpComponentInfo)","android.os.StrictMode.allowThreadDiskWrites()"
"android.app.RemoteServiceException.handleDumpActivity(DumpComponentInfo)","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.app.RemoteServiceException.handleDumpActivity(DumpComponentInfo)","android.app.Activity.dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.app.RemoteServiceException.handleDumpActivity(DumpComponentInfo)","android.os.StrictMode.setThreadPolicy(android.os.StrictMode.ThreadPolicy)"
"android.app.RemoteServiceException.handleDumpActivity(DumpComponentInfo)","java.io.PrintWriter.flush()"
"android.app.RemoteServiceException.stopProfiling()","android.os.Debug.stopMethodTracing()"
"android.app.RemoteServiceException.stopProfiling()","android.os.ParcelFileDescriptor.close()"
"android.app.RemoteServiceException.handleOnBackgroundVisibleBehindChanged(IBinder, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleOnBackgroundVisibleBehindChanged(IBinder, boolean)","android.app.Activity.onBackgroundVisibleBehindChanged(boolean)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.callActivityOnRestoreInstanceState(android.app.Activity, android.os.Bundle)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.callActivityOnPostCreate(android.app.Activity, android.os.Bundle)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.Intent.resolveActivity(android.content.pm.PackageManager)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.newActivity(java.lang.ClassLoader, java.lang.String, android.content.Intent)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.LoadedApk.makeApplication(boolean, android.app.Instrumentation)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.LoadedApk.getClassLoader()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.Context.getPackageManager()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.Activity.performStart()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","java.lang.Object.getClass()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.callActivityOnCreate(android.app.Activity, android.os.Bundle, android.os.PersistableBundle)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.ComponentName.getClassName()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.os.StrictMode.incrementExpectedActivityCount(java.lang.Class<?>)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.pm.ActivityInfo.getThemeResource()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.util.ArrayMap.put(android.os.IBinder, android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.view.ContextThemeWrapper.setTheme(int)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.ActivityClientRecord.isPersistable()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.Intent.setExtrasClassLoader(java.lang.ClassLoader)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.os.Bundle.setClassLoader(java.lang.ClassLoader)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.callActivityOnCreate(android.app.Activity, android.os.Bundle)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.createBaseContextForActivity(android.app.ActivityThread.ActivityClientRecord, android.app.Activity)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.callActivityOnPostCreate(android.app.Activity, android.os.Bundle, android.os.PersistableBundle)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.Intent.prepareToEnterProcess()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.pm.ComponentInfo.loadLabel(android.content.pm.PackageManager)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.Intent.setComponent(android.content.ComponentName)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.Instrumentation.callActivityOnRestoreInstanceState(android.app.Activity, android.os.Bundle, android.os.PersistableBundle)"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.content.ContextWrapper.getPackageManager()"
"android.app.RemoteServiceException.performLaunchActivity(ActivityClientRecord, Intent)","android.app.ActivityThread.getPackageInfo(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, int)"
"android.app.RemoteServiceException.handleStopService(IBinder)","android.app.Service.getClassName()"
"android.app.RemoteServiceException.handleStopService(IBinder)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleStopService(IBinder)","android.app.Service.onDestroy()"
"android.app.RemoteServiceException.handleStopService(IBinder)","android.app.IActivityManager.serviceDoneExecuting(android.os.IBinder, int, int, int)"
"android.app.RemoteServiceException.handleStopService(IBinder)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleStopService(IBinder)","android.util.ArrayMap.remove(android.os.IBinder)"
"android.app.RemoteServiceException.handleStopService(IBinder)","android.app.ContextImpl.scheduleFinalCleanup(java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.handleStopService(IBinder)","android.app.Instrumentation.onException(android.app.Service, java.lang.Exception)"
"android.app.RemoteServiceException.handleStopService(IBinder)","android.content.ContextWrapper.getBaseContext()"
"android.app.RemoteServiceException.handleStopService(IBinder)","android.app.QueuedWork.waitToFinish()"
"android.app.RemoteServiceException.performNewIntents(IBinder, List)","android.app.Instrumentation.callActivityOnPause(android.app.Activity)"
"android.app.RemoteServiceException.performNewIntents(IBinder, List)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.performNewIntents(IBinder, List)","android.app.Activity.performResume()"
"android.app.RemoteServiceException.performNewIntents(IBinder, List)","android.app.ActivityThread.deliverNewIntents(android.app.ActivityThread.ActivityClientRecord, java.util.List<com.android.internal.content.ReferrerIntent>)"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","android.app.Activity.dispatchActivityResult(java.lang.String, int, int, android.content.Intent)"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","android.content.Intent.setExtrasClassLoader(java.lang.ClassLoader)"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","android.content.ContextWrapper.getClassLoader()"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","android.content.Intent.prepareToEnterProcess()"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","java.util.List.size()"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","java.util.List.get(int)"
"android.app.RemoteServiceException.deliverResults(ActivityClientRecord, List)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.currentProcessName()","android.app.ActivityThread.currentActivityThread()"
"android.app.RemoteServiceException.installContentProviders(Context, List)","android.app.IActivityManager.publishContentProviders(android.app.ActivityThread.ApplicationThread, java.util.ArrayList<android.app.IActivityManager.ContentProviderHolder>)"
"android.app.RemoteServiceException.installContentProviders(Context, List)","android.app.ActivityThread.getApplicationThread()"
"android.app.RemoteServiceException.installContentProviders(Context, List)","android.app.ActivityThread.installProvider(android.content.Context, null, android.content.pm.ProviderInfo, boolean, boolean, boolean)"
"android.app.RemoteServiceException.installContentProviders(Context, List)","java.util.ArrayList.add(android.app.IActivityManager.ContentProviderHolder)"
"android.app.RemoteServiceException.installContentProviders(Context, List)","java.lang.StringBuilder.append(java.lang.String)"
"android.app.RemoteServiceException.installContentProviders(Context, List)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.sendMessage(int, Object)","android.app.ActivityThread.sendMessage(int, java.lang.Object, int, int, boolean)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Parcel.getGlobalAllocCount()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.content.res.AssetManager.getAssetAllocations()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.app.ActivityThread.dumpMemInfoTable(java.io.PrintWriter, android.os.Debug.MemoryInfo, boolean, boolean, boolean, int, java.lang.String, long, long, long, long, long, long)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Debug.getBinderDeathObjectCount()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.io.PrintWriter.println()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.lang.Runtime.getRuntime()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Process.myPid()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Debug.countInstancesOfClass(java.lang.Class<android.app.ContextImpl>)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.io.PrintWriter.print(int)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, int)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Debug.getNativeHeapAllocatedSize()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Debug.getBinderLocalObjectCount()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.io.PrintWriter.print(char)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, int, java.lang.String, long)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.lang.String.valueOf(long)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Debug.countInstancesOfClass(java.lang.Class<android.app.Activity>)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.content.res.AssetManager.getGlobalAssetCount()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, int, java.lang.String, int)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.lang.Runtime.totalMemory()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.database.sqlite.SQLiteDebug.getDatabaseInfo()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Debug.getNativeHeapFreeSize()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Parcel.getGlobalAllocSize()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.lang.Runtime.freeMemory()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.io.PrintWriter.print(java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.content.res.AssetManager.getGlobalAssetManagerCount()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.io.PrintWriter.print(long)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.util.ArrayList.size()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.view.ViewDebug.getViewInstanceCount()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.view.ViewDebug.getViewRootImplCount()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.io.PrintWriter.println(java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Debug.getNativeHeapSize()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.os.Debug.getBinderProxyObjectCount()"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.lang.String.valueOf(int)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","java.util.ArrayList.get(int)"
"android.app.RemoteServiceException.dumpMemInfo(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, long, java.lang.String, long)"
"android.app.RemoteServiceException.appNotRespondingViaProvider(IBinder)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.appNotRespondingViaProvider(IBinder)","android.app.IActivityManager.appNotRespondingViaProvider(android.os.IBinder)"
"android.app.RemoteServiceException.appNotRespondingViaProvider(IBinder)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.dumpMemInfo(FileDescriptor, Debug.MemoryInfo, boolean, boolean, boolean, String[])","android.app.ActivityThread.ApplicationThread.dumpMemInfo(java.io.PrintWriter, android.os.Debug.MemoryInfo, boolean, boolean, boolean)"
"android.app.RemoteServiceException.dumpMemInfo(FileDescriptor, Debug.MemoryInfo, boolean, boolean, boolean, String[])","java.io.PrintWriter.flush()"
"android.app.RemoteServiceException.requestRelaunchActivity(IBinder, List, List, int, boolean, Configuration, boolean)","java.util.ArrayList.size()"
"android.app.RemoteServiceException.requestRelaunchActivity(IBinder, List, List, int, boolean, Configuration, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.requestRelaunchActivity(IBinder, List, List, int, boolean, Configuration, boolean)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.requestRelaunchActivity(IBinder, List, List, int, boolean, Configuration, boolean)","java.util.List.addAll(java.util.List<com.android.internal.content.ReferrerIntent>)"
"android.app.RemoteServiceException.requestRelaunchActivity(IBinder, List, List, int, boolean, Configuration, boolean)","java.util.ArrayList.add(android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.requestRelaunchActivity(IBinder, List, List, int, boolean, Configuration, boolean)","java.util.List.addAll(java.util.List<android.app.ResultInfo>)"
"android.app.RemoteServiceException.requestRelaunchActivity(IBinder, List, List, int, boolean, Configuration, boolean)","java.util.ArrayList.get(int)"
"android.app.RemoteServiceException.scheduleTranslucentConversionComplete(IBinder, boolean)","android.app.ActivityThread.sendMessage(int, android.os.IBinder, int)"
"android.app.RemoteServiceException.setupGraphicsSupport(LoadedApk, File)","android.view.HardwareRenderer.setupDiskCache(java.io.File)"
"android.app.RemoteServiceException.setupGraphicsSupport(LoadedApk, File)","android.os.Process.myUid()"
"android.app.RemoteServiceException.setupGraphicsSupport(LoadedApk, File)","android.os.Process.isIsolated()"
"android.app.RemoteServiceException.startProfiling()","android.os.ParcelFileDescriptor.close()"
"android.app.RemoteServiceException.schedulePauseActivity(IBinder, boolean, boolean, int, boolean)","android.app.ActivityThread.sendMessage(int, android.os.IBinder, int, int)"
"android.app.RemoteServiceException.setProcessState(int)","android.app.ActivityThread.ApplicationThread.updateProcessState(int, boolean)"
"android.app.RemoteServiceException.handleUpdatePackageCompatibilityInfo(UpdateCompatibilityData)","android.app.ActivityThread.peekPackageInfo(java.lang.String, boolean)"
"android.app.RemoteServiceException.handleUpdatePackageCompatibilityInfo(UpdateCompatibilityData)","android.app.LoadedApk.setCompatibilityInfo(android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.handleUpdatePackageCompatibilityInfo(UpdateCompatibilityData)","android.view.WindowManagerGlobal.reportNewConfiguration(android.content.res.Configuration)"
"android.app.RemoteServiceException.handleUpdatePackageCompatibilityInfo(UpdateCompatibilityData)","android.view.WindowManagerGlobal.getInstance()"
"android.app.RemoteServiceException.handleUpdatePackageCompatibilityInfo(UpdateCompatibilityData)","android.app.ActivityThread.handleConfigurationChanged(android.content.res.Configuration, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.cleanUpPendingRemoveWindows(ActivityClientRecord)","android.view.View.getWindowToken()"
"android.app.RemoteServiceException.cleanUpPendingRemoveWindows(ActivityClientRecord)","java.lang.Object.getClass()"
"android.app.RemoteServiceException.cleanUpPendingRemoveWindows(ActivityClientRecord)","java.lang.Class.getName()"
"android.app.RemoteServiceException.cleanUpPendingRemoveWindows(ActivityClientRecord)","android.view.WindowManager.removeViewImmediate(android.view.View)"
"android.app.RemoteServiceException.cleanUpPendingRemoveWindows(ActivityClientRecord)","android.view.WindowManagerGlobal.closeAll(android.os.IBinder, java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.cleanUpPendingRemoveWindows(ActivityClientRecord)","android.view.WindowManagerGlobal.getInstance()"
"android.app.RemoteServiceException.systemMain()","android.view.HardwareRenderer.enableForegroundTrimming()"
"android.app.RemoteServiceException.systemMain()","android.app.ActivityThread.attach(boolean)"
"android.app.RemoteServiceException.systemMain()","android.app.ActivityManager.isHighEndGfx()"
"android.app.RemoteServiceException.systemMain()","android.view.HardwareRenderer.disable(boolean)"
"android.app.RemoteServiceException.getPackageInfo(String, CompatibilityInfo, int)","android.app.ActivityThread.getPackageInfo(java.lang.String, android.content.res.CompatibilityInfo, int, int)"
"android.app.RemoteServiceException.getPackageInfo(String, CompatibilityInfo, int)","android.os.UserHandle.myUserId()"
"android.app.RemoteServiceException.bindApplication(String, ApplicationInfo, List, ComponentName, ProfilerInfo, Bundle, IInstrumentationWatcher, IUiAutomationConnection, int, boolean, boolean, boolean, Configuration, CompatibilityInfo, Map, Bundle)","android.app.ActivityThread.ApplicationThread.setCoreSettings(android.os.Bundle)"
"android.app.RemoteServiceException.bindApplication(String, ApplicationInfo, List, ComponentName, ProfilerInfo, Bundle, IInstrumentationWatcher, IUiAutomationConnection, int, boolean, boolean, boolean, Configuration, CompatibilityInfo, Map, Bundle)","android.os.ServiceManager.initServiceCache(java.util.Map<java.lang.String, android.os.IBinder>)"
"android.app.RemoteServiceException.bindApplication(String, ApplicationInfo, List, ComponentName, ProfilerInfo, Bundle, IInstrumentationWatcher, IUiAutomationConnection, int, boolean, boolean, boolean, Configuration, CompatibilityInfo, Map, Bundle)","android.app.ActivityThread.getPackageManager()"
"android.app.RemoteServiceException.bindApplication(String, ApplicationInfo, List, ComponentName, ProfilerInfo, Bundle, IInstrumentationWatcher, IUiAutomationConnection, int, boolean, boolean, boolean, Configuration, CompatibilityInfo, Map, Bundle)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.AppBindData)"
"android.app.RemoteServiceException.bindApplication(String, ApplicationInfo, List, ComponentName, ProfilerInfo, Bundle, IInstrumentationWatcher, IUiAutomationConnection, int, boolean, boolean, boolean, Configuration, CompatibilityInfo, Map, Bundle)","java.lang.String.equals(java.lang.String)"
"android.app.RemoteServiceException.onNewActivityOptions(IBinder, ActivityOptions)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.onNewActivityOptions(IBinder, ActivityOptions)","android.app.Activity.onNewActivityOptions(android.app.ActivityOptions)"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.util.EventLog.writeEvent(int, int, java.lang.String)"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.os.StrictMode.decrementExpectedActivityCount(java.lang.Class<? extends android.app.Activity>)"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.view.Window.closeAllPanels()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.app.Activity.retainNonConfigurationInstances()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.os.UserHandle.myUserId()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.app.Activity.getComponentName()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.app.Instrumentation.callActivityOnPause(android.app.Activity)"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.app.Instrumentation.callActivityOnDestroy(android.app.Activity)"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","java.lang.Object.getClass()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.app.Activity.performStop()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.content.ComponentName.getClassName()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.util.ArrayMap.remove(android.os.IBinder)"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean, int, boolean)","android.app.ActivityThread.safeToComponentShortString(android.content.Intent)"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","java.util.ArrayList.size()"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","java.util.ArrayList.add(android.content.ContentProvider)"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","java.util.ArrayList.add(android.app.Service)"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","java.util.ArrayList.add(android.app.Application)"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","android.util.ArrayMap.valueAt(int)"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","android.app.ActivityThread.applyConfigCompatMainThread(int, android.content.res.Configuration, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","java.util.ArrayList.get(int)"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","android.util.ArrayMap.size()"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","java.util.ArrayList.add(android.app.Activity)"
"android.app.RemoteServiceException.collectComponentCallbacks(boolean, Configuration)","android.app.LoadedApk.getCompatibilityInfo()"
"android.app.RemoteServiceException.performConfigurationChanged(ComponentCallbacks2, Configuration)","android.content.ComponentCallbacks.onConfigurationChanged(android.content.res.Configuration)"
"android.app.RemoteServiceException.performConfigurationChanged(ComponentCallbacks2, Configuration)","android.content.pm.ActivityInfo.getRealConfigChanged()"
"android.app.RemoteServiceException.performConfigurationChanged(ComponentCallbacks2, Configuration)","android.content.res.Configuration.diff(android.content.res.Configuration)"
"android.app.RemoteServiceException.performConfigurationChanged(ComponentCallbacks2, Configuration)","android.app.Activity.getLocalClassName()"
"android.app.RemoteServiceException.scheduleResumeActivity(IBinder, int, boolean, Bundle)","android.app.ActivityThread.sendMessage(int, android.os.IBinder, int)"
"android.app.RemoteServiceException.scheduleResumeActivity(IBinder, int, boolean, Bundle)","android.app.ActivityThread.ApplicationThread.updateProcessState(int, boolean)"
"android.app.RemoteServiceException.scheduleTrimMemory(int)","android.app.ActivityThread.sendMessage(int, null, int)"
"android.app.RemoteServiceException.hashCode()","java.lang.String.hashCode()"
"android.app.RemoteServiceException.scheduleRegisteredReceiver(IIntentReceiver, Intent, int, String, Bundle, boolean, boolean, int, int)","android.app.ActivityThread.ApplicationThread.updateProcessState(int, boolean)"
"android.app.RemoteServiceException.installSystemApplicationInfo(ApplicationInfo, ClassLoader)","android.app.ContextImpl.installSystemApplicationInfo(android.content.pm.ApplicationInfo, java.lang.ClassLoader)"
"android.app.RemoteServiceException.installSystemApplicationInfo(ApplicationInfo, ClassLoader)","android.app.ActivityThread.getSystemContext()"
"android.app.RemoteServiceException.scheduleBackgroundVisibleBehindChanged(IBinder, boolean)","android.app.ActivityThread.sendMessage(int, android.os.IBinder, int)"
"android.app.RemoteServiceException.scheduleUnbindService(IBinder, Intent)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.BindServiceData)"
"android.app.RemoteServiceException.updateVisibility(ActivityClientRecord, boolean)","android.app.Activity.makeVisible()"
"android.app.RemoteServiceException.updateVisibility(ActivityClientRecord, boolean)","android.view.View.setVisibility(int)"
"android.app.RemoteServiceException.updateVisibility(ActivityClientRecord, boolean)","android.app.ActivityThread.performConfigurationChanged(android.app.Activity, android.content.res.Configuration)"
"android.app.RemoteServiceException.updateVisibility(ActivityClientRecord, boolean)","android.content.res.Configuration.diff(android.content.res.Configuration)"
"android.app.RemoteServiceException.updateVisibility(ActivityClientRecord, boolean)","android.app.ActivityThread.freeTextLayoutCachesIfNeeded(int)"
"android.app.RemoteServiceException.safeToComponentShortString(Intent)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.safeToComponentShortString(Intent)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.dumpProvider(FileDescriptor, IBinder, String[])","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.DumpComponentInfo, int, int, boolean)"
"android.app.RemoteServiceException.dumpProvider(FileDescriptor, IBinder, String[])","android.os.ParcelFileDescriptor.dup(java.io.FileDescriptor)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.IActivityManager.activityResumed(android.os.IBinder)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.ActivityThread.unscheduleGcIdler()"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.IActivityManager.finishActivity(android.os.IBinder, int, null, boolean)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.view.View.setVisibility(int)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.IActivityManager.willActivityBeVisible(android.os.IBinder)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.Activity.getWindowManager()"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.os.MessageQueue.addIdleHandler(android.app.ActivityThread.Idler)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.view.Window.getAttributes()"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.view.ViewManager.addView(android.view.View, android.view.WindowManager.LayoutParams)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.Activity.getActivityToken()"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.Activity.getWindow()"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.view.ViewManager.updateViewLayout(android.view.View, android.view.WindowManager.LayoutParams)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.Activity.makeVisible()"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.ActivityThread.performResumeActivity(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.ActivityThread.cleanUpPendingRemoveWindows(android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.os.Looper.myQueue()"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.ActivityThread.performConfigurationChanged(android.app.Activity, android.content.res.Configuration)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.content.res.Configuration.diff(android.content.res.Configuration)"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.view.Window.getDecorView()"
"android.app.RemoteServiceException.handleResumeActivity(IBinder, boolean, boolean, boolean)","android.app.ActivityThread.freeTextLayoutCachesIfNeeded(int)"
"android.app.RemoteServiceException.handleCancelVisibleBehind(IBinder)","android.app.Activity.onVisibleBehindCanceled()"
"android.app.RemoteServiceException.handleCancelVisibleBehind(IBinder)","android.app.IActivityManager.backgroundResourcesReleased(android.os.IBinder)"
"android.app.RemoteServiceException.handleCancelVisibleBehind(IBinder)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleCancelVisibleBehind(IBinder)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleCancelVisibleBehind(IBinder)","android.app.Activity.getLocalClassName()"
"android.app.RemoteServiceException.getIntCoreSetting(String, int)","android.os.BaseBundle.getInt(java.lang.String, int)"
"android.app.RemoteServiceException.handleNewIntent(NewIntentData)","android.app.ActivityThread.performNewIntents(android.os.IBinder, java.util.List<com.android.internal.content.ReferrerIntent>)"
"android.app.RemoteServiceException.handleActivityConfigurationChanged(IBinder)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleActivityConfigurationChanged(IBinder)","android.app.ActivityThread.performConfigurationChanged(android.app.Activity, android.content.res.Configuration)"
"android.app.RemoteServiceException.handleActivityConfigurationChanged(IBinder)","android.content.res.Configuration.diff(android.content.res.Configuration)"
"android.app.RemoteServiceException.handleActivityConfigurationChanged(IBinder)","android.app.ActivityThread.freeTextLayoutCachesIfNeeded(int)"
"android.app.RemoteServiceException.handleDumpProvider(DumpComponentInfo)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleDumpProvider(DumpComponentInfo)","android.os.StrictMode.allowThreadDiskWrites()"
"android.app.RemoteServiceException.handleDumpProvider(DumpComponentInfo)","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.app.RemoteServiceException.handleDumpProvider(DumpComponentInfo)","android.os.StrictMode.setThreadPolicy(android.os.StrictMode.ThreadPolicy)"
"android.app.RemoteServiceException.handleDumpProvider(DumpComponentInfo)","android.content.ContentProvider.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.app.RemoteServiceException.handleDumpProvider(DumpComponentInfo)","java.io.PrintWriter.flush()"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.app.Service.onStartCommand(android.content.Intent, int, int)"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.content.Intent.setExtrasClassLoader(java.lang.ClassLoader)"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.content.ContextWrapper.getClassLoader()"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.content.Intent.prepareToEnterProcess()"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.app.ActivityThread.ensureJitEnabled()"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.app.IActivityManager.serviceDoneExecuting(android.os.IBinder, int, int, int)"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.app.Instrumentation.onException(android.app.Service, java.lang.Exception)"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.app.Service.onTaskRemoved(android.content.Intent)"
"android.app.RemoteServiceException.handleServiceArgs(ServiceArgsData)","android.app.QueuedWork.waitToFinish()"
"android.app.RemoteServiceException.sendMessage(int, Object, int, int, boolean)","android.os.Message.setAsynchronous(boolean)"
"android.app.RemoteServiceException.sendMessage(int, Object, int, int, boolean)","android.os.Handler.sendMessage(android.os.Message)"
"android.app.RemoteServiceException.sendMessage(int, Object, int, int, boolean)","android.os.Message.obtain()"
"android.app.RemoteServiceException.scheduleWindowVisibility(IBinder, boolean)","android.app.ActivityThread.sendMessage(int, android.os.IBinder)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.app.ActivityThread.unscheduleGcIdler()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.BroadcastReceiver.PendingResult.sendFinished(android.app.IActivityManager)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","java.lang.Class.newInstance()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.BroadcastReceiver.setPendingResult(android.app.ActivityThread.ReceiverData)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.Intent.setExtrasClassLoader(java.lang.ClassLoader)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.app.Instrumentation.onException(android.content.BroadcastReceiver, java.lang.Exception)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.app.LoadedApk.makeApplication(boolean, android.app.Instrumentation)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","java.lang.ThreadLocal.set(android.content.Intent)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.app.LoadedApk.getClassLoader()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.Intent.prepareToEnterProcess()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.BroadcastReceiver.onReceive(android.content.Context, android.content.Intent)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","java.lang.ClassLoader.loadClass(java.lang.String)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.app.ContextImpl.getReceiverRestrictedContext()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.ComponentName.getClassName()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.BroadcastReceiver.PendingResult.setExtrasClassLoader(java.lang.ClassLoader)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.ContextWrapper.getBaseContext()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.app.ActivityThread.getPackageInfoNoCheck(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","java.lang.ThreadLocal.set(null)"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.BroadcastReceiver.getPendingResult()"
"android.app.RemoteServiceException.handleReceiver(ReceiverData)","android.content.BroadcastReceiver.PendingResult.finish()"
"android.app.RemoteServiceException.addData(String, byte[], int)","android.os.DropBoxManager.addData(java.lang.String, byte[], int)"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.util.EventLog.writeEvent(int, int, java.lang.String)"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.os.UserHandle.myUserId()"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.app.Activity.getComponentName()"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.app.Activity.performResume()"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.content.ComponentName.getClassName()"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.app.ActivityThread.deliverNewIntents(android.app.ActivityThread.ActivityClientRecord, java.util.List<com.android.internal.content.ReferrerIntent>)"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.app.FragmentManagerImpl.noteStateNotSaved()"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.performResumeActivity(IBinder, boolean)","android.app.ActivityThread.deliverResults(android.app.ActivityThread.ActivityClientRecord, java.util.List<android.app.ResultInfo>)"
"android.app.RemoteServiceException.resolveActivityInfo(Intent)","android.content.Intent.resolveActivityInfo(android.content.pm.PackageManager, int)"
"android.app.RemoteServiceException.resolveActivityInfo(Intent)","android.content.ContextWrapper.getPackageManager()"
"android.app.RemoteServiceException.resolveActivityInfo(Intent)","android.app.Instrumentation.checkStartActivityResult(int, android.content.Intent)"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.ContextImpl.createAppContext(android.app.ActivityThread, android.app.LoadedApk)"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.ActivityThread.unscheduleGcIdler()"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","java.lang.Class.newInstance()"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.Service.onCreate()"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.LoadedApk.makeApplication(boolean, android.app.Instrumentation)"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.util.ArrayMap.put(android.os.IBinder, android.app.Service)"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.Service.attach(android.app.ContextImpl, android.app.ActivityThread, java.lang.String, android.os.IBinder, android.app.Application, android.app.IActivityManager)"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.ContextImpl.setOuterContext(android.app.Service)"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.LoadedApk.getClassLoader()"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","java.lang.ClassLoader.loadClass(java.lang.String)"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.IActivityManager.serviceDoneExecuting(android.os.IBinder, int, int, int)"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.Instrumentation.onException(android.app.Service, java.lang.Exception)"
"android.app.RemoteServiceException.handleCreateService(CreateServiceData)","android.app.ActivityThread.getPackageInfoNoCheck(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.updateTimeZone()","java.util.TimeZone.setDefault(null)"
"android.app.RemoteServiceException.handleTranslucentConversionComplete(IBinder, boolean)","android.app.Activity.onTranslucentConversionComplete(boolean)"
"android.app.RemoteServiceException.handleTranslucentConversionComplete(IBinder, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.scheduleLaunchActivity(Intent, IBinder, int, ActivityInfo, Configuration, CompatibilityInfo, String, IVoiceInteractor, int, Bundle, PersistableBundle, List, List, boolean, boolean, ProfilerInfo)","android.app.ActivityThread.ApplicationThread.updatePendingConfiguration(android.content.res.Configuration)"
"android.app.RemoteServiceException.scheduleLaunchActivity(Intent, IBinder, int, ActivityInfo, Configuration, CompatibilityInfo, String, IVoiceInteractor, int, Bundle, PersistableBundle, List, List, boolean, boolean, ProfilerInfo)","android.app.ActivityThread.ApplicationThread.updateProcessState(int, boolean)"
"android.app.RemoteServiceException.scheduleLaunchActivity(Intent, IBinder, int, ActivityInfo, Configuration, CompatibilityInfo, String, IVoiceInteractor, int, Bundle, PersistableBundle, List, List, boolean, boolean, ProfilerInfo)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.sendMessage(int, Object, int)","android.app.ActivityThread.sendMessage(int, java.lang.Object, int, int, boolean)"
"android.app.RemoteServiceException.isPreHoneycomb()","android.content.ContextWrapper.getApplicationInfo()"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, int)","android.os.UserHandle.isSameApp(int, int)"
"android.app.RemoteServiceException.getPackageInfo(ApplicationInfo, CompatibilityInfo, int)","android.app.ActivityThread.getPackageInfo(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo, null, boolean, boolean, boolean)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.content.ContentProvider.getIContentProvider()"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.app.Instrumentation.onException(null, java.lang.Exception)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","java.lang.Class.newInstance()"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.app.ActivityThread.incProviderRefLocked(android.app.ActivityThread.ProviderRefCount, boolean)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.app.IActivityManager.removeContentProvider(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.os.IInterface.asBinder()"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","java.lang.String.equals(java.lang.String)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.app.ActivityThread.installProviderAuthoritiesLocked(android.content.IContentProvider, android.content.ContentProvider, android.app.IActivityManager.ContentProviderHolder)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.content.Context.getPackageName()"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.content.ContentProvider.attachInfo(android.content.Context, android.content.pm.ProviderInfo)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.util.ArrayMap.put(android.content.ComponentName, android.app.ActivityThread.ProviderClientRecord)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.util.ArrayMap.put(android.os.IBinder, android.app.ActivityThread.ProviderClientRecord)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.content.Context.getClassLoader()"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","java.lang.ClassLoader.loadClass(java.lang.String)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.content.ContextWrapper.getPackageName()"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.util.ArrayMap.put(android.os.IBinder, android.app.ActivityThread.ProviderRefCount)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.util.ArrayMap.get(android.content.ComponentName)"
"android.app.RemoteServiceException.installProvider(Context, IActivityManager.ContentProviderHolder, ProviderInfo, boolean, boolean, boolean)","android.content.Context.createPackageContext(java.lang.String, int)"
"android.app.RemoteServiceException.acquireProvider(Context, String, int, boolean)","android.app.ActivityThread.getApplicationThread()"
"android.app.RemoteServiceException.acquireProvider(Context, String, int, boolean)","android.app.ActivityThread.acquireExistingProvider(android.content.Context, java.lang.String, int, boolean)"
"android.app.RemoteServiceException.acquireProvider(Context, String, int, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.acquireProvider(Context, String, int, boolean)","android.app.IActivityManager.getContentProvider(android.app.ActivityThread.ApplicationThread, java.lang.String, int, boolean)"
"android.app.RemoteServiceException.acquireProvider(Context, String, int, boolean)","android.app.ActivityThread.installProvider(android.content.Context, android.app.IActivityManager.ContentProviderHolder, android.content.pm.ProviderInfo, boolean, boolean, boolean)"
"android.app.RemoteServiceException.scheduleEnterAnimationComplete(IBinder)","android.app.ActivityThread.sendMessage(int, android.os.IBinder)"
"android.app.RemoteServiceException.setProfiler(ProfilerInfo)","android.os.ParcelFileDescriptor.close()"
"android.app.RemoteServiceException.dumpService(FileDescriptor, IBinder, String[])","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.DumpComponentInfo, int, int, boolean)"
"android.app.RemoteServiceException.dumpService(FileDescriptor, IBinder, String[])","android.os.ParcelFileDescriptor.dup(java.io.FileDescriptor)"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","android.app.ContextImpl.setOuterContext(android.app.Activity)"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","android.os.SystemProperties.get(java.lang.String)"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","android.hardware.display.DisplayManagerGlobal.getInstance()"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","android.app.IActivityManager.getActivityDisplayId(android.os.IBinder)"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","android.app.ContextImpl.createActivityContext(android.app.ActivityThread, android.app.LoadedApk, android.os.IBinder)"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","android.app.ContextImpl.createDisplayContext(android.view.Display)"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","android.hardware.display.DisplayManagerGlobal.getRealDisplay(int, android.os.IBinder)"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","java.lang.String.isEmpty()"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","android.hardware.display.DisplayManagerGlobal.getDisplayIds()"
"android.app.RemoteServiceException.createBaseContextForActivity(ActivityClientRecord, Activity)","java.lang.String.contains(java.lang.String)"
"android.app.RemoteServiceException.scheduleActivityConfigurationChanged(IBinder)","android.app.ActivityThread.sendMessage(int, android.os.IBinder)"
"android.app.RemoteServiceException.report(int, Object[])","android.util.EventLog.writeEvent(int, java.lang.Object[])"
"android.app.RemoteServiceException.releaseProvider(IContentProvider, boolean)","android.os.Handler.obtainMessage(int, android.app.ActivityThread.ProviderRefCount)"
"android.app.RemoteServiceException.releaseProvider(IContentProvider, boolean)","android.app.IActivityManager.refContentProvider(android.os.IBinder, int, int)"
"android.app.RemoteServiceException.releaseProvider(IContentProvider, boolean)","android.os.Handler.sendMessage(android.os.Message)"
"android.app.RemoteServiceException.releaseProvider(IContentProvider, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.releaseProvider(IContentProvider, boolean)","android.os.IInterface.asBinder()"
"android.app.RemoteServiceException.releaseProvider(IContentProvider, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.performRestartActivity(IBinder)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.performRestartActivity(IBinder)","android.app.Activity.performRestart()"
"android.app.RemoteServiceException.setHttpProxy(String, String, String, Uri)","android.net.Proxy.setHttpProxySystemProperty(android.net.ProxyInfo)"
"android.app.RemoteServiceException.setHttpProxy(String, String, String, Uri)","android.net.ConnectivityManager.getDefaultProxy()"
"android.app.RemoteServiceException.setHttpProxy(String, String, String, Uri)","android.app.ActivityThread.getSystemContext()"
"android.app.RemoteServiceException.setHttpProxy(String, String, String, Uri)","android.net.ConnectivityManager.getProcessDefaultNetwork()"
"android.app.RemoteServiceException.setHttpProxy(String, String, String, Uri)","android.net.Proxy.setHttpProxySystemProperty(java.lang.String, java.lang.String, java.lang.String, android.net.Uri)"
"android.app.RemoteServiceException.setHttpProxy(String, String, String, Uri)","android.net.ConnectivityManager.from(android.app.ContextImpl)"
"android.app.RemoteServiceException.scheduleCreateService(IBinder, ServiceInfo, CompatibilityInfo, int)","android.app.ActivityThread.ApplicationThread.updateProcessState(int, boolean)"
"android.app.RemoteServiceException.scheduleCreateService(IBinder, ServiceInfo, CompatibilityInfo, int)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.CreateServiceData)"
"android.app.RemoteServiceException.main(String[])","android.app.ActivityThread.attach(boolean)"
"android.app.RemoteServiceException.main(String[])","android.os.Looper.loop()"
"android.app.RemoteServiceException.main(String[])","com.android.internal.os.SamplingProfilerIntegration.start()"
"android.app.RemoteServiceException.main(String[])","android.os.Environment.initForCurrentUser()"
"android.app.RemoteServiceException.main(String[])","android.os.Process.setArgV0(java.lang.String)"
"android.app.RemoteServiceException.main(String[])","android.os.Looper.setMessageLogging(android.util.LogPrinter)"
"android.app.RemoteServiceException.main(String[])","android.os.Looper.myLooper()"
"android.app.RemoteServiceException.main(String[])","android.os.Environment.getUserConfigDirectory(int)"
"android.app.RemoteServiceException.main(String[])","android.os.UserHandle.myUserId()"
"android.app.RemoteServiceException.main(String[])","android.os.Looper.prepareMainLooper()"
"android.app.RemoteServiceException.main(String[])","android.app.ActivityThread.getHandler()"
"android.app.RemoteServiceException.handleTrimMemory(int)","android.content.ComponentCallbacks2.onTrimMemory(int)"
"android.app.RemoteServiceException.handleTrimMemory(int)","java.util.ArrayList.size()"
"android.app.RemoteServiceException.handleTrimMemory(int)","android.view.WindowManagerGlobal.trimMemory(int)"
"android.app.RemoteServiceException.handleTrimMemory(int)","android.app.ActivityThread.collectComponentCallbacks(boolean, null)"
"android.app.RemoteServiceException.handleTrimMemory(int)","java.util.ArrayList.get(int)"
"android.app.RemoteServiceException.handleTrimMemory(int)","android.view.WindowManagerGlobal.getInstance()"
"android.app.RemoteServiceException.unregisterOnActivityPausedListener(Activity, OnActivityPausedListener)","android.util.ArrayMap.get(android.app.Activity)"
"android.app.RemoteServiceException.unregisterOnActivityPausedListener(Activity, OnActivityPausedListener)","java.util.ArrayList.remove(android.app.OnActivityPausedListener)"
"android.app.RemoteServiceException.scheduleCrash(String)","android.app.ActivityThread.sendMessage(int, java.lang.String)"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.app.ActivityThread.ActivityClientRecord.isPreHoneycomb()"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.app.Activity.performRestart()"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.app.Activity.performStop()"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.app.IActivityManager.activitySlept(android.os.IBinder)"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.handleSleeping(IBinder, boolean)","android.app.QueuedWork.waitToFinish()"
"android.app.RemoteServiceException.scheduleSendResult(IBinder, List)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.ResultData)"
"android.app.RemoteServiceException.scheduleContextCleanup(ContextImpl, String, String)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.ContextCleanupInfo)"
"android.app.RemoteServiceException.doGcIfNeeded()","com.android.internal.os.BinderInternal.forceGc(java.lang.String)"
"android.app.RemoteServiceException.doGcIfNeeded()","com.android.internal.os.BinderInternal.getLastGcTime()"
"android.app.RemoteServiceException.doGcIfNeeded()","android.os.SystemClock.uptimeMillis()"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.util.EventLog.writeEvent(int, int, java.lang.String)"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.app.OnActivityPausedListener.onPaused(android.app.Activity)"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.util.ArrayMap.remove(android.app.Activity)"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.os.UserHandle.myUserId()"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.app.Activity.getComponentName()"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.app.ActivityThread.callCallActivityOnSaveInstanceState(android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.app.Instrumentation.callActivityOnPause(android.app.Activity)"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","java.util.ArrayList.size()"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.content.ComponentName.getClassName()"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.performPauseActivity(ActivityClientRecord, boolean, boolean)","java.util.ArrayList.get(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getTotalPrivateClean()"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getTotalPrivateDirty()"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getOtherLabel(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, int, int, int, int, java.lang.String, java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getTotalSharedClean()"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","java.io.PrintWriter.print(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getOtherPrivateDirty(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, int, int, int, int, int, int, int, java.lang.String, java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","java.io.PrintWriter.print(char)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, int, int, int, int, long, long, long)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getOtherSwappablePss(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getOtherPrivateClean(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getTotalSwappedOut()"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getTotalPss()"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getOtherSharedDirty(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getOtherSharedClean(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getTotalSwappablePss()"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.app.ActivityThread.printRow(java.io.PrintWriter, java.lang.String, java.lang.String, int, int, int, int, int, int, int, long, long, long)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","java.io.PrintWriter.print(java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","java.io.PrintWriter.print(long)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getOtherSwappedOut(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","java.io.PrintWriter.println(java.lang.String)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getOtherPss(int)"
"android.app.RemoteServiceException.dumpMemInfoTable(PrintWriter, Debug.MemoryInfo, boolean, boolean, boolean, int, String, long, long, long, long, long, long)","android.os.Debug.MemoryInfo.getTotalSharedDirty()"
"android.app.RemoteServiceException.getPackageManager()","android.os.ServiceManager.getService(java.lang.String)"
"android.app.RemoteServiceException.scheduleRelaunchActivity(IBinder, List, List, int, boolean, Configuration)","android.app.ActivityThread.requestRelaunchActivity(android.os.IBinder, java.util.List<android.app.ResultInfo>, java.util.List<com.android.internal.content.ReferrerIntent>, int, boolean, android.content.res.Configuration, boolean)"
"android.app.RemoteServiceException.dumpDbInfo(FileDescriptor, String[])","android.database.sqlite.SQLiteDebug.dump(android.util.PrintWriterPrinter, java.lang.String[])"
"android.app.RemoteServiceException.dumpDbInfo(FileDescriptor, String[])","java.io.PrintWriter.flush()"
"android.app.RemoteServiceException.startActivityNow(Activity, String, Intent, ActivityInfo, IBinder, Bundle, Activity.NonConfigurationInstances)","android.app.ActivityThread.performLaunchActivity(android.app.ActivityThread.ActivityClientRecord, null)"
"android.app.RemoteServiceException.startActivityNow(Activity, String, Intent, ActivityInfo, IBinder, Bundle, Activity.NonConfigurationInstances)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.startActivityNow(Activity, String, Intent, ActivityInfo, IBinder, Bundle, Activity.NonConfigurationInstances)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.scheduleStopService(IBinder)","android.app.ActivityThread.sendMessage(int, android.os.IBinder)"
"android.app.RemoteServiceException.run()","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.run()","android.app.IActivityManager.activityStopped(android.os.IBinder, android.os.Bundle, android.os.PersistableBundle, java.lang.CharSequence)"
"android.app.RemoteServiceException.dumpHeap(boolean, String, ParcelFileDescriptor)","android.app.ActivityThread.sendMessage(int, android.app.ActivityThread.DumpHeapData, int, int, boolean)"
"android.app.RemoteServiceException.finishInstrumentation(int, Bundle)","android.os.Debug.stopMethodTracing()"
"android.app.RemoteServiceException.finishInstrumentation(int, Bundle)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.finishInstrumentation(int, Bundle)","android.app.IActivityManager.finishInstrumentation(android.app.ActivityThread.ApplicationThread, int, android.os.Bundle)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleReceiver(android.app.ActivityThread.ReceiverData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleDumpProvider(android.app.ActivityThread.DumpComponentInfo)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleSetCoreSettings(android.os.Bundle)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleProfilerControl(boolean, android.app.ProfilerInfo, int)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleBindApplication(android.app.ActivityThread.AppBindData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleLowMemory()"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleStopActivity(android.os.IBinder, boolean, int)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleDumpActivity(android.app.ActivityThread.DumpComponentInfo)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleDispatchPackageBroadcast(int, java.lang.String[])"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleStopService(android.os.IBinder)"
"android.app.RemoteServiceException.handleMessage(Message)","android.os.Looper.quit()"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleUnstableProviderDied(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleSendResult(android.app.ActivityThread.ResultData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleDestroyBackupAgent(android.app.ActivityThread.CreateBackupAgentData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleUpdatePackageCompatibilityInfo(android.app.ActivityThread.UpdateCompatibilityData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.completeRemoveProvider(android.app.ActivityThread.ProviderRefCount)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleTranslucentConversionComplete(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.getPackageInfoNoCheck(android.content.pm.ApplicationInfo, android.content.res.CompatibilityInfo)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleDestroyActivity(android.os.IBinder, boolean, int, boolean)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleCreateService(android.app.ActivityThread.CreateServiceData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleWindowVisibility(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.onNewActivityOptions(android.os.IBinder, android.app.ActivityOptions)"
"android.app.RemoteServiceException.handleMessage(Message)","android.os.Trace.traceBegin(long, java.lang.String)"
"android.app.RemoteServiceException.handleMessage(Message)","android.os.Process.killProcess(int)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleConfigurationChanged(android.content.res.Configuration, null)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleActivityConfigurationChanged(android.os.IBinder)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.ensureJitEnabled()"
"android.app.RemoteServiceException.handleMessage(Message)","android.os.Trace.traceEnd(long)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleLaunchActivity(android.app.ActivityThread.ActivityClientRecord, null)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handlePauseActivity(android.os.IBinder, boolean, boolean, int, boolean)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleServiceArgs(android.app.ActivityThread.ServiceArgsData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleRelaunchActivity(android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleTrimMemory(int)"
"android.app.RemoteServiceException.handleMessage(Message)","android.os.Process.myPid()"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.scheduleGcIdler()"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleDumpHeap(boolean, android.app.ActivityThread.DumpHeapData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleDumpService(android.app.ActivityThread.DumpComponentInfo)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleOnBackgroundVisibleBehindChanged(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleInstallProvider(android.content.pm.ProviderInfo)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.Application.onTerminate()"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleUnbindService(android.app.ActivityThread.BindServiceData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleEnterAnimationComplete(android.os.IBinder)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleResumeActivity(android.os.IBinder, boolean, boolean, boolean)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleBindService(android.app.ActivityThread.BindServiceData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleCreateBackupAgent(android.app.ActivityThread.CreateBackupAgentData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleCancelVisibleBehind(android.os.IBinder)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleNewIntent(android.app.ActivityThread.NewIntentData)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.H.maybeSnapshot()"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleSleeping(android.os.IBinder, boolean)"
"android.app.RemoteServiceException.handleMessage(Message)","android.os.Looper.myLooper()"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ContextImpl.performFinalCleanup(java.lang.String, java.lang.String)"
"android.app.RemoteServiceException.handleMessage(Message)","android.app.ActivityThread.handleRequestAssistContextExtras(android.app.ActivityThread.RequestAssistContextExtras)"
"android.app.RemoteServiceException.getActivity(IBinder)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.dumpGfxInfo(FileDescriptor, String[])","android.view.WindowManagerGlobal.dumpGfxInfo(java.io.FileDescriptor)"
"android.app.RemoteServiceException.dumpGfxInfo(FileDescriptor, String[])","android.app.ActivityThread.dumpGraphicsInfo(java.io.FileDescriptor)"
"android.app.RemoteServiceException.dumpGfxInfo(FileDescriptor, String[])","android.view.WindowManagerGlobal.getInstance()"
"android.app.RemoteServiceException.handleWindowVisibility(IBinder, boolean)","android.app.ActivityThread.performStopActivityInner(android.app.ActivityThread.ActivityClientRecord, null, boolean, boolean)"
"android.app.RemoteServiceException.handleWindowVisibility(IBinder, boolean)","android.app.ActivityThread.updateVisibility(android.app.ActivityThread.ActivityClientRecord, boolean)"
"android.app.RemoteServiceException.handleWindowVisibility(IBinder, boolean)","android.app.ActivityThread.unscheduleGcIdler()"
"android.app.RemoteServiceException.handleWindowVisibility(IBinder, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleWindowVisibility(IBinder, boolean)","android.app.Activity.performRestart()"
"android.app.RemoteServiceException.callCallActivityOnSaveInstanceState(ActivityClientRecord)","android.app.Instrumentation.callActivityOnSaveInstanceState(android.app.Activity, android.os.Bundle, android.os.PersistableBundle)"
"android.app.RemoteServiceException.callCallActivityOnSaveInstanceState(ActivityClientRecord)","android.os.Bundle.setAllowFds(boolean)"
"android.app.RemoteServiceException.callCallActivityOnSaveInstanceState(ActivityClientRecord)","android.app.ActivityThread.ActivityClientRecord.isPersistable()"
"android.app.RemoteServiceException.callCallActivityOnSaveInstanceState(ActivityClientRecord)","android.app.Instrumentation.callActivityOnSaveInstanceState(android.app.Activity, android.os.Bundle)"
"android.app.RemoteServiceException.getSystemContext()","android.app.ContextImpl.createSystemContext(android.app.ActivityThread)"
"android.app.RemoteServiceException.handleInstallProvider(ProviderInfo)","android.os.StrictMode.allowThreadDiskWrites()"
"android.app.RemoteServiceException.handleInstallProvider(ProviderInfo)","com.google.android.collect.Lists.newArrayList(android.content.pm.ProviderInfo)"
"android.app.RemoteServiceException.handleInstallProvider(ProviderInfo)","android.os.StrictMode.setThreadPolicy(android.os.StrictMode.ThreadPolicy)"
"android.app.RemoteServiceException.handleInstallProvider(ProviderInfo)","android.app.ActivityThread.installContentProviders(android.app.Application, java.util.ArrayList<android.content.pm.ProviderInfo>)"
"android.app.RemoteServiceException.applyConfigurationToResources(Configuration)","android.app.ResourcesManager.applyConfigurationToResourcesLocked(android.content.res.Configuration, null)"
"android.app.RemoteServiceException.handlePauseActivity(IBinder, boolean, boolean, int, boolean)","android.app.ActivityThread.ActivityClientRecord.isPreHoneycomb()"
"android.app.RemoteServiceException.handlePauseActivity(IBinder, boolean, boolean, int, boolean)","android.app.ActivityThread.performPauseActivity(android.os.IBinder, boolean, boolean)"
"android.app.RemoteServiceException.handlePauseActivity(IBinder, boolean, boolean, int, boolean)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handlePauseActivity(IBinder, boolean, boolean, int, boolean)","android.app.ActivityThread.performUserLeavingActivity(android.app.ActivityThread.ActivityClientRecord)"
"android.app.RemoteServiceException.handlePauseActivity(IBinder, boolean, boolean, int, boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handlePauseActivity(IBinder, boolean, boolean, int, boolean)","android.app.QueuedWork.waitToFinish()"
"android.app.RemoteServiceException.handlePauseActivity(IBinder, boolean, boolean, int, boolean)","android.app.IActivityManager.activityPaused(android.os.IBinder)"
"android.app.RemoteServiceException.createThumbnailBitmap(ActivityClientRecord)","java.lang.Throwable.toString()"
"android.app.RemoteServiceException.createThumbnailBitmap(ActivityClientRecord)","android.content.res.Resources.getDimensionPixelSize(int)"
"android.app.RemoteServiceException.createThumbnailBitmap(ActivityClientRecord)","android.view.ContextThemeWrapper.getResources()"
"android.app.RemoteServiceException.createThumbnailBitmap(ActivityClientRecord)","android.content.Intent.getComponent()"
"android.app.RemoteServiceException.createThumbnailBitmap(ActivityClientRecord)","android.app.Instrumentation.onException(android.app.Activity, java.lang.Exception)"
"android.app.RemoteServiceException.createThumbnailBitmap(ActivityClientRecord)","android.content.ComponentName.toShortString()"
"android.app.RemoteServiceException.performDestroyActivity(IBinder, boolean)","android.app.ActivityThread.performDestroyActivity(android.os.IBinder, boolean, int, boolean)"
"android.app.RemoteServiceException.applyConfigCompatMainThread(int, Configuration, CompatibilityInfo)","android.content.res.CompatibilityInfo.supportsScreen()"
"android.app.RemoteServiceException.applyConfigCompatMainThread(int, Configuration, CompatibilityInfo)","android.content.res.CompatibilityInfo.applyToConfiguration(int, android.content.res.Configuration)"
"android.app.RemoteServiceException.applyConfigCompatMainThread(int, Configuration, CompatibilityInfo)","android.content.res.Configuration.setTo(android.content.res.Configuration)"
"android.app.RemoteServiceException.peekPackageInfo(String, boolean)","java.lang.ref.Reference.get()"
"android.app.RemoteServiceException.peekPackageInfo(String, boolean)","android.util.ArrayMap.get(java.lang.String)"
"android.app.RemoteServiceException.handleRequestAssistContextExtras(RequestAssistContextExtras)","android.util.ArrayMap.get(android.os.IBinder)"
"android.app.RemoteServiceException.handleRequestAssistContextExtras(RequestAssistContextExtras)","android.app.IActivityManager.reportAssistContextExtras(android.os.IBinder, android.os.Bundle)"
"android.app.RemoteServiceException.handleRequestAssistContextExtras(RequestAssistContextExtras)","android.app.Activity.onProvideAssistData(android.os.Bundle)"
"android.app.RemoteServiceException.handleRequestAssistContextExtras(RequestAssistContextExtras)","android.app.ActivityManagerNative.getDefault()"
"android.app.RemoteServiceException.handleRequestAssistContextExtras(RequestAssistContextExtras)","android.app.Application.dispatchOnProvideAssistData(android.app.Activity, android.os.Bundle)"
"android.app.RemoteServiceException.handleRequestAssistContextExtras(RequestAssistContextExtras)","android.os.BaseBundle.isEmpty()"
"android.app.RemoteServiceException.handleRequestAssistContextExtras(RequestAssistContextExtras)","android.app.Activity.getApplication()"
"android.app.RemoteServiceException.scheduleCancelVisibleBehind(IBinder)","android.app.ActivityThread.sendMessage(int, android.os.IBinder)"
"android.net.dhcp.DhcpDiscoverPacket.toString()","android.net.dhcp.DhcpPacket.toString()"
"android.net.dhcp.DhcpDiscoverPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlv(java.nio.ByteBuffer, byte, byte)"
"android.net.dhcp.DhcpDiscoverPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlv(java.nio.ByteBuffer, byte, byte[])"
"android.net.dhcp.DhcpDiscoverPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlvEnd(java.nio.ByteBuffer)"
"android.net.dhcp.DhcpDiscoverPacket.doNextOp(DhcpStateMachine)","android.net.dhcp.DhcpStateMachine.onDiscoverReceived(boolean, int, byte[], byte[])"
"android.net.dhcp.DhcpDiscoverPacket.buildPacket(int, short, short)","java.nio.ByteBuffer.flip()"
"android.net.dhcp.DhcpDiscoverPacket.buildPacket(int, short, short)","java.nio.ByteBuffer.allocate(int)"
"com.android.internal.app.ChooserActivity.onCreate(Bundle)","android.content.Intent.getCharSequenceExtra(java.lang.String)"
"com.android.internal.app.ChooserActivity.onCreate(Bundle)","android.content.Intent.getBundleExtra(java.lang.String)"
"com.android.internal.app.ChooserActivity.onCreate(Bundle)","android.content.Intent.getParcelableExtra(java.lang.String)"
"com.android.internal.app.ChooserActivity.onCreate(Bundle)","android.content.Intent.getParcelableArrayExtra(java.lang.String)"
"com.android.internal.app.ChooserActivity.modifyTargetIntent(Intent)","android.content.Intent.getAction()"
"com.android.internal.app.ChooserActivity.modifyTargetIntent(Intent)","java.lang.String.equals(java.lang.String)"
"com.android.internal.app.ChooserActivity.modifyTargetIntent(Intent)","android.content.Intent.addFlags(int)"
"com.android.internal.app.ChooserActivity.onActivityStarted(Intent)","android.content.Intent.putExtra(java.lang.String, android.content.ComponentName)"
"com.android.internal.app.ChooserActivity.onActivityStarted(Intent)","android.content.Intent.getComponent()"
"com.android.internal.app.ChooserActivity.onActivityStarted(Intent)","android.content.IntentSender.sendIntent(com.android.internal.app.ChooserActivity, int, android.content.Intent, null, null)"
"com.android.internal.app.ChooserActivity.getReplacementIntent(ActivityInfo, Intent)","android.content.Intent.putExtras(android.os.Bundle)"
"com.android.internal.app.ChooserActivity.getReplacementIntent(ActivityInfo, Intent)","android.os.Bundle.getBundle(java.lang.String)"
"com.android.internal.app.ChooserActivity.getReplacementIntent(ActivityInfo, Intent)","java.lang.String.equals(java.lang.String)"
"com.android.internal.transition.ActionBarTransition.beginDelayedTransition(ViewGroup)","android.transition.TransitionManager.beginDelayedTransition(android.view.ViewGroup, android.transition.Transition)"
"android.widget.AppSecurityPermissions.addPermToList(List, MyPermissionInfo)","java.util.Collections.binarySearch(java.util.List<android.widget.AppSecurityPermissions.MyPermissionInfo>, android.widget.AppSecurityPermissions.MyPermissionInfo, android.widget.AppSecurityPermissions.PermissionInfoComparator)"
"android.widget.AppSecurityPermissions.addPermToList(List, MyPermissionInfo)","java.util.List.add(int, android.widget.AppSecurityPermissions.MyPermissionInfo)"
"android.widget.AppSecurityPermissions.addPermToList(List, MyPermissionInfo)","android.content.pm.PackageItemInfo.loadLabel(android.content.pm.PackageManager)"
"android.widget.AppSecurityPermissions.getPermissionItemView(MyPermissionGroupInfo, MyPermissionInfo, boolean, CharSequence, boolean)","android.widget.AppSecurityPermissions.getPermissionItemView(android.content.Context, android.view.LayoutInflater, android.widget.AppSecurityPermissions.MyPermissionGroupInfo, android.widget.AppSecurityPermissions.MyPermissionInfo, boolean, java.lang.CharSequence, java.lang.String, boolean)"
"android.widget.AppSecurityPermissions.setPermissions(List)","android.widget.AppSecurityPermissions.addPermToList(java.util.ArrayList<android.widget.AppSecurityPermissions.MyPermissionInfo>, android.widget.AppSecurityPermissions.MyPermissionInfo)"
"android.widget.AppSecurityPermissions.setPermissions(List)","java.util.List.add(android.widget.AppSecurityPermissions.MyPermissionGroupInfo)"
"android.widget.AppSecurityPermissions.setPermissions(List)","java.util.Map.get(java.lang.String)"
"android.widget.AppSecurityPermissions.setPermissions(List)","android.widget.AppSecurityPermissions.isDisplayablePermission(android.widget.AppSecurityPermissions.MyPermissionInfo, int, int)"
"android.widget.AppSecurityPermissions.setPermissions(List)","android.content.pm.PackageManager.getApplicationInfo(java.lang.String, int)"
"android.widget.AppSecurityPermissions.setPermissions(List)","java.util.Map.values()"
"android.widget.AppSecurityPermissions.setPermissions(List)","java.util.Collections.sort(java.util.List<android.widget.AppSecurityPermissions.MyPermissionGroupInfo>, android.widget.AppSecurityPermissions.PermissionGroupInfoComparator)"
"android.widget.AppSecurityPermissions.setPermissions(List)","android.content.pm.PackageItemInfo.loadLabel(android.content.pm.PackageManager)"
"android.widget.AppSecurityPermissions.setPermission(MyPermissionGroupInfo, MyPermissionInfo, boolean, CharSequence, String, boolean)","android.os.Parcelable.Creator.createFromParcel(android.os.Parcel)"
"android.widget.AppSecurityPermissions.setPermission(MyPermissionGroupInfo, MyPermissionInfo, boolean, CharSequence, String, boolean)","android.os.Parcel.setDataPosition(int)"
"android.widget.AppSecurityPermissions.setPermission(MyPermissionGroupInfo, MyPermissionInfo, boolean, CharSequence, String, boolean)","android.text.SpannableStringBuilder.append(java.lang.CharSequence)"
"android.widget.AppSecurityPermissions.setPermission(MyPermissionGroupInfo, MyPermissionInfo, boolean, CharSequence, String, boolean)","android.os.Parcel.recycle()"
"android.widget.AppSecurityPermissions.setPermission(MyPermissionGroupInfo, MyPermissionInfo, boolean, CharSequence, String, boolean)","android.os.Parcel.obtain()"
"android.widget.AppSecurityPermissions.setPermission(MyPermissionGroupInfo, MyPermissionInfo, boolean, CharSequence, String, boolean)","android.widget.AppSecurityPermissions.MyPermissionGroupInfo.loadGroupIcon(android.content.pm.PackageManager)"
"android.widget.AppSecurityPermissions.setPermission(MyPermissionGroupInfo, MyPermissionInfo, boolean, CharSequence, String, boolean)","android.text.TextUtils.writeToParcel(java.lang.CharSequence, android.os.Parcel, int)"
"android.widget.AppSecurityPermissions.getPermissionItemView(Context, CharSequence, CharSequence, boolean)","android.content.Context.getSystemService(java.lang.String)"
"android.widget.AppSecurityPermissions.getPermissionCount(int)","android.widget.AppSecurityPermissions.getPermissionList(android.widget.AppSecurityPermissions.MyPermissionGroupInfo, int)"
"android.widget.AppSecurityPermissions.getPermissionCount(int)","java.util.List.size()"
"android.widget.AppSecurityPermissions.getPermissionCount(int)","java.util.List.get(int)"
"android.widget.AppSecurityPermissions.getAllUsedPermissions(int, Set)","android.content.pm.PackageManager.getPackagesForUid(int)"
"android.widget.AppSecurityPermissions.getAllUsedPermissions(int, Set)","android.widget.AppSecurityPermissions.getPermissionsForPackage(java.lang.String, java.util.Set<android.widget.AppSecurityPermissions.MyPermissionInfo>)"
"android.widget.AppSecurityPermissions.addRevokeUIIfNecessary(AlertDialog.Builder)","android.content.pm.PackageManager.revokePermission(java.lang.String, java.lang.String)"
"android.widget.AppSecurityPermissions.getPermissionsViewWithRevokeButtons()","android.widget.AppSecurityPermissions.getPermissionsView(int, boolean)"
"android.widget.AppSecurityPermissions.displayPermissions(List, LinearLayout, int, boolean)","android.widget.AppSecurityPermissions.getPermissionList(android.widget.AppSecurityPermissions.MyPermissionGroupInfo, int)"
"android.widget.AppSecurityPermissions.displayPermissions(List, LinearLayout, int, boolean)","android.widget.AppSecurityPermissions.getPermissionItemView(android.widget.AppSecurityPermissions.MyPermissionGroupInfo, android.widget.AppSecurityPermissions.MyPermissionInfo, boolean, java.lang.CharSequence, boolean)"
"android.widget.AppSecurityPermissions.displayPermissions(List, LinearLayout, int, boolean)","java.util.ArrayList.size()"
"android.widget.AppSecurityPermissions.displayPermissions(List, LinearLayout, int, boolean)","android.content.Context.getResources()"
"android.widget.AppSecurityPermissions.displayPermissions(List, LinearLayout, int, boolean)","java.util.List.size()"
"android.widget.AppSecurityPermissions.displayPermissions(List, LinearLayout, int, boolean)","java.util.List.get(int)"
"android.widget.AppSecurityPermissions.displayPermissions(List, LinearLayout, int, boolean)","android.content.res.Resources.getDisplayMetrics()"
"android.widget.AppSecurityPermissions.compare(MyPermissionGroupInfo, MyPermissionGroupInfo)","java.util.Comparator.compare(java.lang.CharSequence, java.lang.CharSequence)"
"android.widget.AppSecurityPermissions.extractPerms(PackageInfo, Set, PackageInfo)","java.util.Set.add(android.widget.AppSecurityPermissions.MyPermissionInfo)"
"android.widget.AppSecurityPermissions.extractPerms(PackageInfo, Set, PackageInfo)","android.content.pm.PackageManager.getPermissionInfo(java.lang.String, int)"
"android.widget.AppSecurityPermissions.extractPerms(PackageInfo, Set, PackageInfo)","java.util.Map.get(java.lang.String)"
"android.widget.AppSecurityPermissions.extractPerms(PackageInfo, Set, PackageInfo)","android.widget.AppSecurityPermissions.isDisplayablePermission(android.content.pm.PermissionInfo, int, int)"
"android.widget.AppSecurityPermissions.extractPerms(PackageInfo, Set, PackageInfo)","android.content.pm.PackageManager.getPermissionGroupInfo(java.lang.String, int)"
"android.widget.AppSecurityPermissions.extractPerms(PackageInfo, Set, PackageInfo)","java.util.Map.put(java.lang.String, android.widget.AppSecurityPermissions.MyPermissionGroupInfo)"
"android.widget.AppSecurityPermissions.extractPerms(PackageInfo, Set, PackageInfo)","java.lang.String.equals(java.lang.String)"
"android.widget.AppSecurityPermissions.getPermissionCount()","android.widget.AppSecurityPermissions.getPermissionCount(int)"
"android.widget.AppSecurityPermissions.getPermissionsView()","android.widget.AppSecurityPermissions.getPermissionsView(int, boolean)"
"android.widget.AppSecurityPermissions.getPermissionsForPackage(String, Set)","android.content.pm.PackageManager.getPackageInfo(java.lang.String, int)"
"android.widget.AppSecurityPermissions.getPermissionsForPackage(String, Set)","android.widget.AppSecurityPermissions.extractPerms(android.content.pm.PackageInfo, java.util.Set<android.widget.AppSecurityPermissions.MyPermissionInfo>, android.content.pm.PackageInfo)"
"android.widget.AppSecurityPermissions.onDetachedFromWindow()","android.app.Dialog.dismiss()"
"android.widget.AppSecurityPermissions.onClick(View)","android.app.AlertDialog.Builder.setCancelable(boolean)"
"android.widget.AppSecurityPermissions.onClick(View)","android.app.AlertDialog.Builder.setTitle(java.lang.CharSequence)"
"android.widget.AppSecurityPermissions.onClick(View)","android.app.AlertDialog.Builder.setMessage(java.lang.String)"
"android.widget.AppSecurityPermissions.onClick(View)","android.app.AlertDialog.Builder.setMessage(java.lang.CharSequence)"
"android.widget.AppSecurityPermissions.onClick(View)","android.content.pm.PackageManager.getApplicationInfo(java.lang.String, int)"
"android.widget.AppSecurityPermissions.onClick(View)","java.lang.StringBuilder.append(java.lang.String)"
"android.widget.AppSecurityPermissions.onClick(View)","java.lang.StringBuilder.toString()"
"android.widget.AppSecurityPermissions.onClick(View)","android.content.pm.PermissionInfo.loadDescription(android.content.pm.PackageManager)"
"android.widget.AppSecurityPermissions.onClick(View)","android.app.Dialog.setCanceledOnTouchOutside(boolean)"
"android.widget.AppSecurityPermissions.onClick(View)","android.app.Dialog.dismiss()"
"android.widget.AppSecurityPermissions.onClick(View)","android.app.AlertDialog.Builder.show()"
"android.widget.AppSecurityPermissions.onClick(View)","android.content.pm.PackageItemInfo.loadLabel(android.content.pm.PackageManager)"
"android.widget.AppSecurityPermissions.getPermissionsView(int, boolean)","android.widget.AppSecurityPermissions.displayPermissions(java.util.List<android.widget.AppSecurityPermissions.MyPermissionGroupInfo>, android.widget.LinearLayout, int, boolean)"
"android.widget.AppSecurityPermissions.getPermissionsView(int, boolean)","android.view.View.setVisibility(int)"
"android.widget.AppSecurityPermissions.compare(MyPermissionInfo, MyPermissionInfo)","java.util.Comparator.compare(java.lang.CharSequence, java.lang.CharSequence)"
"android.widget.AppSecurityPermissions.loadGroupIcon(PackageManager)","android.content.pm.PackageItemInfo.loadUnbadgedIcon(android.content.pm.PackageManager)"
"android.widget.AppSecurityPermissions.loadGroupIcon(PackageManager)","android.content.pm.PackageManager.getApplicationInfo(java.lang.String, int)"
"android.widget.AppSecurityPermissions.getPermissionsView(int)","android.widget.AppSecurityPermissions.getPermissionsView(int, boolean)"
"android.app.backup.WallpaperBackupHelper.restoreEntity(BackupDataInputStream)","android.app.backup.FileBackupHelperBase.writeFile(java.io.File, android.app.backup.BackupDataInputStream)"
"android.app.backup.WallpaperBackupHelper.restoreEntity(BackupDataInputStream)","java.io.File.renameTo(java.io.File)"
"android.app.backup.WallpaperBackupHelper.restoreEntity(BackupDataInputStream)","java.lang.String.equals(java.lang.String)"
"android.app.backup.WallpaperBackupHelper.restoreEntity(BackupDataInputStream)","java.io.File.delete()"
"android.app.backup.WallpaperBackupHelper.restoreEntity(BackupDataInputStream)","android.app.backup.BackupDataInputStream.getKey()"
"android.app.backup.WallpaperBackupHelper.restoreEntity(BackupDataInputStream)","android.app.backup.FileBackupHelperBase.isKeyInList(java.lang.String, java.lang.String[])"
"android.app.backup.WallpaperBackupHelper.performBackup(ParcelFileDescriptor, BackupDataOutput, ParcelFileDescriptor)","android.app.backup.FileBackupHelperBase.performBackup_checked(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor, java.lang.String[], java.lang.String[])"
"android.speech.tts.AbstractEventLogger.onAudioDataWritten()","android.os.SystemClock.elapsedRealtime()"
"android.speech.tts.AbstractEventLogger.onEngineComplete()","android.os.SystemClock.elapsedRealtime()"
"android.speech.tts.AbstractEventLogger.onEngineDataReceived()","android.os.SystemClock.elapsedRealtime()"
"android.speech.tts.AbstractEventLogger.onCompleted(int)","android.os.SystemClock.elapsedRealtime()"
"android.speech.tts.AbstractEventLogger.onCompleted(int)","android.speech.tts.AbstractEventLogger.logFailure(int)"
"android.speech.tts.AbstractEventLogger.onCompleted(int)","android.speech.tts.AbstractEventLogger.logSuccess(long, long, long)"
"android.speech.tts.AbstractEventLogger.onRequestProcessingStart()","android.os.SystemClock.elapsedRealtime()"
"android.view.FrameStats.getStartTimeNano()","android.view.FrameStats.getFrameCount()"
"android.view.FrameStats.getEndTimeNano()","android.view.FrameStats.getFrameCount()"
"android.text.method.PasswordTransformationMethod.onFocusChanged(View, CharSequence, boolean, int, Rect)","android.text.method.PasswordTransformationMethod.removeVisibleSpans(android.text.Spannable)"
"android.text.method.PasswordTransformationMethod.toString()","android.text.method.PasswordTransformationMethod.PasswordCharSequence.length()"
"android.text.method.PasswordTransformationMethod.toString()","java.lang.CharSequence.toString()"
"android.text.method.PasswordTransformationMethod.toString()","android.text.method.PasswordTransformationMethod.PasswordCharSequence.subSequence(int, int)"
"android.text.method.PasswordTransformationMethod.length()","java.lang.CharSequence.length()"
"android.text.method.PasswordTransformationMethod.removeVisibleSpans(Spannable)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.PasswordTransformationMethod.Visible>)"
"android.text.method.PasswordTransformationMethod.removeVisibleSpans(Spannable)","java.lang.CharSequence.length()"
"android.text.method.PasswordTransformationMethod.removeVisibleSpans(Spannable)","android.text.Spannable.removeSpan(android.text.method.PasswordTransformationMethod.Visible)"
"android.text.method.PasswordTransformationMethod.onTextChanged(CharSequence, int, int, int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.PasswordTransformationMethod.ViewReference>)"
"android.text.method.PasswordTransformationMethod.onTextChanged(CharSequence, int, int, int)","java.lang.ref.Reference.get()"
"android.text.method.PasswordTransformationMethod.onTextChanged(CharSequence, int, int, int)","android.text.method.TextKeyListener.getInstance()"
"android.text.method.PasswordTransformationMethod.onTextChanged(CharSequence, int, int, int)","android.view.View.getContext()"
"android.text.method.PasswordTransformationMethod.onTextChanged(CharSequence, int, int, int)","android.text.method.TextKeyListener.getPrefs(android.content.Context)"
"android.text.method.PasswordTransformationMethod.onTextChanged(CharSequence, int, int, int)","android.text.Spannable.setSpan(android.text.method.PasswordTransformationMethod.Visible, int, int, int)"
"android.text.method.PasswordTransformationMethod.onTextChanged(CharSequence, int, int, int)","java.lang.CharSequence.length()"
"android.text.method.PasswordTransformationMethod.onTextChanged(CharSequence, int, int, int)","android.text.method.PasswordTransformationMethod.removeVisibleSpans(android.text.Spannable)"
"android.text.method.PasswordTransformationMethod.getChars(int, int, char[], int)","android.text.TextUtils.getChars(java.lang.CharSequence, int, int, char[], int)"
"android.text.method.PasswordTransformationMethod.getChars(int, int, char[], int)","android.text.Spanned.getSpanStart(android.text.method.PasswordTransformationMethod)"
"android.text.method.PasswordTransformationMethod.getChars(int, int, char[], int)","android.text.Spanned.getSpanStart(android.text.method.PasswordTransformationMethod.Visible)"
"android.text.method.PasswordTransformationMethod.getChars(int, int, char[], int)","android.text.Spanned.getSpanEnd(android.text.method.PasswordTransformationMethod.Visible)"
"android.text.method.PasswordTransformationMethod.getChars(int, int, char[], int)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.text.method.PasswordTransformationMethod.getChars(int, int, char[], int)","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.text.method.PasswordTransformationMethod.getChars(int, int, char[], int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.PasswordTransformationMethod.Visible>)"
"android.text.method.PasswordTransformationMethod.getChars(int, int, char[], int)","java.lang.CharSequence.length()"
"android.text.method.PasswordTransformationMethod.charAt(int)","java.lang.CharSequence.charAt(int)"
"android.text.method.PasswordTransformationMethod.charAt(int)","android.text.Spanned.getSpanStart(android.text.method.PasswordTransformationMethod)"
"android.text.method.PasswordTransformationMethod.charAt(int)","android.text.Spanned.getSpanStart(android.text.method.PasswordTransformationMethod.Visible)"
"android.text.method.PasswordTransformationMethod.charAt(int)","android.text.Spanned.getSpanEnd(android.text.method.PasswordTransformationMethod.Visible)"
"android.text.method.PasswordTransformationMethod.charAt(int)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.text.method.PasswordTransformationMethod.charAt(int)","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.text.method.PasswordTransformationMethod.charAt(int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.PasswordTransformationMethod.Visible>)"
"android.text.method.PasswordTransformationMethod.charAt(int)","java.lang.CharSequence.length()"
"android.text.method.PasswordTransformationMethod.getTransformation(CharSequence, View)","android.text.Spannable.setSpan(android.text.method.PasswordTransformationMethod.ViewReference, int, int, int)"
"android.text.method.PasswordTransformationMethod.getTransformation(CharSequence, View)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.PasswordTransformationMethod.ViewReference>)"
"android.text.method.PasswordTransformationMethod.getTransformation(CharSequence, View)","android.text.Spannable.removeSpan(android.text.method.PasswordTransformationMethod.ViewReference)"
"android.text.method.PasswordTransformationMethod.getTransformation(CharSequence, View)","java.lang.CharSequence.length()"
"android.text.method.PasswordTransformationMethod.getTransformation(CharSequence, View)","android.text.method.PasswordTransformationMethod.removeVisibleSpans(android.text.Spannable)"
"android.text.method.PasswordTransformationMethod.subSequence(int, int)","android.text.method.PasswordTransformationMethod.PasswordCharSequence.getChars(int, int, char[], int)"
"android.text.method.PasswordTransformationMethod.run()","android.text.Spannable.removeSpan(android.text.method.PasswordTransformationMethod.Visible)"
"android.database.CursorWrapper.isBeforeFirst()","android.database.Cursor.isBeforeFirst()"
"android.database.CursorWrapper.getNotificationUri()","android.database.Cursor.getNotificationUri()"
"android.database.CursorWrapper.getLong(int)","android.database.Cursor.getLong(int)"
"android.database.CursorWrapper.close()","android.database.Cursor.close()"
"android.database.CursorWrapper.deactivate()","android.database.Cursor.deactivate()"
"android.database.CursorWrapper.getExtras()","android.database.Cursor.getExtras()"
"android.database.CursorWrapper.getColumnNames()","android.database.Cursor.getColumnNames()"
"android.database.CursorWrapper.getColumnName(int)","android.database.Cursor.getColumnName(int)"
"android.database.CursorWrapper.isAfterLast()","android.database.Cursor.isAfterLast()"
"android.database.CursorWrapper.unregisterDataSetObserver(DataSetObserver)","android.database.Cursor.unregisterDataSetObserver(android.database.DataSetObserver)"
"android.database.CursorWrapper.moveToPrevious()","android.database.Cursor.moveToPrevious()"
"android.database.CursorWrapper.getFloat(int)","android.database.Cursor.getFloat(int)"
"android.database.CursorWrapper.moveToLast()","android.database.Cursor.moveToLast()"
"android.database.CursorWrapper.getShort(int)","android.database.Cursor.getShort(int)"
"android.database.CursorWrapper.moveToPosition(int)","android.database.Cursor.moveToPosition(int)"
"android.database.CursorWrapper.moveToFirst()","android.database.Cursor.moveToFirst()"
"android.database.CursorWrapper.requery()","android.database.Cursor.requery()"
"android.database.CursorWrapper.getWantsAllOnMoveCalls()","android.database.Cursor.getWantsAllOnMoveCalls()"
"android.database.CursorWrapper.respond(Bundle)","android.database.Cursor.respond(android.os.Bundle)"
"android.database.CursorWrapper.registerDataSetObserver(DataSetObserver)","android.database.Cursor.registerDataSetObserver(android.database.DataSetObserver)"
"android.database.CursorWrapper.getInt(int)","android.database.Cursor.getInt(int)"
"android.database.CursorWrapper.copyStringToBuffer(int, CharArrayBuffer)","android.database.Cursor.copyStringToBuffer(int, android.database.CharArrayBuffer)"
"android.database.CursorWrapper.unregisterContentObserver(ContentObserver)","android.database.Cursor.unregisterContentObserver(android.database.ContentObserver)"
"android.database.CursorWrapper.getBlob(int)","android.database.Cursor.getBlob(int)"
"android.database.CursorWrapper.getDouble(int)","android.database.Cursor.getDouble(int)"
"android.database.CursorWrapper.getPosition()","android.database.Cursor.getPosition()"
"android.database.CursorWrapper.moveToNext()","android.database.Cursor.moveToNext()"
"android.database.CursorWrapper.registerContentObserver(ContentObserver)","android.database.Cursor.registerContentObserver(android.database.ContentObserver)"
"android.database.CursorWrapper.getType(int)","android.database.Cursor.getType(int)"
"android.database.CursorWrapper.getString(int)","android.database.Cursor.getString(int)"
"android.database.CursorWrapper.isLast()","android.database.Cursor.isLast()"
"android.database.CursorWrapper.getCount()","android.database.Cursor.getCount()"
"android.database.CursorWrapper.isNull(int)","android.database.Cursor.isNull(int)"
"android.database.CursorWrapper.getColumnCount()","android.database.Cursor.getColumnCount()"
"android.database.CursorWrapper.setNotificationUri(ContentResolver, Uri)","android.database.Cursor.setNotificationUri(android.content.ContentResolver, android.net.Uri)"
"android.database.CursorWrapper.getColumnIndexOrThrow(String)","android.database.Cursor.getColumnIndexOrThrow(java.lang.String)"
"android.database.CursorWrapper.isFirst()","android.database.Cursor.isFirst()"
"android.database.CursorWrapper.isClosed()","android.database.Cursor.isClosed()"
"android.database.CursorWrapper.getColumnIndex(String)","android.database.Cursor.getColumnIndex(java.lang.String)"
"android.database.CursorWrapper.move(int)","android.database.Cursor.move(int)"
"android.inputmethodservice.AbstractInputMethodService.revokeSession(InputMethodSession)","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.revokeSelf()"
"android.inputmethodservice.AbstractInputMethodService.dispatchTrackballEvent(int, MotionEvent, EventCallback)","android.inputmethodservice.AbstractInputMethodService.onTrackballEvent(android.view.MotionEvent)"
"android.inputmethodservice.AbstractInputMethodService.dispatchTrackballEvent(int, MotionEvent, EventCallback)","android.view.inputmethod.InputMethodSession.EventCallback.finishedEvent(int, boolean)"
"android.inputmethodservice.AbstractInputMethodService.setSessionEnabled(InputMethodSession, boolean)","android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.setEnabled(boolean)"
"android.inputmethodservice.AbstractInputMethodService.onBind(Intent)","android.inputmethodservice.AbstractInputMethodService.onCreateInputMethodInterface()"
"android.inputmethodservice.AbstractInputMethodService.dispatchKeyEvent(int, KeyEvent, EventCallback)","android.view.KeyEvent.dispatch(android.inputmethodservice.AbstractInputMethodService, android.view.KeyEvent.DispatcherState, android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl)"
"android.inputmethodservice.AbstractInputMethodService.dispatchKeyEvent(int, KeyEvent, EventCallback)","android.view.inputmethod.InputMethodSession.EventCallback.finishedEvent(int, boolean)"
"android.inputmethodservice.AbstractInputMethodService.dispatchGenericMotionEvent(int, MotionEvent, EventCallback)","android.inputmethodservice.AbstractInputMethodService.onGenericMotionEvent(android.view.MotionEvent)"
"android.inputmethodservice.AbstractInputMethodService.dispatchGenericMotionEvent(int, MotionEvent, EventCallback)","android.view.inputmethod.InputMethodSession.EventCallback.finishedEvent(int, boolean)"
"android.inputmethodservice.AbstractInputMethodService.createSession(SessionCallback)","android.inputmethodservice.AbstractInputMethodService.onCreateInputMethodSessionInterface()"
"android.inputmethodservice.AbstractInputMethodService.createSession(SessionCallback)","android.view.inputmethod.InputMethod.SessionCallback.sessionCreated(android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl)"
"android.hardware.location.GeofenceHardwareMonitorEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.location.GeofenceHardwareMonitorEvent.createFromParcel(Parcel)","android.os.Parcel.readParcelable(java.lang.ClassLoader)"
"android.hardware.location.GeofenceHardwareMonitorEvent.createFromParcel(Parcel)","java.lang.Class.getClassLoader()"
"android.hardware.location.GeofenceHardwareMonitorEvent.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.preference.ListPreference.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.preference.ListPreference.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"android.preference.ListPreference.onPrepareDialogBuilder(Builder)","android.preference.ListPreference.getValueIndex()"
"android.preference.ListPreference.onPrepareDialogBuilder(Builder)","android.app.AlertDialog.Builder.setPositiveButton(null, null)"
"android.preference.ListPreference.onPrepareDialogBuilder(Builder)","android.preference.DialogPreference.onPrepareDialogBuilder(android.app.AlertDialog.Builder)"
"android.preference.ListPreference.onPrepareDialogBuilder(Builder)","android.app.AlertDialog.Builder.setSingleChoiceItems(java.lang.CharSequence[], int, android.content.DialogInterface.OnClickListener)"
"android.preference.ListPreference.onPrepareDialogBuilder(Builder)","android.content.DialogInterface.dismiss()"
"android.preference.ListPreference.onPrepareDialogBuilder(Builder)","android.preference.DialogPreference.onClick(android.content.DialogInterface, int)"
"android.preference.ListPreference.onGetDefaultValue(TypedArray, int)","android.content.res.TypedArray.getString(int)"
"android.preference.ListPreference.onRestoreInstanceState(Parcelable)","android.view.AbsSavedState.getSuperState()"
"android.preference.ListPreference.onRestoreInstanceState(Parcelable)","android.preference.ListPreference.setValue(java.lang.String)"
"android.preference.ListPreference.onRestoreInstanceState(Parcelable)","android.preference.DialogPreference.onRestoreInstanceState(android.os.Parcelable)"
"android.preference.ListPreference.onRestoreInstanceState(Parcelable)","java.lang.Object.getClass()"
"android.preference.ListPreference.onRestoreInstanceState(Parcelable)","java.lang.Object.equals(java.lang.Class<android.preference.ListPreference.SavedState>)"
"android.preference.ListPreference.findIndexOfValue(String)","java.lang.Object.equals(java.lang.String)"
"android.preference.ListPreference.onSetInitialValue(boolean, Object)","android.preference.ListPreference.setValue(java.lang.String)"
"android.preference.ListPreference.onSetInitialValue(boolean, Object)","android.preference.Preference.getPersistedString(java.lang.String)"
"android.preference.ListPreference.setValueIndex(int)","android.preference.ListPreference.setValue(java.lang.String)"
"android.preference.ListPreference.setValueIndex(int)","java.lang.CharSequence.toString()"
"android.preference.ListPreference.getSummary()","android.preference.ListPreference.getEntry()"
"android.preference.ListPreference.getSummary()","java.lang.String.format(java.lang.String, java.lang.CharSequence)"
"android.preference.ListPreference.getSummary()","android.preference.Preference.getSummary()"
"android.preference.ListPreference.onDialogClosed(boolean)","android.preference.ListPreference.setValue(java.lang.String)"
"android.preference.ListPreference.onDialogClosed(boolean)","android.preference.DialogPreference.onDialogClosed(boolean)"
"android.preference.ListPreference.onDialogClosed(boolean)","android.preference.Preference.callChangeListener(java.lang.String)"
"android.preference.ListPreference.onDialogClosed(boolean)","java.lang.CharSequence.toString()"
"android.preference.ListPreference.setEntries(int)","android.preference.ListPreference.setEntries(java.lang.CharSequence[])"
"android.preference.ListPreference.setEntries(int)","android.content.res.Resources.getTextArray(int)"
"android.preference.ListPreference.setEntries(int)","android.content.Context.getResources()"
"android.preference.ListPreference.setEntries(int)","android.preference.Preference.getContext()"
"android.preference.ListPreference.setValue(String)","android.text.TextUtils.equals(java.lang.String, java.lang.String)"
"android.preference.ListPreference.setValue(String)","android.preference.Preference.notifyChanged()"
"android.preference.ListPreference.setValue(String)","android.preference.Preference.persistString(java.lang.String)"
"android.preference.ListPreference.getEntry()","android.preference.ListPreference.getValueIndex()"
"android.preference.ListPreference.setSummary(CharSequence)","java.lang.Object.equals(java.lang.String)"
"android.preference.ListPreference.setSummary(CharSequence)","android.preference.Preference.setSummary(java.lang.CharSequence)"
"android.preference.ListPreference.setSummary(CharSequence)","java.lang.CharSequence.toString()"
"android.preference.ListPreference.onSaveInstanceState()","android.preference.ListPreference.getValue()"
"android.preference.ListPreference.onSaveInstanceState()","android.preference.DialogPreference.onSaveInstanceState()"
"android.preference.ListPreference.onSaveInstanceState()","android.preference.Preference.isPersistent()"
"android.preference.ListPreference.setEntryValues(int)","android.preference.ListPreference.setEntryValues(java.lang.CharSequence[])"
"android.preference.ListPreference.setEntryValues(int)","android.content.res.Resources.getTextArray(int)"
"android.preference.ListPreference.setEntryValues(int)","android.content.Context.getResources()"
"android.preference.ListPreference.setEntryValues(int)","android.preference.Preference.getContext()"
"android.preference.ListPreference.getValueIndex()","android.preference.ListPreference.findIndexOfValue(java.lang.String)"
"android.widget.Space.getDefaultSize2(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.Space.getDefaultSize2(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.widget.Space.getDefaultSize2(int, int)","java.lang.Math.min(int, int)"
"com.android.internal.widget.ActionBarView.updateMenuView(boolean)","com.android.internal.view.menu.MenuBuilder.size()"
"com.android.internal.widget.ActionBarView.updateMenuView(boolean)","com.android.internal.view.menu.MenuBuilder.getItem(int)"
"com.android.internal.widget.ActionBarView.updateMenuView(boolean)","com.android.internal.widget.ActionBarView.ExpandedActionViewMenuPresenter.collapseItemActionView(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.widget.ActionBarView.onPopulateAccessibilityEvent(AccessibilityEvent)","java.util.List.add(java.lang.CharSequence)"
"com.android.internal.widget.ActionBarView.onPopulateAccessibilityEvent(AccessibilityEvent)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"com.android.internal.widget.ActionBarView.onPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.getText()"
"com.android.internal.widget.ActionBarView.onLayout(boolean, int, int, int, int)","java.lang.Math.max(int, int)"
"com.android.internal.widget.ActionBarView.isTitleTruncated()","android.text.Layout.getLineCount()"
"com.android.internal.widget.ActionBarView.isTitleTruncated()","android.text.Layout.getEllipsisCount(int)"
"com.android.internal.widget.ActionBarView.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"com.android.internal.widget.ActionBarView.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"com.android.internal.widget.ActionBarView.onMeasure(int, int)","java.lang.Math.min(int, int)"
"com.android.internal.widget.ActionBarView.setTitleImpl(CharSequence)","com.android.internal.view.menu.ActionMenuItem.setTitle(java.lang.CharSequence)"
"com.android.internal.widget.ActionBarView.setTitleImpl(CharSequence)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"com.android.internal.widget.ActionBarView.expandItemActionView(MenuBuilder, MenuItemImpl)","com.android.internal.view.menu.MenuItemImpl.setActionViewExpanded(boolean)"
"com.android.internal.widget.ActionBarView.expandItemActionView(MenuBuilder, MenuItemImpl)","android.view.View.setVisibility(int)"
"com.android.internal.widget.ActionBarView.expandItemActionView(MenuBuilder, MenuItemImpl)","com.android.internal.view.menu.MenuItemImpl.getActionView()"
"com.android.internal.widget.ActionBarView.expandItemActionView(MenuBuilder, MenuItemImpl)","android.view.CollapsibleActionView.onActionViewExpanded()"
"com.android.internal.widget.ActionBarView.expandItemActionView(MenuBuilder, MenuItemImpl)","android.view.View.getParent()"
"com.android.internal.widget.ActionBarView.onClick(View)","android.view.Window.Callback.onMenuItemSelected(int, com.android.internal.view.menu.ActionMenuItem)"
"com.android.internal.widget.ActionBarView.collapseActionView()","com.android.internal.view.menu.MenuItemImpl.collapseActionView()"
"com.android.internal.widget.ActionBarView.onDetachedFromWindow()","android.widget.ActionMenuPresenter.hideSubMenus()"
"com.android.internal.widget.ActionBarView.onDetachedFromWindow()","android.widget.ActionMenuPresenter.hideOverflowMenu()"
"com.android.internal.widget.ActionBarView.buildHomeContentDescription()","android.content.Context.getResources()"
"com.android.internal.widget.ActionBarView.buildHomeContentDescription()","android.content.res.Resources.getText(int)"
"com.android.internal.widget.ActionBarView.buildHomeContentDescription()","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"com.android.internal.widget.ActionBarView.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"com.android.internal.widget.ActionBarView.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"com.android.internal.widget.ActionBarView.collapseItemActionView(MenuBuilder, MenuItemImpl)","com.android.internal.view.menu.MenuItemImpl.setActionViewExpanded(boolean)"
"com.android.internal.widget.ActionBarView.collapseItemActionView(MenuBuilder, MenuItemImpl)","android.view.View.setVisibility(int)"
"com.android.internal.widget.ActionBarView.collapseItemActionView(MenuBuilder, MenuItemImpl)","android.view.CollapsibleActionView.onActionViewCollapsed()"
"com.android.internal.widget.ActionBarView.getDropdownItemCount()","android.widget.Adapter.getCount()"
"com.android.internal.widget.ActionBarView.initTitle()","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"com.android.internal.widget.ActionBarView.initForMenu(Context, MenuBuilder)","com.android.internal.view.menu.MenuBuilder.collapseItemActionView(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.widget.ActionBarView.setSubtitle(CharSequence)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"com.android.internal.widget.ActionBarView.setMenu(Menu, MenuPresenter.Callback)","android.widget.ActionMenuPresenter.setItemLimit(int)"
"com.android.internal.widget.ActionBarView.setMenu(Menu, MenuPresenter.Callback)","com.android.internal.view.menu.MenuBuilder.removeMenuPresenter(com.android.internal.widget.ActionBarView.ExpandedActionViewMenuPresenter)"
"com.android.internal.widget.ActionBarView.setMenu(Menu, MenuPresenter.Callback)","com.android.internal.view.menu.BaseMenuPresenter.setCallback(com.android.internal.view.menu.MenuPresenter.Callback)"
"com.android.internal.widget.ActionBarView.setMenu(Menu, MenuPresenter.Callback)","android.widget.ActionMenuPresenter.setExpandedActionViewsExclusive(boolean)"
"com.android.internal.widget.ActionBarView.setMenu(Menu, MenuPresenter.Callback)","com.android.internal.view.menu.MenuBuilder.removeMenuPresenter(android.widget.ActionMenuPresenter)"
"com.android.internal.widget.ActionBarView.setMenuCallbacks(MenuPresenter.Callback, MenuBuilder.Callback)","com.android.internal.view.menu.BaseMenuPresenter.setCallback(com.android.internal.view.menu.MenuPresenter.Callback)"
"com.android.internal.widget.ActionBarView.setMenuCallbacks(MenuPresenter.Callback, MenuBuilder.Callback)","com.android.internal.view.menu.MenuBuilder.setCallback(com.android.internal.view.menu.MenuBuilder.Callback)"
"com.android.internal.widget.ActionBarView.setSplitToolbar(boolean)","android.widget.ActionMenuPresenter.setItemLimit(int)"
"com.android.internal.widget.ActionBarView.setSplitToolbar(boolean)","android.widget.ActionMenuPresenter.setExpandedActionViewsExclusive(boolean)"
"com.android.internal.widget.ActionBarView.configPresenters(MenuBuilder)","android.widget.ActionMenuPresenter.initForMenu(android.content.Context, null)"
"com.android.internal.widget.ActionBarView.configPresenters(MenuBuilder)","com.android.internal.view.menu.MenuBuilder.addMenuPresenter(android.widget.ActionMenuPresenter, android.content.Context)"
"com.android.internal.widget.ActionBarView.configPresenters(MenuBuilder)","com.android.internal.view.menu.MenuBuilder.addMenuPresenter(com.android.internal.widget.ActionBarView.ExpandedActionViewMenuPresenter, android.content.Context)"
"com.android.internal.widget.ActionBarView.configPresenters(MenuBuilder)","com.android.internal.widget.ActionBarView.ExpandedActionViewMenuPresenter.updateMenuView(boolean)"
"com.android.internal.widget.ActionBarView.configPresenters(MenuBuilder)","android.widget.ActionMenuPresenter.updateMenuView(boolean)"
"com.android.internal.widget.ActionBarView.configPresenters(MenuBuilder)","com.android.internal.widget.ActionBarView.ExpandedActionViewMenuPresenter.initForMenu(android.content.Context, null)"
"com.android.internal.widget.SizeAdaptiveLayout.selectActiveChild(int)","android.view.View.getLayoutParams()"
"com.android.internal.widget.SizeAdaptiveLayout.selectActiveChild(int)","android.view.View.MeasureSpec.getMode(int)"
"com.android.internal.widget.SizeAdaptiveLayout.selectActiveChild(int)","android.view.View.MeasureSpec.getSize(int)"
"com.android.internal.widget.SizeAdaptiveLayout.clampSizeToBounds(int, View)","android.view.View.getLayoutParams()"
"com.android.internal.widget.SizeAdaptiveLayout.clampSizeToBounds(int, View)","java.lang.Math.max(int, int)"
"com.android.internal.widget.SizeAdaptiveLayout.clampSizeToBounds(int, View)","java.lang.Math.min(int, int)"
"com.android.internal.widget.SizeAdaptiveLayout.initialize()","android.animation.AnimatorSet.setDuration(long)"
"com.android.internal.widget.SizeAdaptiveLayout.initialize()","android.animation.Animator.addListener(android.animation.Animator.AnimatorListener)"
"com.android.internal.widget.SizeAdaptiveLayout.initialize()","android.animation.AnimatorSet.Builder.with(android.animation.ObjectAnimator)"
"com.android.internal.widget.SizeAdaptiveLayout.initialize()","android.view.View.setLayoutParams(com.android.internal.widget.SizeAdaptiveLayout.LayoutParams)"
"com.android.internal.widget.SizeAdaptiveLayout.initialize()","android.animation.AnimatorSet.play(android.animation.ObjectAnimator)"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.view.View.setVisibility(int)"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.view.View.getHeight()"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredHeight()"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.animation.AnimatorSet.cancel()"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.view.View.setAlpha(float)"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.view.View.layout(int, int, int, int)"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.animation.AnimatorSet.setupStartValues()"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.animation.AnimatorSet.start()"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.view.View.bringToFront()"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.animation.AnimatorSet.isRunning()"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredWidth()"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.animation.ObjectAnimator.setTarget(android.view.View)"
"com.android.internal.widget.SizeAdaptiveLayout.onLayout(boolean, int, int, int, int)","android.animation.ObjectAnimator.setFloatValues(float)"
"com.android.internal.widget.SizeAdaptiveLayout.onAnimationEnd(Animator)","android.view.View.setVisibility(int)"
"com.android.internal.widget.SizeAdaptiveLayout.onAnimationEnd(Animator)","android.view.View.bringToFront()"
"com.android.internal.widget.SizeAdaptiveLayout.onMeasure(int, int)","android.view.View.getLayoutParams()"
"com.android.internal.widget.SizeAdaptiveLayout.onMeasure(int, int)","android.view.View.getMeasuredHeight()"
"com.android.internal.app.AlertController.manageScrollIndicators(View, View, View)","android.view.View.setVisibility(int)"
"com.android.internal.app.AlertController.manageScrollIndicators(View, View, View)","android.view.View.canScrollVertically(int)"
"com.android.internal.app.AlertController.installContent()","com.android.internal.app.AlertController.selectContentView()"
"com.android.internal.app.AlertController.installContent()","com.android.internal.app.AlertController.setupView()"
"com.android.internal.app.AlertController.installContent()","android.view.Window.requestFeature(int)"
"com.android.internal.app.AlertController.installContent()","android.view.Window.setContentView(int)"
"com.android.internal.app.AlertController.installContent()","com.android.internal.app.AlertController.setupDecor()"
"com.android.internal.app.AlertController.setupView()","android.view.Window.setFlags(int, int)"
"com.android.internal.app.AlertController.setupView()","android.view.View.setVisibility(int)"
"com.android.internal.app.AlertController.setupView()","com.android.internal.app.AlertController.setupButtons()"
"com.android.internal.app.AlertController.setupView()","com.android.internal.app.AlertController.setupTitle(android.view.ViewGroup)"
"com.android.internal.app.AlertController.setupView()","android.view.Window.setCloseOnTouchOutsideIfNotSet(boolean)"
"com.android.internal.app.AlertController.setupView()","android.view.LayoutInflater.from(android.content.Context)"
"com.android.internal.app.AlertController.setupView()","android.content.res.TypedArray.recycle()"
"com.android.internal.app.AlertController.setupView()","com.android.internal.app.AlertController.canTextInput(android.view.View)"
"com.android.internal.app.AlertController.setupView()","com.android.internal.app.AlertController.setupContent(android.view.ViewGroup)"
"com.android.internal.app.AlertController.getIconAttributeResId(int)","android.content.Context.getTheme()"
"com.android.internal.app.AlertController.getIconAttributeResId(int)","android.content.res.Resources.Theme.resolveAttribute(int, android.util.TypedValue, boolean)"
"com.android.internal.app.AlertController.onClick(View)","android.os.Message.obtain(android.os.Message)"
"com.android.internal.app.AlertController.onClick(View)","android.os.Message.sendToTarget()"
"com.android.internal.app.AlertController.onClick(View)","android.os.Handler.obtainMessage(int, android.content.DialogInterface)"
"com.android.internal.app.AlertController.handleMessage(Message)","java.lang.ref.Reference.get()"
"com.android.internal.app.AlertController.handleMessage(Message)","android.content.DialogInterface.dismiss()"
"com.android.internal.app.AlertController.handleMessage(Message)","android.content.DialogInterface.OnClickListener.onClick(android.content.DialogInterface, int)"
"com.android.internal.app.AlertController.canTextInput(View)","android.view.View.onCheckIsTextEditor()"
"com.android.internal.app.AlertController.canTextInput(View)","com.android.internal.app.AlertController.canTextInput(android.view.View)"
"com.android.internal.app.AlertController.setButton(int, CharSequence, DialogInterface.OnClickListener, Message)","android.os.Handler.obtainMessage(int, android.content.DialogInterface.OnClickListener)"
"com.android.internal.app.AlertController.apply(AlertController)","com.android.internal.app.AlertController.setButton(int, java.lang.CharSequence, android.content.DialogInterface.OnClickListener, null)"
"com.android.internal.app.AlertController.apply(AlertController)","com.android.internal.app.AlertController.setView(android.view.View)"
"com.android.internal.app.AlertController.apply(AlertController)","com.android.internal.app.AlertController.AlertParams.createListView(com.android.internal.app.AlertController)"
"com.android.internal.app.AlertController.apply(AlertController)","com.android.internal.app.AlertController.setInverseBackgroundForced(boolean)"
"com.android.internal.app.AlertController.apply(AlertController)","com.android.internal.app.AlertController.setView(android.view.View, int, int, int, int)"
"com.android.internal.app.AlertController.apply(AlertController)","com.android.internal.app.AlertController.setCustomTitle(android.view.View)"
"com.android.internal.app.AlertController.apply(AlertController)","com.android.internal.app.AlertController.setTitle(java.lang.CharSequence)"
"com.android.internal.app.AlertController.apply(AlertController)","com.android.internal.app.AlertController.setView(int)"
"com.android.internal.app.AlertController.apply(AlertController)","com.android.internal.app.AlertController.setMessage(java.lang.CharSequence)"
"com.android.internal.app.AlertController.setupDecor()","android.view.WindowInsets.isRound()"
"com.android.internal.app.AlertController.setupDecor()","android.view.View.setPadding(int, int, int, int)"
"com.android.internal.app.AlertController.setupDecor()","android.view.View.setFitsSystemWindows(boolean)"
"com.android.internal.app.AlertController.setupDecor()","android.view.WindowInsets.consumeSystemWindowInsets()"
"com.android.internal.app.AlertController.setupDecor()","android.view.View.setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener)"
"com.android.internal.app.AlertController.setupDecor()","android.view.View.requestApplyInsets()"
"com.android.internal.app.AlertController.setupDecor()","android.view.Window.getDecorView()"
"com.android.internal.app.AlertController.setupTitle(ViewGroup)","android.view.View.setVisibility(int)"
"com.android.internal.app.AlertController.setupTitle(ViewGroup)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"com.android.internal.app.AlertController.setupButtons()","com.android.internal.app.AlertController.centerButton(android.widget.Button)"
"com.android.internal.app.AlertController.setupButtons()","com.android.internal.app.AlertController.shouldCenterSingleButton(android.content.Context)"
"com.android.internal.app.AlertController.setupButtons()","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"com.android.internal.app.AlertController.setBackground(TypedArray, View, View, View, View, boolean, boolean, boolean)","android.view.View.setBackgroundResource(int)"
"com.android.internal.app.AlertController.setBackground(TypedArray, View, View, View, View, boolean, boolean, boolean)","android.view.View.getVisibility()"
"com.android.internal.app.AlertController.createListView(AlertController)","android.widget.ArrayAdapter.getView(int, android.view.View, android.view.ViewGroup)"
"com.android.internal.app.AlertController.createListView(AlertController)","android.widget.CursorAdapter.getCursor()"
"com.android.internal.app.AlertController.createListView(AlertController)","android.database.Cursor.getColumnIndexOrThrow(java.lang.String)"
"com.android.internal.app.AlertController.centerButton(Button)","android.view.View.setVisibility(int)"
"android.view.WindowManagerGlobal.getRootView(String)","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.getRootView(String)","android.view.ViewRootImpl.getView()"
"android.view.WindowManagerGlobal.getRootView(String)","android.view.WindowManagerGlobal.getWindowName(android.view.ViewRootImpl)"
"android.view.WindowManagerGlobal.getRootView(String)","java.lang.String.equals(java.lang.String)"
"android.view.WindowManagerGlobal.getRootView(String)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.findViewLocked(View, boolean)","java.util.ArrayList.indexOf(android.view.View)"
"android.view.WindowManagerGlobal.changeCanvasOpacity(IBinder, boolean)","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.changeCanvasOpacity(IBinder, boolean)","android.view.ViewRootImpl.changeCanvasOpacity(boolean)"
"android.view.WindowManagerGlobal.changeCanvasOpacity(IBinder, boolean)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.updateViewLayout(View, ViewGroup.LayoutParams)","android.view.View.setLayoutParams(android.view.WindowManager.LayoutParams)"
"android.view.WindowManagerGlobal.updateViewLayout(View, ViewGroup.LayoutParams)","android.view.WindowManagerGlobal.findViewLocked(android.view.View, boolean)"
"android.view.WindowManagerGlobal.updateViewLayout(View, ViewGroup.LayoutParams)","android.view.ViewRootImpl.setLayoutParams(android.view.WindowManager.LayoutParams, boolean)"
"android.view.WindowManagerGlobal.updateViewLayout(View, ViewGroup.LayoutParams)","java.util.ArrayList.remove(int)"
"android.view.WindowManagerGlobal.updateViewLayout(View, ViewGroup.LayoutParams)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.updateViewLayout(View, ViewGroup.LayoutParams)","java.util.ArrayList.add(int, android.view.WindowManager.LayoutParams)"
"android.view.WindowManagerGlobal.setStoppedState(IBinder, boolean)","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.setStoppedState(IBinder, boolean)","android.view.ViewRootImpl.setStopped(boolean)"
"android.view.WindowManagerGlobal.setStoppedState(IBinder, boolean)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.getWindowName(ViewRootImpl)","java.lang.Object.getClass()"
"android.view.WindowManagerGlobal.getWindowName(ViewRootImpl)","java.lang.Object.hashCode()"
"android.view.WindowManagerGlobal.getWindowName(ViewRootImpl)","java.lang.Class.getName()"
"android.view.WindowManagerGlobal.getWindowName(ViewRootImpl)","java.lang.Integer.toHexString(int)"
"android.view.WindowManagerGlobal.doRemoveView(ViewRootImpl)","java.util.ArrayList.indexOf(android.view.ViewRootImpl)"
"android.view.WindowManagerGlobal.doRemoveView(ViewRootImpl)","android.view.WindowManagerGlobal.doTrimForeground()"
"android.view.WindowManagerGlobal.doRemoveView(ViewRootImpl)","android.view.HardwareRenderer.isAvailable()"
"android.view.WindowManagerGlobal.doRemoveView(ViewRootImpl)","java.util.ArrayList.remove(int)"
"android.view.WindowManagerGlobal.doRemoveView(ViewRootImpl)","android.util.ArraySet.remove(android.view.View)"
"android.view.WindowManagerGlobal.getWindowManagerService()","android.view.WindowManagerGlobal.getWindowManagerService()"
"android.view.WindowManagerGlobal.initialize()","android.view.WindowManagerGlobal.getWindowManagerService()"
"android.view.WindowManagerGlobal.getViewRootNames()","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.getViewRootNames()","android.view.WindowManagerGlobal.getWindowName(android.view.ViewRootImpl)"
"android.view.WindowManagerGlobal.getViewRootNames()","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.getWindowSession()","android.view.inputmethod.InputMethodManager.getInstance()"
"android.view.WindowManagerGlobal.getWindowSession()","android.view.WindowManagerGlobal.getWindowManagerService()"
"android.view.WindowManagerGlobal.removeViewLocked(int, boolean)","android.view.ViewRootImpl.getView()"
"android.view.WindowManagerGlobal.removeViewLocked(int, boolean)","android.view.ViewRootImpl.die(boolean)"
"android.view.WindowManagerGlobal.removeViewLocked(int, boolean)","android.view.inputmethod.InputMethodManager.getInstance()"
"android.view.WindowManagerGlobal.removeViewLocked(int, boolean)","android.view.inputmethod.InputMethodManager.windowDismissed(android.os.IBinder)"
"android.view.WindowManagerGlobal.removeViewLocked(int, boolean)","android.view.View.getWindowToken()"
"android.view.WindowManagerGlobal.removeViewLocked(int, boolean)","android.view.View.assignParent(null)"
"android.view.WindowManagerGlobal.removeViewLocked(int, boolean)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.removeViewLocked(int, boolean)","android.util.ArraySet.add(android.view.View)"
"android.view.WindowManagerGlobal.removeView(View, boolean)","android.view.ViewRootImpl.getView()"
"android.view.WindowManagerGlobal.removeView(View, boolean)","android.view.WindowManagerGlobal.findViewLocked(android.view.View, boolean)"
"android.view.WindowManagerGlobal.removeView(View, boolean)","android.view.WindowManagerGlobal.removeViewLocked(int, boolean)"
"android.view.WindowManagerGlobal.removeView(View, boolean)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","android.view.ViewRootImpl.getHostVisibility()"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","java.io.PrintWriter.printf(java.lang.String, java.lang.String, int, float)"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","android.view.ViewRootImpl.getView()"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","android.view.ViewRootImpl.dumpGfxInfo(int[])"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","java.io.PrintWriter.printf(java.lang.String)"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","java.io.PrintWriter.printf(java.lang.String, float)"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","java.io.PrintWriter.flush()"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","java.io.PrintWriter.println(java.lang.String)"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","android.view.WindowManagerGlobal.getWindowName(android.view.ViewRootImpl)"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","android.view.HardwareRenderer.dumpGfxInfo(java.io.PrintWriter, java.io.FileDescriptor)"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","java.io.PrintWriter.printf(java.lang.String, int)"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)","java.io.PrintWriter.printf(java.lang.String, java.lang.String, int)"
"android.view.WindowManagerGlobal.reportNewConfiguration(Configuration)","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.reportNewConfiguration(Configuration)","android.view.ViewRootImpl.requestUpdateConfiguration(android.content.res.Configuration)"
"android.view.WindowManagerGlobal.reportNewConfiguration(Configuration)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.shouldDestroyEglContext(int)","android.app.ActivityManager.isHighEndGfx()"
"android.view.WindowManagerGlobal.trimForeground()","android.view.WindowManagerGlobal.doTrimForeground()"
"android.view.WindowManagerGlobal.trimForeground()","android.view.HardwareRenderer.isAvailable()"
"android.view.WindowManagerGlobal.trimForeground()","android.view.WindowManagerGlobal.getInstance()"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","java.util.ArrayList.add(android.view.WindowManager.LayoutParams)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","java.util.ArrayList.add(android.view.View)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.view.View.getContext()"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.view.View.setLayoutParams(android.view.WindowManager.LayoutParams)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.view.ViewRootImpl.loadSystemProperties()"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.view.ViewRootImpl.doDie()"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.os.SystemProperties.addChangeCallback(java.lang.Runnable)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.util.ArraySet.contains(android.view.View)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.content.Context.getApplicationInfo()"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.view.Window.adjustLayoutParamsForSubWindow(android.view.WindowManager.LayoutParams)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","java.util.ArrayList.add(android.view.ViewRootImpl)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.view.WindowManagerGlobal.findViewLocked(android.view.View, boolean)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.view.WindowManagerGlobal.removeViewLocked(int, boolean)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","android.view.ViewRootImpl.setView(android.view.View, android.view.WindowManager.LayoutParams, android.view.View)"
"android.view.WindowManagerGlobal.addView(View, ViewGroup.LayoutParams, Display, Window)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.trimMemory(int)","android.view.WindowManagerGlobal.doTrimForeground()"
"android.view.WindowManagerGlobal.trimMemory(int)","android.view.HardwareRenderer.isAvailable()"
"android.view.WindowManagerGlobal.trimMemory(int)","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.trimMemory(int)","android.view.ViewRootImpl.destroyHardwareResources()"
"android.view.WindowManagerGlobal.trimMemory(int)","android.view.WindowManagerGlobal.shouldDestroyEglContext(int)"
"android.view.WindowManagerGlobal.trimMemory(int)","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.trimMemory(int)","android.view.HardwareRenderer.trimMemory(int)"
"android.view.WindowManagerGlobal.doTrimForeground()","android.view.ViewRootImpl.getHostVisibility()"
"android.view.WindowManagerGlobal.doTrimForeground()","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.doTrimForeground()","android.view.ViewRootImpl.destroyHardwareResources()"
"android.view.WindowManagerGlobal.doTrimForeground()","java.util.ArrayList.get(int)"
"android.view.WindowManagerGlobal.doTrimForeground()","android.view.HardwareRenderer.trimMemory(int)"
"android.view.WindowManagerGlobal.closeAll(IBinder, String, String)","java.util.ArrayList.size()"
"android.view.WindowManagerGlobal.closeAll(IBinder, String, String)","android.view.ViewRootImpl.getView()"
"android.view.WindowManagerGlobal.closeAll(IBinder, String, String)","android.view.ViewRootImpl.getLocation()"
"android.view.WindowManagerGlobal.closeAll(IBinder, String, String)","java.lang.Throwable.getStackTrace()"
"android.view.WindowManagerGlobal.closeAll(IBinder, String, String)","android.view.WindowManagerGlobal.removeViewLocked(int, boolean)"
"android.view.WindowManagerGlobal.closeAll(IBinder, String, String)","java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])"
"android.view.WindowManagerGlobal.closeAll(IBinder, String, String)","java.util.ArrayList.get(int)"
"android.service.fingerprint.FingerprintUtils.removeFingerprintIdForUser(int, ContentResolver, int)","android.service.fingerprint.FingerprintUtils.getFingerprintIdsForUser(android.content.ContentResolver, int)"
"android.service.fingerprint.FingerprintUtils.removeFingerprintIdForUser(int, ContentResolver, int)","android.provider.Settings.Secure.putStringForUser(android.content.ContentResolver, java.lang.String, java.lang.String, int)"
"android.service.fingerprint.FingerprintUtils.removeFingerprintIdForUser(int, ContentResolver, int)","java.util.Arrays.copyOf(int[], int)"
"android.service.fingerprint.FingerprintUtils.removeFingerprintIdForUser(int, ContentResolver, int)","java.util.Arrays.toString(int[])"
"android.service.fingerprint.FingerprintUtils.getFingerprintIdsForUser(ContentResolver, int)","java.lang.String.split(java.lang.String)"
"android.service.fingerprint.FingerprintUtils.getFingerprintIdsForUser(ContentResolver, int)","android.provider.Settings.Secure.getStringForUser(android.content.ContentResolver, java.lang.String, int)"
"android.service.fingerprint.FingerprintUtils.getFingerprintIdsForUser(ContentResolver, int)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.service.fingerprint.FingerprintUtils.getFingerprintIdsForUser(ContentResolver, int)","java.lang.String.replace(java.lang.String, java.lang.String)"
"android.service.fingerprint.FingerprintUtils.getFingerprintIdsForUser(ContentResolver, int)","java.lang.Integer.decode(java.lang.String)"
"android.service.fingerprint.FingerprintUtils.addFingerprintIdForUser(int, ContentResolver, int)","android.service.fingerprint.FingerprintUtils.getFingerprintIdsForUser(android.content.ContentResolver, int)"
"android.service.fingerprint.FingerprintUtils.addFingerprintIdForUser(int, ContentResolver, int)","android.provider.Settings.Secure.putStringForUser(android.content.ContentResolver, java.lang.String, java.lang.String, int)"
"android.service.fingerprint.FingerprintUtils.addFingerprintIdForUser(int, ContentResolver, int)","java.util.Arrays.copyOf(int[], int)"
"android.service.fingerprint.FingerprintUtils.addFingerprintIdForUser(int, ContentResolver, int)","java.util.Arrays.toString(int[])"
"com.android.internal.widget.ActionBarOverlayLayout.saveToolbarHierarchyState(SparseArray)","com.android.internal.widget.DecorToolbar.saveHierarchyState(android.util.SparseArray<android.os.Parcelable>)"
"com.android.internal.widget.ActionBarOverlayLayout.applyInsets(View, Rect, boolean, boolean, boolean, boolean)","android.view.View.getLayoutParams()"
"com.android.internal.widget.ActionBarOverlayLayout.setWindowTitle(CharSequence)","com.android.internal.widget.DecorToolbar.setWindowTitle(java.lang.CharSequence)"
"com.android.internal.widget.ActionBarOverlayLayout.hasIcon()","com.android.internal.widget.DecorToolbar.hasIcon()"
"com.android.internal.widget.ActionBarOverlayLayout.canShowOverflowMenu()","com.android.internal.widget.DecorToolbar.canShowOverflowMenu()"
"com.android.internal.widget.ActionBarOverlayLayout.isOverflowMenuShowing()","com.android.internal.widget.DecorToolbar.isOverflowMenuShowing()"
"com.android.internal.widget.ActionBarOverlayLayout.setActionBarHideOffset(int)","java.lang.Math.max(int, int)"
"com.android.internal.widget.ActionBarOverlayLayout.setActionBarHideOffset(int)","java.lang.Math.min(int, int)"
"com.android.internal.widget.ActionBarOverlayLayout.restoreToolbarHierarchyState(SparseArray)","com.android.internal.widget.DecorToolbar.restoreHierarchyState(android.util.SparseArray<android.os.Parcelable>)"
"com.android.internal.widget.ActionBarOverlayLayout.dismissPopups()","com.android.internal.widget.DecorToolbar.dismissPopupMenus()"
"com.android.internal.widget.ActionBarOverlayLayout.setMenuPrepared()","com.android.internal.widget.DecorToolbar.setMenuPrepared()"
"com.android.internal.widget.ActionBarOverlayLayout.hasLogo()","com.android.internal.widget.DecorToolbar.hasLogo()"
"com.android.internal.widget.ActionBarOverlayLayout.onMeasure(int, int)","android.view.View.getLayoutParams()"
"com.android.internal.widget.ActionBarOverlayLayout.onMeasure(int, int)","android.view.View.getMeasuredWidth()"
"com.android.internal.widget.ActionBarOverlayLayout.onMeasure(int, int)","android.view.View.getMeasuredHeight()"
"com.android.internal.widget.ActionBarOverlayLayout.onMeasure(int, int)","com.android.internal.widget.DecorToolbar.isSplit()"
"com.android.internal.widget.ActionBarOverlayLayout.onMeasure(int, int)","android.view.View.dispatchApplyWindowInsets(android.view.WindowInsets)"
"com.android.internal.widget.ActionBarOverlayLayout.onMeasure(int, int)","java.lang.Math.max(int, int)"
"com.android.internal.widget.ActionBarOverlayLayout.getTitle()","com.android.internal.widget.DecorToolbar.getTitle()"
"com.android.internal.widget.ActionBarOverlayLayout.onWindowSystemUiVisibilityChanged(int)","com.android.internal.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback.showForSystem()"
"com.android.internal.widget.ActionBarOverlayLayout.onWindowSystemUiVisibilityChanged(int)","com.android.internal.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback.hideForSystem()"
"com.android.internal.widget.ActionBarOverlayLayout.onWindowSystemUiVisibilityChanged(int)","com.android.internal.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback.enableContentAnimations(boolean)"
"com.android.internal.widget.ActionBarOverlayLayout.setWindowCallback(Window.Callback)","com.android.internal.widget.DecorToolbar.setWindowCallback(android.view.Window.Callback)"
"com.android.internal.widget.ActionBarOverlayLayout.hideOverflowMenu()","com.android.internal.widget.DecorToolbar.hideOverflowMenu()"
"com.android.internal.widget.ActionBarOverlayLayout.addActionBarHideOffset()","java.lang.Runnable.run()"
"com.android.internal.widget.ActionBarOverlayLayout.setUiOptions(int)","com.android.internal.widget.DecorToolbar.canSplit()"
"com.android.internal.widget.ActionBarOverlayLayout.setUiOptions(int)","com.android.internal.widget.DecorToolbar.setSplitWhenNarrow(boolean)"
"com.android.internal.widget.ActionBarOverlayLayout.setUiOptions(int)","com.android.internal.widget.DecorToolbar.setSplitToolbar(boolean)"
"com.android.internal.widget.ActionBarOverlayLayout.haltActionBarHideOffsetAnimations()","android.view.ViewPropertyAnimator.cancel()"
"com.android.internal.widget.ActionBarOverlayLayout.initFeature(int)","com.android.internal.widget.DecorToolbar.initIndeterminateProgress()"
"com.android.internal.widget.ActionBarOverlayLayout.initFeature(int)","com.android.internal.widget.DecorToolbar.initProgress()"
"com.android.internal.widget.ActionBarOverlayLayout.init(Context)","android.content.Context.getApplicationInfo()"
"com.android.internal.widget.ActionBarOverlayLayout.init(Context)","android.content.res.TypedArray.recycle()"
"com.android.internal.widget.ActionBarOverlayLayout.init(Context)","android.content.res.TypedArray.getDrawable(int)"
"com.android.internal.widget.ActionBarOverlayLayout.init(Context)","android.content.res.TypedArray.getDimensionPixelSize(int, int)"
"com.android.internal.widget.ActionBarOverlayLayout.onLayout(boolean, int, int, int, int)","android.view.View.getVisibility()"
"com.android.internal.widget.ActionBarOverlayLayout.onLayout(boolean, int, int, int, int)","android.view.View.getLayoutParams()"
"com.android.internal.widget.ActionBarOverlayLayout.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredWidth()"
"com.android.internal.widget.ActionBarOverlayLayout.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredHeight()"
"com.android.internal.widget.ActionBarOverlayLayout.onLayout(boolean, int, int, int, int)","android.view.View.layout(int, int, int, int)"
"com.android.internal.widget.ActionBarOverlayLayout.shouldHideActionBarOnFling(float, float)","android.widget.OverScroller.fling(int, int, int, int, int, int, int, int)"
"com.android.internal.widget.ActionBarOverlayLayout.shouldHideActionBarOnFling(float, float)","android.widget.OverScroller.getFinalY()"
"com.android.internal.widget.ActionBarOverlayLayout.onNestedScrollAccepted(View, View, int)","com.android.internal.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback.onContentScrollStarted()"
"com.android.internal.widget.ActionBarOverlayLayout.showOverflowMenu()","com.android.internal.widget.DecorToolbar.showOverflowMenu()"
"com.android.internal.widget.ActionBarOverlayLayout.setMenu(Menu, MenuPresenter.Callback)","com.android.internal.widget.DecorToolbar.setMenu(android.view.Menu, com.android.internal.view.menu.MenuPresenter.Callback)"
"com.android.internal.widget.ActionBarOverlayLayout.removeActionBarHideOffset()","java.lang.Runnable.run()"
"com.android.internal.widget.ActionBarOverlayLayout.isOverflowMenuShowPending()","com.android.internal.widget.DecorToolbar.isOverflowMenuShowPending()"
"com.android.internal.widget.ActionBarOverlayLayout.onApplyWindowInsets(WindowInsets)","android.view.WindowInsets.getSystemWindowInsets()"
"com.android.internal.widget.ActionBarOverlayLayout.onStopNestedScroll(View)","com.android.internal.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback.onContentScrollStopped()"
"com.android.internal.widget.ActionBarOverlayLayout.getDecorToolbar(View)","java.lang.Object.getClass()"
"com.android.internal.widget.ActionBarOverlayLayout.getDecorToolbar(View)","java.lang.Class.getSimpleName()"
"com.android.internal.widget.ActionBarOverlayLayout.setActionBarVisibilityCallback(ActionBarVisibilityCallback)","com.android.internal.widget.ActionBarOverlayLayout.ActionBarVisibilityCallback.onWindowVisibilityChanged(int)"
"android.view.AccessibilityIterators.preceding(int)","java.lang.String.charAt(int)"
"android.view.AccessibilityIterators.preceding(int)","android.view.AccessibilityIterators.ParagraphTextSegmentIterator.isEndBoundary(int)"
"android.view.AccessibilityIterators.preceding(int)","android.view.AccessibilityIterators.AbstractTextSegmentIterator.getRange(int, int)"
"android.view.AccessibilityIterators.preceding(int)","android.view.AccessibilityIterators.ParagraphTextSegmentIterator.isStartBoundary(int)"
"android.view.AccessibilityIterators.preceding(int)","java.lang.String.length()"
"android.view.AccessibilityIterators.following(int)","java.lang.String.charAt(int)"
"android.view.AccessibilityIterators.following(int)","android.view.AccessibilityIterators.ParagraphTextSegmentIterator.isEndBoundary(int)"
"android.view.AccessibilityIterators.following(int)","android.view.AccessibilityIterators.AbstractTextSegmentIterator.getRange(int, int)"
"android.view.AccessibilityIterators.following(int)","android.view.AccessibilityIterators.ParagraphTextSegmentIterator.isStartBoundary(int)"
"android.view.AccessibilityIterators.following(int)","java.lang.String.length()"
"android.view.AccessibilityIterators.onConfigurationChanged(Configuration)","android.view.AccessibilityIterators.CharacterTextSegmentIterator.onLocaleChanged(java.util.Locale)"
"android.view.AccessibilityIterators.onConfigurationChanged(Configuration)","java.util.Locale.equals(java.util.Locale)"
"android.view.AccessibilityIterators.isStartBoundary(int)","java.lang.String.charAt(int)"
"android.view.AccessibilityIterators.onLocaleChanged(Locale)","java.text.BreakIterator.getWordInstance(java.util.Locale)"
"android.view.AccessibilityIterators.isEndBoundary(int)","java.lang.String.charAt(int)"
"android.view.AccessibilityIterators.isEndBoundary(int)","java.lang.String.length()"
"android.view.AccessibilityIterators.isLetterOrDigit(int)","java.lang.String.codePointAt(int)"
"android.view.AccessibilityIterators.isLetterOrDigit(int)","java.lang.Character.isLetterOrDigit(int)"
"android.view.AccessibilityIterators.isLetterOrDigit(int)","java.lang.String.length()"
"android.view.AccessibilityIterators.initialize(String)","java.text.BreakIterator.setText(java.lang.String)"
"android.view.AccessibilityIterators.initialize(String)","android.view.AccessibilityIterators.AbstractTextSegmentIterator.initialize(java.lang.String)"
"android.webkit.WebSettings.setTextSize(TextSize)","android.webkit.WebSettings.setTextZoom(int)"
"android.webkit.WebSettings.getDefaultUserAgent(Context)","android.webkit.WebViewFactoryProvider.Statics.getDefaultUserAgent(android.content.Context)"
"android.webkit.WebSettings.getDefaultUserAgent(Context)","android.webkit.WebViewFactory.getProvider()"
"android.webkit.WebSettings.getDefaultUserAgent(Context)","android.webkit.WebViewFactoryProvider.getStatics()"
"android.webkit.WebSettings.getTextSize()","java.lang.Math.abs(int)"
"android.webkit.WebSettings.getTextSize()","android.webkit.WebSettings.TextSize.values()"
"android.webkit.WebSettings.getTextSize()","android.webkit.WebSettings.getTextZoom()"
"com.android.internal.widget.PointerLocationView.onMeasure(int, int)","android.view.View.onMeasure(int, int)"
"com.android.internal.widget.PointerLocationView.onDraw(Canvas)","android.view.VelocityTracker.Estimator.estimateY(float)"
"com.android.internal.widget.PointerLocationView.onDraw(Canvas)","java.lang.Math.cos(float)"
"com.android.internal.widget.PointerLocationView.onDraw(Canvas)","java.util.ArrayList.size()"
"com.android.internal.widget.PointerLocationView.onDraw(Canvas)","java.lang.Float.isNaN(float)"
"com.android.internal.widget.PointerLocationView.onDraw(Canvas)","java.lang.Math.sin(float)"
"com.android.internal.widget.PointerLocationView.onDraw(Canvas)","android.view.MotionEvent.PointerCoords.getAxisValue(int)"
"com.android.internal.widget.PointerLocationView.onDraw(Canvas)","android.view.VelocityTracker.Estimator.estimateX(float)"
"com.android.internal.widget.PointerLocationView.onDraw(Canvas)","java.util.ArrayList.get(int)"
"com.android.internal.widget.PointerLocationView.append(int, int)","com.android.internal.widget.PointerLocationView.FasterStringBuilder.append(java.lang.String)"
"com.android.internal.widget.PointerLocationView.append(int, int)","com.android.internal.widget.PointerLocationView.FasterStringBuilder.reserve(int)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.MotionEvent.getPointerCoords(int, android.view.MotionEvent.PointerCoords)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","java.util.ArrayList.add(com.android.internal.widget.PointerLocationView.PointerState)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.MotionEvent.getDeviceId()"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.InputDevice.getMotionRange(int)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.InputDevice.getDevice(int)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.MotionEvent.getToolType(int)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","com.android.internal.widget.PointerLocationView.PointerState.clearTrace()"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.MotionEvent.getAxisValue(int, int)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.VelocityTracker.getYVelocity(int)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.VelocityTracker.computeCurrentVelocity(int)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.MotionEvent.getHistorySize()"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.VelocityTracker.getXVelocity(int)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","java.util.ArrayList.size()"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.MotionEvent.getPointerCount()"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","com.android.internal.widget.PointerLocationView.PointerState.addTrace(float, float, boolean)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.VelocityTracker.getEstimator(int, android.view.VelocityTracker.Estimator)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.VelocityTracker.clear()"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.MotionEvent.getHistoricalPointerCoords(int, int, android.view.MotionEvent.PointerCoords)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"com.android.internal.widget.PointerLocationView.onPointerEvent(MotionEvent)","java.util.ArrayList.get(int)"
"com.android.internal.widget.PointerLocationView.onGenericMotionEvent(MotionEvent)","android.view.MotionEvent.getSource()"
"com.android.internal.widget.PointerLocationView.shouldLogKey(int)","android.view.KeyEvent.isGamepadButton(int)"
"com.android.internal.widget.PointerLocationView.shouldLogKey(int)","android.view.KeyEvent.isModifierKey(int)"
"com.android.internal.widget.PointerLocationView.onTouchEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"com.android.internal.widget.PointerLocationView.onKeyUp(int, KeyEvent)","android.view.View.onKeyUp(int, android.view.KeyEvent)"
"com.android.internal.widget.PointerLocationView.logInputDevices()","android.view.InputDevice.getDeviceIds()"
"com.android.internal.widget.PointerLocationView.logCoords(String, int, int, MotionEvent.PointerCoords, int, MotionEvent)","android.view.MotionEvent.getToolType(int)"
"com.android.internal.widget.PointerLocationView.logCoords(String, int, int, MotionEvent.PointerCoords, int, MotionEvent)","android.view.MotionEvent.getButtonState()"
"com.android.internal.widget.PointerLocationView.logCoords(String, int, int, MotionEvent.PointerCoords, int, MotionEvent)","java.lang.Integer.toString(int)"
"com.android.internal.widget.PointerLocationView.reserve(int)","java.lang.System.arraycopy(char[], int, char[], int, int)"
"com.android.internal.widget.PointerLocationView.logInputDeviceState(int, String)","android.hardware.input.InputManager.getInputDevice(int)"
"com.android.internal.widget.PointerLocationView.onKeyDown(int, KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"com.android.internal.widget.PointerLocationView.onKeyDown(int, KeyEvent)","android.view.View.onKeyDown(int, android.view.KeyEvent)"
"com.android.internal.widget.PointerLocationView.append(String)","java.lang.String.getChars(int, int, char[], int)"
"com.android.internal.widget.PointerLocationView.append(String)","com.android.internal.widget.PointerLocationView.FasterStringBuilder.reserve(int)"
"com.android.internal.widget.PointerLocationView.append(String)","java.lang.String.length()"
"com.android.internal.widget.PointerLocationView.append(float, int)","com.android.internal.widget.PointerLocationView.FasterStringBuilder.append(int)"
"com.android.internal.widget.PointerLocationView.append(float, int)","java.lang.Math.abs(float)"
"com.android.internal.widget.PointerLocationView.append(float, int)","com.android.internal.widget.PointerLocationView.FasterStringBuilder.append(int, int)"
"com.android.internal.widget.PointerLocationView.append(float, int)","com.android.internal.widget.PointerLocationView.FasterStringBuilder.append(java.lang.String)"
"com.android.internal.widget.PointerLocationView.append(float, int)","java.lang.Math.rint(float)"
"com.android.internal.widget.PointerLocationView.append(float, int)","java.lang.Math.floor(float)"
"com.android.internal.widget.PointerLocationView.onAttachedToWindow()","android.view.View.onAttachedToWindow()"
"com.android.internal.widget.PointerLocationView.logMotionEvent(String, MotionEvent)","android.view.MotionEvent.getHistorySize()"
"com.android.internal.widget.PointerLocationView.logMotionEvent(String, MotionEvent)","android.view.MotionEvent.getPointerCoords(int, android.view.MotionEvent.PointerCoords)"
"com.android.internal.widget.PointerLocationView.logMotionEvent(String, MotionEvent)","android.view.MotionEvent.getPointerCount()"
"com.android.internal.widget.PointerLocationView.logMotionEvent(String, MotionEvent)","android.view.MotionEvent.getHistoricalPointerCoords(int, int, android.view.MotionEvent.PointerCoords)"
"com.android.internal.widget.PointerLocationView.logMotionEvent(String, MotionEvent)","android.view.MotionEvent.getAction()"
"com.android.internal.widget.PointerLocationView.logMotionEvent(String, MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"com.android.internal.widget.PointerLocationView.append(int)","com.android.internal.widget.PointerLocationView.FasterStringBuilder.append(int, int)"
"com.android.internal.widget.PointerLocationView.onDetachedFromWindow()","android.view.View.onDetachedFromWindow()"
"com.android.internal.widget.PointerLocationView.addTrace(float, float, boolean)","java.lang.System.arraycopy(float[], int, float[], int, int)"
"com.android.internal.widget.PointerLocationView.addTrace(float, float, boolean)","java.lang.System.arraycopy(boolean[], int, boolean[], int, int)"
"android.app.SearchDialog.show(String, boolean, ComponentName, Bundle)","android.app.SearchDialog.doShow(java.lang.String, boolean, android.content.ComponentName, android.os.Bundle)"
"android.app.SearchDialog.doShow(String, boolean, ComponentName, Bundle)","android.app.SearchDialog.show(android.content.ComponentName, android.os.Bundle)"
"android.app.SearchDialog.doShow(String, boolean, ComponentName, Bundle)","android.app.SearchDialog.setUserQuery(java.lang.String)"
"android.app.SearchDialog.onStart()","android.app.Dialog.onStart()"
"android.app.SearchDialog.onStart()","android.app.Dialog.getContext()"
"android.app.SearchDialog.onStart()","android.content.Context.registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"
"android.app.SearchDialog.onStart()","android.content.IntentFilter.addAction(java.lang.String)"
"android.app.SearchDialog.hide()","android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow(android.os.IBinder, int)"
"android.app.SearchDialog.hide()","android.app.Dialog.getContext()"
"android.app.SearchDialog.hide()","android.view.View.getWindowToken()"
"android.app.SearchDialog.hide()","android.app.Dialog.hide()"
"android.app.SearchDialog.hide()","android.app.Dialog.isShowing()"
"android.app.SearchDialog.hide()","android.content.Context.getSystemService(java.lang.String)"
"android.app.SearchDialog.hide()","android.view.Window.getDecorView()"
"android.app.SearchDialog.hide()","android.app.Dialog.getWindow()"
"android.app.SearchDialog.isLandscapeMode(Context)","android.content.Context.getResources()"
"android.app.SearchDialog.isLandscapeMode(Context)","android.content.res.Resources.getConfiguration()"
"android.app.SearchDialog.onStop()","android.app.Dialog.getContext()"
"android.app.SearchDialog.onStop()","android.app.Dialog.onStop()"
"android.app.SearchDialog.onStop()","android.content.Context.unregisterReceiver(android.content.BroadcastReceiver)"
"android.app.SearchDialog.onCreate(Bundle)","android.view.Window.setAttributes(android.view.WindowManager.LayoutParams)"
"android.app.SearchDialog.onCreate(Bundle)","android.app.Dialog.onCreate(android.os.Bundle)"
"android.app.SearchDialog.onCreate(Bundle)","android.view.Window.getAttributes()"
"android.app.SearchDialog.onCreate(Bundle)","android.app.Dialog.setCanceledOnTouchOutside(boolean)"
"android.app.SearchDialog.onCreate(Bundle)","android.app.Dialog.getWindow()"
"android.app.SearchDialog.createIntent(String, Uri, String, String, int, String)","android.content.Intent.putExtra(java.lang.String, java.lang.String)"
"android.app.SearchDialog.createIntent(String, Uri, String, String, int, String)","android.app.SearchableInfo.getSearchActivity()"
"android.app.SearchDialog.createIntent(String, Uri, String, String, int, String)","android.content.Intent.putExtra(java.lang.String, int)"
"android.app.SearchDialog.createIntent(String, Uri, String, String, int, String)","android.content.Intent.putExtra(java.lang.String, android.os.Bundle)"
"android.app.SearchDialog.createIntent(String, Uri, String, String, int, String)","android.content.Intent.setComponent(android.content.ComponentName)"
"android.app.SearchDialog.createIntent(String, Uri, String, String, int, String)","android.content.Intent.setData(android.net.Uri)"
"android.app.SearchDialog.createIntent(String, Uri, String, String, int, String)","android.content.Intent.addFlags(int)"
"android.app.SearchDialog.launchQuerySearch(int, String)","android.app.SearchDialog.createIntent(java.lang.String, null, null, java.lang.String, int, java.lang.String)"
"android.app.SearchDialog.launchQuerySearch(int, String)","android.app.SearchDialog.launchIntent(android.content.Intent)"
"android.app.SearchDialog.onSaveInstanceState()","android.os.Bundle.putParcelable(java.lang.String, android.content.ComponentName)"
"android.app.SearchDialog.onSaveInstanceState()","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.app.SearchDialog.onSaveInstanceState()","android.app.Dialog.isShowing()"
"android.app.SearchDialog.onSaveInstanceState()","android.os.Bundle.putBundle(java.lang.String, android.os.Bundle)"
"android.app.SearchDialog.onConfigurationChanged()","android.app.Dialog.getContext()"
"android.app.SearchDialog.onConfigurationChanged()","android.app.SearchDialog.updateSearchBadge()"
"android.app.SearchDialog.onConfigurationChanged()","android.app.Dialog.isShowing()"
"android.app.SearchDialog.onConfigurationChanged()","android.app.SearchDialog.updateSearchAppIcon()"
"android.app.SearchDialog.onConfigurationChanged()","android.app.SearchDialog.isLandscapeMode(android.content.Context)"
"android.app.SearchDialog.onTouchEvent(MotionEvent)","android.app.Dialog.cancel()"
"android.app.SearchDialog.onTouchEvent(MotionEvent)","android.app.Dialog.onTouchEvent(android.view.MotionEvent)"
"android.app.SearchDialog.launchQuerySearch()","android.app.SearchDialog.launchQuerySearch(int, null)"
"android.app.SearchDialog.show(ComponentName, Bundle)","android.app.SearchDialog.createContentView()"
"android.app.SearchDialog.show(ComponentName, Bundle)","android.app.SearchManager.getSearchableInfo(android.content.ComponentName)"
"android.app.SearchDialog.show(ComponentName, Bundle)","android.app.Dialog.getContext()"
"android.app.SearchDialog.show(ComponentName, Bundle)","android.app.SearchableInfo.getActivityContext(android.content.Context)"
"android.app.SearchDialog.show(ComponentName, Bundle)","android.app.Dialog.show()"
"android.app.SearchDialog.show(ComponentName, Bundle)","android.app.Dialog.isShowing()"
"android.app.SearchDialog.show(ComponentName, Bundle)","android.content.Context.getSystemService(java.lang.String)"
"android.app.SearchDialog.show(ComponentName, Bundle)","android.app.SearchDialog.updateUI()"
"android.app.SearchDialog.launchIntent(Intent)","android.app.Dialog.getContext()"
"android.app.SearchDialog.launchIntent(Intent)","android.content.Context.startActivity(android.content.Intent)"
"android.app.SearchDialog.launchIntent(Intent)","android.app.Dialog.dismiss()"
"android.app.SearchDialog.updateSearchAppIcon()","android.view.View.getPaddingBottom()"
"android.app.SearchDialog.updateSearchAppIcon()","android.content.Context.getPackageManager()"
"android.app.SearchDialog.updateSearchAppIcon()","android.view.View.setPadding(int, int, int, int)"
"android.app.SearchDialog.updateSearchAppIcon()","android.view.View.getPaddingRight()"
"android.app.SearchDialog.updateSearchAppIcon()","android.app.Dialog.getContext()"
"android.app.SearchDialog.updateSearchAppIcon()","android.view.View.getPaddingTop()"
"android.app.SearchDialog.updateSearchAppIcon()","android.content.pm.PackageManager.getDefaultActivityIcon()"
"android.app.SearchDialog.updateSearchAppIcon()","android.content.pm.PackageManager.getActivityInfo(android.content.ComponentName, int)"
"android.app.SearchDialog.updateSearchAppIcon()","android.content.pm.PackageManager.getApplicationIcon(android.content.pm.ApplicationInfo)"
"android.app.SearchDialog.createContentView()","android.view.View.setOnClickListener(android.view.View.OnClickListener)"
"android.app.SearchDialog.createContentView()","android.app.Dialog.dismiss()"
"android.app.SearchDialog.createContentView()","android.app.SearchDialog.setWorking(boolean)"
"android.app.SearchDialog.onBackPressed()","android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow(android.os.IBinder, int)"
"android.app.SearchDialog.onBackPressed()","android.view.inputmethod.InputMethodManager.isFullscreenMode()"
"android.app.SearchDialog.onBackPressed()","android.app.Dialog.getContext()"
"android.app.SearchDialog.onBackPressed()","android.view.View.getWindowToken()"
"android.app.SearchDialog.onBackPressed()","android.app.Dialog.cancel()"
"android.app.SearchDialog.onBackPressed()","android.content.Context.getSystemService(java.lang.String)"
"android.app.SearchDialog.onBackPressed()","android.view.Window.getDecorView()"
"android.app.SearchDialog.onBackPressed()","android.app.Dialog.getWindow()"
"android.app.SearchDialog.isOutOfBounds(View, MotionEvent)","android.view.MotionEvent.getY()"
"android.app.SearchDialog.isOutOfBounds(View, MotionEvent)","android.view.View.getWidth()"
"android.app.SearchDialog.isOutOfBounds(View, MotionEvent)","android.view.View.getHeight()"
"android.app.SearchDialog.isOutOfBounds(View, MotionEvent)","android.view.ViewConfiguration.get(android.content.Context)"
"android.app.SearchDialog.isOutOfBounds(View, MotionEvent)","android.view.MotionEvent.getX()"
"android.app.SearchDialog.isOutOfBounds(View, MotionEvent)","android.view.ViewConfiguration.getScaledWindowTouchSlop()"
"android.app.SearchDialog.updateSearchBadge()","android.app.SearchableInfo.useBadgeIcon()"
"android.app.SearchDialog.updateSearchBadge()","android.content.Context.getResources()"
"android.app.SearchDialog.updateSearchBadge()","android.app.SearchableInfo.useBadgeLabel()"
"android.app.SearchDialog.updateSearchBadge()","java.lang.CharSequence.toString()"
"android.app.SearchDialog.updateSearchBadge()","android.app.SearchableInfo.getIconId()"
"android.app.SearchDialog.updateSearchBadge()","android.content.res.Resources.getText(int)"
"android.app.SearchDialog.updateSearchBadge()","android.app.SearchableInfo.getLabelId()"
"android.app.SearchDialog.updateSearchBadge()","android.content.Context.getDrawable(int)"
"android.app.SearchDialog.onReceive(Context, Intent)","android.app.SearchDialog.onConfigurationChanged()"
"android.app.SearchDialog.onReceive(Context, Intent)","java.lang.String.equals(java.lang.String)"
"android.app.SearchDialog.onReceive(Context, Intent)","android.content.Intent.getAction()"
"android.app.SearchDialog.updateUI()","android.view.View.setVisibility(int)"
"android.app.SearchDialog.updateUI()","android.app.SearchableInfo.getInputType()"
"android.app.SearchDialog.updateUI()","android.app.SearchDialog.updateSearchAutoComplete()"
"android.app.SearchDialog.updateUI()","android.app.SearchableInfo.getSuggestAuthority()"
"android.app.SearchDialog.updateUI()","android.app.SearchableInfo.getImeOptions()"
"android.app.SearchDialog.updateUI()","android.app.SearchDialog.updateSearchBadge()"
"android.app.SearchDialog.updateUI()","android.app.SearchableInfo.getVoiceSearchEnabled()"
"android.app.SearchDialog.updateUI()","android.app.SearchDialog.updateSearchAppIcon()"
"android.app.SearchDialog.onClosePressed()","android.app.SearchDialog.isEmpty(android.widget.AutoCompleteTextView)"
"android.app.SearchDialog.onClosePressed()","android.app.Dialog.dismiss()"
"android.app.SearchDialog.onRestoreInstanceState(Bundle)","android.app.SearchDialog.doShow(java.lang.String, boolean, android.content.ComponentName, android.os.Bundle)"
"android.app.SearchDialog.onRestoreInstanceState(Bundle)","android.os.BaseBundle.getString(java.lang.String)"
"android.app.SearchDialog.onRestoreInstanceState(Bundle)","android.os.Bundle.getBundle(java.lang.String)"
"android.app.SearchDialog.onRestoreInstanceState(Bundle)","android.os.Bundle.getParcelable(java.lang.String)"
"com.android.internal.content.PackageHelper.resolveInstallLocation(Context, String, int, long, int)","android.os.storage.StorageManager.getStorageBytesUntilLow(java.io.File)"
"com.android.internal.content.PackageHelper.resolveInstallLocation(Context, String, int, long, int)","android.content.Context.getPackageManager()"
"com.android.internal.content.PackageHelper.resolveInstallLocation(Context, String, int, long, int)","android.os.storage.StorageManager.from(android.content.Context)"
"com.android.internal.content.PackageHelper.resolveInstallLocation(Context, String, int, long, int)","android.os.Environment.isExternalStorageEmulated()"
"com.android.internal.content.PackageHelper.resolveInstallLocation(Context, String, int, long, int)","android.content.pm.PackageManager.getApplicationInfo(java.lang.String, int)"
"com.android.internal.content.PackageHelper.resolveInstallLocation(Context, String, int, long, int)","android.os.Environment.UserEnvironment.getExternalStorageDirectory()"
"com.android.internal.content.PackageHelper.resolveInstallLocation(Context, String, int, long, int)","java.lang.String.equals(java.lang.String)"
"com.android.internal.content.PackageHelper.resolveInstallLocation(Context, String, int, long, int)","android.os.Environment.getExternalStorageState()"
"com.android.internal.content.PackageHelper.resolveInstallLocation(Context, String, int, long, int)","android.os.Environment.getDataDirectory()"
"com.android.internal.content.PackageHelper.getSdFilesystem(String)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.getSdFilesystem(String)","android.os.storage.IMountService.getSecureContainerFilesystemPath(java.lang.String)"
"com.android.internal.content.PackageHelper.resizeSdDir(long, String, String)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.resizeSdDir(long, String, String)","android.os.storage.IMountService.resizeSecureContainer(java.lang.String, int, java.lang.String)"
"com.android.internal.content.PackageHelper.replaceEnd(String, String, String)","java.lang.String.endsWith(java.lang.String)"
"com.android.internal.content.PackageHelper.replaceEnd(String, String, String)","java.lang.String.substring(int, int)"
"com.android.internal.content.PackageHelper.replaceEnd(String, String, String)","java.lang.String.length()"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.io.File.getAbsolutePath()"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.util.zip.ZipEntry.getName()"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.lang.String.startsWith(java.lang.String)"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","android.os.FileUtils.setPermissions(java.lang.String, int, int, int)"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.lang.String.equals(java.lang.String)"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.util.zip.ZipOutputStream.close()"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.util.zip.ZipFile.entries()"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.util.zip.ZipOutputStream.finish()"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","com.android.internal.content.PackageHelper.copyZipEntry(java.util.zip.ZipEntry, java.util.zip.ZipFile, java.util.zip.ZipOutputStream)"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.util.zip.DeflaterOutputStream.flush()"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","android.os.FileUtils.sync(java.io.FileOutputStream)"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.util.zip.ZipFile.close()"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.util.Collections.list(java.util.Enumeration<? extends java.util.zip.ZipEntry>)"
"com.android.internal.content.PackageHelper.extractPublicFiles(File, File)","java.util.zip.ZipEntry.getSize()"
"com.android.internal.content.PackageHelper.renameSdDir(String, String)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.renameSdDir(String, String)","android.os.storage.IMountService.renameSecureContainer(java.lang.String, java.lang.String)"
"com.android.internal.content.PackageHelper.getSdDir(String)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.getSdDir(String)","android.os.storage.IMountService.getSecureContainerPath(java.lang.String)"
"com.android.internal.content.PackageHelper.calculateInstalledSize(PackageLite, boolean, String)","com.android.internal.content.NativeLibraryHelper.Handle.create(android.content.pm.PackageParser.PackageLite)"
"com.android.internal.content.PackageHelper.calculateInstalledSize(PackageLite, boolean, String)","com.android.internal.content.PackageHelper.calculateInstalledSize(android.content.pm.PackageParser.PackageLite, com.android.internal.content.NativeLibraryHelper.Handle, boolean, java.lang.String)"
"com.android.internal.content.PackageHelper.unMountSdDir(String)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.unMountSdDir(String)","android.os.storage.IMountService.unmountSecureContainer(java.lang.String, boolean)"
"com.android.internal.content.PackageHelper.calculateInstalledSize(PackageLite, NativeLibraryHelper.Handle, boolean, String)","com.android.internal.content.NativeLibraryHelper.sumNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper.Handle, java.lang.String)"
"com.android.internal.content.PackageHelper.calculateInstalledSize(PackageLite, NativeLibraryHelper.Handle, boolean, String)","java.io.File.length()"
"com.android.internal.content.PackageHelper.calculateInstalledSize(PackageLite, NativeLibraryHelper.Handle, boolean, String)","com.android.internal.content.PackageHelper.extractPublicFiles(java.io.File, null)"
"com.android.internal.content.PackageHelper.calculateInstalledSize(PackageLite, NativeLibraryHelper.Handle, boolean, String)","android.content.pm.PackageParser.PackageLite.getAllCodePaths()"
"com.android.internal.content.PackageHelper.finalizeSdDir(String)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.finalizeSdDir(String)","android.os.storage.IMountService.finalizeSecureContainer(java.lang.String)"
"com.android.internal.content.PackageHelper.mountSdDir(String, String, int, boolean)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.mountSdDir(String, String, int, boolean)","android.os.storage.IMountService.getSecureContainerPath(java.lang.String)"
"com.android.internal.content.PackageHelper.mountSdDir(String, String, int, boolean)","android.os.storage.IMountService.mountSecureContainer(java.lang.String, java.lang.String, int, boolean)"
"com.android.internal.content.PackageHelper.fixSdPermissions(String, int, String)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.fixSdPermissions(String, int, String)","android.os.storage.IMountService.fixPermissionsSecureContainer(java.lang.String, int, java.lang.String)"
"com.android.internal.content.PackageHelper.isContainerMounted(String)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.isContainerMounted(String)","android.os.storage.IMountService.isSecureContainerMounted(java.lang.String)"
"com.android.internal.content.PackageHelper.createSdDir(long, String, String, int, boolean)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.createSdDir(long, String, String, int, boolean)","android.os.storage.IMountService.createSecureContainer(java.lang.String, int, java.lang.String, java.lang.String, int, boolean)"
"com.android.internal.content.PackageHelper.createSdDir(long, String, String, int, boolean)","android.os.storage.IMountService.getSecureContainerPath(java.lang.String)"
"com.android.internal.content.PackageHelper.copyZipEntry(ZipEntry, ZipFile, ZipOutputStream)","java.io.InputStream.read(byte[])"
"com.android.internal.content.PackageHelper.copyZipEntry(ZipEntry, ZipFile, ZipOutputStream)","java.util.zip.ZipOutputStream.write(byte[], int, int)"
"com.android.internal.content.PackageHelper.copyZipEntry(ZipEntry, ZipFile, ZipOutputStream)","java.util.zip.DeflaterOutputStream.flush()"
"com.android.internal.content.PackageHelper.copyZipEntry(ZipEntry, ZipFile, ZipOutputStream)","java.util.zip.ZipEntry.getName()"
"com.android.internal.content.PackageHelper.copyZipEntry(ZipEntry, ZipFile, ZipOutputStream)","java.util.zip.ZipOutputStream.putNextEntry(java.util.zip.ZipEntry)"
"com.android.internal.content.PackageHelper.copyZipEntry(ZipEntry, ZipFile, ZipOutputStream)","java.util.zip.ZipEntry.getMethod()"
"com.android.internal.content.PackageHelper.copyZipEntry(ZipEntry, ZipFile, ZipOutputStream)","java.util.zip.ZipFile.getInputStream(java.util.zip.ZipEntry)"
"com.android.internal.content.PackageHelper.getSecureContainerList()","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.getSecureContainerList()","android.os.storage.IMountService.getSecureContainerList()"
"com.android.internal.content.PackageHelper.getMountService()","android.os.storage.IMountService.Stub.asInterface(android.os.IBinder)"
"com.android.internal.content.PackageHelper.getMountService()","android.os.ServiceManager.getService(java.lang.String)"
"com.android.internal.content.PackageHelper.mountSdDir(String, String, int)","com.android.internal.content.PackageHelper.mountSdDir(java.lang.String, java.lang.String, int, boolean)"
"com.android.internal.content.PackageHelper.destroySdDir(String)","com.android.internal.content.PackageHelper.getMountService()"
"com.android.internal.content.PackageHelper.destroySdDir(String)","android.os.storage.IMountService.destroySecureContainer(java.lang.String, boolean)"
"android.widget.ZoomButton.run()","android.os.Handler.postDelayed(android.widget.ZoomButton.Anonymous-7d40b7fc-6ece-4213-be39-e27dc041a162, long)"
"android.widget.ZoomButton.onLongClick(View)","android.os.Handler.post(java.lang.Runnable)"
"android.widget.ZoomButton.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.ZoomButton.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.ZoomButton.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.ZoomButton.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.ZoomButton.onTouchEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.net.http.Request.setLoadingPaused(boolean)","java.lang.Object.notify()"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","android.net.http.AndroidHttpClientConnection.flush()"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","java.lang.Object.wait()"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","android.net.http.Headers.getAcceptRanges()"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","android.net.http.Connection.getBuf()"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","java.io.InputStream.read(byte[], int, int)"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","android.net.http.Request.complete()"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","java.io.InputStream.close()"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","android.net.http.EventHandler.endData()"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","android.net.http.EventHandler.data(byte[], int)"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","android.net.http.AndroidHttpClientConnection.receiveResponseEntity(android.net.http.Headers)"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","android.net.http.EventHandler.headers(android.net.http.Headers)"
"android.net.http.Request.readResponse(AndroidHttpClientConnection)","android.net.http.AndroidHttpClientConnection.parseResponseHeader(android.net.http.Headers)"
"android.net.http.Request.reset()","android.net.http.Request.setBodyProvider(java.io.InputStream, int)"
"android.net.http.Request.reset()","java.io.InputStream.reset()"
"android.net.http.Request.cancel()","java.lang.Object.notify()"
"android.net.http.Request.cancel()","android.net.http.Connection.cancel()"
"android.net.http.Request.getUri()","android.net.http.Request.getHostPort()"
"android.net.http.Request.addHeader(String, String)","java.lang.String.length()"
"android.net.http.Request.handleSslErrorResponse(boolean)","android.net.http.HttpsConnection.restartConnection(boolean)"
"android.net.http.Request.sendRequest(AndroidHttpClientConnection)","java.util.Iterator.next()"
"android.net.http.Request.sendRequest(AndroidHttpClientConnection)","java.util.Iterator.hasNext()"
"android.net.http.Request.setBodyProvider(InputStream, int)","java.io.InputStream.mark(int)"
"android.net.http.Request.setBodyProvider(InputStream, int)","java.io.InputStream.markSupported()"
"android.net.http.Request.error(int, int)","android.net.http.EventHandler.error(int, java.lang.String)"
"android.net.http.Request.error(int, int)","android.content.Context.getText(int)"
"android.net.http.Request.error(int, int)","java.lang.CharSequence.toString()"
"android.net.http.Request.addHeaders(Map)","android.net.http.Request.addHeader(java.lang.String, java.lang.String)"
"android.net.http.Request.addHeaders(Map)","java.util.Iterator.next()"
"android.net.http.Request.addHeaders(Map)","java.util.Map.entrySet()"
"android.net.http.Request.addHeaders(Map)","java.util.Map.Entry.getValue()"
"android.net.http.Request.addHeaders(Map)","java.util.Iterator.hasNext()"
"android.net.http.Request.addHeaders(Map)","java.util.Map.Entry.getKey()"
"android.net.http.Request.addHeaders(Map)","java.util.Set.iterator()"
"android.net.http.Request.waitUntilComplete()","java.lang.Object.wait()"
"android.net.http.Request.getHostPort()","java.lang.String.equals(java.lang.String)"
"android.net.http.Request.complete()","java.lang.Object.notifyAll()"
"android.os.CommonTimeConfig.forceNetworklessMasterMode()","android.os.Parcel.recycle()"
"android.os.CommonTimeConfig.forceNetworklessMasterMode()","android.os.Parcel.obtain()"
"android.os.CommonTimeConfig.forceNetworklessMasterMode()","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.os.CommonTimeConfig.forceNetworklessMasterMode()","android.os.Parcel.readInt()"
"android.os.CommonTimeConfig.forceNetworklessMasterMode()","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.os.CommonTimeConfig.getClientSyncInterval()","android.os.CommonTimeUtils.transactGetInt(int, int)"
"android.os.CommonTimeConfig.getClientSyncInterval()","android.os.CommonTimeConfig.throwOnDeadServer()"
"android.os.CommonTimeConfig.getInterfaceBinding()","android.os.CommonTimeUtils.transactGetString(int, null)"
"android.os.CommonTimeConfig.getInterfaceBinding()","android.os.CommonTimeConfig.throwOnDeadServer()"
"android.os.CommonTimeConfig.getInterfaceBinding()","java.lang.String.length()"
"android.os.CommonTimeConfig.getMasterElectionEndpoint()","android.os.CommonTimeUtils.transactGetSockaddr(int)"
"android.os.CommonTimeConfig.getMasterElectionEndpoint()","android.os.CommonTimeConfig.throwOnDeadServer()"
"android.os.CommonTimeConfig.setNetworkBinding(String)","android.os.CommonTimeUtils.transactSetString(int, java.lang.String)"
"android.os.CommonTimeConfig.setNetworkBinding(String)","android.os.CommonTimeConfig.checkDeadServer()"
"android.os.CommonTimeConfig.getMasterElectionGroupId()","android.os.CommonTimeUtils.transactGetLong(int, long)"
"android.os.CommonTimeConfig.getMasterElectionGroupId()","android.os.CommonTimeConfig.throwOnDeadServer()"
"android.os.CommonTimeConfig.getMasterAnnounceInterval()","android.os.CommonTimeUtils.transactGetInt(int, int)"
"android.os.CommonTimeConfig.getMasterAnnounceInterval()","android.os.CommonTimeConfig.throwOnDeadServer()"
"android.os.CommonTimeConfig.throwOnDeadServer()","android.os.CommonTimeConfig.checkDeadServer()"
"android.os.CommonTimeConfig.setMasterElectionGroupId(long)","android.os.CommonTimeConfig.checkDeadServer()"
"android.os.CommonTimeConfig.setMasterElectionGroupId(long)","android.os.CommonTimeUtils.transactSetLong(int, long)"
"android.os.CommonTimeConfig.release()","android.os.IBinder.unlinkToDeath(android.os.IBinder.DeathRecipient, int)"
"android.os.CommonTimeConfig.getMasterElectionPriority()","android.os.CommonTimeUtils.transactGetInt(int, int)"
"android.os.CommonTimeConfig.getMasterElectionPriority()","android.os.CommonTimeConfig.throwOnDeadServer()"
"android.os.CommonTimeConfig.finalize()","android.os.CommonTimeConfig.release()"
"android.os.CommonTimeConfig.setMasterAnnounceInterval(int)","android.os.CommonTimeConfig.checkDeadServer()"
"android.os.CommonTimeConfig.setMasterAnnounceInterval(int)","android.os.CommonTimeUtils.transactSetInt(int, int)"
"android.os.CommonTimeConfig.setClientSyncInterval(int)","android.os.CommonTimeConfig.checkDeadServer()"
"android.os.CommonTimeConfig.setClientSyncInterval(int)","android.os.CommonTimeUtils.transactSetInt(int, int)"
"android.os.CommonTimeConfig.getPanicThreshold()","android.os.CommonTimeUtils.transactGetInt(int, int)"
"android.os.CommonTimeConfig.getPanicThreshold()","android.os.CommonTimeConfig.throwOnDeadServer()"
"android.os.CommonTimeConfig.setMasterElectionEndpoint(InetSocketAddress)","android.os.CommonTimeConfig.checkDeadServer()"
"android.os.CommonTimeConfig.setMasterElectionEndpoint(InetSocketAddress)","android.os.CommonTimeUtils.transactSetSockaddr(int, java.net.InetSocketAddress)"
"android.os.CommonTimeConfig.setAutoDisable(boolean)","android.os.CommonTimeConfig.checkDeadServer()"
"android.os.CommonTimeConfig.setAutoDisable(boolean)","android.os.CommonTimeUtils.transactSetInt(int, int)"
"android.os.CommonTimeConfig.binderDied()","android.os.CommonTimeConfig.OnServerDiedListener.onServerDied()"
"android.os.CommonTimeConfig.getAutoDisable()","android.os.CommonTimeUtils.transactGetInt(int, int)"
"android.os.CommonTimeConfig.getAutoDisable()","android.os.CommonTimeConfig.throwOnDeadServer()"
"android.os.CommonTimeConfig.setPanicThreshold(int)","android.os.CommonTimeConfig.checkDeadServer()"
"android.os.CommonTimeConfig.setPanicThreshold(int)","android.os.CommonTimeUtils.transactSetInt(int, int)"
"android.os.CommonTimeConfig.setMasterElectionPriority(byte)","android.os.CommonTimeUtils.transactSetInt(int, byte)"
"android.os.CommonTimeConfig.setMasterElectionPriority(byte)","android.os.CommonTimeConfig.checkDeadServer()"
"com.android.internal.widget.ExploreByTouchHelper.clearAccessibilityFocus(int)","com.android.internal.widget.ExploreByTouchHelper.sendEventForVirtualView(int, int)"
"com.android.internal.widget.ExploreByTouchHelper.clearAccessibilityFocus(int)","com.android.internal.widget.ExploreByTouchHelper.isAccessibilityFocused(int)"
"com.android.internal.widget.ExploreByTouchHelper.sendEventForVirtualView(int, int)","android.view.ViewParent.requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)"
"com.android.internal.widget.ExploreByTouchHelper.sendEventForVirtualView(int, int)","android.view.accessibility.AccessibilityManager.isEnabled()"
"com.android.internal.widget.ExploreByTouchHelper.sendEventForVirtualView(int, int)","android.view.View.getParent()"
"com.android.internal.widget.ExploreByTouchHelper.sendEventForVirtualView(int, int)","com.android.internal.widget.ExploreByTouchHelper.createEvent(int, int)"
"com.android.internal.widget.ExploreByTouchHelper.dispatchHoverEvent(MotionEvent)","android.view.accessibility.AccessibilityManager.isEnabled()"
"com.android.internal.widget.ExploreByTouchHelper.dispatchHoverEvent(MotionEvent)","android.view.MotionEvent.getY()"
"com.android.internal.widget.ExploreByTouchHelper.dispatchHoverEvent(MotionEvent)","android.view.accessibility.AccessibilityManager.isTouchExplorationEnabled()"
"com.android.internal.widget.ExploreByTouchHelper.dispatchHoverEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"com.android.internal.widget.ExploreByTouchHelper.dispatchHoverEvent(MotionEvent)","com.android.internal.widget.ExploreByTouchHelper.getVirtualViewAt(float, float)"
"com.android.internal.widget.ExploreByTouchHelper.dispatchHoverEvent(MotionEvent)","com.android.internal.widget.ExploreByTouchHelper.updateHoveredVirtualView(int)"
"com.android.internal.widget.ExploreByTouchHelper.dispatchHoverEvent(MotionEvent)","android.view.MotionEvent.getX()"
"com.android.internal.widget.ExploreByTouchHelper.invalidateVirtualView(int)","com.android.internal.widget.ExploreByTouchHelper.sendEventForVirtualView(int, int)"
"com.android.internal.widget.ExploreByTouchHelper.performActionForChild(int, int, Bundle)","com.android.internal.widget.ExploreByTouchHelper.onPerformActionForVirtualView(int, int, android.os.Bundle)"
"com.android.internal.widget.ExploreByTouchHelper.performActionForChild(int, int, Bundle)","com.android.internal.widget.ExploreByTouchHelper.manageFocusForChild(int, int)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.setSource(android.view.View, int)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.getContentDescription()"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.setParent(android.view.View)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","com.android.internal.widget.ExploreByTouchHelper.onPopulateNodeForVirtualView(int, android.view.accessibility.AccessibilityNodeInfo)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.View.getContext()"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.getText()"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.obtain()"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.setPackageName(java.lang.String)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.content.Context.getPackageName()"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","com.android.internal.widget.ExploreByTouchHelper.ensureTempRects()"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.addAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.setEnabled(boolean)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.setAccessibilityFocused(boolean)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.setVisibleToUser(boolean)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.accessibility.AccessibilityNodeInfo.getActions()"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)","android.view.View.getLocationOnScreen(int[])"
"com.android.internal.widget.ExploreByTouchHelper.createAccessibilityNodeInfo(int)","com.android.internal.widget.ExploreByTouchHelper.createNode(int)"
"com.android.internal.widget.ExploreByTouchHelper.requestAccessibilityFocus(int)","android.view.accessibility.AccessibilityManager.isEnabled()"
"com.android.internal.widget.ExploreByTouchHelper.requestAccessibilityFocus(int)","android.view.accessibility.AccessibilityManager.isTouchExplorationEnabled()"
"com.android.internal.widget.ExploreByTouchHelper.requestAccessibilityFocus(int)","com.android.internal.widget.ExploreByTouchHelper.sendEventForVirtualView(int, int)"
"com.android.internal.widget.ExploreByTouchHelper.requestAccessibilityFocus(int)","com.android.internal.widget.ExploreByTouchHelper.isAccessibilityFocused(int)"
"com.android.internal.widget.ExploreByTouchHelper.requestAccessibilityFocus(int)","android.content.Context.getSystemService(java.lang.String)"
"com.android.internal.widget.ExploreByTouchHelper.createNode(int)","com.android.internal.widget.ExploreByTouchHelper.createNodeForHost()"
"com.android.internal.widget.ExploreByTouchHelper.createNode(int)","com.android.internal.widget.ExploreByTouchHelper.createNodeForChild(int)"
"com.android.internal.widget.ExploreByTouchHelper.updateHoveredVirtualView(int)","com.android.internal.widget.ExploreByTouchHelper.sendEventForVirtualView(int, int)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForHost()","android.util.IntArray.size()"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForHost()","android.view.View.AccessibilityDelegate.onInitializeAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForHost()","android.util.IntArray.get(int)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForHost()","android.util.IntArray.clear()"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForHost()","android.view.accessibility.AccessibilityNodeInfo.addChild(android.view.View, int)"
"com.android.internal.widget.ExploreByTouchHelper.createNodeForHost()","com.android.internal.widget.ExploreByTouchHelper.getVisibleVirtualViews(android.util.IntArray)"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","android.view.accessibility.AccessibilityEvent.setPackageName(java.lang.String)"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","android.content.Context.getPackageName()"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","java.util.List.isEmpty()"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","android.view.View.getContext()"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","android.view.accessibility.AccessibilityEvent.obtain(int)"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","android.view.accessibility.AccessibilityRecord.setEnabled(boolean)"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","android.view.accessibility.AccessibilityRecord.getContentDescription()"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","com.android.internal.widget.ExploreByTouchHelper.onPopulateEventForVirtualView(int, android.view.accessibility.AccessibilityEvent)"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","android.view.accessibility.AccessibilityRecord.getText()"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","android.view.accessibility.AccessibilityRecord.setSource(android.view.View, int)"
"com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"com.android.internal.widget.ExploreByTouchHelper.performActionForHost(int, Bundle)","android.view.View.AccessibilityDelegate.performAccessibilityAction(android.view.View, int, android.os.Bundle)"
"com.android.internal.widget.ExploreByTouchHelper.manageFocusForChild(int, int)","com.android.internal.widget.ExploreByTouchHelper.requestAccessibilityFocus(int)"
"com.android.internal.widget.ExploreByTouchHelper.manageFocusForChild(int, int)","com.android.internal.widget.ExploreByTouchHelper.clearAccessibilityFocus(int)"
"com.android.internal.widget.ExploreByTouchHelper.performAction(int, int, Bundle)","com.android.internal.widget.ExploreByTouchHelper.performAction(int, int, android.os.Bundle)"
"com.android.internal.widget.ExploreByTouchHelper.createEvent(int, int)","com.android.internal.widget.ExploreByTouchHelper.createEventForChild(int, int)"
"com.android.internal.widget.ExploreByTouchHelper.createEvent(int, int)","com.android.internal.widget.ExploreByTouchHelper.createEventForHost(int)"
"com.android.internal.widget.ExploreByTouchHelper.createEventForHost(int)","android.view.accessibility.AccessibilityEvent.obtain(int)"
"com.android.internal.widget.ExploreByTouchHelper.createEventForHost(int)","android.view.View.AccessibilityDelegate.onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)"
"com.android.internal.widget.ExploreByTouchHelper.invalidateRoot()","com.android.internal.widget.ExploreByTouchHelper.invalidateVirtualView(int)"
"com.android.internal.widget.ExploreByTouchHelper.intersectVisibleToUser(Rect)","android.view.View.getVisibility()"
"com.android.internal.widget.ExploreByTouchHelper.intersectVisibleToUser(Rect)","android.view.View.getAlpha()"
"com.android.internal.widget.ExploreByTouchHelper.intersectVisibleToUser(Rect)","android.view.View.getWindowVisibility()"
"com.android.internal.widget.ExploreByTouchHelper.intersectVisibleToUser(Rect)","android.view.View.getParent()"
"android.text.TextUtils.isDigitsOnly(CharSequence)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.isDigitsOnly(CharSequence)","java.lang.Character.isDigit(char)"
"android.text.TextUtils.isDigitsOnly(CharSequence)","java.lang.CharSequence.length()"
"android.text.TextUtils.regionMatches(CharSequence, int, CharSequence, int, int)","android.text.TextUtils.getChars(java.lang.CharSequence, int, int, char[], int)"
"android.text.TextUtils.regionMatches(CharSequence, int, CharSequence, int, int)","android.text.TextUtils.obtain(int)"
"android.text.TextUtils.regionMatches(CharSequence, int, CharSequence, int, int)","android.text.TextUtils.recycle(char[])"
"android.text.TextUtils.expandTemplate(CharSequence, CharSequence[])","android.text.SpannableStringBuilder.charAt(int)"
"android.text.TextUtils.expandTemplate(CharSequence, CharSequence[])","android.text.SpannableStringBuilder.replace(int, int, java.lang.CharSequence)"
"android.text.TextUtils.expandTemplate(CharSequence, CharSequence[])","android.text.SpannableStringBuilder.length()"
"android.text.TextUtils.expandTemplate(CharSequence, CharSequence[])","android.text.SpannableStringBuilder.delete(int, int)"
"android.text.TextUtils.expandTemplate(CharSequence, CharSequence[])","java.lang.Character.isDigit(char)"
"android.text.TextUtils.expandTemplate(CharSequence, CharSequence[])","java.lang.CharSequence.length()"
"android.text.TextUtils.expandTemplate(CharSequence, CharSequence[])","java.lang.Character.getNumericValue(char)"
"android.text.TextUtils.lastIndexOf(CharSequence, char)","android.text.TextUtils.lastIndexOf(java.lang.CharSequence, char, int)"
"android.text.TextUtils.lastIndexOf(CharSequence, char)","java.lang.CharSequence.length()"
"android.text.TextUtils.removeEmptySpans(T[], Spanned, Class)","java.lang.System.arraycopy(T[], int, T[], int, int)"
"android.text.TextUtils.removeEmptySpans(T[], Spanned, Class)","android.text.Spanned.getSpanStart(T)"
"android.text.TextUtils.removeEmptySpans(T[], Spanned, Class)","android.text.Spanned.getSpanEnd(T)"
"android.text.TextUtils.removeEmptySpans(T[], Spanned, Class)","java.lang.reflect.Array.newInstance(java.lang.Class<T>, int)"
"android.text.TextUtils.isEmpty(CharSequence)","java.lang.CharSequence.length()"
"android.text.TextUtils.commaEllipsize(CharSequence, TextPaint, float, String, String, TextDirectionHeuristic)","android.text.SpannableStringBuilder.insert(int, java.lang.CharSequence, int, int)"
"android.text.TextUtils.commaEllipsize(CharSequence, TextPaint, float, String, String, TextDirectionHeuristic)","android.text.TextUtils.setPara(android.text.MeasuredText, android.text.TextPaint, java.lang.CharSequence, int, int, android.text.TextDirectionHeuristic)"
"android.text.TextUtils.commaEllipsize(CharSequence, TextPaint, float, String, String, TextDirectionHeuristic)","android.text.MeasuredText.setPara(java.lang.String, int, int, android.text.TextDirectionHeuristic)"
"android.text.TextUtils.commaEllipsize(CharSequence, TextPaint, float, String, String, TextDirectionHeuristic)","android.text.MeasuredText.obtain()"
"android.text.TextUtils.commaEllipsize(CharSequence, TextPaint, float, String, String, TextDirectionHeuristic)","java.lang.String.format(java.lang.String, int)"
"android.text.TextUtils.commaEllipsize(CharSequence, TextPaint, float, String, String, TextDirectionHeuristic)","java.lang.CharSequence.length()"
"android.text.TextUtils.commaEllipsize(CharSequence, TextPaint, float, String, String, TextDirectionHeuristic)","android.text.MeasuredText.recycle(android.text.MeasuredText)"
"android.text.TextUtils.commaEllipsize(CharSequence, TextPaint, float, String, String, TextDirectionHeuristic)","java.lang.String.length()"
"android.text.TextUtils.indexOf(CharSequence, char)","android.text.TextUtils.indexOf(java.lang.CharSequence, char, int)"
"android.text.TextUtils.setPara(MeasuredText, TextPaint, CharSequence, int, int, TextDirectionHeuristic)","android.text.TextUtils.removeEmptySpans(android.text.style.MetricAffectingSpan[], android.text.Spanned, java.lang.Class<android.text.style.MetricAffectingSpan>)"
"android.text.TextUtils.setPara(MeasuredText, TextPaint, CharSequence, int, int, TextDirectionHeuristic)","android.text.Spanned.nextSpanTransition(int, int, java.lang.Class<android.text.style.MetricAffectingSpan>)"
"android.text.TextUtils.setPara(MeasuredText, TextPaint, CharSequence, int, int, TextDirectionHeuristic)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.MetricAffectingSpan>)"
"android.text.TextUtils.setPara(MeasuredText, TextPaint, CharSequence, int, int, TextDirectionHeuristic)","android.text.MeasuredText.setPara(java.lang.CharSequence, int, int, android.text.TextDirectionHeuristic)"
"android.text.TextUtils.getChars(CharSequence, int, int, char[], int)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.getChars(CharSequence, int, int, char[], int)","java.lang.String.getChars(int, int, char[], int)"
"android.text.TextUtils.getChars(CharSequence, int, int, char[], int)","java.lang.AbstractStringBuilder.getChars(int, int, char[], int)"
"android.text.TextUtils.getChars(CharSequence, int, int, char[], int)","java.lang.StringBuffer.getChars(int, int, char[], int)"
"android.text.TextUtils.getChars(CharSequence, int, int, char[], int)","java.lang.Object.getClass()"
"android.text.TextUtils.getChars(CharSequence, int, int, char[], int)","android.text.GetChars.getChars(int, int, char[], int)"
"android.text.TextUtils.getChars(int, int, char[], int)","android.text.TextUtils.getChars(java.lang.CharSequence, int, int, char[], int)"
"android.text.TextUtils.getChars(int, int, char[], int)","android.text.AndroidCharacter.mirror(char[], int, int)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt)","android.text.TextUtils.ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils.TruncateAt, boolean, null)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.TtsSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.LeadingMarginSpan.Standard)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.BulletSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.ForegroundColorSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.SuggestionSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.RelativeSizeSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.Annotation)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.AbsoluteSizeSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.LocaleSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.UnderlineSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.BackgroundColorSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.StyleSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.SuperscriptSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.SuggestionRangeSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.TextAppearanceSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.ScaleXSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.QuoteSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.SubscriptSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.EasyEditSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.StrikethroughSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.AlignmentSpan.Standard)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.SpellCheckSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.TypefaceSpan)"
"android.text.TextUtils.createFromParcel(Parcel)","android.text.TextUtils.readSpan(android.os.Parcel, android.text.SpannableString, android.text.style.URLSpan)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback)","android.text.TextUtils.ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils.TruncateAt, boolean, android.text.TextUtils.EllipsizeCallback, android.text.TextDirectionHeuristic, java.lang.String)"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","android.text.style.CharacterStyle.getUnderlying()"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","android.os.Parcel.writeString(null)"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","android.text.ParcelableSpan.getSpanTypeId()"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","android.text.TextUtils.writeWhere(android.os.Parcel, android.text.Spanned, java.lang.Object)"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","android.text.Spanned.getSpans(int, int, java.lang.Class<java.lang.Object>)"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","java.lang.CharSequence.toString()"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","android.os.Parcel.writeInt(int)"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","java.lang.CharSequence.length()"
"android.text.TextUtils.writeToParcel(CharSequence, Parcel, int)","android.os.Parcelable.writeToParcel(android.os.Parcel, int)"
"android.text.TextUtils.getLayoutDirectionFromFirstChar(Locale)","java.util.Locale.getDisplayName(java.util.Locale)"
"android.text.TextUtils.getLayoutDirectionFromFirstChar(Locale)","java.lang.Character.getDirectionality(char)"
"android.text.TextUtils.getLayoutDirectionFromFirstChar(Locale)","java.lang.String.charAt(int)"
"android.text.TextUtils.indexOf(CharSequence, char, int)","java.lang.String.indexOf(char, int)"
"android.text.TextUtils.indexOf(CharSequence, char, int)","android.text.TextUtils.indexOf(java.lang.CharSequence, char, int, int)"
"android.text.TextUtils.indexOf(CharSequence, char, int)","java.lang.Object.getClass()"
"android.text.TextUtils.indexOf(CharSequence, char, int)","java.lang.CharSequence.length()"
"android.text.TextUtils.next()","java.lang.String.indexOf(char, int)"
"android.text.TextUtils.next()","java.lang.String.substring(int, int)"
"android.text.TextUtils.charAt(int)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.charAt(int)","android.text.AndroidCharacter.getMirror(char)"
"android.text.TextUtils.indexOf(CharSequence, CharSequence, int, int)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.indexOf(CharSequence, CharSequence, int, int)","android.text.TextUtils.indexOf(java.lang.CharSequence, char, int)"
"android.text.TextUtils.indexOf(CharSequence, CharSequence, int, int)","android.text.TextUtils.regionMatches(java.lang.CharSequence, int, java.lang.CharSequence, int, int)"
"android.text.TextUtils.indexOf(CharSequence, CharSequence, int, int)","java.lang.CharSequence.length()"
"android.text.TextUtils.copySpansFrom(Spanned, int, int, Class, Spannable, int)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.TextUtils.copySpansFrom(Spanned, int, int, Class, Spannable, int)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.text.TextUtils.copySpansFrom(Spanned, int, int, Class, Spannable, int)","android.text.Spanned.getSpans(int, int, java.lang.Class)"
"android.text.TextUtils.copySpansFrom(Spanned, int, int, Class, Spannable, int)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.text.TextUtils.copySpansFrom(Spanned, int, int, Class, Spannable, int)","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.text.TextUtils.getLayoutDirectionFromLocale(Locale)","android.text.TextUtils.getLayoutDirectionFromFirstChar(java.util.Locale)"
"android.text.TextUtils.getLayoutDirectionFromLocale(Locale)","java.util.Locale.equals(java.util.Locale)"
"android.text.TextUtils.getLayoutDirectionFromLocale(Locale)","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.text.TextUtils.getLayoutDirectionFromLocale(Locale)","android.os.SystemProperties.getBoolean(java.lang.String, boolean)"
"android.text.TextUtils.indexOf(CharSequence, char, int, int)","android.text.TextUtils.getChars(java.lang.CharSequence, int, int, char[], int)"
"android.text.TextUtils.indexOf(CharSequence, char, int, int)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.indexOf(CharSequence, char, int, int)","java.lang.Object.getClass()"
"android.text.TextUtils.indexOf(CharSequence, char, int, int)","android.text.TextUtils.obtain(int)"
"android.text.TextUtils.indexOf(CharSequence, char, int, int)","android.text.TextUtils.recycle(char[])"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","android.text.SpannableStringBuilder.append(java.lang.CharSequence, int, int)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","android.text.MeasuredText.breakText(int, boolean, float)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","java.lang.StringBuilder.append(java.lang.String)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","android.text.MeasuredText.obtain()"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","java.lang.StringBuilder.toString()"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","android.text.MeasuredText.recycle(android.text.MeasuredText)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","java.lang.String.charAt(int)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","android.text.TextUtils.copySpansFrom(android.text.Spanned, int, int, java.lang.Class<java.lang.Object>, android.text.SpannableString, int)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","android.text.TextUtils.setPara(android.text.MeasuredText, android.text.TextPaint, java.lang.CharSequence, int, int, android.text.TextDirectionHeuristic)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","android.text.SpannableStringBuilder.append(java.lang.String)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","android.text.TextUtils.EllipsizeCallback.ellipsized(int, int)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","android.text.MeasuredText.measure(int, int)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","java.lang.StringBuilder.append(char[], int, int)"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","java.lang.CharSequence.length()"
"android.text.TextUtils.ellipsize(CharSequence, TextPaint, float, TruncateAt, boolean, EllipsizeCallback, TextDirectionHeuristic, String)","java.lang.String.length()"
"android.text.TextUtils.equals(CharSequence, CharSequence)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.equals(CharSequence, CharSequence)","java.lang.Object.equals(java.lang.CharSequence)"
"android.text.TextUtils.equals(CharSequence, CharSequence)","java.lang.CharSequence.length()"
"android.text.TextUtils.split(String, Pattern)","java.lang.String.length()"
"android.text.TextUtils.split(String, Pattern)","java.util.regex.Pattern.split(java.lang.String, int)"
"android.text.TextUtils.indexOf(CharSequence, CharSequence, int)","android.text.TextUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int)"
"android.text.TextUtils.indexOf(CharSequence, CharSequence, int)","java.lang.CharSequence.length()"
"android.text.TextUtils.isPrintableAsciiOnly(CharSequence)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.isPrintableAsciiOnly(CharSequence)","android.text.TextUtils.isPrintableAscii(char)"
"android.text.TextUtils.isPrintableAsciiOnly(CharSequence)","java.lang.CharSequence.length()"
"android.text.TextUtils.join(Iterable)","android.text.TextUtils.join(java.lang.CharSequence, java.lang.Iterable<java.lang.CharSequence>)"
"android.text.TextUtils.writeWhere(Parcel, Spanned, Object)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.TextUtils.writeWhere(Parcel, Spanned, Object)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.text.TextUtils.writeWhere(Parcel, Spanned, Object)","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.text.TextUtils.writeWhere(Parcel, Spanned, Object)","android.os.Parcel.writeInt(int)"
"android.text.TextUtils.lastIndexOf(CharSequence, char, int)","java.lang.String.lastIndexOf(char, int)"
"android.text.TextUtils.lastIndexOf(CharSequence, char, int)","java.lang.Object.getClass()"
"android.text.TextUtils.lastIndexOf(CharSequence, char, int)","android.text.TextUtils.lastIndexOf(java.lang.CharSequence, char, int, int)"
"android.text.TextUtils.setString(String)","java.lang.String.length()"
"android.text.TextUtils.stringOrSpannedString(CharSequence)","java.lang.CharSequence.toString()"
"android.text.TextUtils.readSpan(Parcel, Spannable, Object)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.text.TextUtils.readSpan(Parcel, Spannable, Object)","android.os.Parcel.readInt()"
"android.text.TextUtils.join(CharSequence, Object[])","java.lang.StringBuilder.append(java.lang.CharSequence)"
"android.text.TextUtils.join(CharSequence, Object[])","java.lang.StringBuilder.append(java.lang.Object)"
"android.text.TextUtils.join(CharSequence, Object[])","java.lang.StringBuilder.toString()"
"android.text.TextUtils.delimitedStringContains(String, char, String)","java.lang.String.charAt(int)"
"android.text.TextUtils.delimitedStringContains(String, char, String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.text.TextUtils.delimitedStringContains(String, char, String)","java.lang.String.indexOf(java.lang.String, int)"
"android.text.TextUtils.delimitedStringContains(String, char, String)","java.lang.String.length()"
"android.text.TextUtils.indexOf(CharSequence, CharSequence)","android.text.TextUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int)"
"android.text.TextUtils.indexOf(CharSequence, CharSequence)","java.lang.CharSequence.length()"
"android.text.TextUtils.getOffsetAfter(CharSequence, int)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.getOffsetAfter(CharSequence, int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.ReplacementSpan>)"
"android.text.TextUtils.getOffsetAfter(CharSequence, int)","android.text.Spanned.getSpanStart(android.text.style.ReplacementSpan)"
"android.text.TextUtils.getOffsetAfter(CharSequence, int)","android.text.Spanned.getSpanEnd(android.text.style.ReplacementSpan)"
"android.text.TextUtils.getOffsetAfter(CharSequence, int)","java.lang.CharSequence.length()"
"android.text.TextUtils.concat(CharSequence[])","java.lang.StringBuilder.append(java.lang.CharSequence)"
"android.text.TextUtils.concat(CharSequence[])","android.text.TextUtils.copySpansFrom(android.text.Spanned, int, int, java.lang.Class<java.lang.Object>, android.text.SpannableString, int)"
"android.text.TextUtils.concat(CharSequence[])","java.lang.StringBuilder.toString()"
"android.text.TextUtils.concat(CharSequence[])","java.lang.CharSequence.length()"
"android.text.TextUtils.htmlEncode(String)","java.lang.String.charAt(int)"
"android.text.TextUtils.htmlEncode(String)","java.lang.StringBuilder.append(java.lang.String)"
"android.text.TextUtils.htmlEncode(String)","java.lang.StringBuilder.toString()"
"android.text.TextUtils.htmlEncode(String)","java.lang.StringBuilder.append(char)"
"android.text.TextUtils.htmlEncode(String)","java.lang.String.length()"
"android.text.TextUtils.substring(CharSequence, int, int)","android.text.TextUtils.getChars(java.lang.CharSequence, int, int, char[], int)"
"android.text.TextUtils.substring(CharSequence, int, int)","android.text.TextUtils.obtain(int)"
"android.text.TextUtils.substring(CharSequence, int, int)","android.text.TextUtils.recycle(char[])"
"android.text.TextUtils.substring(CharSequence, int, int)","java.lang.String.substring(int, int)"
"android.text.TextUtils.substring(CharSequence, int, int)","java.lang.StringBuffer.substring(int, int)"
"android.text.TextUtils.substring(CharSequence, int, int)","java.lang.AbstractStringBuilder.substring(int, int)"
"android.text.TextUtils.doesNotNeedBidi(CharSequence, int, int)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.lastIndexOf(CharSequence, char, int, int)","android.text.TextUtils.getChars(java.lang.CharSequence, int, int, char[], int)"
"android.text.TextUtils.lastIndexOf(CharSequence, char, int, int)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.lastIndexOf(CharSequence, char, int, int)","java.lang.Object.getClass()"
"android.text.TextUtils.lastIndexOf(CharSequence, char, int, int)","android.text.TextUtils.obtain(int)"
"android.text.TextUtils.lastIndexOf(CharSequence, char, int, int)","android.text.TextUtils.recycle(char[])"
"android.text.TextUtils.lastIndexOf(CharSequence, char, int, int)","java.lang.CharSequence.length()"
"android.text.TextUtils.getTrimmedLength(CharSequence)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.getTrimmedLength(CharSequence)","java.lang.CharSequence.length()"
"android.text.TextUtils.split(String, String)","java.lang.String.split(java.lang.String, int)"
"android.text.TextUtils.split(String, String)","java.lang.String.length()"
"android.text.TextUtils.toString()","android.text.TextUtils.Reverser.subSequence(int, int)"
"android.text.TextUtils.toString()","java.lang.CharSequence.toString()"
"android.text.TextUtils.toString()","android.text.TextUtils.Reverser.length()"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","java.lang.System.identityHashCode(java.lang.Object)"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","android.text.Spanned.getSpans(int, int, java.lang.Class<java.lang.Object>)"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","java.lang.Object.getClass()"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","java.lang.CharSequence.subSequence(int, int)"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","java.lang.Class.getCanonicalName()"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","android.util.Printer.println(java.lang.String)"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","java.lang.Integer.toHexString(int)"
"android.text.TextUtils.dumpSpans(CharSequence, Printer, String)","java.lang.CharSequence.length()"
"android.text.TextUtils.getCapsMode(CharSequence, int, int)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.getCapsMode(CharSequence, int, int)","java.lang.Character.getType(char)"
"android.text.TextUtils.getCapsMode(CharSequence, int, int)","java.lang.Character.isLetter(char)"
"android.text.TextUtils.join(CharSequence, Iterable)","java.lang.StringBuilder.append(java.lang.CharSequence)"
"android.text.TextUtils.join(CharSequence, Iterable)","java.lang.StringBuilder.append(java.lang.Object)"
"android.text.TextUtils.join(CharSequence, Iterable)","java.lang.StringBuilder.toString()"
"android.text.TextUtils.subSequence(int, int)","android.text.TextUtils.Reverser.getChars(int, int, char[], int)"
"android.text.TextUtils.getOffsetBefore(CharSequence, int)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.getOffsetBefore(CharSequence, int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.ReplacementSpan>)"
"android.text.TextUtils.getOffsetBefore(CharSequence, int)","android.text.Spanned.getSpanStart(android.text.style.ReplacementSpan)"
"android.text.TextUtils.getOffsetBefore(CharSequence, int)","android.text.Spanned.getSpanEnd(android.text.style.ReplacementSpan)"
"android.text.TextUtils.replace(CharSequence, String[], CharSequence[])","android.text.SpannableStringBuilder.replace(int, int, java.lang.CharSequence)"
"android.text.TextUtils.replace(CharSequence, String[], CharSequence[])","android.text.SpannableStringBuilder.getSpanStart(java.lang.String)"
"android.text.TextUtils.replace(CharSequence, String[], CharSequence[])","android.text.SpannableStringBuilder.setSpan(java.lang.String, int, int, int)"
"android.text.TextUtils.replace(CharSequence, String[], CharSequence[])","android.text.TextUtils.indexOf(android.text.SpannableStringBuilder, java.lang.String)"
"android.text.TextUtils.replace(CharSequence, String[], CharSequence[])","android.text.SpannableStringBuilder.getSpanEnd(java.lang.String)"
"android.text.TextUtils.replace(CharSequence, String[], CharSequence[])","java.lang.String.length()"
"android.text.TextUtils.obtain(int)","com.android.internal.util.ArrayUtils.newUnpaddedCharArray(int)"
"android.text.TextUtils.commaEllipsize(CharSequence, TextPaint, float, String, String)","android.text.TextUtils.commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String, android.text.TextDirectionHeuristic)"
"android.text.TextUtils.isGraphic(CharSequence)","java.lang.CharSequence.charAt(int)"
"android.text.TextUtils.isGraphic(CharSequence)","java.lang.Character.getType(char)"
"android.text.TextUtils.isGraphic(CharSequence)","java.lang.CharSequence.length()"
"android.text.TextUtils.isGraphic(char)","java.lang.Character.getType(char)"
"android.bluetooth.BluetoothHeadsetClient.dialMemory(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.dialMemory(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.dialMemory(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.holdCall(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.holdCall(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.holdCall(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.connectAudio()","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.getCurrentAgFeatures(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.acceptCall(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.acceptCall(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.acceptCall(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.explicitCallTransfer(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.explicitCallTransfer(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.explicitCallTransfer(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.sendDTMF(BluetoothDevice, byte)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.sendDTMF(BluetoothDevice, byte)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.sendDTMF(BluetoothDevice, byte)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothDevice.getAddress()"
"android.bluetooth.BluetoothHeadsetClient.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothAdapter.checkBluetoothAddress(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.isEnabled()","android.bluetooth.BluetoothAdapter.getState()"
"android.bluetooth.BluetoothHeadsetClient.getPriority(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.getPriority(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.getPriority(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.connect(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.connect(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.connect(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.redial(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.redial(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.redial(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.rejectCall(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.rejectCall(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.rejectCall(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.rejectIncomingConnect(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.stopVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.stopVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.stopVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.doBind()","android.content.Context.getPackageManager()"
"android.bluetooth.BluetoothHeadsetClient.doBind()","android.content.Intent.setComponent(android.content.ComponentName)"
"android.bluetooth.BluetoothHeadsetClient.doBind()","android.os.Process.myUserHandle()"
"android.bluetooth.BluetoothHeadsetClient.doBind()","android.content.Intent.resolveSystemService(android.content.pm.PackageManager, int)"
"android.bluetooth.BluetoothHeadsetClient.doBind()","android.content.Context.bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)"
"android.bluetooth.BluetoothHeadsetClient.getCurrentAgEvents(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.getCurrentAgEvents(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.getCurrentAgEvents(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.close()","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.close()","android.content.Context.unbindService(android.content.ServiceConnection)"
"android.bluetooth.BluetoothHeadsetClient.close()","android.bluetooth.BluetoothAdapter.getBluetoothManager()"
"android.bluetooth.BluetoothHeadsetClient.getCurrentCalls(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.getCurrentCalls(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.getCurrentCalls(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.acceptIncomingConnect(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.acceptIncomingConnect(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.dial(BluetoothDevice, String)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.dial(BluetoothDevice, String)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.dial(BluetoothDevice, String)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.onServiceDisconnected(ComponentName)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceDisconnected(int)"
"android.bluetooth.BluetoothHeadsetClient.disconnectAudio()","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.getLastVoiceTagNumber(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.getLastVoiceTagNumber(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.getLastVoiceTagNumber(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.startVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.startVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.startVoiceRecognition(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.disconnect(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.disconnect(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.disconnect(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.getAudioState(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.getAudioState(BluetoothDevice)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.enterPrivateMode(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.enterPrivateMode(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.enterPrivateMode(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.terminateCall(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothHeadsetClient.terminateCall(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.terminateCall(BluetoothDevice, int)","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"android.bluetooth.BluetoothHeadsetClient.onServiceConnected(ComponentName, IBinder)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceConnected(int, android.bluetooth.BluetoothHeadsetClient)"
"android.bluetooth.BluetoothHeadsetClient.getConnectedDevices()","android.bluetooth.BluetoothHeadsetClient.log(java.lang.String)"
"android.bluetooth.BluetoothHeadsetClient.getConnectedDevices()","android.bluetooth.BluetoothHeadsetClient.isEnabled()"
"com.android.internal.widget.multiwaveview.Tweener.replace(ArrayList, Object[])","java.util.HashMap.get(java.lang.Object)"
"com.android.internal.widget.multiwaveview.Tweener.replace(ArrayList, Object[])","java.util.ArrayList.size()"
"com.android.internal.widget.multiwaveview.Tweener.replace(ArrayList, Object[])","android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder[])"
"com.android.internal.widget.multiwaveview.Tweener.replace(ArrayList, Object[])","java.util.ArrayList.toArray(android.animation.PropertyValuesHolder[])"
"com.android.internal.widget.multiwaveview.Tweener.replace(ArrayList, Object[])","java.util.HashMap.remove(com.android.internal.widget.multiwaveview.Tweener)"
"com.android.internal.widget.multiwaveview.Tweener.replace(ArrayList, Object[])","android.animation.ValueAnimator.cancel()"
"com.android.internal.widget.multiwaveview.Tweener.from(Object, long, Object[])","com.android.internal.widget.multiwaveview.Tweener.to(java.lang.Object, long, java.lang.Object[])"
"com.android.internal.widget.multiwaveview.Tweener.onAnimationEnd(Animator)","com.android.internal.widget.multiwaveview.Tweener.remove(android.animation.Animator)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","java.util.HashMap.get(java.lang.Object)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.PropertyValuesHolder.ofInt(java.lang.String, int, int)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","java.lang.Number.longValue()"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.ValueAnimator.removeAllUpdateListeners()"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.ValueAnimator.setInterpolator(android.animation.TimeInterpolator)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder[])"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","java.lang.Number.floatValue()"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","com.android.internal.widget.multiwaveview.Tweener.replace(java.util.ArrayList<android.animation.PropertyValuesHolder>, java.lang.Object)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.ValueAnimator.addUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","java.lang.String.equals(java.lang.String)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","java.util.ArrayList.add(android.animation.PropertyValuesHolder)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","java.util.HashMap.put(java.lang.Object, com.android.internal.widget.multiwaveview.Tweener)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.ValueAnimator.setStartDelay(long)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","java.util.ArrayList.size()"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.Animator.removeAllListeners()"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.PropertyValuesHolder.ofFloat(java.lang.String, float)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.PropertyValuesHolder.ofFloat(java.lang.String, float, float)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.ObjectAnimator.setDuration(long)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","android.animation.Animator.addListener(android.animation.Animator.AnimatorListener)"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","java.lang.Object.getClass()"
"com.android.internal.widget.multiwaveview.Tweener.to(Object, long, Object[])","java.util.ArrayList.toArray(android.animation.PropertyValuesHolder[])"
"com.android.internal.widget.multiwaveview.Tweener.reset()","java.util.HashMap.clear()"
"com.android.internal.widget.multiwaveview.Tweener.reset()","java.util.HashMap.size()"
"com.android.internal.widget.multiwaveview.Tweener.onAnimationCancel(Animator)","com.android.internal.widget.multiwaveview.Tweener.remove(android.animation.Animator)"
"com.android.internal.widget.multiwaveview.Tweener.remove(Animator)","java.util.Iterator.next()"
"com.android.internal.widget.multiwaveview.Tweener.remove(Animator)","java.util.Map.Entry.getValue()"
"com.android.internal.widget.multiwaveview.Tweener.remove(Animator)","java.util.Iterator.hasNext()"
"com.android.internal.widget.multiwaveview.Tweener.remove(Animator)","java.util.Iterator.remove()"
"com.android.internal.widget.multiwaveview.Tweener.remove(Animator)","java.util.Set.iterator()"
"com.android.internal.widget.multiwaveview.Tweener.remove(Animator)","java.util.HashMap.entrySet()"
"android.app.ExpandableListActivity.onRestoreInstanceState(Bundle)","android.app.Activity.onRestoreInstanceState(android.os.Bundle)"
"android.app.ExpandableListActivity.onContentChanged()","android.app.Activity.onContentChanged()"
"android.bluetooth.BluetoothA2dpSink.doBind()","android.content.Context.getPackageManager()"
"android.bluetooth.BluetoothA2dpSink.doBind()","android.content.Intent.setComponent(android.content.ComponentName)"
"android.bluetooth.BluetoothA2dpSink.doBind()","android.os.Process.myUserHandle()"
"android.bluetooth.BluetoothA2dpSink.doBind()","android.content.Intent.resolveSystemService(android.content.pm.PackageManager, int)"
"android.bluetooth.BluetoothA2dpSink.doBind()","android.content.Context.bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)"
"android.bluetooth.BluetoothA2dpSink.getAudioConfig(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.log(java.lang.String)"
"android.bluetooth.BluetoothA2dpSink.getAudioConfig(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.isEnabled()"
"android.bluetooth.BluetoothA2dpSink.getAudioConfig(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothA2dpSink.getConnectedDevices()","android.bluetooth.BluetoothA2dpSink.log(java.lang.String)"
"android.bluetooth.BluetoothA2dpSink.getConnectedDevices()","android.bluetooth.BluetoothA2dpSink.isEnabled()"
"android.bluetooth.BluetoothA2dpSink.close()","android.content.Context.unbindService(android.content.ServiceConnection)"
"android.bluetooth.BluetoothA2dpSink.close()","android.bluetooth.BluetoothAdapter.getBluetoothManager()"
"android.bluetooth.BluetoothA2dpSink.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothDevice.getAddress()"
"android.bluetooth.BluetoothA2dpSink.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothAdapter.checkBluetoothAddress(java.lang.String)"
"android.bluetooth.BluetoothA2dpSink.isEnabled()","android.bluetooth.BluetoothAdapter.getState()"
"android.bluetooth.BluetoothA2dpSink.connect(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.log(java.lang.String)"
"android.bluetooth.BluetoothA2dpSink.connect(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.isEnabled()"
"android.bluetooth.BluetoothA2dpSink.connect(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothA2dpSink.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothA2dpSink.log(java.lang.String)"
"android.bluetooth.BluetoothA2dpSink.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothA2dpSink.isEnabled()"
"android.bluetooth.BluetoothA2dpSink.disconnect(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.log(java.lang.String)"
"android.bluetooth.BluetoothA2dpSink.disconnect(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.isEnabled()"
"android.bluetooth.BluetoothA2dpSink.disconnect(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothA2dpSink.finalize()","android.bluetooth.BluetoothA2dpSink.close()"
"android.bluetooth.BluetoothA2dpSink.onServiceDisconnected(ComponentName)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceDisconnected(int)"
"android.bluetooth.BluetoothA2dpSink.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.log(java.lang.String)"
"android.bluetooth.BluetoothA2dpSink.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.isEnabled()"
"android.bluetooth.BluetoothA2dpSink.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothA2dpSink.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothA2dpSink.onServiceConnected(ComponentName, IBinder)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceConnected(int, android.bluetooth.BluetoothA2dpSink)"
"android.hardware.usb.UsbInterface.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.hardware.usb.UsbInterface.toString()","java.lang.StringBuilder.toString()"
"android.hardware.usb.UsbInterface.toString()","java.lang.Object.toString()"
"android.hardware.usb.UsbInterface.createFromParcel(Parcel)","android.hardware.usb.UsbInterface.setEndpoints(android.os.Parcelable[])"
"android.hardware.usb.UsbInterface.createFromParcel(Parcel)","android.os.Parcel.readParcelableArray(java.lang.ClassLoader)"
"android.hardware.usb.UsbInterface.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.hardware.usb.UsbInterface.createFromParcel(Parcel)","java.lang.Class.getClassLoader()"
"android.hardware.usb.UsbInterface.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.usb.UsbInterface.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.hardware.usb.UsbInterface.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.usb.UsbInterface.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelableArray(android.os.Parcelable[], int)"
"android.os.FileUtils.copyToFile(InputStream, File)","java.io.FileDescriptor.sync()"
"android.os.FileUtils.copyToFile(InputStream, File)","java.io.InputStream.read(byte[])"
"android.os.FileUtils.copyToFile(InputStream, File)","java.io.FileOutputStream.getFD()"
"android.os.FileUtils.copyToFile(InputStream, File)","java.io.FileOutputStream.write(byte[], int, int)"
"android.os.FileUtils.copyToFile(InputStream, File)","java.io.File.exists()"
"android.os.FileUtils.copyToFile(InputStream, File)","java.io.FileOutputStream.close()"
"android.os.FileUtils.copyToFile(InputStream, File)","java.io.OutputStream.flush()"
"android.os.FileUtils.copyToFile(InputStream, File)","java.io.File.delete()"
"android.os.FileUtils.sync(FileOutputStream)","java.io.FileDescriptor.sync()"
"android.os.FileUtils.sync(FileOutputStream)","java.io.FileOutputStream.getFD()"
"android.os.FileUtils.deleteContents(File)","android.os.FileUtils.deleteContents(java.io.File)"
"android.os.FileUtils.deleteContents(File)","java.io.File.isDirectory()"
"android.os.FileUtils.deleteContents(File)","java.io.File.listFiles()"
"android.os.FileUtils.deleteContents(File)","java.io.File.delete()"
"android.os.FileUtils.readTextFile(File, int, String)","java.io.InputStream.close()"
"android.os.FileUtils.readTextFile(File, int, String)","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"android.os.FileUtils.readTextFile(File, int, String)","java.io.BufferedInputStream.close()"
"android.os.FileUtils.readTextFile(File, int, String)","java.io.File.length()"
"android.os.FileUtils.readTextFile(File, int, String)","java.io.FilterInputStream.read(byte[])"
"android.os.FileUtils.readTextFile(File, int, String)","java.io.ByteArrayOutputStream.toString()"
"android.os.FileUtils.readTextFile(File, int, String)","java.io.ByteArrayOutputStream.write(byte[], int, int)"
"android.os.FileUtils.stringToFile(String, String)","java.io.Writer.write(java.lang.String)"
"android.os.FileUtils.stringToFile(String, String)","java.io.OutputStreamWriter.close()"
"android.os.FileUtils.isValidFatFilename(String)","java.lang.String.equals(java.lang.String)"
"android.os.FileUtils.isValidFatFilename(String)","android.os.FileUtils.buildValidFatFilename(java.lang.String)"
"android.os.FileUtils.rewriteAfterRename(File, File, String)","java.io.File.getAbsolutePath()"
"android.os.FileUtils.rewriteAfterRename(File, File, String)","android.os.FileUtils.rewriteAfterRename(java.io.File, java.io.File, java.io.File)"
"android.os.FileUtils.buildValidExtFilename(String)","java.lang.String.charAt(int)"
"android.os.FileUtils.buildValidExtFilename(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.os.FileUtils.buildValidExtFilename(String)","java.lang.StringBuilder.toString()"
"android.os.FileUtils.buildValidExtFilename(String)","java.lang.StringBuilder.append(char)"
"android.os.FileUtils.buildValidExtFilename(String)","java.lang.String.equals(java.lang.String)"
"android.os.FileUtils.buildValidExtFilename(String)","android.os.FileUtils.isValidExtFilenameChar(char)"
"android.os.FileUtils.buildValidExtFilename(String)","java.lang.String.length()"
"android.os.FileUtils.deleteOlderFiles(File, int, long)","java.util.Arrays.sort(java.io.File[], java.util.Comparator<java.io.File>)"
"android.os.FileUtils.deleteOlderFiles(File, int, long)","java.lang.System.currentTimeMillis()"
"android.os.FileUtils.deleteOlderFiles(File, int, long)","java.io.File.lastModified()"
"android.os.FileUtils.deleteOlderFiles(File, int, long)","java.io.File.listFiles()"
"android.os.FileUtils.deleteOlderFiles(File, int, long)","java.io.File.delete()"
"android.os.FileUtils.copyFile(File, File)","java.io.InputStream.close()"
"android.os.FileUtils.copyFile(File, File)","android.os.FileUtils.copyToFile(java.io.InputStream, java.io.File)"
"android.os.FileUtils.rewriteAfterRename(File, File, File)","java.io.File.getAbsolutePath()"
"android.os.FileUtils.rewriteAfterRename(File, File, File)","java.lang.String.substring(int)"
"android.os.FileUtils.rewriteAfterRename(File, File, File)","android.os.FileUtils.contains(java.io.File, java.io.File)"
"android.os.FileUtils.rewriteAfterRename(File, File, File)","java.lang.String.length()"
"android.os.FileUtils.rewriteAfterRename(File, File, String[])","android.os.FileUtils.rewriteAfterRename(java.io.File, java.io.File, java.lang.String)"
"android.os.FileUtils.isFilenameSafe(File)","java.io.File.getPath()"
"android.os.FileUtils.isFilenameSafe(File)","java.util.regex.Matcher.matches()"
"android.os.FileUtils.isFilenameSafe(File)","java.util.regex.Pattern.matcher(java.lang.String)"
"android.os.FileUtils.setPermissions(File, int, int, int)","java.io.File.getAbsolutePath()"
"android.os.FileUtils.setPermissions(File, int, int, int)","android.os.FileUtils.setPermissions(java.lang.String, int, int, int)"
"android.os.FileUtils.checksumCrc32(File)","java.util.zip.CRC32.getValue()"
"android.os.FileUtils.checksumCrc32(File)","java.io.FilterInputStream.close()"
"android.os.FileUtils.checksumCrc32(File)","java.io.FilterInputStream.read(byte[])"
"android.os.FileUtils.isValidExtFilename(String)","java.lang.String.equals(java.lang.String)"
"android.os.FileUtils.isValidExtFilename(String)","android.os.FileUtils.buildValidExtFilename(java.lang.String)"
"android.os.FileUtils.contains(File, File)","java.io.File.getAbsolutePath()"
"android.os.FileUtils.contains(File, File)","java.lang.String.startsWith(java.lang.String)"
"android.os.FileUtils.contains(File, File)","java.lang.String.endsWith(java.lang.String)"
"android.os.FileUtils.contains(File, File)","java.lang.String.equals(java.lang.String)"
"android.os.FileUtils.buildValidFatFilename(String)","java.lang.String.charAt(int)"
"android.os.FileUtils.buildValidFatFilename(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.os.FileUtils.buildValidFatFilename(String)","android.os.FileUtils.isValidFatFilenameChar(char)"
"android.os.FileUtils.buildValidFatFilename(String)","java.lang.StringBuilder.toString()"
"android.os.FileUtils.buildValidFatFilename(String)","java.lang.StringBuilder.append(char)"
"android.os.FileUtils.buildValidFatFilename(String)","java.lang.String.equals(java.lang.String)"
"android.os.FileUtils.buildValidFatFilename(String)","java.lang.String.length()"
"android.webkit.Plugin.onClick(DialogInterface, int)","android.app.Dialog.dismiss()"
"android.webkit.Plugin.dispatchClickEvent(Context)","android.webkit.Plugin.PreferencesClickHandler.handleClickEvent(android.content.Context)"
"com.android.internal.policy.PolicyManager.makeNewLayoutInflater(Context)","com.android.internal.policy.IPolicy.makeNewLayoutInflater(android.content.Context)"
"com.android.internal.policy.PolicyManager.makeNewFallbackEventHandler(Context)","com.android.internal.policy.IPolicy.makeNewFallbackEventHandler(android.content.Context)"
"com.android.internal.policy.PolicyManager.makeNewWindow(Context)","com.android.internal.policy.IPolicy.makeNewWindow(android.content.Context)"
"com.android.internal.policy.PolicyManager.makeNewWindowManager()","com.android.internal.policy.IPolicy.makeNewWindowManager()"
"android.widget.AnalogClock.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.AnalogClock.onMeasure(int, int)","java.lang.Math.min(float, float)"
"android.widget.AnalogClock.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.widget.AnalogClock.onDraw(Canvas)","java.lang.Math.min(float, float)"
"android.widget.AnalogClock.onSizeChanged(int, int, int, int)","android.view.View.onSizeChanged(int, int, int, int)"
"android.widget.AnalogClock.onReceive(Context, Intent)","java.util.TimeZone.getTimeZone(java.lang.String)"
"android.widget.AnalogClock.onReceive(Context, Intent)","android.content.Intent.getStringExtra(java.lang.String)"
"android.widget.AnalogClock.onReceive(Context, Intent)","java.lang.String.equals(java.lang.String)"
"android.widget.AnalogClock.onReceive(Context, Intent)","android.content.Intent.getAction()"
"android.widget.AnalogClock.onReceive(Context, Intent)","java.util.TimeZone.getID()"
"android.widget.AnalogClock.onAttachedToWindow()","android.view.View.onAttachedToWindow()"
"android.widget.AnalogClock.onAttachedToWindow()","android.content.IntentFilter.addAction(java.lang.String)"
"android.widget.AnalogClock.updateContentDescription(Time)","android.text.format.Time.toMillis(boolean)"
"android.widget.AnalogClock.updateContentDescription(Time)","android.text.format.DateUtils.formatDateTime(android.content.Context, long, int)"
"android.widget.AnalogClock.onDetachedFromWindow()","android.view.View.onDetachedFromWindow()"
"android.widget.AnalogClock.onTimeChanged()","android.text.format.Time.setToNow()"
"android.view.InputChannel.getName()","android.view.InputChannel.nativeGetName()"
"android.view.InputChannel.dispose()","android.view.InputChannel.nativeDispose(boolean)"
"android.view.InputChannel.createFromParcel(Parcel)","android.view.InputChannel.readFromParcel(android.os.Parcel)"
"android.view.InputChannel.toString()","android.view.InputChannel.getName()"
"android.view.InputChannel.finalize()","java.lang.Object.finalize()"
"android.view.InputChannel.finalize()","android.view.InputChannel.nativeDispose(boolean)"
"android.view.InputChannel.dup()","android.view.InputChannel.nativeDup(android.view.InputChannel)"
"android.view.InputChannel.writeToParcel(Parcel, int)","android.view.InputChannel.dispose()"
"android.view.InputChannel.writeToParcel(Parcel, int)","android.view.InputChannel.nativeWriteToParcel(android.os.Parcel)"
"android.view.InputChannel.transferTo(InputChannel)","android.view.InputChannel.nativeTransferTo(android.view.InputChannel)"
"android.view.InputChannel.openInputChannelPair(String)","android.view.InputChannel.nativeOpenInputChannelPair(java.lang.String)"
"android.view.InputChannel.readFromParcel(Parcel)","android.view.InputChannel.nativeReadFromParcel(android.os.Parcel)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressDialog(int)","android.app.ProgressDialog.setIndeterminate(boolean)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressDialog(int)","android.content.Context.getText(int)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressDialog(int)","android.app.Dialog.show()"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressDialog(int)","android.view.Window.setType(int)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressDialog(int)","android.app.Dialog.setCancelable(boolean)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressDialog(int)","android.app.Dialog.getWindow()"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressDialog(int)","android.app.ProgressDialog.setMessage(java.lang.CharSequence)"
"com.android.internal.os.storage.ExternalStorageFormatter.getMountService()","android.os.storage.IMountService.Stub.asInterface(android.os.IBinder)"
"com.android.internal.os.storage.ExternalStorageFormatter.getMountService()","android.os.ServiceManager.getService(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.app.ProgressDialog.setIndeterminate(boolean)"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.content.Intent.getBooleanExtra(java.lang.String, boolean)"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.content.Intent.getParcelableExtra(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.content.Intent.getStringExtra(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.app.Dialog.show()"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.view.Window.setType(int)"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.app.Dialog.setOnCancelListener(com.android.internal.os.storage.ExternalStorageFormatter)"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","java.lang.String.equals(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.content.Intent.getAction()"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.app.Dialog.setCancelable(boolean)"
"com.android.internal.os.storage.ExternalStorageFormatter.onStartCommand(Intent, int, int)","android.app.Dialog.getWindow()"
"com.android.internal.os.storage.ExternalStorageFormatter.fail(int)","android.content.Intent.putExtra(java.lang.String, java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.fail(int)","android.widget.Toast.makeText(com.android.internal.os.storage.ExternalStorageFormatter, int, int)"
"com.android.internal.os.storage.ExternalStorageFormatter.fail(int)","android.content.ContextWrapper.sendBroadcast(android.content.Intent)"
"com.android.internal.os.storage.ExternalStorageFormatter.fail(int)","android.app.Service.stopSelf()"
"com.android.internal.os.storage.ExternalStorageFormatter.fail(int)","android.content.Intent.addFlags(int)"
"com.android.internal.os.storage.ExternalStorageFormatter.fail(int)","android.widget.Toast.show()"
"com.android.internal.os.storage.ExternalStorageFormatter.onCreate()","android.os.storage.StorageManager.registerListener(android.os.storage.StorageEventListener)"
"com.android.internal.os.storage.ExternalStorageFormatter.onCreate()","android.os.PowerManager.newWakeLock(int, java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.onCreate()","android.app.Service.onCreate()"
"com.android.internal.os.storage.ExternalStorageFormatter.onCreate()","android.content.ContextWrapper.getSystemService(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.onCreate()","android.os.PowerManager.WakeLock.acquire()"
"com.android.internal.os.storage.ExternalStorageFormatter.onStorageStateChanged(String, String, String)","com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()"
"com.android.internal.os.storage.ExternalStorageFormatter.onDestroy()","android.os.storage.StorageManager.unregisterListener(android.os.storage.StorageEventListener)"
"com.android.internal.os.storage.ExternalStorageFormatter.onDestroy()","android.os.PowerManager.WakeLock.release()"
"com.android.internal.os.storage.ExternalStorageFormatter.onDestroy()","android.app.Service.onDestroy()"
"com.android.internal.os.storage.ExternalStorageFormatter.onDestroy()","android.app.Dialog.dismiss()"
"com.android.internal.os.storage.ExternalStorageFormatter.onCancel(DialogInterface)","java.io.File.toString()"
"com.android.internal.os.storage.ExternalStorageFormatter.onCancel(DialogInterface)","android.os.storage.IMountService.mountVolume(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.onCancel(DialogInterface)","android.app.Service.stopSelf()"
"com.android.internal.os.storage.ExternalStorageFormatter.onCancel(DialogInterface)","android.os.Environment.getLegacyExternalStorageDirectory()"
"com.android.internal.os.storage.ExternalStorageFormatter.onCancel(DialogInterface)","com.android.internal.os.storage.ExternalStorageFormatter.getMountService()"
"com.android.internal.os.storage.ExternalStorageFormatter.onCancel(DialogInterface)","android.os.storage.StorageVolume.getPath()"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.content.Intent.putExtra(java.lang.String, java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.os.storage.IMountService.unmountVolume(java.lang.String, boolean, boolean)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.os.storage.IMountService.mountVolume(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.content.ContextWrapper.sendBroadcast(android.content.Intent)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","java.lang.String.equals(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","java.io.File.toString()"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","java.lang.Thread.start()"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.app.Service.stopSelf()"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.os.storage.StorageManager.getVolumeState(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.os.storage.IMountService.formatVolume(java.lang.String)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.os.Environment.getExternalStorageState()"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.os.Environment.getLegacyExternalStorageDirectory()"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.content.Intent.addFlags(int)"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","android.os.storage.StorageVolume.getPath()"
"com.android.internal.os.storage.ExternalStorageFormatter.updateProgressState()","com.android.internal.os.storage.ExternalStorageFormatter.getMountService()"
"android.util.MonthDisplayHelper.getFirstDayOfMonth()","java.util.Calendar.get(int)"
"android.util.MonthDisplayHelper.getYear()","java.util.Calendar.get(int)"
"android.util.MonthDisplayHelper.previousMonth()","java.util.Calendar.add(int, int)"
"android.util.MonthDisplayHelper.previousMonth()","android.util.MonthDisplayHelper.recalculate()"
"android.util.MonthDisplayHelper.recalculate()","java.util.Calendar.add(int, int)"
"android.util.MonthDisplayHelper.recalculate()","android.util.MonthDisplayHelper.getFirstDayOfMonth()"
"android.util.MonthDisplayHelper.recalculate()","java.util.Calendar.getActualMaximum(int)"
"android.util.MonthDisplayHelper.getMonth()","java.util.Calendar.get(int)"
"android.util.MonthDisplayHelper.nextMonth()","java.util.Calendar.add(int, int)"
"android.util.MonthDisplayHelper.nextMonth()","android.util.MonthDisplayHelper.recalculate()"
"android.util.MonthDisplayHelper.getDigitsForRow(int)","android.util.MonthDisplayHelper.getDayAt(int, int)"
"android.hardware.camera2.utils.UncheckedThrow.throwAnyException(Exception)","android.hardware.camera2.utils.UncheckedThrow.throwAnyImpl(java.lang.Exception)"
"android.hardware.camera2.utils.UncheckedThrow.throwAnyException(Throwable)","android.hardware.camera2.utils.UncheckedThrow.throwAnyImpl(java.lang.Throwable)"
"android.util.Pools.acquire()","android.util.Pools.SimplePool.acquire()"
"android.util.Pools.release(T)","android.util.Pools.SimplePool.release(T)"
"android.util.ReflectiveProperty.typesMatch(Class, Class)","java.lang.Class.isPrimitive()"
"android.util.ReflectiveProperty.set(T, V)","android.util.Property.getName()"
"android.util.ReflectiveProperty.set(T, V)","java.lang.reflect.Method.invoke(T, V)"
"android.util.ReflectiveProperty.set(T, V)","java.lang.reflect.InvocationTargetException.getCause()"
"android.util.ReflectiveProperty.set(T, V)","java.lang.reflect.Field.set(T, V)"
"android.util.ReflectiveProperty.get(T)","java.lang.reflect.InvocationTargetException.getCause()"
"android.util.ReflectiveProperty.get(T)","java.lang.reflect.Field.get(T)"
"android.util.ReflectiveProperty.get(T)","java.lang.reflect.Method.invoke(T, java.lang.Object[])"
"android.app.AliasActivity.parseAlias(XmlPullParser)","java.lang.String.equals(java.lang.String)"
"android.app.AliasActivity.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.app.AliasActivity.onCreate(Bundle)","android.app.Activity.finish()"
"android.app.AliasActivity.onCreate(Bundle)","android.content.pm.PackageItemInfo.loadXmlMetaData(android.content.pm.PackageManager, java.lang.String)"
"android.app.AliasActivity.onCreate(Bundle)","android.content.ContextWrapper.getPackageManager()"
"android.app.AliasActivity.onCreate(Bundle)","android.content.res.XmlResourceParser.close()"
"android.app.AliasActivity.onCreate(Bundle)","android.content.pm.PackageManager.getActivityInfo(android.content.ComponentName, int)"
"android.app.AliasActivity.onCreate(Bundle)","android.app.Activity.startActivity(android.content.Intent)"
"android.app.AliasActivity.onCreate(Bundle)","android.app.Activity.getComponentName()"
"android.view.accessibility.AccessibilityCache.refreshCachedNodeLocked(int, long)","android.view.accessibility.AccessibilityCache.clearSubTreeLocked(int, long)"
"android.view.accessibility.AccessibilityCache.refreshCachedNodeLocked(int, long)","android.util.LongSparseArray.get(long)"
"android.view.accessibility.AccessibilityCache.refreshCachedNodeLocked(int, long)","android.view.accessibility.AccessibilityNodeInfo.refresh(boolean)"
"android.view.accessibility.AccessibilityCache.refreshCachedNodeLocked(int, long)","android.util.SparseArray.get(int)"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.view.accessibility.AccessibilityNodeInfo.getChildCount()"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.util.LongSparseArray.get(long)"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.view.accessibility.AccessibilityWindowInfo.isFocused()"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.util.SparseArray.size()"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.util.ArraySet.add(android.view.accessibility.AccessibilityNodeInfo)"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.view.accessibility.AccessibilityNodeInfo.isAccessibilityFocused()"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.util.SparseArray.keyAt(int)"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.view.accessibility.AccessibilityWindowInfo.isActive()"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.util.LongSparseArray.valueAt(int)"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.view.accessibility.AccessibilityNodeInfo.isFocused()"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.view.accessibility.AccessibilityNodeInfo.getChildId(int)"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.util.SparseArray.valueAt(int)"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.view.accessibility.AccessibilityNodeInfo.getParentNodeId()"
"android.view.accessibility.AccessibilityCache.checkIntegrity()","android.util.LongSparseArray.size()"
"android.view.accessibility.AccessibilityCache.clearSubTreeLocked(int, long)","android.util.SparseArray.get(int)"
"android.view.accessibility.AccessibilityCache.clearSubTreeLocked(int, long)","android.view.accessibility.AccessibilityCache.clearSubTreeRecursiveLocked(android.util.LongSparseArray<android.view.accessibility.AccessibilityNodeInfo>, long)"
"android.view.accessibility.AccessibilityCache.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.getContentChangeTypes()"
"android.view.accessibility.AccessibilityCache.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.getEventType()"
"android.view.accessibility.AccessibilityCache.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityCache.clear()"
"android.view.accessibility.AccessibilityCache.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityCache.clearSubTreeLocked(int, long)"
"android.view.accessibility.AccessibilityCache.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityCache.checkIntegrity()"
"android.view.accessibility.AccessibilityCache.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.getWindowId()"
"android.view.accessibility.AccessibilityCache.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityCache.refreshCachedNodeLocked(int, long)"
"android.view.accessibility.AccessibilityCache.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.getSourceNodeId()"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.obtain(android.view.accessibility.AccessibilityNodeInfo)"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.util.SparseArray.put(int, android.util.LongSparseArray<android.view.accessibility.AccessibilityNodeInfo>)"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.getChildCount()"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.getWindowId()"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.util.LongSparseArray.get(long)"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.util.SparseArray.get(int)"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.getChildId(int)"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.getChildNodeIds()"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityCache.clearSubTreeLocked(int, long)"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.util.LongArray.indexOf(long)"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.getParentNodeId()"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.util.LongSparseArray.put(long, android.view.accessibility.AccessibilityNodeInfo)"
"android.view.accessibility.AccessibilityCache.add(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.getSourceNodeId()"
"android.view.accessibility.AccessibilityCache.clear()","android.util.SparseArray.valueAt(int)"
"android.view.accessibility.AccessibilityCache.clear()","android.view.accessibility.AccessibilityWindowInfo.recycle()"
"android.view.accessibility.AccessibilityCache.clear()","android.view.accessibility.AccessibilityCache.clearNodesForWindowLocked(int)"
"android.view.accessibility.AccessibilityCache.clear()","android.util.SparseArray.size()"
"android.view.accessibility.AccessibilityCache.clear()","android.util.SparseArray.removeAt(int)"
"android.view.accessibility.AccessibilityCache.clear()","android.util.SparseArray.keyAt(int)"
"android.view.accessibility.AccessibilityCache.addWindow(AccessibilityWindowInfo)","android.view.accessibility.AccessibilityWindowInfo.recycle()"
"android.view.accessibility.AccessibilityCache.addWindow(AccessibilityWindowInfo)","android.util.SparseArray.put(int, android.view.accessibility.AccessibilityWindowInfo)"
"android.view.accessibility.AccessibilityCache.addWindow(AccessibilityWindowInfo)","android.view.accessibility.AccessibilityWindowInfo.getId()"
"android.view.accessibility.AccessibilityCache.addWindow(AccessibilityWindowInfo)","android.util.SparseArray.get(int)"
"android.view.accessibility.AccessibilityCache.addWindow(AccessibilityWindowInfo)","android.view.accessibility.AccessibilityWindowInfo.obtain(android.view.accessibility.AccessibilityWindowInfo)"
"android.view.accessibility.AccessibilityCache.getWindows()","android.util.SparseArray.clear()"
"android.view.accessibility.AccessibilityCache.getWindows()","android.util.SparseArray.valueAt(int)"
"android.view.accessibility.AccessibilityCache.getWindows()","android.util.SparseArray.put(int, android.view.accessibility.AccessibilityWindowInfo)"
"android.view.accessibility.AccessibilityCache.getWindows()","android.view.accessibility.AccessibilityWindowInfo.getLayer()"
"android.view.accessibility.AccessibilityCache.getWindows()","java.util.List.add(android.view.accessibility.AccessibilityWindowInfo)"
"android.view.accessibility.AccessibilityCache.getWindows()","android.util.SparseArray.size()"
"android.view.accessibility.AccessibilityCache.getWindows()","android.view.accessibility.AccessibilityWindowInfo.obtain(android.view.accessibility.AccessibilityWindowInfo)"
"android.view.accessibility.AccessibilityCache.getWindows()","android.util.SparseArray.removeAt(int)"
"android.view.accessibility.AccessibilityCache.clearNodesForWindowLocked(int)","android.util.SparseArray.remove(int)"
"android.view.accessibility.AccessibilityCache.clearNodesForWindowLocked(int)","android.util.LongSparseArray.removeAt(int)"
"android.view.accessibility.AccessibilityCache.clearNodesForWindowLocked(int)","android.util.SparseArray.get(int)"
"android.view.accessibility.AccessibilityCache.clearNodesForWindowLocked(int)","android.util.LongSparseArray.size()"
"android.view.accessibility.AccessibilityCache.clearNodesForWindowLocked(int)","android.view.accessibility.AccessibilityNodeInfo.recycle()"
"android.view.accessibility.AccessibilityCache.clearNodesForWindowLocked(int)","android.util.LongSparseArray.valueAt(int)"
"android.view.accessibility.AccessibilityCache.getNode(int, long)","android.view.accessibility.AccessibilityNodeInfo.obtain(android.view.accessibility.AccessibilityNodeInfo)"
"android.view.accessibility.AccessibilityCache.getNode(int, long)","android.util.LongSparseArray.get(long)"
"android.view.accessibility.AccessibilityCache.getNode(int, long)","android.util.SparseArray.get(int)"
"android.view.accessibility.AccessibilityCache.getWindow(int)","android.util.SparseArray.get(int)"
"android.view.accessibility.AccessibilityCache.getWindow(int)","android.view.accessibility.AccessibilityWindowInfo.obtain(android.view.accessibility.AccessibilityWindowInfo)"
"android.view.accessibility.AccessibilityCache.clearSubTreeRecursiveLocked(LongSparseArray, long)","android.view.accessibility.AccessibilityNodeInfo.getChildId(int)"
"android.view.accessibility.AccessibilityCache.clearSubTreeRecursiveLocked(LongSparseArray, long)","android.util.LongSparseArray.remove(long)"
"android.view.accessibility.AccessibilityCache.clearSubTreeRecursiveLocked(LongSparseArray, long)","android.view.accessibility.AccessibilityNodeInfo.getChildCount()"
"android.view.accessibility.AccessibilityCache.clearSubTreeRecursiveLocked(LongSparseArray, long)","android.util.LongSparseArray.get(long)"
"android.view.accessibility.AccessibilityCache.clearSubTreeRecursiveLocked(LongSparseArray, long)","android.view.accessibility.AccessibilityCache.clearSubTreeRecursiveLocked(android.util.LongSparseArray<android.view.accessibility.AccessibilityNodeInfo>, long)"
"android.hardware.display.DisplayManagerInternal.toString()","android.hardware.display.DisplayManagerInternal.DisplayPowerRequest.policyToString(int)"
"android.hardware.display.DisplayManagerInternal.toString()","android.view.Display.stateToString(int)"
"android.hardware.display.DisplayManagerInternal.equals(Object)","android.hardware.display.DisplayManagerInternal.DisplayPowerRequest.equals(android.hardware.display.DisplayManagerInternal.DisplayPowerRequest)"
"android.hardware.display.DisplayManagerInternal.policyToString(int)","java.lang.Integer.toString(int)"
"com.android.server.ResettableTimeout.cancel()","com.android.server.ResettableTimeout.off()"
"com.android.server.ResettableTimeout.cancel()","java.lang.Thread.interrupt()"
"com.android.server.ResettableTimeout.run()","com.android.server.ResettableTimeout.off()"
"com.android.server.ResettableTimeout.run()","java.lang.Thread.sleep(long)"
"com.android.server.ResettableTimeout.run()","android.os.SystemClock.uptimeMillis()"
"com.android.server.ResettableTimeout.run()","android.os.ConditionVariable.open()"
"com.android.server.ResettableTimeout.go(long)","java.lang.Thread.interrupt()"
"com.android.server.ResettableTimeout.go(long)","java.lang.Thread.start()"
"com.android.server.ResettableTimeout.go(long)","android.os.SystemClock.uptimeMillis()"
"com.android.server.ResettableTimeout.go(long)","android.os.ConditionVariable.block()"
"com.android.server.ResettableTimeout.go(long)","com.android.server.ResettableTimeout.on(boolean)"
"com.android.server.ResettableTimeout.go(long)","android.os.ConditionVariable.close()"
"android.nfc.NfcAdapter.pausePolling(int)","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.resumePolling()","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.dispatch(Tag)","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.isEnabled()","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.setBeamPushUris(Uri[], Activity)","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.nfc.NfcAdapter.setBeamPushUris(Uri[], Activity)","android.net.Uri.getScheme()"
"android.nfc.NfcAdapter.setBeamPushUris(Uri[], Activity)","android.nfc.NfcActivityManager.setNdefPushContentUri(android.app.Activity, android.net.Uri[])"
"android.nfc.NfcAdapter.enforceResumed(Activity)","android.app.Activity.isResumed()"
"android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage, Activity, Activity[])","android.nfc.NfcAdapter.getSdkVersion()"
"android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage, Activity, Activity[])","android.nfc.NfcActivityManager.setNdefPushMessage(android.app.Activity, android.nfc.NdefMessage, int)"
"android.nfc.NfcAdapter.removeNfcUnlockHandler(NfcUnlockHandler)","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.disable()","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.setNdefPushMessageCallback(CreateNdefMessageCallback, Activity, Activity[])","android.nfc.NfcActivityManager.setNdefPushMessageCallback(android.app.Activity, android.nfc.NfcAdapter.CreateNdefMessageCallback, int)"
"android.nfc.NfcAdapter.setNdefPushMessageCallback(CreateNdefMessageCallback, Activity, Activity[])","android.nfc.NfcAdapter.getSdkVersion()"
"android.nfc.NfcAdapter.hasNfcFeature()","android.app.ActivityThread.getPackageManager()"
"android.nfc.NfcAdapter.onPaused(Activity)","android.nfc.NfcAdapter.disableForegroundDispatchInternal(android.app.Activity, boolean)"
"android.nfc.NfcAdapter.getNfcAdapterExtrasInterface()","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.setP2pModes(int, int)","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.disable(boolean)","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.disableForegroundNdefPush(Activity)","android.nfc.NfcActivityManager.setNdefPushMessage(android.app.Activity, null, int)"
"android.nfc.NfcAdapter.disableForegroundNdefPush(Activity)","android.nfc.NfcActivityManager.setOnNdefPushCompleteCallback(android.app.Activity, null)"
"android.nfc.NfcAdapter.disableForegroundNdefPush(Activity)","android.nfc.NfcAdapter.enforceResumed(android.app.Activity)"
"android.nfc.NfcAdapter.disableForegroundNdefPush(Activity)","android.nfc.NfcActivityManager.setNdefPushMessageCallback(android.app.Activity, null, int)"
"android.nfc.NfcAdapter.invokeBeam(BeamShareData)","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.getCardEmulationService()","android.nfc.NfcAdapter.isEnabled()"
"android.nfc.NfcAdapter.enable()","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.getSdkVersion()","android.content.Context.getApplicationInfo()"
"android.nfc.NfcAdapter.setBeamPushUrisCallback(CreateBeamUrisCallback, Activity)","android.nfc.NfcActivityManager.setNdefPushContentUriCallback(android.app.Activity, android.nfc.NfcAdapter.CreateBeamUrisCallback)"
"android.nfc.NfcAdapter.enableReaderMode(Activity, ReaderCallback, int, Bundle)","android.nfc.NfcActivityManager.enableReaderMode(android.app.Activity, android.nfc.NfcAdapter.ReaderCallback, int, android.os.Bundle)"
"android.nfc.NfcAdapter.getAdapterState()","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.addNfcUnlockHandler(NfcUnlockHandler, String[])","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.setNdefPushMessageCallback(CreateNdefMessageCallback, Activity, int)","android.nfc.NfcActivityManager.setNdefPushMessageCallback(android.app.Activity, android.nfc.NfcAdapter.CreateNdefMessageCallback, int)"
"android.nfc.NfcAdapter.enableForegroundDispatch(Activity, PendingIntent, IntentFilter[], String[][])","android.app.ActivityThread.currentActivityThread()"
"android.nfc.NfcAdapter.enableForegroundDispatch(Activity, PendingIntent, IntentFilter[], String[][])","android.app.Activity.isResumed()"
"android.nfc.NfcAdapter.enableForegroundDispatch(Activity, PendingIntent, IntentFilter[], String[][])","android.app.ActivityThread.registerOnActivityPausedListener(android.app.Activity, android.app.OnActivityPausedListener)"
"android.nfc.NfcAdapter.enableForegroundDispatch(Activity, PendingIntent, IntentFilter[], String[][])","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.attemptDeadServiceRecovery(Exception)","android.nfc.NfcAdapter.getServiceInterface()"
"android.nfc.NfcAdapter.enableNdefPush()","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.getTagService()","android.nfc.NfcAdapter.isEnabled()"
"android.nfc.NfcAdapter.setNdefPushMessage(NdefMessage, Activity, int)","android.nfc.NfcActivityManager.setNdefPushMessage(android.app.Activity, android.nfc.NdefMessage, int)"
"android.nfc.NfcAdapter.disableForegroundDispatchInternal(Activity, boolean)","android.app.Activity.isResumed()"
"android.nfc.NfcAdapter.disableForegroundDispatchInternal(Activity, boolean)","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.getDefaultAdapter(Context)","android.content.Context.getApplicationContext()"
"android.nfc.NfcAdapter.getDefaultAdapter(Context)","android.nfc.NfcManager.getDefaultAdapter()"
"android.nfc.NfcAdapter.getDefaultAdapter(Context)","android.content.Context.getSystemService(java.lang.String)"
"android.nfc.NfcAdapter.getServiceInterface()","android.os.ServiceManager.getService(java.lang.String)"
"android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback, Activity, Activity[])","android.nfc.NfcAdapter.getSdkVersion()"
"android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(OnNdefPushCompleteCallback, Activity, Activity[])","android.nfc.NfcActivityManager.setOnNdefPushCompleteCallback(android.app.Activity, android.nfc.NfcAdapter.OnNdefPushCompleteCallback)"
"android.nfc.NfcAdapter.disableForegroundDispatch(Activity)","android.nfc.NfcAdapter.disableForegroundDispatchInternal(android.app.Activity, boolean)"
"android.nfc.NfcAdapter.disableForegroundDispatch(Activity)","android.app.ActivityThread.currentActivityThread()"
"android.nfc.NfcAdapter.disableForegroundDispatch(Activity)","android.app.ActivityThread.unregisterOnActivityPausedListener(android.app.Activity, android.app.OnActivityPausedListener)"
"android.nfc.NfcAdapter.invokeBeam(Activity)","android.nfc.NfcAdapter.enforceResumed(android.app.Activity)"
"android.nfc.NfcAdapter.invokeBeam(Activity)","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.isNdefPushEnabled()","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.disableReaderMode(Activity)","android.nfc.NfcActivityManager.disableReaderMode(android.app.Activity)"
"android.nfc.NfcAdapter.disableNdefPush()","android.nfc.NfcAdapter.attemptDeadServiceRecovery(android.os.RemoteException)"
"android.nfc.NfcAdapter.enableForegroundNdefPush(Activity, NdefMessage)","android.nfc.NfcAdapter.enforceResumed(android.app.Activity)"
"android.nfc.NfcAdapter.enableForegroundNdefPush(Activity, NdefMessage)","android.nfc.NfcActivityManager.setNdefPushMessage(android.app.Activity, android.nfc.NdefMessage, int)"
"android.nfc.NfcAdapter.getNfcAdapter(Context)","java.util.HashMap.put(android.content.Context, android.nfc.NfcAdapter)"
"android.nfc.NfcAdapter.getNfcAdapter(Context)","java.util.HashMap.get(android.content.Context)"
"android.nfc.NfcAdapter.getNfcAdapter(Context)","android.nfc.NfcAdapter.getServiceInterface()"
"android.nfc.NfcAdapter.getNfcAdapter(Context)","android.nfc.NfcAdapter.hasNfcFeature()"
"android.nfc.NfcAdapter.getService()","android.nfc.NfcAdapter.isEnabled()"
"android.nfc.NfcAdapter.getDefaultAdapter()","android.nfc.NfcAdapter.getNfcAdapter(null)"
"android.widget.ArrayAdapter.getView(int, View, ViewGroup)","android.widget.ArrayAdapter.createViewFromResource(int, android.view.View, android.view.ViewGroup, int)"
"android.widget.ArrayAdapter.getItem(int)","java.util.List.get(int)"
"android.widget.ArrayAdapter.getCount()","java.util.List.size()"
"android.widget.ArrayAdapter.notifyDataSetChanged()","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.ArrayAdapter.createFromResource(Context, int, int)","android.content.res.Resources.getTextArray(int)"
"android.widget.ArrayAdapter.createFromResource(Context, int, int)","android.content.Context.getResources()"
"android.widget.ArrayAdapter.add(T)","java.util.List.add(T)"
"android.widget.ArrayAdapter.add(T)","java.util.ArrayList.add(T)"
"android.widget.ArrayAdapter.add(T)","android.widget.ArrayAdapter.notifyDataSetChanged()"
"android.widget.ArrayAdapter.publishResults(CharSequence, FilterResults)","android.widget.BaseAdapter.notifyDataSetInvalidated()"
"android.widget.ArrayAdapter.publishResults(CharSequence, FilterResults)","android.widget.ArrayAdapter.notifyDataSetChanged()"
"android.widget.ArrayAdapter.addAll(Collection)","java.util.List.addAll(java.util.Collection<? extends T>)"
"android.widget.ArrayAdapter.addAll(Collection)","android.widget.ArrayAdapter.notifyDataSetChanged()"
"android.widget.ArrayAdapter.addAll(Collection)","java.util.ArrayList.addAll(java.util.Collection<? extends T>)"
"android.widget.ArrayAdapter.getDropDownView(int, View, ViewGroup)","android.widget.ArrayAdapter.createViewFromResource(int, android.view.View, android.view.ViewGroup, int)"
"android.widget.ArrayAdapter.addAll(T[])","java.util.Collections.addAll(java.util.ArrayList<T>, T[])"
"android.widget.ArrayAdapter.addAll(T[])","java.util.Collections.addAll(java.util.List<T>, T[])"
"android.widget.ArrayAdapter.addAll(T[])","android.widget.ArrayAdapter.notifyDataSetChanged()"
"android.widget.ArrayAdapter.sort(Comparator)","java.util.Collections.sort(java.util.List<T>, java.util.Comparator<? super T>)"
"android.widget.ArrayAdapter.sort(Comparator)","java.util.Collections.sort(java.util.ArrayList<T>, java.util.Comparator<? super T>)"
"android.widget.ArrayAdapter.sort(Comparator)","android.widget.ArrayAdapter.notifyDataSetChanged()"
"android.widget.ArrayAdapter.createViewFromResource(int, View, ViewGroup, int)","android.widget.ArrayAdapter.getItem(int)"
"android.widget.ArrayAdapter.createViewFromResource(int, View, ViewGroup, int)","android.view.View.findViewById(int)"
"android.widget.ArrayAdapter.insert(T, int)","java.util.ArrayList.add(int, T)"
"android.widget.ArrayAdapter.insert(T, int)","java.util.List.add(int, T)"
"android.widget.ArrayAdapter.insert(T, int)","android.widget.ArrayAdapter.notifyDataSetChanged()"
"android.widget.ArrayAdapter.init(Context, int, int, List)","android.content.Context.getSystemService(java.lang.String)"
"android.widget.ArrayAdapter.getPosition(T)","java.util.List.indexOf(T)"
"android.widget.ArrayAdapter.remove(T)","java.util.List.remove(T)"
"android.widget.ArrayAdapter.remove(T)","java.util.ArrayList.remove(T)"
"android.widget.ArrayAdapter.remove(T)","android.widget.ArrayAdapter.notifyDataSetChanged()"
"android.widget.ArrayAdapter.performFiltering(CharSequence)","java.lang.String.split(java.lang.String)"
"android.widget.ArrayAdapter.performFiltering(CharSequence)","java.util.ArrayList.add(T)"
"android.widget.ArrayAdapter.performFiltering(CharSequence)","java.util.ArrayList.size()"
"android.widget.ArrayAdapter.performFiltering(CharSequence)","java.lang.String.startsWith(java.lang.String)"
"android.widget.ArrayAdapter.performFiltering(CharSequence)","java.lang.CharSequence.toString()"
"android.widget.ArrayAdapter.performFiltering(CharSequence)","java.lang.CharSequence.length()"
"android.widget.ArrayAdapter.performFiltering(CharSequence)","java.lang.String.toLowerCase()"
"android.widget.ArrayAdapter.performFiltering(CharSequence)","java.util.ArrayList.get(int)"
"android.widget.ArrayAdapter.performFiltering(CharSequence)","java.lang.Object.toString()"
"android.widget.ArrayAdapter.clear()","java.util.List.clear()"
"android.widget.ArrayAdapter.clear()","android.widget.ArrayAdapter.notifyDataSetChanged()"
"android.widget.ArrayAdapter.clear()","java.util.ArrayList.clear()"
"android.webkit.MimeTypeMap.remapGenericMimeType(String, String, String)","android.webkit.URLUtil.parseContentDisposition(java.lang.String)"
"android.webkit.MimeTypeMap.remapGenericMimeType(String, String, String)","android.webkit.MimeTypeMap.getMimeTypeFromExtension(java.lang.String)"
"android.webkit.MimeTypeMap.remapGenericMimeType(String, String, String)","java.lang.String.equals(java.lang.String)"
"android.webkit.MimeTypeMap.remapGenericMimeType(String, String, String)","android.webkit.MimeTypeMap.getFileExtensionFromUrl(java.lang.String)"
"android.webkit.MimeTypeMap.getFileExtensionFromUrl(String)","java.lang.String.substring(int)"
"android.webkit.MimeTypeMap.getFileExtensionFromUrl(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.webkit.MimeTypeMap.getFileExtensionFromUrl(String)","java.util.regex.Pattern.matches(java.lang.String, java.lang.String)"
"android.webkit.MimeTypeMap.getFileExtensionFromUrl(String)","java.lang.String.substring(int, int)"
"android.webkit.MimeTypeMap.getFileExtensionFromUrl(String)","java.lang.String.lastIndexOf(char)"
"android.webkit.MimeTypeMap.getFileExtensionFromUrl(String)","java.lang.String.isEmpty()"
"android.animation.Animator.removeListener(AnimatorListener)","java.util.ArrayList.remove(android.animation.Animator.AnimatorListener)"
"android.animation.Animator.removeListener(AnimatorListener)","java.util.ArrayList.size()"
"android.animation.Animator.removeAllListeners()","java.util.ArrayList.clear()"
"android.animation.Animator.addListener(AnimatorListener)","java.util.ArrayList.add(android.animation.Animator.AnimatorListener)"
"android.animation.Animator.newInstance()","android.animation.Animator.clone()"
"android.animation.Animator.addPauseListener(AnimatorPauseListener)","java.util.ArrayList.add(android.animation.Animator.AnimatorPauseListener)"
"android.animation.Animator.resume()","java.util.ArrayList.size()"
"android.animation.Animator.resume()","android.animation.Animator.AnimatorPauseListener.onAnimationResume(android.animation.Animator)"
"android.animation.Animator.resume()","java.util.ArrayList.clone()"
"android.animation.Animator.resume()","java.util.ArrayList.get(int)"
"android.animation.Animator.isStarted()","android.animation.Animator.isRunning()"
"android.animation.Animator.pause()","java.util.ArrayList.size()"
"android.animation.Animator.pause()","android.animation.Animator.AnimatorPauseListener.onAnimationPause(android.animation.Animator)"
"android.animation.Animator.pause()","android.animation.Animator.isStarted()"
"android.animation.Animator.pause()","java.util.ArrayList.clone()"
"android.animation.Animator.pause()","java.util.ArrayList.get(int)"
"android.animation.Animator.clone()","java.lang.Object.clone()"
"android.animation.Animator.removePauseListener(AnimatorPauseListener)","java.util.ArrayList.size()"
"android.animation.Animator.removePauseListener(AnimatorPauseListener)","java.util.ArrayList.remove(android.animation.Animator.AnimatorPauseListener)"
"android.widget.RemoteViewsAdapter.getRemoteViewsAt(int)","java.util.HashMap.containsKey(int)"
"android.widget.RemoteViewsAdapter.getRemoteViewsAt(int)","java.util.HashMap.get(int)"
"android.widget.RemoteViewsAdapter.superNotifyDataSetChanged()","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.RemoteViewsAdapter.getNextIndexToLoad()","java.util.Iterator.next()"
"android.widget.RemoteViewsAdapter.getNextIndexToLoad()","java.util.HashSet.remove(java.lang.Integer)"
"android.widget.RemoteViewsAdapter.getNextIndexToLoad()","java.util.HashSet.isEmpty()"
"android.widget.RemoteViewsAdapter.getNextIndexToLoad()","java.util.HashSet.iterator()"
"android.widget.RemoteViewsAdapter.getNextIndexToLoad()","java.lang.Integer.intValue()"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.getRemoteViewsFactory()"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.widget.RemoteViewsAdapter.enqueueDeferredUnbindServiceMessage()"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.widget.RemoteViewsAdapter.updateTemporaryMetaData()"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.commitTemporaryMetaData()"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.reset()"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.widget.RemoteViewsAdapter.superNotifyDataSetChanged()"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.os.Handler.post(java.lang.Runnable)"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getTemporaryMetaData()"
"android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()","android.widget.RemoteViewsAdapter.getVisibleWindow(int, int, int)"
"android.widget.RemoteViewsAdapter.getMetaDataAt(int)","java.util.HashMap.containsKey(int)"
"android.widget.RemoteViewsAdapter.getMetaDataAt(int)","java.util.HashMap.get(int)"
"android.widget.RemoteViewsAdapter.removeView(RemoteViewsFrameLayout)","java.util.HashMap.containsKey(android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout)"
"android.widget.RemoteViewsAdapter.removeView(RemoteViewsFrameLayout)","java.util.HashMap.remove(android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout)"
"android.widget.RemoteViewsAdapter.finalize()","java.lang.Object.finalize()"
"android.widget.RemoteViewsAdapter.finalize()","android.os.HandlerThread.quit()"
"android.widget.RemoteViewsAdapter.add(int, RemoteViewsFrameLayout)","java.util.HashMap.containsKey(java.lang.Integer)"
"android.widget.RemoteViewsAdapter.add(int, RemoteViewsFrameLayout)","java.util.HashMap.get(java.lang.Integer)"
"android.widget.RemoteViewsAdapter.add(int, RemoteViewsFrameLayout)","java.util.LinkedList.add(android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout)"
"android.widget.RemoteViewsAdapter.add(int, RemoteViewsFrameLayout)","java.util.HashMap.put(java.lang.Integer, java.util.LinkedList<android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout>)"
"android.widget.RemoteViewsAdapter.add(int, RemoteViewsFrameLayout)","java.util.HashMap.put(android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout, java.util.LinkedList<android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout>)"
"android.widget.RemoteViewsAdapter.clear()","java.util.HashMap.clear()"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.queueRequestedPositionToLoad(int)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaDataAt(int)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getRemoteViewsAt(int)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViews.reapply(android.content.Context, android.view.View, android.widget.RemoteViews.OnClickHandler)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.getConvertViewTypeId(android.view.View)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaData()"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.containsRemoteViewAt(int)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.RemoteViewsMetaData.createLoadingView(int, android.view.View, android.view.ViewGroup, android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache, android.view.LayoutInflater, android.widget.RemoteViews.OnClickHandler)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.RemoteViewsFrameLayoutRefSet.add(int, android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.requestBindService()"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.isConnected()"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViews.apply(android.content.Context, android.view.ViewGroup, android.widget.RemoteViews.OnClickHandler)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.RemoteViewsFrameLayoutRefSet.removeView(android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.queuePositionsToBePreloadedFromRequestedPosition(int)"
"android.widget.RemoteViewsAdapter.getView(int, View, ViewGroup)","android.widget.RemoteViewsAdapter.loadNextIndexInBackground()"
"android.widget.RemoteViewsAdapter.queuePositionsToBePreloadedFromRequestedPosition(int)","java.util.HashSet.add(int)"
"android.widget.RemoteViewsAdapter.queuePositionsToBePreloadedFromRequestedPosition(int)","java.lang.Math.abs(int)"
"android.widget.RemoteViewsAdapter.queuePositionsToBePreloadedFromRequestedPosition(int)","java.util.AbstractSet.removeAll(java.util.Set<java.lang.Integer>)"
"android.widget.RemoteViewsAdapter.queuePositionsToBePreloadedFromRequestedPosition(int)","java.util.HashMap.keySet()"
"android.widget.RemoteViewsAdapter.queuePositionsToBePreloadedFromRequestedPosition(int)","java.lang.Math.max(int, int)"
"android.widget.RemoteViewsAdapter.queuePositionsToBePreloadedFromRequestedPosition(int)","java.util.HashSet.clear()"
"android.widget.RemoteViewsAdapter.queuePositionsToBePreloadedFromRequestedPosition(int)","java.util.AbstractCollection.addAll(java.util.HashSet<java.lang.Integer>)"
"android.widget.RemoteViewsAdapter.queuePositionsToBePreloadedFromRequestedPosition(int)","java.lang.Math.min(int, int)"
"android.widget.RemoteViewsAdapter.isViewTypeInRange(int)","android.widget.RemoteViewsAdapter.RemoteViewsMetaData.getMappedViewType(int)"
"android.widget.RemoteViewsAdapter.containsRemoteViewAt(int)","java.util.HashMap.containsKey(int)"
"android.widget.RemoteViewsAdapter.commitTemporaryMetaData()","android.widget.RemoteViewsAdapter.RemoteViewsMetaData.set(android.widget.RemoteViewsAdapter.RemoteViewsMetaData)"
"android.widget.RemoteViewsAdapter.onServiceDisconnected()","java.lang.ref.Reference.get()"
"android.widget.RemoteViewsAdapter.onServiceDisconnected()","android.os.Handler.removeMessages(int)"
"android.widget.RemoteViewsAdapter.onServiceDisconnected()","android.widget.RemoteViewsAdapter.RemoteAdapterConnectionCallback.onRemoteAdapterDisconnected()"
"android.widget.RemoteViewsAdapter.onServiceDisconnected()","android.os.Handler.post(java.lang.Runnable)"
"android.widget.RemoteViewsAdapter.loadNextIndexInBackground()","android.widget.RemoteViewsAdapter.enqueueDeferredUnbindServiceMessage()"
"android.widget.RemoteViewsAdapter.loadNextIndexInBackground()","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getNextIndexToLoad()"
"android.widget.RemoteViewsAdapter.loadNextIndexInBackground()","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.isConnected()"
"android.widget.RemoteViewsAdapter.loadNextIndexInBackground()","android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)"
"android.widget.RemoteViewsAdapter.loadNextIndexInBackground()","android.widget.RemoteViewsAdapter.loadNextIndexInBackground()"
"android.widget.RemoteViewsAdapter.loadNextIndexInBackground()","android.os.Handler.post(java.lang.Runnable)"
"android.widget.RemoteViewsAdapter.hashCode()","android.content.Intent.FilterComparison.hashCode()"
"android.widget.RemoteViewsAdapter.containsMetaDataAt(int)","java.util.HashMap.containsKey(int)"
"android.widget.RemoteViewsAdapter.set(RemoteViewsMetaData)","android.widget.RemoteViewsAdapter.RemoteViewsMetaData.setLoadingViewTemplates(android.widget.RemoteViews, android.widget.RemoteViews)"
"android.widget.RemoteViewsAdapter.bind(Context, int, Intent)","java.lang.ref.Reference.get()"
"android.widget.RemoteViewsAdapter.bind(Context, int, Intent)","android.appwidget.AppWidgetManager.getInstance(android.content.Context)"
"android.widget.RemoteViewsAdapter.equals(Object)","android.content.Intent.FilterComparison.equals(android.content.Intent.FilterComparison)"
"android.widget.RemoteViewsAdapter.createLoadingView(int, View, ViewGroup, Object, LayoutInflater, OnClickHandler)","java.lang.Math.round(float)"
"android.widget.RemoteViewsAdapter.createLoadingView(int, View, ViewGroup, Object, LayoutInflater, OnClickHandler)","android.content.Context.getResources()"
"android.widget.RemoteViewsAdapter.createLoadingView(int, View, ViewGroup, Object, LayoutInflater, OnClickHandler)","android.view.View.getMeasuredHeight()"
"android.widget.RemoteViewsAdapter.createLoadingView(int, View, ViewGroup, Object, LayoutInflater, OnClickHandler)","android.view.View.measure(int, int)"
"android.widget.RemoteViewsAdapter.createLoadingView(int, View, ViewGroup, Object, LayoutInflater, OnClickHandler)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.RemoteViewsAdapter.createLoadingView(int, View, ViewGroup, Object, LayoutInflater, OnClickHandler)","android.content.res.Resources.getDisplayMetrics()"
"android.widget.RemoteViewsAdapter.enqueueDeferredUnbindServiceMessage()","android.os.Handler.sendEmptyMessageDelayed(int, int)"
"android.widget.RemoteViewsAdapter.enqueueDeferredUnbindServiceMessage()","android.os.Handler.removeMessages(int)"
"android.widget.RemoteViewsAdapter.requestBindService()","android.os.Handler.removeMessages(int)"
"android.widget.RemoteViewsAdapter.requestBindService()","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.bind(android.content.Context, int, android.content.Intent)"
"android.widget.RemoteViewsAdapter.requestBindService()","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.isConnected()"
"android.widget.RemoteViewsAdapter.set(RemoteViews, long)","android.widget.RemoteViews.getLayoutId()"
"android.widget.RemoteViewsAdapter.saveRemoteViewsCache()","java.util.HashMap.containsKey(android.widget.RemoteViewsAdapter.RemoteViewsCacheKey)"
"android.widget.RemoteViewsAdapter.saveRemoteViewsCache()","android.os.Handler.postDelayed(java.lang.Runnable, int)"
"android.widget.RemoteViewsAdapter.saveRemoteViewsCache()","android.os.Handler.removeCallbacks(java.lang.Runnable)"
"android.widget.RemoteViewsAdapter.saveRemoteViewsCache()","java.util.HashMap.remove(android.widget.RemoteViewsAdapter.RemoteViewsCacheKey)"
"android.widget.RemoteViewsAdapter.saveRemoteViewsCache()","java.util.HashMap.put(android.widget.RemoteViewsAdapter.RemoteViewsCacheKey, android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache)"
"android.widget.RemoteViewsAdapter.saveRemoteViewsCache()","java.util.HashMap.put(android.widget.RemoteViewsAdapter.RemoteViewsCacheKey, java.lang.Runnable)"
"android.widget.RemoteViewsAdapter.saveRemoteViewsCache()","java.util.HashMap.get(android.widget.RemoteViewsAdapter.RemoteViewsCacheKey)"
"android.widget.RemoteViewsAdapter.saveRemoteViewsCache()","java.util.HashMap.size()"
"android.widget.RemoteViewsAdapter.queueRequestedPositionToLoad(int)","java.util.HashSet.add(int)"
"android.widget.RemoteViewsAdapter.getRemoteViewsBitmapMemoryUsage()","android.widget.RemoteViews.estimateMemoryUsage()"
"android.widget.RemoteViewsAdapter.getRemoteViewsBitmapMemoryUsage()","java.util.HashMap.keySet()"
"android.widget.RemoteViewsAdapter.getRemoteViewsBitmapMemoryUsage()","java.util.HashMap.get(java.lang.Integer)"
"android.widget.RemoteViewsAdapter.getViewTypeCount()","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaData()"
"android.widget.RemoteViewsAdapter.updateTemporaryMetaData()","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.getRemoteViewsFactory()"
"android.widget.RemoteViewsAdapter.updateTemporaryMetaData()","android.widget.RemoteViewsAdapter.RemoteViewsMetaData.setLoadingViewTemplates(android.widget.RemoteViews, android.widget.RemoteViews)"
"android.widget.RemoteViewsAdapter.updateTemporaryMetaData()","android.widget.RemoteViewsAdapter.processException(java.lang.String, android.os.RemoteException)"
"android.widget.RemoteViewsAdapter.updateTemporaryMetaData()","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getTemporaryMetaData()"
"android.widget.RemoteViewsAdapter.isEmpty()","android.widget.RemoteViewsAdapter.getCount()"
"android.widget.RemoteViewsAdapter.getItemViewType(int)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaDataAt(int)"
"android.widget.RemoteViewsAdapter.getItemViewType(int)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaData()"
"android.widget.RemoteViewsAdapter.getItemViewType(int)","android.widget.RemoteViewsAdapter.RemoteViewsMetaData.getMappedViewType(int)"
"android.widget.RemoteViewsAdapter.getItemViewType(int)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.containsMetaDataAt(int)"
"android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.getRemoteViewsFactory()"
"android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaData()"
"android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.insert(int, android.widget.RemoteViews, long, java.util.ArrayList<java.lang.Integer>)"
"android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)","android.widget.RemoteViews.getLayoutId()"
"android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)","android.widget.RemoteViewsAdapter.RemoteViewsFrameLayoutRefSet.notifyOnRemoteViewsLoaded(int, android.widget.RemoteViews)"
"android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)","android.widget.RemoteViewsAdapter.RemoteViewsMetaData.isViewTypeInRange(int)"
"android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)","android.os.Handler.post(java.lang.Runnable)"
"android.widget.RemoteViewsAdapter.updateRemoteViews(int, boolean)","android.widget.RemoteViewsAdapter.getVisibleWindow(int, int, int)"
"android.widget.RemoteViewsAdapter.getItemId(int)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaDataAt(int)"
"android.widget.RemoteViewsAdapter.getItemId(int)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.containsMetaDataAt(int)"
"android.widget.RemoteViewsAdapter.unbind(Context, int, Intent)","android.content.Context.getOpPackageName()"
"android.widget.RemoteViewsAdapter.unbind(Context, int, Intent)","java.lang.ref.Reference.get()"
"android.widget.RemoteViewsAdapter.unbind(Context, int, Intent)","android.appwidget.AppWidgetManager.unbindRemoteViewsService(java.lang.String, int, android.content.Intent)"
"android.widget.RemoteViewsAdapter.unbind(Context, int, Intent)","android.appwidget.AppWidgetManager.getInstance(android.content.Context)"
"android.widget.RemoteViewsAdapter.notifyDataSetChanged()","android.os.Handler.removeMessages(int)"
"android.widget.RemoteViewsAdapter.notifyDataSetChanged()","android.widget.RemoteViewsAdapter.requestBindService()"
"android.widget.RemoteViewsAdapter.notifyDataSetChanged()","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.isConnected()"
"android.widget.RemoteViewsAdapter.notifyDataSetChanged()","android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()"
"android.widget.RemoteViewsAdapter.notifyDataSetChanged()","android.os.Handler.post(java.lang.Runnable)"
"android.widget.RemoteViewsAdapter.hasStableIds()","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaData()"
"android.widget.RemoteViewsAdapter.processException(String, Exception)","android.widget.RemoteViewsAdapter.RemoteViewsMetaData.reset()"
"android.widget.RemoteViewsAdapter.processException(String, Exception)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaData()"
"android.widget.RemoteViewsAdapter.processException(String, Exception)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.reset()"
"android.widget.RemoteViewsAdapter.processException(String, Exception)","android.widget.RemoteViewsAdapter.superNotifyDataSetChanged()"
"android.widget.RemoteViewsAdapter.processException(String, Exception)","android.os.Handler.post(java.lang.Runnable)"
"android.widget.RemoteViewsAdapter.getVisibleWindow(int, int, int)","java.util.ArrayList.add(int)"
"android.widget.RemoteViewsAdapter.getCount()","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getMetaData()"
"android.widget.RemoteViewsAdapter.reset()","java.util.HashMap.clear()"
"android.widget.RemoteViewsAdapter.reset()","java.util.HashSet.clear()"
"android.widget.RemoteViewsAdapter.getMappedViewType(int)","java.util.HashMap.containsKey(int)"
"android.widget.RemoteViewsAdapter.getMappedViewType(int)","java.util.HashMap.get(int)"
"android.widget.RemoteViewsAdapter.getMappedViewType(int)","java.util.HashMap.size()"
"android.widget.RemoteViewsAdapter.getMappedViewType(int)","java.util.HashMap.put(int, int)"
"android.widget.RemoteViewsAdapter.getFarthestPositionFrom(int, ArrayList)","java.util.ArrayList.contains(int)"
"android.widget.RemoteViewsAdapter.getFarthestPositionFrom(int, ArrayList)","java.lang.Math.abs(int)"
"android.widget.RemoteViewsAdapter.getFarthestPositionFrom(int, ArrayList)","java.util.HashMap.keySet()"
"android.widget.RemoteViewsAdapter.notifyOnRemoteViewsLoaded(int, RemoteViews)","java.util.HashMap.containsKey(android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout)"
"android.widget.RemoteViewsAdapter.notifyOnRemoteViewsLoaded(int, RemoteViews)","java.util.HashMap.remove(java.lang.Integer)"
"android.widget.RemoteViewsAdapter.notifyOnRemoteViewsLoaded(int, RemoteViews)","java.util.HashMap.containsKey(java.lang.Integer)"
"android.widget.RemoteViewsAdapter.notifyOnRemoteViewsLoaded(int, RemoteViews)","java.util.HashMap.get(java.lang.Integer)"
"android.widget.RemoteViewsAdapter.notifyOnRemoteViewsLoaded(int, RemoteViews)","java.util.HashMap.remove(android.widget.RemoteViewsAdapter.RemoteViewsFrameLayout)"
"android.widget.RemoteViewsAdapter.notifyOnRemoteViewsLoaded(int, RemoteViews)","java.util.LinkedList.clear()"
"android.widget.RemoteViewsAdapter.insert(int, RemoteViews, long, ArrayList)","java.util.HashMap.put(int, android.widget.RemoteViewsAdapter.RemoteViewsIndexMetaData)"
"android.widget.RemoteViewsAdapter.insert(int, RemoteViews, long, ArrayList)","java.util.HashMap.put(int, android.widget.RemoteViews)"
"android.widget.RemoteViewsAdapter.insert(int, RemoteViews, long, ArrayList)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getRemoteViewsBitmapMemoryUsage()"
"android.widget.RemoteViewsAdapter.insert(int, RemoteViews, long, ArrayList)","android.widget.RemoteViewsAdapter.RemoteViewsIndexMetaData.set(android.widget.RemoteViews, long)"
"android.widget.RemoteViewsAdapter.insert(int, RemoteViews, long, ArrayList)","java.util.HashMap.containsKey(int)"
"android.widget.RemoteViewsAdapter.insert(int, RemoteViews, long, ArrayList)","java.util.HashMap.get(int)"
"android.widget.RemoteViewsAdapter.insert(int, RemoteViews, long, ArrayList)","java.util.HashMap.size()"
"android.widget.RemoteViewsAdapter.insert(int, RemoteViews, long, ArrayList)","java.util.HashMap.remove(int)"
"android.widget.RemoteViewsAdapter.insert(int, RemoteViews, long, ArrayList)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.getFarthestPositionFrom(int, java.util.ArrayList<java.lang.Integer>)"
"android.widget.RemoteViewsAdapter.handleMessage(Message)","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.unbind(android.content.Context, int, android.content.Intent)"
"android.widget.RemoteViewsAdapter.handleMessage(Message)","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.isConnected()"
"android.widget.RemoteViewsAdapter.onServiceConnected(IBinder)","android.widget.RemoteViewsAdapter.RemoteViewsAdapterServiceConnection.getRemoteViewsFactory()"
"android.widget.RemoteViewsAdapter.onServiceConnected(IBinder)","android.widget.RemoteViewsAdapter.RemoteAdapterConnectionCallback.onRemoteAdapterConnected()"
"android.widget.RemoteViewsAdapter.onServiceConnected(IBinder)","android.widget.RemoteViewsAdapter.enqueueDeferredUnbindServiceMessage()"
"android.widget.RemoteViewsAdapter.onServiceConnected(IBinder)","java.lang.ref.Reference.get()"
"android.widget.RemoteViewsAdapter.onServiceConnected(IBinder)","android.widget.RemoteViewsAdapter.updateTemporaryMetaData()"
"android.widget.RemoteViewsAdapter.onServiceConnected(IBinder)","android.widget.RemoteViewsAdapter.FixedSizeRemoteViewsCache.commitTemporaryMetaData()"
"android.widget.RemoteViewsAdapter.onServiceConnected(IBinder)","android.widget.RemoteViewsAdapter.onNotifyDataSetChanged()"
"android.widget.RemoteViewsAdapter.onServiceConnected(IBinder)","android.os.Handler.post(java.lang.Runnable)"
"android.widget.SimpleAdapter.publishResults(CharSequence, FilterResults)","android.widget.BaseAdapter.notifyDataSetInvalidated()"
"android.widget.SimpleAdapter.publishResults(CharSequence, FilterResults)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.SimpleAdapter.performFiltering(CharSequence)","java.lang.String.split(java.lang.String)"
"android.widget.SimpleAdapter.performFiltering(CharSequence)","java.util.ArrayList.size()"
"android.widget.SimpleAdapter.performFiltering(CharSequence)","java.util.ArrayList.add(java.util.Map<java.lang.String, ?>)"
"android.widget.SimpleAdapter.performFiltering(CharSequence)","java.util.Map.get(java.lang.String)"
"android.widget.SimpleAdapter.performFiltering(CharSequence)","java.lang.String.startsWith(java.lang.String)"
"android.widget.SimpleAdapter.performFiltering(CharSequence)","java.lang.CharSequence.toString()"
"android.widget.SimpleAdapter.performFiltering(CharSequence)","java.lang.CharSequence.length()"
"android.widget.SimpleAdapter.performFiltering(CharSequence)","java.lang.String.toLowerCase()"
"android.widget.SimpleAdapter.performFiltering(CharSequence)","java.util.ArrayList.get(int)"
"android.widget.SimpleAdapter.bindView(int, View)","java.util.Map.get(java.lang.String)"
"android.widget.SimpleAdapter.bindView(int, View)","java.lang.Object.getClass()"
"android.widget.SimpleAdapter.bindView(int, View)","android.widget.SimpleAdapter.setViewImage(android.widget.ImageView, java.lang.String)"
"android.widget.SimpleAdapter.bindView(int, View)","android.widget.SimpleAdapter.setViewImage(android.widget.ImageView, java.lang.Integer)"
"android.widget.SimpleAdapter.bindView(int, View)","android.widget.SimpleAdapter.ViewBinder.setViewValue(android.view.View, java.lang.Object, java.lang.String)"
"android.widget.SimpleAdapter.bindView(int, View)","java.lang.Class.getName()"
"android.widget.SimpleAdapter.bindView(int, View)","java.util.List.get(int)"
"android.widget.SimpleAdapter.bindView(int, View)","android.view.View.findViewById(int)"
"android.widget.SimpleAdapter.bindView(int, View)","java.lang.Object.toString()"
"android.widget.SimpleAdapter.bindView(int, View)","android.widget.SimpleAdapter.setViewText(android.widget.TextView, java.lang.String)"
"android.widget.SimpleAdapter.bindView(int, View)","android.widget.Checkable.setChecked(java.lang.Boolean)"
"android.widget.SimpleAdapter.getDropDownView(int, View, ViewGroup)","android.widget.SimpleAdapter.createViewFromResource(int, android.view.View, android.view.ViewGroup, int)"
"android.widget.SimpleAdapter.getView(int, View, ViewGroup)","android.widget.SimpleAdapter.createViewFromResource(int, android.view.View, android.view.ViewGroup, int)"
"android.widget.SimpleAdapter.getCount()","java.util.List.size()"
"android.widget.SimpleAdapter.getItem(int)","java.util.List.get(int)"
"android.widget.SimpleAdapter.createViewFromResource(int, View, ViewGroup, int)","android.widget.SimpleAdapter.bindView(int, android.view.View)"
"android.app.UiAutomationConnection.setRotation(int)","android.os.Binder.clearCallingIdentity()"
"android.app.UiAutomationConnection.setRotation(int)","android.app.UiAutomationConnection.throwIfNotConnectedLocked()"
"android.app.UiAutomationConnection.setRotation(int)","android.os.Binder.restoreCallingIdentity(long)"
"android.app.UiAutomationConnection.setRotation(int)","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.setRotation(int)","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.clearWindowContentFrameStats(int)","android.os.Binder.clearCallingIdentity()"
"android.app.UiAutomationConnection.clearWindowContentFrameStats(int)","android.app.UiAutomationConnection.throwIfNotConnectedLocked()"
"android.app.UiAutomationConnection.clearWindowContentFrameStats(int)","android.os.Binder.restoreCallingIdentity(long)"
"android.app.UiAutomationConnection.clearWindowContentFrameStats(int)","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.clearWindowContentFrameStats(int)","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.connect(IAccessibilityServiceClient)","android.app.UiAutomationConnection.isConnectedLocked()"
"android.app.UiAutomationConnection.connect(IAccessibilityServiceClient)","android.app.UiAutomationConnection.storeRotationStateLocked()"
"android.app.UiAutomationConnection.connect(IAccessibilityServiceClient)","android.os.Binder.getCallingUid()"
"android.app.UiAutomationConnection.connect(IAccessibilityServiceClient)","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.registerUiTestAutomationServiceLocked(IAccessibilityServiceClient)","android.accessibilityservice.AccessibilityServiceInfo.setCapabilities(int)"
"android.app.UiAutomationConnection.executeShellCommand(String, ParcelFileDescriptor)","java.io.InputStream.read(byte[])"
"android.app.UiAutomationConnection.executeShellCommand(String, ParcelFileDescriptor)","java.lang.Runtime.exec(java.lang.String)"
"android.app.UiAutomationConnection.executeShellCommand(String, ParcelFileDescriptor)","android.app.UiAutomationConnection.throwIfNotConnectedLocked()"
"android.app.UiAutomationConnection.executeShellCommand(String, ParcelFileDescriptor)","java.io.OutputStream.write(byte[], int, int)"
"android.app.UiAutomationConnection.executeShellCommand(String, ParcelFileDescriptor)","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.executeShellCommand(String, ParcelFileDescriptor)","java.lang.Process.getInputStream()"
"android.app.UiAutomationConnection.executeShellCommand(String, ParcelFileDescriptor)","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.app.UiAutomationConnection.executeShellCommand(String, ParcelFileDescriptor)","java.lang.Runtime.getRuntime()"
"android.app.UiAutomationConnection.executeShellCommand(String, ParcelFileDescriptor)","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.injectInputEvent(InputEvent, boolean)","android.os.Binder.clearCallingIdentity()"
"android.app.UiAutomationConnection.injectInputEvent(InputEvent, boolean)","android.app.UiAutomationConnection.throwIfNotConnectedLocked()"
"android.app.UiAutomationConnection.injectInputEvent(InputEvent, boolean)","android.hardware.input.InputManager.injectInputEvent(android.view.InputEvent, int)"
"android.app.UiAutomationConnection.injectInputEvent(InputEvent, boolean)","android.os.Binder.restoreCallingIdentity(long)"
"android.app.UiAutomationConnection.injectInputEvent(InputEvent, boolean)","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.injectInputEvent(InputEvent, boolean)","android.hardware.input.InputManager.getInstance()"
"android.app.UiAutomationConnection.injectInputEvent(InputEvent, boolean)","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.getWindowAnimationFrameStats()","android.os.Binder.clearCallingIdentity()"
"android.app.UiAutomationConnection.getWindowAnimationFrameStats()","android.app.UiAutomationConnection.throwIfNotConnectedLocked()"
"android.app.UiAutomationConnection.getWindowAnimationFrameStats()","android.os.Binder.restoreCallingIdentity(long)"
"android.app.UiAutomationConnection.getWindowAnimationFrameStats()","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.getWindowAnimationFrameStats()","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.getWindowAnimationFrameStats()","android.view.SurfaceControl.getAnimationFrameStats(android.view.WindowAnimationFrameStats)"
"android.app.UiAutomationConnection.clearWindowAnimationFrameStats()","android.os.Binder.clearCallingIdentity()"
"android.app.UiAutomationConnection.clearWindowAnimationFrameStats()","android.app.UiAutomationConnection.throwIfNotConnectedLocked()"
"android.app.UiAutomationConnection.clearWindowAnimationFrameStats()","android.os.Binder.restoreCallingIdentity(long)"
"android.app.UiAutomationConnection.clearWindowAnimationFrameStats()","android.view.SurfaceControl.clearAnimationFrameStats()"
"android.app.UiAutomationConnection.clearWindowAnimationFrameStats()","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.clearWindowAnimationFrameStats()","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.shutdown()","android.app.UiAutomationConnection.disconnect()"
"android.app.UiAutomationConnection.shutdown()","android.app.UiAutomationConnection.isConnectedLocked()"
"android.app.UiAutomationConnection.shutdown()","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.shutdown()","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.disconnect()","android.app.UiAutomationConnection.restoreRotationStateLocked()"
"android.app.UiAutomationConnection.disconnect()","android.app.UiAutomationConnection.unregisterUiTestAutomationServiceLocked()"
"android.app.UiAutomationConnection.disconnect()","android.app.UiAutomationConnection.isConnectedLocked()"
"android.app.UiAutomationConnection.disconnect()","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.disconnect()","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.throwIfNotConnectedLocked()","android.app.UiAutomationConnection.isConnectedLocked()"
"android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()","android.os.Binder.getCallingUid()"
"android.app.UiAutomationConnection.getWindowContentFrameStats(int)","android.os.Binder.clearCallingIdentity()"
"android.app.UiAutomationConnection.getWindowContentFrameStats(int)","android.app.UiAutomationConnection.throwIfNotConnectedLocked()"
"android.app.UiAutomationConnection.getWindowContentFrameStats(int)","android.os.Binder.restoreCallingIdentity(long)"
"android.app.UiAutomationConnection.getWindowContentFrameStats(int)","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.getWindowContentFrameStats(int)","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.app.UiAutomationConnection.takeScreenshot(int, int)","android.os.Binder.clearCallingIdentity()"
"android.app.UiAutomationConnection.takeScreenshot(int, int)","android.app.UiAutomationConnection.throwIfNotConnectedLocked()"
"android.app.UiAutomationConnection.takeScreenshot(int, int)","android.os.Binder.restoreCallingIdentity(long)"
"android.app.UiAutomationConnection.takeScreenshot(int, int)","android.app.UiAutomationConnection.throwIfCalledByNotTrustedUidLocked()"
"android.app.UiAutomationConnection.takeScreenshot(int, int)","android.app.UiAutomationConnection.throwIfShutdownLocked()"
"android.content.SyncActivityTooManyDeletes.startSyncUndoDeletes()","android.content.ContentResolver.requestSync(android.accounts.Account, java.lang.String, android.os.Bundle)"
"android.content.SyncActivityTooManyDeletes.startSyncUndoDeletes()","android.os.BaseBundle.putBoolean(java.lang.String, boolean)"
"android.content.SyncActivityTooManyDeletes.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.content.SyncActivityTooManyDeletes.onCreate(Bundle)","android.os.BaseBundle.getString(java.lang.String)"
"android.content.SyncActivityTooManyDeletes.onCreate(Bundle)","android.os.BaseBundle.getLong(java.lang.String)"
"android.content.SyncActivityTooManyDeletes.onCreate(Bundle)","android.os.Bundle.getParcelable(java.lang.String)"
"android.content.SyncActivityTooManyDeletes.startSyncReallyDelete()","android.content.ContentResolver.requestSync(android.accounts.Account, java.lang.String, android.os.Bundle)"
"android.content.SyncActivityTooManyDeletes.startSyncReallyDelete()","android.os.BaseBundle.putBoolean(java.lang.String, boolean)"
"android.widget.ExpandableListPosition.obtainPosition(long)","android.widget.ExpandableListPosition.getRecycledOrCreate()"
"android.widget.ExpandableListPosition.obtainGroupPosition(int)","android.widget.ExpandableListPosition.obtain(int, int, int, int)"
"android.widget.ExpandableListPosition.obtain(int, int, int, int)","android.widget.ExpandableListPosition.getRecycledOrCreate()"
"android.widget.ExpandableListPosition.obtainChildPosition(int, int)","android.widget.ExpandableListPosition.obtain(int, int, int, int)"
"android.widget.ExpandableListPosition.recycle()","java.util.ArrayList.size()"
"android.widget.ExpandableListPosition.recycle()","java.util.ArrayList.add(android.widget.ExpandableListPosition)"
"android.widget.ExpandableListPosition.getRecycledOrCreate()","java.util.ArrayList.size()"
"android.widget.ExpandableListPosition.getRecycledOrCreate()","android.widget.ExpandableListPosition.resetState()"
"android.widget.ExpandableListPosition.getRecycledOrCreate()","java.util.ArrayList.remove(int)"
"android.net.NetworkStats.getTotal(Entry)","android.net.NetworkStats.getTotal(android.net.NetworkStats.Entry, null, int, boolean)"
"android.net.NetworkStats.getTotal(Entry, int)","android.net.NetworkStats.getTotal(android.net.NetworkStats.Entry, null, int, boolean)"
"android.net.NetworkStats.writeToParcel(Parcel, int)","android.os.Parcel.writeStringArray(java.lang.String[])"
"android.net.NetworkStats.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.net.NetworkStats.writeToParcel(Parcel, int)","android.os.Parcel.writeIntArray(int[])"
"android.net.NetworkStats.writeToParcel(Parcel, int)","android.os.Parcel.writeLongArray(long[])"
"android.net.NetworkStats.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.NetworkStats.getUniqueUids()","android.util.SparseBooleanArray.put(int, boolean)"
"android.net.NetworkStats.getUniqueUids()","android.util.SparseBooleanArray.size()"
"android.net.NetworkStats.getUniqueUids()","android.util.SparseBooleanArray.keyAt(int)"
"android.net.NetworkStats.getUniqueIfaces()","java.util.HashSet.add(java.lang.String)"
"android.net.NetworkStats.getUniqueIfaces()","java.util.HashSet.size()"
"android.net.NetworkStats.getUniqueIfaces()","java.util.AbstractCollection.toArray(java.lang.String[])"
"android.net.NetworkStats.subtract(NetworkStats)","android.net.NetworkStats.subtract(android.net.NetworkStats, android.net.NetworkStats, null, null)"
"android.net.NetworkStats.findIndex(String, int, int, int)","java.util.Objects.equals(java.lang.String, java.lang.String)"
"android.net.NetworkStats.getTotal(Entry, HashSet, int, boolean)","java.util.HashSet.contains(java.lang.String)"
"android.net.NetworkStats.combineAllValues(NetworkStats)","android.net.NetworkStats.getValues(int, android.net.NetworkStats.Entry)"
"android.net.NetworkStats.combineAllValues(NetworkStats)","android.net.NetworkStats.combineValues(android.net.NetworkStats.Entry)"
"android.net.NetworkStats.withoutUids(int[])","android.net.NetworkStats.getValues(int, android.net.NetworkStats.Entry)"
"android.net.NetworkStats.withoutUids(int[])","com.android.internal.util.ArrayUtils.contains(int[], int)"
"android.net.NetworkStats.withoutUids(int[])","android.net.NetworkStats.addValues(android.net.NetworkStats.Entry)"
"android.net.NetworkStats.dump(String, PrintWriter)","java.io.PrintWriter.print(int)"
"android.net.NetworkStats.dump(String, PrintWriter)","android.net.NetworkStats.tagToString(int)"
"android.net.NetworkStats.dump(String, PrintWriter)","java.io.PrintWriter.print(long)"
"android.net.NetworkStats.dump(String, PrintWriter)","java.io.PrintWriter.println(long)"
"android.net.NetworkStats.dump(String, PrintWriter)","android.net.NetworkStats.setToString(int)"
"android.net.NetworkStats.dump(String, PrintWriter)","java.io.PrintWriter.print(java.lang.String)"
"android.net.NetworkStats.equals(Object)","java.lang.String.equals(java.lang.String)"
"android.net.NetworkStats.getTotalBytes()","android.net.NetworkStats.getTotal(null)"
"android.net.NetworkStats.groupedByUid()","android.net.NetworkStats.combineValues(android.net.NetworkStats.Entry)"
"android.net.NetworkStats.getElapsedRealtimeAge()","android.os.SystemClock.elapsedRealtime()"
"android.net.NetworkStats.addValues(String, int, int, int, long, long, long, long, long)","android.net.NetworkStats.addValues(android.net.NetworkStats.Entry)"
"android.net.NetworkStats.getTotalIncludingTags(Entry)","android.net.NetworkStats.getTotal(android.net.NetworkStats.Entry, null, int, boolean)"
"android.net.NetworkStats.combineValues(String, int, int, int, long, long, long, long, long)","android.net.NetworkStats.combineValues(android.net.NetworkStats.Entry)"
"android.net.NetworkStats.subtract(NetworkStats, NetworkStats, NonMonotonicObserver, C)","android.net.NetworkStats.subtract(android.net.NetworkStats, android.net.NetworkStats, android.net.NetworkStats.NonMonotonicObserver<C>, C, null)"
"android.net.NetworkStats.groupedByIface()","android.net.NetworkStats.combineValues(android.net.NetworkStats.Entry)"
"android.net.NetworkStats.combineValues(Entry)","android.net.NetworkStats.findIndex(java.lang.String, int, int, int)"
"android.net.NetworkStats.combineValues(Entry)","android.net.NetworkStats.addValues(android.net.NetworkStats.Entry)"
"android.net.NetworkStats.combineValues(String, int, int, long, long, long, long, long)","android.net.NetworkStats.combineValues(java.lang.String, int, int, int, long, long, long, long, long)"
"android.net.NetworkStats.toString()","java.io.CharArrayWriter.toString()"
"android.net.NetworkStats.toString()","android.net.NetworkStats.dump(java.lang.String, java.io.PrintWriter)"
"android.net.NetworkStats.getTotal(Entry, HashSet)","android.net.NetworkStats.getTotal(android.net.NetworkStats.Entry, java.util.HashSet<java.lang.String>, int, boolean)"
"android.net.NetworkStats.tagToString(int)","java.lang.Integer.toHexString(int)"
"android.net.NetworkStats.findIndexHinted(String, int, int, int, int)","java.util.Objects.equals(java.lang.String, java.lang.String)"
"android.net.NetworkStats.clone()","android.net.NetworkStats.getValues(int, android.net.NetworkStats.Entry)"
"android.net.NetworkStats.clone()","android.net.NetworkStats.addValues(android.net.NetworkStats.Entry)"
"android.net.NetworkStats.addIfaceValues(String, long, long, long, long)","android.net.NetworkStats.addValues(java.lang.String, int, int, int, long, long, long, long, long)"
"android.net.NetworkStats.spliceOperationsFrom(NetworkStats)","android.net.NetworkStats.findIndex(java.lang.String, int, int, int)"
"android.net.NetworkStats.addValues(Entry)","java.util.Arrays.copyOf(java.lang.String[], int)"
"android.net.NetworkStats.addValues(Entry)","java.util.Arrays.copyOf(long[], int)"
"android.net.NetworkStats.addValues(Entry)","java.lang.Math.max(int, int)"
"android.net.NetworkStats.addValues(Entry)","java.util.Arrays.copyOf(int[], int)"
"android.net.NetworkStats.subtract(NetworkStats, NetworkStats, NonMonotonicObserver, C, NetworkStats)","android.net.NetworkStats.NonMonotonicObserver.foundNonMonotonic(android.net.NetworkStats, int, android.net.NetworkStats, int, C)"
"android.net.NetworkStats.subtract(NetworkStats, NetworkStats, NonMonotonicObserver, C, NetworkStats)","android.net.NetworkStats.addValues(android.net.NetworkStats.Entry)"
"android.net.NetworkStats.subtract(NetworkStats, NetworkStats, NonMonotonicObserver, C, NetworkStats)","java.lang.Math.max(long, int)"
"android.net.NetworkStats.subtract(NetworkStats, NetworkStats, NonMonotonicObserver, C, NetworkStats)","android.net.NetworkStats.findIndexHinted(java.lang.String, int, int, int, int)"
"android.widget.Toast.cancel()","android.widget.Toast.TN.hide()"
"android.widget.Toast.handleHide()","android.view.View.getParent()"
"android.widget.Toast.handleHide()","android.view.ViewManager.removeView(android.view.View)"
"android.widget.Toast.trySendAccessibilityEvent()","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.widget.Toast.trySendAccessibilityEvent()","android.view.accessibility.AccessibilityEvent.setPackageName(java.lang.String)"
"android.widget.Toast.trySendAccessibilityEvent()","android.content.Context.getPackageName()"
"android.widget.Toast.trySendAccessibilityEvent()","android.view.View.getContext()"
"android.widget.Toast.trySendAccessibilityEvent()","android.view.View.dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.widget.Toast.trySendAccessibilityEvent()","android.view.accessibility.AccessibilityManager.getInstance(android.content.Context)"
"android.widget.Toast.trySendAccessibilityEvent()","java.lang.Object.getClass()"
"android.widget.Toast.trySendAccessibilityEvent()","android.view.accessibility.AccessibilityEvent.obtain(int)"
"android.widget.Toast.trySendAccessibilityEvent()","android.view.accessibility.AccessibilityManager.sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.widget.Toast.trySendAccessibilityEvent()","java.lang.Class.getName()"
"android.widget.Toast.trySendAccessibilityEvent()","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.Toast.run()","android.widget.Toast.TN.handleHide()"
"android.widget.Toast.setText(int)","android.widget.Toast.setText(java.lang.CharSequence)"
"android.widget.Toast.setText(int)","android.content.Context.getText(int)"
"android.widget.Toast.hide()","android.os.Handler.post(java.lang.Runnable)"
"android.widget.Toast.show()","android.os.Handler.post(java.lang.Runnable)"
"android.widget.Toast.makeText(Context, CharSequence, int)","android.content.Context.getSystemService(java.lang.String)"
"android.widget.Toast.handleShow()","android.content.res.Configuration.getLayoutDirection()"
"android.widget.Toast.handleShow()","android.content.Context.getOpPackageName()"
"android.widget.Toast.handleShow()","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.widget.Toast.handleShow()","android.view.View.getContext()"
"android.widget.Toast.handleShow()","android.widget.Toast.TN.handleHide()"
"android.widget.Toast.handleShow()","android.widget.Toast.TN.trySendAccessibilityEvent()"
"android.widget.Toast.handleShow()","android.view.View.getParent()"
"android.widget.Toast.handleShow()","android.view.ViewManager.removeView(android.view.View)"
"android.widget.Toast.handleShow()","android.view.ViewManager.addView(android.view.View, android.view.WindowManager.LayoutParams)"
"android.widget.Toast.handleShow()","android.content.Context.getSystemService(java.lang.String)"
"android.widget.Toast.handleShow()","android.content.Context.getApplicationContext()"
"android.widget.Toast.handleShow()","android.content.Context.getResources()"
"android.widget.Toast.handleShow()","android.content.res.Resources.getConfiguration()"
"android.widget.Toast.makeText(Context, int, int)","android.content.Context.getResources()"
"android.widget.Toast.makeText(Context, int, int)","android.content.res.Resources.getText(int)"
"android.widget.Toast.makeText(Context, int, int)","android.widget.Toast.makeText(android.content.Context, java.lang.CharSequence, int)"
"com.android.internal.view.menu.MenuItemImpl.setActionView(int)","android.view.LayoutInflater.from(android.content.Context)"
"com.android.internal.view.menu.MenuItemImpl.setActionView(int)","com.android.internal.view.menu.MenuBuilder.getContext()"
"com.android.internal.view.menu.MenuItemImpl.setActionViewExpanded(boolean)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.hasCollapsibleActionView()","android.view.ActionProvider.onCreateActionView(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.invoke()","android.view.ActionProvider.onPerformDefaultAction()"
"com.android.internal.view.menu.MenuItemImpl.invoke()","java.lang.Runnable.run()"
"com.android.internal.view.menu.MenuItemImpl.invoke()","com.android.internal.view.menu.MenuBuilder.dispatchMenuItemSelected(com.android.internal.view.menu.MenuBuilder, com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.invoke()","com.android.internal.view.menu.MenuBuilder.getRootMenu()"
"com.android.internal.view.menu.MenuItemImpl.invoke()","android.view.MenuItem.OnMenuItemClickListener.onMenuItemClick(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.invoke()","android.content.Context.startActivity(android.content.Intent)"
"com.android.internal.view.menu.MenuItemImpl.invoke()","com.android.internal.view.menu.MenuBuilder.getContext()"
"com.android.internal.view.menu.MenuItemImpl.setShowAsActionFlags(int)","com.android.internal.view.menu.MenuItemImpl.setShowAsAction(int)"
"com.android.internal.view.menu.MenuItemImpl.setAlphabeticShortcut(char)","java.lang.Character.toLowerCase(char)"
"com.android.internal.view.menu.MenuItemImpl.setAlphabeticShortcut(char)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.actionFormatChanged()","com.android.internal.view.menu.MenuBuilder.onItemActionRequestChanged(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.setShortcut(char, char)","java.lang.Character.toLowerCase(char)"
"com.android.internal.view.menu.MenuItemImpl.setShortcut(char, char)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.setTitleCondensed(CharSequence)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.setEnabled(boolean)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.setCheckable(boolean)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.shouldShowIcon()","com.android.internal.view.menu.MenuBuilder.getOptionalIconsVisible()"
"com.android.internal.view.menu.MenuItemImpl.setActionProvider(ActionProvider)","com.android.internal.view.menu.MenuBuilder.onItemVisibleChanged(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.setActionProvider(ActionProvider)","android.view.ActionProvider.setVisibilityListener(null)"
"com.android.internal.view.menu.MenuItemImpl.setActionProvider(ActionProvider)","android.view.ActionProvider.setVisibilityListener(android.view.ActionProvider.VisibilityListener)"
"com.android.internal.view.menu.MenuItemImpl.setActionProvider(ActionProvider)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.setTitle(CharSequence)","com.android.internal.view.menu.SubMenuBuilder.setHeaderTitle(java.lang.CharSequence)"
"com.android.internal.view.menu.MenuItemImpl.setTitle(CharSequence)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.getTitleForItemView(MenuView.ItemView)","com.android.internal.view.menu.MenuView.ItemView.prefersCondensedTitle()"
"com.android.internal.view.menu.MenuItemImpl.getTitleForItemView(MenuView.ItemView)","com.android.internal.view.menu.MenuItemImpl.getTitle()"
"com.android.internal.view.menu.MenuItemImpl.getTitleForItemView(MenuView.ItemView)","com.android.internal.view.menu.MenuItemImpl.getTitleCondensed()"
"com.android.internal.view.menu.MenuItemImpl.setSubMenu(SubMenuBuilder)","com.android.internal.view.menu.MenuItemImpl.getTitle()"
"com.android.internal.view.menu.MenuItemImpl.setSubMenu(SubMenuBuilder)","com.android.internal.view.menu.SubMenuBuilder.setHeaderTitle(java.lang.CharSequence)"
"com.android.internal.view.menu.MenuItemImpl.setIcon(Drawable)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.getIcon()","com.android.internal.view.menu.MenuBuilder.getContext()"
"com.android.internal.view.menu.MenuItemImpl.getIcon()","android.content.Context.getDrawable(int)"
"com.android.internal.view.menu.MenuItemImpl.getActionView()","android.view.ActionProvider.onCreateActionView(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.isVisible()","android.view.ActionProvider.isVisible()"
"com.android.internal.view.menu.MenuItemImpl.isVisible()","android.view.ActionProvider.overridesItemVisibility()"
"com.android.internal.view.menu.MenuItemImpl.collapseActionView()","android.view.MenuItem.OnActionExpandListener.onMenuItemActionCollapse(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.collapseActionView()","com.android.internal.view.menu.MenuBuilder.collapseItemActionView(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.expandActionView()","android.view.MenuItem.OnActionExpandListener.onMenuItemActionExpand(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.expandActionView()","com.android.internal.view.menu.MenuItemImpl.hasCollapsibleActionView()"
"com.android.internal.view.menu.MenuItemImpl.expandActionView()","com.android.internal.view.menu.MenuBuilder.expandItemActionView(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.setTitle(int)","android.content.Context.getString(int)"
"com.android.internal.view.menu.MenuItemImpl.setTitle(int)","com.android.internal.view.menu.MenuItemImpl.setTitle(java.lang.String)"
"com.android.internal.view.menu.MenuItemImpl.setTitle(int)","com.android.internal.view.menu.MenuBuilder.getContext()"
"com.android.internal.view.menu.MenuItemImpl.setChecked(boolean)","com.android.internal.view.menu.MenuBuilder.setExclusiveItemChecked(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.setChecked(boolean)","com.android.internal.view.menu.MenuItemImpl.setCheckedInt(boolean)"
"com.android.internal.view.menu.MenuItemImpl.setIcon(int)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.setNumericShortcut(char)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.setVisible(boolean)","com.android.internal.view.menu.MenuBuilder.onItemVisibleChanged(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.setVisible(boolean)","com.android.internal.view.menu.MenuItemImpl.setVisibleInt(boolean)"
"com.android.internal.view.menu.MenuItemImpl.getShortcutLabel()","java.lang.StringBuilder.append(java.lang.String)"
"com.android.internal.view.menu.MenuItemImpl.getShortcutLabel()","java.lang.StringBuilder.toString()"
"com.android.internal.view.menu.MenuItemImpl.getShortcutLabel()","java.lang.StringBuilder.append(char)"
"com.android.internal.view.menu.MenuItemImpl.getShortcutLabel()","com.android.internal.view.menu.MenuItemImpl.getShortcut()"
"com.android.internal.view.menu.MenuItemImpl.setActionView(View)","android.view.View.setId(int)"
"com.android.internal.view.menu.MenuItemImpl.setActionView(View)","com.android.internal.view.menu.MenuBuilder.onItemActionRequestChanged(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.MenuItemImpl.setActionView(View)","android.view.View.getId()"
"com.android.internal.view.menu.MenuItemImpl.shouldShowShortcut()","com.android.internal.view.menu.MenuBuilder.isShortcutsVisible()"
"com.android.internal.view.menu.MenuItemImpl.shouldShowShortcut()","com.android.internal.view.menu.MenuItemImpl.getShortcut()"
"com.android.internal.view.menu.MenuItemImpl.getShortcut()","com.android.internal.view.menu.MenuBuilder.isQwertyMode()"
"com.android.internal.view.menu.MenuItemImpl.toString()","java.lang.CharSequence.toString()"
"com.android.internal.view.menu.MenuItemImpl.setCheckedInt(boolean)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"com.android.internal.view.menu.MenuItemImpl.setShowAsAction(int)","com.android.internal.view.menu.MenuBuilder.onItemActionRequestChanged(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.InputBindResult.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"com.android.internal.view.InputBindResult.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"com.android.internal.view.InputBindResult.writeToParcel(Parcel, int)","android.view.InputChannel.writeToParcel(android.os.Parcel, int)"
"com.android.internal.view.InputBindResult.describeContents()","android.view.InputChannel.describeContents()"
"android.hardware.display.WifiDisplay.equals(WifiDisplay)","java.lang.String.equals(java.lang.String)"
"android.hardware.display.WifiDisplay.hashCode()","java.lang.String.hashCode()"
"android.hardware.display.WifiDisplay.equals(Object)","android.hardware.display.WifiDisplay.equals(android.hardware.display.WifiDisplay)"
"android.hardware.display.WifiDisplay.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.hardware.display.WifiDisplay.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.display.WifiDisplay.hasSameAddress(WifiDisplay)","java.lang.String.equals(java.lang.String)"
"android.hardware.display.WifiDisplay.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.hardware.display.WifiDisplay.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"com.android.internal.preference.YesNoPreference.onDialogClosed(boolean)","com.android.internal.preference.YesNoPreference.setValue(boolean)"
"com.android.internal.preference.YesNoPreference.onDialogClosed(boolean)","android.preference.DialogPreference.onDialogClosed(boolean)"
"com.android.internal.preference.YesNoPreference.onDialogClosed(boolean)","android.preference.Preference.callChangeListener(boolean)"
"com.android.internal.preference.YesNoPreference.shouldDisableDependents()","android.preference.Preference.shouldDisableDependents()"
"com.android.internal.preference.YesNoPreference.onSaveInstanceState()","android.preference.DialogPreference.onSaveInstanceState()"
"com.android.internal.preference.YesNoPreference.onSaveInstanceState()","com.android.internal.preference.YesNoPreference.getValue()"
"com.android.internal.preference.YesNoPreference.onSaveInstanceState()","android.preference.Preference.isPersistent()"
"com.android.internal.preference.YesNoPreference.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"com.android.internal.preference.YesNoPreference.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"com.android.internal.preference.YesNoPreference.onRestoreInstanceState(Parcelable)","android.view.AbsSavedState.getSuperState()"
"com.android.internal.preference.YesNoPreference.onRestoreInstanceState(Parcelable)","com.android.internal.preference.YesNoPreference.setValue(boolean)"
"com.android.internal.preference.YesNoPreference.onRestoreInstanceState(Parcelable)","java.lang.Object.equals(java.lang.Class<com.android.internal.preference.YesNoPreference.SavedState>)"
"com.android.internal.preference.YesNoPreference.onRestoreInstanceState(Parcelable)","android.preference.DialogPreference.onRestoreInstanceState(android.os.Parcelable)"
"com.android.internal.preference.YesNoPreference.onRestoreInstanceState(Parcelable)","java.lang.Object.getClass()"
"com.android.internal.preference.YesNoPreference.onSetInitialValue(boolean, Object)","com.android.internal.preference.YesNoPreference.setValue(boolean)"
"com.android.internal.preference.YesNoPreference.onSetInitialValue(boolean, Object)","android.preference.Preference.getPersistedBoolean(boolean)"
"com.android.internal.preference.YesNoPreference.setValue(boolean)","android.preference.Preference.persistBoolean(boolean)"
"com.android.internal.preference.YesNoPreference.setValue(boolean)","android.preference.Preference.notifyDependencyChange(boolean)"
"com.android.internal.preference.YesNoPreference.onGetDefaultValue(TypedArray, int)","android.content.res.TypedArray.getBoolean(int, boolean)"
"android.os.UpdateLock.acquire()","android.os.UpdateLock.checkService()"
"android.os.UpdateLock.acquire()","android.os.UpdateLock.acquireLocked()"
"android.os.UpdateLock.release()","android.os.UpdateLock.checkService()"
"android.os.UpdateLock.release()","android.os.UpdateLock.releaseLocked()"
"android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor, long, int, long, long, File)","java.io.File.setLastModified(long)"
"android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor, long, int, long, long, File)","java.io.File.getParentFile()"
"android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor, long, int, long, long, File)","java.io.File.mkdirs()"
"android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor, long, int, long, long, File)","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor, long, int, long, long, File)","java.io.FileOutputStream.write(byte[], int, int)"
"android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor, long, int, long, long, File)","java.io.File.exists()"
"android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor, long, int, long, long, File)","java.io.FileOutputStream.close()"
"android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor, long, int, long, long, File)","java.io.FileInputStream.read(byte[], int, int)"
"android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor, long, int, long, long, File)","java.io.File.delete()"
"android.ddm.DdmHandleHello.handleFEAT(Chunk)","android.os.Debug.getVmFeatureList()"
"android.ddm.DdmHandleHello.handleFEAT(Chunk)","java.nio.ByteBuffer.putInt(int)"
"android.ddm.DdmHandleHello.handleFEAT(Chunk)","java.nio.ByteBuffer.allocate(int)"
"android.ddm.DdmHandleHello.handleFEAT(Chunk)","java.lang.String.length()"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","java.nio.ByteBuffer.getInt()"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","android.ddm.DdmHandleAppName.getAppName()"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","java.lang.System.getProperty(java.lang.String, java.lang.String)"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","android.ddm.DdmHandleHello.sendWAIT(int)"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","android.os.Process.myPid()"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","java.nio.ByteBuffer.putInt(int)"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","java.nio.ByteBuffer.allocate(int)"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","android.os.UserHandle.myUserId()"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","java.lang.String.length()"
"android.ddm.DdmHandleHello.handleHELO(Chunk)","android.os.Debug.waitingForDebugger()"
"android.net.http.RequestHandle.bufferToHex(byte[])","java.lang.StringBuilder.toString()"
"android.net.http.RequestHandle.bufferToHex(byte[])","java.lang.StringBuilder.append(char)"
"android.net.http.RequestHandle.setupDigestAuthResponse(boolean, String, String, String, String, String, String, String)","android.net.http.RequestHandle.authorizationHeader(boolean)"
"android.net.http.RequestHandle.setupDigestAuthResponse(boolean, String, String, String, String, String, String, String)","android.net.http.RequestHandle.setupAuthResponse()"
"android.net.http.RequestHandle.setupDigestAuthResponse(boolean, String, String, String, String, String, String, String)","android.net.http.RequestHandle.computeDigestAuthResponse(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.net.http.RequestHandle.setupDigestAuthResponse(boolean, String, String, String, String, String, String, String)","java.util.Map.put(java.lang.String, java.lang.String)"
"android.net.http.RequestHandle.handleSslErrorResponse(boolean)","android.net.http.Request.handleSslErrorResponse(boolean)"
"android.net.http.RequestHandle.computeDigestAuthResponse(String, String, String, String, String, String, String)","android.net.http.RequestHandle.computeDigest(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.net.http.RequestHandle.computeDigestAuthResponse(String, String, String, String, String, String, String)","android.net.http.RequestHandle.doubleQuote(java.lang.String)"
"android.net.http.RequestHandle.computeDigestAuthResponse(String, String, String, String, String, String, String)","android.net.http.RequestHandle.computeCnonce()"
"android.net.http.RequestHandle.KD(String, String)","android.net.http.RequestHandle.H(java.lang.String)"
"android.net.http.RequestHandle.cancel()","android.net.http.Request.cancel()"
"android.net.http.RequestHandle.computeCnonce()","java.lang.Math.abs(int)"
"android.net.http.RequestHandle.computeCnonce()","java.util.Random.nextInt()"
"android.net.http.RequestHandle.computeCnonce()","java.lang.Integer.toString(int, int)"
"android.net.http.RequestHandle.H(String)","android.net.http.RequestHandle.bufferToHex(byte[])"
"android.net.http.RequestHandle.H(String)","java.lang.String.getBytes()"
"android.net.http.RequestHandle.H(String)","java.security.MessageDigest.digest(byte[])"
"android.net.http.RequestHandle.H(String)","java.security.MessageDigest.getInstance(java.lang.String)"
"android.net.http.RequestHandle.setupAuthResponse()","android.net.http.RequestHandle.createAndQueueNewRequest()"
"android.net.http.RequestHandle.setupAuthResponse()","java.io.InputStream.reset()"
"android.net.http.RequestHandle.computeDigest(String, String, String, String, String, String)","android.net.http.RequestHandle.KD(java.lang.String, java.lang.String)"
"android.net.http.RequestHandle.computeDigest(String, String, String, String, String, String)","android.net.http.RequestHandle.H(java.lang.String)"
"android.net.http.RequestHandle.computeDigest(String, String, String, String, String, String)","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","android.net.http.RequestHandle.createAndQueueNewRequest()"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","java.util.Map.put(java.lang.String, java.lang.String)"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","java.lang.String.startsWith(java.lang.String)"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","java.util.Map.putAll(java.util.Map<java.lang.String, java.lang.String>)"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","java.io.InputStream.reset()"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","android.webkit.CookieManager.getInstance()"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","java.lang.String.equals(java.lang.String)"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","java.lang.Throwable.printStackTrace()"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","android.webkit.CookieManager.getCookie(android.net.WebAddress)"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","java.util.Map.remove(java.lang.String)"
"android.net.http.RequestHandle.setupRedirect(String, int, Map)","java.lang.String.length()"
"android.net.http.RequestHandle.createAndQueueNewRequest()","android.net.http.RequestHandle.processRequest()"
"android.net.http.RequestHandle.createAndQueueNewRequest()","android.net.http.RequestQueue.queueSynchronousRequest(java.lang.String, android.net.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int)"
"android.net.http.RequestHandle.createAndQueueNewRequest()","android.net.http.RequestQueue.queueRequest(java.lang.String, android.net.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int)"
"android.net.http.RequestHandle.pauseRequest(boolean)","android.net.http.Request.setLoadingPaused(boolean)"
"android.net.http.RequestHandle.processRequest()","android.net.http.Connection.processRequests(android.net.http.Request)"
"android.net.http.RequestHandle.setupBasicAuthResponse(boolean, String, String)","android.net.http.RequestHandle.authorizationHeader(boolean)"
"android.net.http.RequestHandle.setupBasicAuthResponse(boolean, String, String)","android.net.http.RequestHandle.setupAuthResponse()"
"android.net.http.RequestHandle.setupBasicAuthResponse(boolean, String, String)","java.util.Map.put(java.lang.String, java.lang.String)"
"android.net.http.RequestHandle.setupBasicAuthResponse(boolean, String, String)","android.net.http.RequestHandle.computeBasicAuthResponse(java.lang.String, java.lang.String)"
"android.net.http.RequestHandle.waitUntilComplete()","android.net.http.Request.waitUntilComplete()"
"android.bluetooth.BluetoothMap.finalize()","android.bluetooth.BluetoothMap.close()"
"android.bluetooth.BluetoothMap.finalize()","java.lang.Object.finalize()"
"android.bluetooth.BluetoothMap.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothMap.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothMap.setPriority(BluetoothDevice, int)","android.bluetooth.BluetoothMap.isEnabled()"
"android.bluetooth.BluetoothMap.isConnected(BluetoothDevice)","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.isConnected(BluetoothDevice)","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.bluetooth.BluetoothMap.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothDevice.getAddress()"
"android.bluetooth.BluetoothMap.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothAdapter.checkBluetoothAddress(java.lang.String)"
"android.bluetooth.BluetoothMap.doesClassMatchSink(BluetoothClass)","android.bluetooth.BluetoothClass.getDeviceClass()"
"android.bluetooth.BluetoothMap.getClient()","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.getClient()","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.bluetooth.BluetoothMap.onServiceDisconnected(ComponentName)","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.onServiceDisconnected(ComponentName)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceDisconnected(int)"
"android.bluetooth.BluetoothMap.close()","android.content.Context.unbindService(android.content.ServiceConnection)"
"android.bluetooth.BluetoothMap.close()","android.bluetooth.BluetoothAdapter.getBluetoothManager()"
"android.bluetooth.BluetoothMap.onServiceConnected(ComponentName, IBinder)","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.onServiceConnected(ComponentName, IBinder)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceConnected(int, android.bluetooth.BluetoothMap)"
"android.bluetooth.BluetoothMap.disconnect(BluetoothDevice)","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.disconnect(BluetoothDevice)","android.bluetooth.BluetoothMap.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothMap.disconnect(BluetoothDevice)","android.bluetooth.BluetoothMap.isEnabled()"
"android.bluetooth.BluetoothMap.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothMap.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothMap.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothMap.isEnabled()"
"android.bluetooth.BluetoothMap.getPriority(BluetoothDevice)","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.getPriority(BluetoothDevice)","android.bluetooth.BluetoothMap.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothMap.getPriority(BluetoothDevice)","android.bluetooth.BluetoothMap.isEnabled()"
"android.bluetooth.BluetoothMap.isEnabled()","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.isEnabled()","android.bluetooth.BluetoothAdapter.getDefaultAdapter()"
"android.bluetooth.BluetoothMap.isEnabled()","android.bluetooth.BluetoothAdapter.getState()"
"android.bluetooth.BluetoothMap.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothMap.isEnabled()"
"android.bluetooth.BluetoothMap.getConnectedDevices()","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.getConnectedDevices()","android.bluetooth.BluetoothMap.isEnabled()"
"android.bluetooth.BluetoothMap.doBind()","android.content.Context.getPackageManager()"
"android.bluetooth.BluetoothMap.doBind()","android.content.Intent.setComponent(android.content.ComponentName)"
"android.bluetooth.BluetoothMap.doBind()","android.os.Process.myUserHandle()"
"android.bluetooth.BluetoothMap.doBind()","android.content.Intent.resolveSystemService(android.content.pm.PackageManager, int)"
"android.bluetooth.BluetoothMap.doBind()","android.content.Context.bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)"
"android.bluetooth.BluetoothMap.connect(BluetoothDevice)","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.getState()","android.bluetooth.BluetoothMap.log(java.lang.String)"
"android.bluetooth.BluetoothMap.getState()","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.database.Observable.unregisterAll()","java.util.ArrayList.clear()"
"android.database.Observable.registerObserver(T)","java.util.ArrayList.add(T)"
"android.database.Observable.registerObserver(T)","java.util.ArrayList.contains(T)"
"android.database.Observable.unregisterObserver(T)","java.util.ArrayList.indexOf(T)"
"android.database.Observable.unregisterObserver(T)","java.util.ArrayList.remove(int)"
"android.util.PrintStreamPrinter.println(String)","java.io.PrintStream.println(java.lang.String)"
"android.util.IntProperty.set(T, Integer)","android.util.IntProperty.setValue(T, int)"
"android.util.IntProperty.set(T, Integer)","java.lang.Integer.intValue()"
"android.hardware.hdmi.HdmiRecordListener.parseFrom(int)","android.hardware.hdmi.HdmiRecordListener.TimerStatusData.bcdByteToInt(byte)"
"android.hardware.hdmi.HdmiRecordListener.getProgrammedInfo()","android.hardware.hdmi.HdmiRecordListener.TimerStatusData.isProgrammed()"
"android.hardware.hdmi.HdmiRecordListener.getNotProgammedError()","android.hardware.hdmi.HdmiRecordListener.TimerStatusData.isProgrammed()"
"android.app.backup.BackupTransport.configurationIntent()","android.app.backup.BackupTransport.configurationIntent()"
"android.app.backup.BackupTransport.abortFullRestore()","android.app.backup.BackupTransport.abortFullRestore()"
"android.app.backup.BackupTransport.performFullBackup(PackageInfo, ParcelFileDescriptor)","android.app.backup.BackupTransport.performFullBackup(android.content.pm.PackageInfo, android.os.ParcelFileDescriptor)"
"android.app.backup.BackupTransport.getNextFullRestoreDataChunk(ParcelFileDescriptor)","android.app.backup.BackupTransport.getNextFullRestoreDataChunk(android.os.ParcelFileDescriptor)"
"android.app.backup.BackupTransport.sendBackupData(int)","android.app.backup.BackupTransport.sendBackupData(int)"
"android.app.backup.BackupTransport.clearBackupData(PackageInfo)","android.app.backup.BackupTransport.clearBackupData(android.content.pm.PackageInfo)"
"android.app.backup.BackupTransport.dataManagementLabel()","android.app.backup.BackupTransport.dataManagementLabel()"
"android.app.backup.BackupTransport.finishBackup()","android.app.backup.BackupTransport.finishBackup()"
"android.app.backup.BackupTransport.getCurrentRestoreSet()","android.app.backup.BackupTransport.getCurrentRestoreSet()"
"android.app.backup.BackupTransport.currentDestinationString()","android.app.backup.BackupTransport.currentDestinationString()"
"android.app.backup.BackupTransport.initializeDevice()","android.app.backup.BackupTransport.initializeDevice()"
"android.app.backup.BackupTransport.nextRestorePackage()","android.app.backup.BackupTransport.nextRestorePackage()"
"android.app.backup.BackupTransport.requestFullBackupTime()","android.app.backup.BackupTransport.requestFullBackupTime()"
"android.app.backup.BackupTransport.getRestoreData(ParcelFileDescriptor)","android.app.backup.BackupTransport.getRestoreData(android.os.ParcelFileDescriptor)"
"android.app.backup.BackupTransport.startRestore(long, PackageInfo[])","android.app.backup.BackupTransport.startRestore(long, android.content.pm.PackageInfo[])"
"android.app.backup.BackupTransport.cancelFullBackup()","android.app.backup.BackupTransport.cancelFullBackup()"
"android.app.backup.BackupTransport.name()","android.app.backup.BackupTransport.name()"
"android.app.backup.BackupTransport.transportDirName()","android.app.backup.BackupTransport.transportDirName()"
"android.app.backup.BackupTransport.performBackup(PackageInfo, ParcelFileDescriptor)","android.app.backup.BackupTransport.performBackup(android.content.pm.PackageInfo, android.os.ParcelFileDescriptor)"
"android.app.backup.BackupTransport.finishRestore()","android.app.backup.BackupTransport.finishRestore()"
"android.app.backup.BackupTransport.getAvailableRestoreSets()","android.app.backup.BackupTransport.getAvailableRestoreSets()"
"android.app.backup.BackupTransport.dataManagementIntent()","android.app.backup.BackupTransport.dataManagementIntent()"
"android.app.backup.BackupTransport.requestBackupTime()","android.app.backup.BackupTransport.requestBackupTime()"
"android.preference.PreferenceManager.getDefaultSharedPreferencesName(Context)","android.content.Context.getPackageName()"
"android.preference.PreferenceManager.getSharedPreferences()","android.content.Context.getSharedPreferences(java.lang.String, int)"
"android.preference.PreferenceManager.init(Context)","android.preference.PreferenceManager.setSharedPreferencesName(java.lang.String)"
"android.preference.PreferenceManager.init(Context)","android.preference.PreferenceManager.getDefaultSharedPreferencesName(android.content.Context)"
"android.preference.PreferenceManager.getDefaultSharedPreferences(Context)","android.preference.PreferenceManager.getDefaultSharedPreferencesMode()"
"android.preference.PreferenceManager.getDefaultSharedPreferences(Context)","android.content.Context.getSharedPreferences(java.lang.String, int)"
"android.preference.PreferenceManager.getDefaultSharedPreferences(Context)","android.preference.PreferenceManager.getDefaultSharedPreferencesName(android.content.Context)"
"android.preference.PreferenceManager.dismissAllScreens()","java.util.ArrayList.size()"
"android.preference.PreferenceManager.dismissAllScreens()","android.content.DialogInterface.dismiss()"
"android.preference.PreferenceManager.dismissAllScreens()","java.util.List.clear()"
"android.preference.PreferenceManager.dismissAllScreens()","java.util.ArrayList.get(int)"
"android.preference.PreferenceManager.dispatchActivityStop()","android.preference.PreferenceManager.OnActivityStopListener.onActivityStop()"
"android.preference.PreferenceManager.dispatchActivityStop()","java.util.List.size()"
"android.preference.PreferenceManager.dispatchActivityStop()","java.util.List.get(int)"
"android.preference.PreferenceManager.getEditor()","android.content.SharedPreferences.edit()"
"android.preference.PreferenceManager.getEditor()","android.preference.PreferenceManager.getSharedPreferences()"
"android.preference.PreferenceManager.setNoCommit(boolean)","android.content.SharedPreferences.Editor.apply()"
"android.preference.PreferenceManager.setNoCommit(boolean)","android.content.SharedPreferences.Editor.commit()"
"android.preference.PreferenceManager.unregisterOnActivityStopListener(OnActivityStopListener)","java.util.List.remove(android.preference.PreferenceManager.OnActivityStopListener)"
"android.preference.PreferenceManager.registerOnActivityStopListener(OnActivityStopListener)","java.util.List.contains(android.preference.PreferenceManager.OnActivityStopListener)"
"android.preference.PreferenceManager.registerOnActivityStopListener(OnActivityStopListener)","java.util.List.add(android.preference.PreferenceManager.OnActivityStopListener)"
"android.preference.PreferenceManager.unregisterOnActivityResultListener(OnActivityResultListener)","java.util.List.remove(android.preference.PreferenceManager.OnActivityResultListener)"
"android.preference.PreferenceManager.dispatchActivityDestroy()","android.preference.PreferenceManager.OnActivityDestroyListener.onActivityDestroy()"
"android.preference.PreferenceManager.dispatchActivityDestroy()","java.util.List.size()"
"android.preference.PreferenceManager.dispatchActivityDestroy()","android.preference.PreferenceManager.dismissAllScreens()"
"android.preference.PreferenceManager.dispatchActivityDestroy()","java.util.List.get(int)"
"android.preference.PreferenceManager.registerOnActivityResultListener(OnActivityResultListener)","java.util.List.contains(android.preference.PreferenceManager.OnActivityResultListener)"
"android.preference.PreferenceManager.registerOnActivityResultListener(OnActivityResultListener)","java.util.List.add(android.preference.PreferenceManager.OnActivityResultListener)"
"android.preference.PreferenceManager.dispatchActivityResult(int, int, Intent)","java.util.List.size()"
"android.preference.PreferenceManager.dispatchActivityResult(int, int, Intent)","android.preference.PreferenceManager.OnActivityResultListener.onActivityResult(int, int, android.content.Intent)"
"android.preference.PreferenceManager.dispatchActivityResult(int, int, Intent)","java.util.List.get(int)"
"android.preference.PreferenceManager.inflateFromResource(Context, int, PreferenceScreen)","android.preference.PreferenceManager.setNoCommit(boolean)"
"android.preference.PreferenceManager.setDefaultValues(Context, int, boolean)","android.preference.PreferenceManager.getDefaultSharedPreferencesMode()"
"android.preference.PreferenceManager.setDefaultValues(Context, int, boolean)","android.preference.PreferenceManager.getDefaultSharedPreferencesName(android.content.Context)"
"android.preference.PreferenceManager.setDefaultValues(Context, int, boolean)","android.preference.PreferenceManager.setDefaultValues(android.content.Context, java.lang.String, int, int, boolean)"
"android.preference.PreferenceManager.setDefaultValues(Context, String, int, int, boolean)","android.preference.PreferenceManager.setSharedPreferencesMode(int)"
"android.preference.PreferenceManager.setDefaultValues(Context, String, int, int, boolean)","android.content.SharedPreferences.edit()"
"android.preference.PreferenceManager.setDefaultValues(Context, String, int, int, boolean)","android.content.Context.getSharedPreferences(java.lang.String, int)"
"android.preference.PreferenceManager.setDefaultValues(Context, String, int, int, boolean)","android.content.SharedPreferences.Editor.apply()"
"android.preference.PreferenceManager.setDefaultValues(Context, String, int, int, boolean)","android.content.SharedPreferences.Editor.commit()"
"android.preference.PreferenceManager.setDefaultValues(Context, String, int, int, boolean)","android.content.SharedPreferences.Editor.putBoolean(java.lang.String, boolean)"
"android.preference.PreferenceManager.setDefaultValues(Context, String, int, int, boolean)","android.preference.PreferenceManager.setSharedPreferencesName(java.lang.String)"
"android.preference.PreferenceManager.setDefaultValues(Context, String, int, int, boolean)","android.preference.PreferenceManager.inflateFromResource(android.content.Context, int, null)"
"android.preference.PreferenceManager.setDefaultValues(Context, String, int, int, boolean)","android.content.SharedPreferences.getBoolean(java.lang.String, boolean)"
"android.preference.PreferenceManager.queryIntentActivities(Intent)","android.content.Context.getPackageManager()"
"android.preference.PreferenceManager.queryIntentActivities(Intent)","android.content.pm.PackageManager.queryIntentActivities(android.content.Intent, int)"
"android.preference.PreferenceManager.registerOnActivityDestroyListener(OnActivityDestroyListener)","java.util.List.add(android.preference.PreferenceManager.OnActivityDestroyListener)"
"android.preference.PreferenceManager.registerOnActivityDestroyListener(OnActivityDestroyListener)","java.util.List.contains(android.preference.PreferenceManager.OnActivityDestroyListener)"
"android.preference.PreferenceManager.dispatchNewIntent(Intent)","android.preference.PreferenceManager.dismissAllScreens()"
"android.preference.PreferenceManager.unregisterOnActivityDestroyListener(OnActivityDestroyListener)","java.util.List.remove(android.preference.PreferenceManager.OnActivityDestroyListener)"
"android.preference.PreferenceManager.addPreferencesScreen(DialogInterface)","java.util.List.add(android.content.DialogInterface)"
"android.preference.PreferenceManager.removePreferencesScreen(DialogInterface)","java.util.List.remove(android.content.DialogInterface)"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","android.os.BaseBundle.getInt(java.lang.String)"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","java.util.HashSet.add(java.lang.String)"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","android.content.Context.getPackageManager()"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","java.util.HashSet.contains(java.lang.String)"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","android.content.pm.PackageItemInfo.loadXmlMetaData(android.content.pm.PackageManager, java.lang.String)"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","java.util.List.size()"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","android.preference.PreferenceManager.queryIntentActivities(android.content.Intent)"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","android.os.BaseBundle.containsKey(java.lang.String)"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","android.content.res.XmlResourceParser.close()"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","java.util.List.get(int)"
"android.preference.PreferenceManager.inflateFromIntent(Intent, PreferenceScreen)","android.content.Context.createPackageContext(java.lang.String, int)"
"android.app.backup.AbsoluteFileBackupHelper.restoreEntity(BackupDataInputStream)","android.app.backup.FileBackupHelperBase.writeFile(java.io.File, android.app.backup.BackupDataInputStream)"
"android.app.backup.AbsoluteFileBackupHelper.restoreEntity(BackupDataInputStream)","android.app.backup.BackupDataInputStream.getKey()"
"android.app.backup.AbsoluteFileBackupHelper.restoreEntity(BackupDataInputStream)","android.app.backup.FileBackupHelperBase.isKeyInList(java.lang.String, java.lang.String[])"
"android.app.backup.AbsoluteFileBackupHelper.performBackup(ParcelFileDescriptor, BackupDataOutput, ParcelFileDescriptor)","android.app.backup.FileBackupHelperBase.performBackup_checked(android.os.ParcelFileDescriptor, android.app.backup.BackupDataOutput, android.os.ParcelFileDescriptor, java.lang.String[], java.lang.String[])"
"android.nfc.tech.NfcF.getMaxTransceiveLength()","android.nfc.tech.BasicTagTechnology.getMaxTransceiveLengthInternal()"
"android.nfc.tech.NfcF.transceive(byte[])","android.nfc.tech.BasicTagTechnology.transceive(byte[], boolean)"
"android.nfc.tech.NfcF.get(Tag)","android.nfc.Tag.hasTech(int)"
"android.content.Loader.onContentChanged()","android.content.Loader.forceLoad()"
"android.content.Loader.stopLoading()","android.content.Loader.onStopLoading()"
"android.content.Loader.deliverCancellation()","android.content.Loader.OnLoadCanceledListener.onLoadCanceled(android.content.Loader<D>)"
"android.content.Loader.onChange(boolean)","android.content.Loader.onContentChanged()"
"android.content.Loader.toString()","android.util.DebugUtils.buildShortClassTag(android.content.Loader<D>, java.lang.StringBuilder)"
"android.content.Loader.toString()","java.lang.StringBuilder.append(int)"
"android.content.Loader.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.content.Loader.toString()","java.lang.StringBuilder.toString()"
"android.content.Loader.deliverResult(D)","android.content.Loader.OnLoadCompleteListener.onLoadComplete(android.content.Loader<D>, D)"
"android.content.Loader.cancelLoad()","android.content.Loader.onCancelLoad()"
"android.content.Loader.abandon()","android.content.Loader.onAbandon()"
"android.content.Loader.startLoading()","android.content.Loader.onStartLoading()"
"android.content.Loader.reset()","android.content.Loader.onReset()"
"android.content.Loader.forceLoad()","android.content.Loader.onForceLoad()"
"android.content.Loader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(int)"
"android.content.Loader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(boolean)"
"android.content.Loader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(android.content.Loader.OnLoadCompleteListener<D>)"
"android.content.Loader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(boolean)"
"android.content.Loader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.content.Loader.dataToString(D)","android.util.DebugUtils.buildShortClassTag(D, java.lang.StringBuilder)"
"android.content.Loader.dataToString(D)","java.lang.StringBuilder.append(java.lang.String)"
"android.content.Loader.dataToString(D)","java.lang.StringBuilder.toString()"
"android.net.ConnectivityManager.removeRequestForFeature(NetworkCapabilities)","android.net.ConnectivityManager.unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback)"
"android.net.ConnectivityManager.removeRequestForFeature(NetworkCapabilities)","android.net.ConnectivityManager.LegacyRequest.clearDnsBinding()"
"android.net.ConnectivityManager.removeRequestForFeature(NetworkCapabilities)","java.util.HashMap.remove(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.getDefaultProxy()","android.net.ConnectivityManager.getLinkProperties(android.net.Network)"
"android.net.ConnectivityManager.getDefaultProxy()","android.net.ConnectivityManager.getProcessDefaultNetwork()"
"android.net.ConnectivityManager.getDefaultProxy()","android.net.LinkProperties.getHttpProxy()"
"android.net.ConnectivityManager.getDefaultProxy()","android.net.ConnectivityManager.getGlobalProxy()"
"android.net.ConnectivityManager.sendRequestForNetwork(NetworkCapabilities, NetworkCallback, int, int, int)","android.net.ConnectivityManager.decCallbackHandlerRefCount()"
"android.net.ConnectivityManager.sendRequestForNetwork(NetworkCapabilities, NetworkCallback, int, int, int)","android.net.ConnectivityManager.incCallbackHandlerRefCount()"
"android.net.ConnectivityManager.sendRequestForNetwork(NetworkCapabilities, NetworkCallback, int, int, int)","java.util.HashMap.put(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)"
"android.net.ConnectivityManager.expireRequest(NetworkCapabilities, int)","android.net.ConnectivityManager.removeRequestForFeature(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.expireRequest(NetworkCapabilities, int)","java.util.HashMap.get(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.requestRouteToHost(int, int)","android.net.NetworkUtils.intToInetAddress(int)"
"android.net.ConnectivityManager.requestRouteToHost(int, int)","android.net.ConnectivityManager.requestRouteToHostAddress(int, java.net.InetAddress)"
"android.net.ConnectivityManager.maybeMarkCapabilitiesRestricted(NetworkCapabilities)","android.net.NetworkCapabilities.getCapabilities()"
"android.net.ConnectivityManager.maybeMarkCapabilitiesRestricted(NetworkCapabilities)","android.net.NetworkCapabilities.removeCapability(int)"
"android.net.ConnectivityManager.getMobileDataEnabled()","android.os.ServiceManager.getService(java.lang.String)"
"android.net.ConnectivityManager.renewRequestLocked(LegacyRequest)","android.net.ConnectivityManager.sendExpireMsgForFeature(android.net.NetworkCapabilities, int, int)"
"android.net.ConnectivityManager.findRequestForFeature(NetworkCapabilities)","java.util.HashMap.get(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.startUsingNetworkFeature(int, String)","android.net.ConnectivityManager.renewRequestLocked(android.net.ConnectivityManager.LegacyRequest)"
"android.net.ConnectivityManager.startUsingNetworkFeature(int, String)","android.net.ConnectivityManager.requestNetworkForFeatureLocked(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.startUsingNetworkFeature(int, String)","java.util.HashMap.get(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.startUsingNetworkFeature(int, String)","android.net.ConnectivityManager.networkCapabilitiesForFeature(int, java.lang.String)"
"android.net.ConnectivityManager.networkCapabilitiesForFeature(int, String)","android.net.NetworkCapabilities.addTransportType(int)"
"android.net.ConnectivityManager.networkCapabilitiesForFeature(int, String)","android.net.NetworkCapabilities.addCapability(int)"
"android.net.ConnectivityManager.networkCapabilitiesForFeature(int, String)","android.net.ConnectivityManager.maybeMarkCapabilitiesRestricted(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.networkCapabilitiesForFeature(int, String)","java.lang.String.equals(java.lang.String)"
"android.net.ConnectivityManager.requestNetwork(NetworkRequest, NetworkCallback)","android.net.ConnectivityManager.inferLegacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.requestNetwork(NetworkRequest, NetworkCallback)","android.net.ConnectivityManager.sendRequestForNetwork(android.net.NetworkCapabilities, android.net.ConnectivityManager.NetworkCallback, int, int, int)"
"android.net.ConnectivityManager.getObject(Message, Class)","android.os.Message.getData()"
"android.net.ConnectivityManager.getObject(Message, Class)","java.lang.Class.getSimpleName()"
"android.net.ConnectivityManager.getObject(Message, Class)","android.os.Bundle.getParcelable(java.lang.String)"
"android.net.ConnectivityManager.getProcessDefaultNetwork()","android.net.NetworkUtils.getNetworkBoundToProcess()"
"android.net.ConnectivityManager.sendExpireMsgForFeature(NetworkCapabilities, int, int)","android.os.Handler.obtainMessage(int, int, int, android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.sendExpireMsgForFeature(NetworkCapabilities, int, int)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.net.ConnectivityManager.requestNetwork(NetworkRequest, PendingIntent)","android.net.ConnectivityManager.checkPendingIntent(android.app.PendingIntent)"
"android.net.ConnectivityManager.stopUsingNetworkFeature(int, String)","android.net.ConnectivityManager.removeRequestForFeature(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.stopUsingNetworkFeature(int, String)","android.net.ConnectivityManager.networkCapabilitiesForFeature(int, java.lang.String)"
"android.net.ConnectivityManager.decCallbackHandlerRefCount()","android.os.Message.sendToTarget()"
"android.net.ConnectivityManager.decCallbackHandlerRefCount()","java.util.concurrent.atomic.AtomicInteger.decrementAndGet()"
"android.net.ConnectivityManager.decCallbackHandlerRefCount()","android.os.Handler.obtainMessage(int)"
"android.net.ConnectivityManager.incCallbackHandlerRefCount()","android.os.HandlerThread.getLooper()"
"android.net.ConnectivityManager.incCallbackHandlerRefCount()","java.util.concurrent.atomic.AtomicInteger.incrementAndGet()"
"android.net.ConnectivityManager.incCallbackHandlerRefCount()","java.lang.Thread.start()"
"android.net.ConnectivityManager.requestNetworkForFeatureLocked(NetworkCapabilities)","android.net.ConnectivityManager.sendExpireMsgForFeature(android.net.NetworkCapabilities, int, int)"
"android.net.ConnectivityManager.requestNetworkForFeatureLocked(NetworkCapabilities)","android.net.ConnectivityManager.legacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.requestNetworkForFeatureLocked(NetworkCapabilities)","java.util.HashMap.put(android.net.NetworkCapabilities, android.net.ConnectivityManager.LegacyRequest)"
"android.net.ConnectivityManager.requestNetworkForFeatureLocked(NetworkCapabilities)","android.net.ConnectivityManager.sendRequestForNetwork(android.net.NetworkCapabilities, android.net.ConnectivityManager.NetworkCallback, int, int, int)"
"android.net.ConnectivityManager.clearDnsBinding()","android.net.ConnectivityManager.setProcessDefaultNetworkForHostResolution(null)"
"android.net.ConnectivityManager.setProcessDefaultNetworkForHostResolution(Network)","android.net.NetworkUtils.bindProcessToNetworkForHostResolution(int)"
"android.net.ConnectivityManager.from(Context)","android.content.Context.getSystemService(java.lang.String)"
"android.net.ConnectivityManager.registerNetworkCallback(NetworkRequest, NetworkCallback)","android.net.ConnectivityManager.sendRequestForNetwork(android.net.NetworkCapabilities, android.net.ConnectivityManager.NetworkCallback, int, int, int)"
"android.net.ConnectivityManager.getNetworkTypeName(int)","java.lang.Integer.toString(int)"
"android.net.ConnectivityManager.getNetworkManagementService()","android.os.ServiceManager.getService(java.lang.String)"
"android.net.ConnectivityManager.releaseNetworkRequest(PendingIntent)","android.net.ConnectivityManager.checkPendingIntent(android.app.PendingIntent)"
"android.net.ConnectivityManager.setProcessDefaultNetwork(Network)","android.net.Proxy.setHttpProxySystemProperty(android.net.ProxyInfo)"
"android.net.ConnectivityManager.setProcessDefaultNetwork(Network)","android.net.ConnectivityManager.getInstance()"
"android.net.ConnectivityManager.setProcessDefaultNetwork(Network)","android.net.NetworkUtils.getNetworkBoundToProcess()"
"android.net.ConnectivityManager.setProcessDefaultNetwork(Network)","android.net.ConnectivityManager.getDefaultProxy()"
"android.net.ConnectivityManager.setProcessDefaultNetwork(Network)","android.net.NetworkUtils.bindProcessToNetwork(int)"
"android.net.ConnectivityManager.inferLegacyTypeForNetworkCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.hasTransport(int)"
"android.net.ConnectivityManager.inferLegacyTypeForNetworkCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.equalsTransportTypes(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.inferLegacyTypeForNetworkCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.hasCapability(int)"
"android.net.ConnectivityManager.inferLegacyTypeForNetworkCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.equalsNetCapabilities(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.inferLegacyTypeForNetworkCapabilities(NetworkCapabilities)","android.net.ConnectivityManager.networkCapabilitiesForFeature(int, java.lang.String)"
"android.net.ConnectivityManager.requestNetwork(NetworkRequest, NetworkCallback, int)","android.net.ConnectivityManager.inferLegacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.requestNetwork(NetworkRequest, NetworkCallback, int)","android.net.ConnectivityManager.sendRequestForNetwork(android.net.NetworkCapabilities, android.net.ConnectivityManager.NetworkCallback, int, int, int)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.CallbackHandler.getObject(android.os.Message, java.lang.Class<android.net.NetworkRequest>)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.NetworkCallback.onUnavailable()"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.CallbackHandler.getObject(android.os.Message, java.lang.Class<android.net.Network>)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.NetworkCallback.onCapabilitiesChanged(android.net.Network, android.net.NetworkCapabilities)"
"android.net.ConnectivityManager.handleMessage(Message)","java.util.concurrent.atomic.AtomicInteger.decrementAndGet()"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.expireRequest(android.net.NetworkCapabilities, int)"
"android.net.ConnectivityManager.handleMessage(Message)","java.util.HashMap.remove(android.net.NetworkRequest)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.NetworkCallback.onLost(android.net.Network)"
"android.net.ConnectivityManager.handleMessage(Message)","android.os.Looper.quit()"
"android.net.ConnectivityManager.handleMessage(Message)","android.os.Handler.getLooper()"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.NetworkCallback.onLosing(android.net.Network, int)"
"android.net.ConnectivityManager.handleMessage(Message)","java.util.HashMap.get(android.net.NetworkRequest)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.NetworkCallback.onLinkPropertiesChanged(android.net.Network, android.net.LinkProperties)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.NetworkCallback.onPreCheck(android.net.Network)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.CallbackHandler.getCallbacks(android.net.NetworkRequest)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.NetworkCallback.onAvailable(android.net.Network)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.CallbackHandler.getObject(android.os.Message, java.lang.Class<android.net.NetworkCapabilities>)"
"android.net.ConnectivityManager.handleMessage(Message)","android.net.ConnectivityManager.CallbackHandler.getObject(android.os.Message, java.lang.Class<android.net.LinkProperties>)"
"android.net.ConnectivityManager.getCallbacks(NetworkRequest)","java.util.HashMap.get(android.net.NetworkRequest)"
"android.net.ConnectivityManager.legacyTypeForNetworkCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.hasCapability(int)"
"android.preference.MultiSelectListPreference.onSetInitialValue(boolean, Object)","android.preference.Preference.getPersistedStringSet(java.util.Set<java.lang.String>)"
"android.preference.MultiSelectListPreference.onSetInitialValue(boolean, Object)","android.preference.MultiSelectListPreference.setValues(java.util.Set<java.lang.String>)"
"android.preference.MultiSelectListPreference.setValues(Set)","java.util.Set.addAll(java.util.Set<java.lang.String>)"
"android.preference.MultiSelectListPreference.setValues(Set)","java.util.Set.clear()"
"android.preference.MultiSelectListPreference.setValues(Set)","android.preference.Preference.persistStringSet(java.util.Set<java.lang.String>)"
"android.preference.MultiSelectListPreference.onSaveInstanceState()","android.preference.DialogPreference.onSaveInstanceState()"
"android.preference.MultiSelectListPreference.onSaveInstanceState()","android.preference.MultiSelectListPreference.getValues()"
"android.preference.MultiSelectListPreference.onSaveInstanceState()","android.preference.Preference.isPersistent()"
"android.preference.MultiSelectListPreference.onPrepareDialogBuilder(Builder)","java.util.Set.addAll(java.util.Set<java.lang.String>)"
"android.preference.MultiSelectListPreference.onPrepareDialogBuilder(Builder)","java.util.Set.remove(java.lang.String)"
"android.preference.MultiSelectListPreference.onPrepareDialogBuilder(Builder)","android.app.AlertDialog.Builder.setMultiChoiceItems(java.lang.CharSequence[], boolean[], android.content.DialogInterface.OnMultiChoiceClickListener)"
"android.preference.MultiSelectListPreference.onPrepareDialogBuilder(Builder)","android.preference.DialogPreference.onPrepareDialogBuilder(android.app.AlertDialog.Builder)"
"android.preference.MultiSelectListPreference.onPrepareDialogBuilder(Builder)","java.util.Set.add(java.lang.String)"
"android.preference.MultiSelectListPreference.onPrepareDialogBuilder(Builder)","android.preference.MultiSelectListPreference.getSelectedItems()"
"android.preference.MultiSelectListPreference.onPrepareDialogBuilder(Builder)","java.util.Set.clear()"
"android.preference.MultiSelectListPreference.onPrepareDialogBuilder(Builder)","java.lang.CharSequence.toString()"
"android.preference.MultiSelectListPreference.setEntryValues(int)","android.content.res.Resources.getTextArray(int)"
"android.preference.MultiSelectListPreference.setEntryValues(int)","android.content.Context.getResources()"
"android.preference.MultiSelectListPreference.setEntryValues(int)","android.preference.Preference.getContext()"
"android.preference.MultiSelectListPreference.setEntryValues(int)","android.preference.MultiSelectListPreference.setEntryValues(java.lang.CharSequence[])"
"android.preference.MultiSelectListPreference.getSelectedItems()","java.util.Set.contains(java.lang.String)"
"android.preference.MultiSelectListPreference.getSelectedItems()","java.lang.CharSequence.toString()"
"android.preference.MultiSelectListPreference.setEntries(int)","android.content.res.Resources.getTextArray(int)"
"android.preference.MultiSelectListPreference.setEntries(int)","android.content.Context.getResources()"
"android.preference.MultiSelectListPreference.setEntries(int)","android.preference.MultiSelectListPreference.setEntries(java.lang.CharSequence[])"
"android.preference.MultiSelectListPreference.setEntries(int)","android.preference.Preference.getContext()"
"android.preference.MultiSelectListPreference.onGetDefaultValue(TypedArray, int)","java.util.Set.add(java.lang.String)"
"android.preference.MultiSelectListPreference.onGetDefaultValue(TypedArray, int)","java.lang.CharSequence.toString()"
"android.preference.MultiSelectListPreference.onGetDefaultValue(TypedArray, int)","android.content.res.TypedArray.getTextArray(int)"
"android.preference.MultiSelectListPreference.onDialogClosed(boolean)","android.preference.DialogPreference.onDialogClosed(boolean)"
"android.preference.MultiSelectListPreference.onDialogClosed(boolean)","android.preference.MultiSelectListPreference.setValues(java.util.Set<java.lang.String>)"
"android.preference.MultiSelectListPreference.onDialogClosed(boolean)","android.preference.Preference.callChangeListener(java.util.Set<java.lang.String>)"
"android.preference.MultiSelectListPreference.writeToParcel(Parcel, int)","android.os.Parcel.writeStringArray(java.lang.String[])"
"android.preference.MultiSelectListPreference.writeToParcel(Parcel, int)","java.util.Set.toArray(java.lang.String[])"
"android.preference.MultiSelectListPreference.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"android.preference.MultiSelectListPreference.findIndexOfValue(String)","java.lang.Object.equals(java.lang.String)"
"android.animation.TimeAnimator.setCurrentPlayTime(long)","java.lang.Math.max(long, long)"
"android.animation.TimeAnimator.setCurrentPlayTime(long)","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.animation.TimeAnimator.setCurrentPlayTime(long)","android.animation.TimeAnimator.animationFrame(long)"
"android.animation.TimeAnimator.animationFrame(long)","android.animation.TimeAnimator.TimeListener.onTimeUpdate(android.animation.TimeAnimator, long, long)"
"android.animation.TimeAnimator.start()","android.animation.ValueAnimator.start()"
"android.preference.PreferenceInflater.onMergeRoots(PreferenceGroup, boolean, PreferenceGroup)","android.preference.Preference.onAttachedToHierarchy(android.preference.PreferenceManager)"
"android.preference.PreferenceInflater.onCreateCustomFromTag(XmlPullParser, Preference, AttributeSet)","android.preference.Preference.getExtras()"
"android.preference.PreferenceInflater.onCreateCustomFromTag(XmlPullParser, Preference, AttributeSet)","android.content.Context.getResources()"
"android.preference.PreferenceInflater.onCreateCustomFromTag(XmlPullParser, Preference, AttributeSet)","android.preference.GenericInflater.getContext()"
"android.preference.PreferenceInflater.onCreateCustomFromTag(XmlPullParser, Preference, AttributeSet)","java.lang.String.equals(java.lang.String)"
"android.preference.PreferenceInflater.onCreateCustomFromTag(XmlPullParser, Preference, AttributeSet)","android.preference.Preference.setIntent(android.content.Intent)"
"android.preference.PreferenceInflater.onCreateCustomFromTag(XmlPullParser, Preference, AttributeSet)","android.content.res.Resources.parseBundleExtra(java.lang.String, android.util.AttributeSet, android.os.Bundle)"
"android.preference.PreferenceInflater.init(PreferenceManager)","android.preference.GenericInflater.setDefaultPackage(java.lang.String)"
"android.util.TypedValue.getDimension(DisplayMetrics)","android.util.TypedValue.complexToDimension(int, android.util.DisplayMetrics)"
"android.util.TypedValue.complexToDimensionNoisy(int, DisplayMetrics)","android.util.TypedValue.complexToDimension(int, android.util.DisplayMetrics)"
"android.util.TypedValue.toString()","java.lang.StringBuilder.append(java.lang.CharSequence)"
"android.util.TypedValue.toString()","java.lang.StringBuilder.append(int)"
"android.util.TypedValue.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.util.TypedValue.toString()","java.lang.StringBuilder.toString()"
"android.util.TypedValue.toString()","java.lang.Integer.toHexString(int)"
"android.util.TypedValue.complexToDimension(int, DisplayMetrics)","android.util.TypedValue.complexToFloat(int)"
"android.util.TypedValue.complexToDimension(int, DisplayMetrics)","android.util.TypedValue.applyDimension(int, float, android.util.DisplayMetrics)"
"android.util.TypedValue.getFraction(float, float)","android.util.TypedValue.complexToFraction(int, float, float)"
"android.util.TypedValue.complexToDimensionPixelSize(int, DisplayMetrics)","android.util.TypedValue.complexToFloat(int)"
"android.util.TypedValue.complexToDimensionPixelSize(int, DisplayMetrics)","android.util.TypedValue.applyDimension(int, float, android.util.DisplayMetrics)"
"android.util.TypedValue.getFloat()","java.lang.Float.intBitsToFloat(int)"
"android.util.TypedValue.complexToFraction(int, float, float)","android.util.TypedValue.complexToFloat(int)"
"android.util.TypedValue.complexToDimensionPixelOffset(int, DisplayMetrics)","android.util.TypedValue.complexToFloat(int)"
"android.util.TypedValue.complexToDimensionPixelOffset(int, DisplayMetrics)","android.util.TypedValue.applyDimension(int, float, android.util.DisplayMetrics)"
"android.util.TypedValue.coerceToString(int, int)","java.lang.Float.toString(float)"
"android.util.TypedValue.coerceToString(int, int)","android.util.TypedValue.complexToFloat(int)"
"android.util.TypedValue.coerceToString(int, int)","java.lang.Float.intBitsToFloat(int)"
"android.util.TypedValue.coerceToString(int, int)","java.lang.Integer.toString(int)"
"android.util.TypedValue.coerceToString(int, int)","java.lang.Integer.toHexString(int)"
"android.util.TypedValue.coerceToString()","android.util.TypedValue.coerceToString(int, int)"
"android.view.ContextThemeWrapper.attachBaseContext(Context)","android.content.ContextWrapper.attachBaseContext(android.content.Context)"
"android.view.ContextThemeWrapper.onApplyThemeResource(Resources.Theme, int, boolean)","android.content.res.Resources.Theme.applyStyle(int, boolean)"
"android.view.ContextThemeWrapper.getResources()","android.content.ContextWrapper.getResources()"
"android.view.ContextThemeWrapper.getResources()","android.content.Context.getResources()"
"android.view.ContextThemeWrapper.getResources()","android.content.ContextWrapper.createConfigurationContext(android.content.res.Configuration)"
"android.view.ContextThemeWrapper.initializeTheme()","android.view.ContextThemeWrapper.onApplyThemeResource(android.content.res.Resources.Theme, int, boolean)"
"android.view.ContextThemeWrapper.initializeTheme()","android.content.Context.getTheme()"
"android.view.ContextThemeWrapper.initializeTheme()","android.view.ContextThemeWrapper.getResources()"
"android.view.ContextThemeWrapper.initializeTheme()","android.content.res.Resources.newTheme()"
"android.view.ContextThemeWrapper.initializeTheme()","android.content.ContextWrapper.getBaseContext()"
"android.view.ContextThemeWrapper.initializeTheme()","android.content.res.Resources.Theme.setTo(android.content.res.Resources.Theme)"
"android.view.ContextThemeWrapper.setTheme(int)","android.view.ContextThemeWrapper.initializeTheme()"
"android.view.ContextThemeWrapper.getSystemService(String)","android.view.LayoutInflater.from(android.content.Context)"
"android.view.ContextThemeWrapper.getSystemService(String)","java.lang.String.equals(java.lang.String)"
"android.view.ContextThemeWrapper.getSystemService(String)","android.content.ContextWrapper.getBaseContext()"
"android.view.ContextThemeWrapper.getSystemService(String)","android.view.LayoutInflater.cloneInContext(android.view.ContextThemeWrapper)"
"android.view.ContextThemeWrapper.getSystemService(String)","android.content.Context.getSystemService(java.lang.String)"
"android.view.ContextThemeWrapper.getTheme()","android.content.ContextWrapper.getApplicationInfo()"
"android.view.ContextThemeWrapper.getTheme()","android.content.res.Resources.selectDefaultTheme(int, int)"
"android.view.ContextThemeWrapper.getTheme()","android.view.ContextThemeWrapper.initializeTheme()"
"android.webkit.FindActionModeCallback.findAll()","java.lang.CharSequence.length()"
"android.webkit.FindActionModeCallback.getActionModeGlobalBottom()","android.view.View.getParent()"
"android.webkit.FindActionModeCallback.finish()","android.view.ActionMode.finish()"
"android.webkit.FindActionModeCallback.setText(String)","android.text.Selection.setSelection(android.text.Spannable, int, int)"
"android.webkit.FindActionModeCallback.setText(String)","android.text.Spannable.setSpan(android.webkit.FindActionModeCallback, int, int, int)"
"android.webkit.FindActionModeCallback.setText(String)","java.lang.CharSequence.length()"
"android.content.pm.LauncherApps.postOnPackagesUnavailable(String[], UserHandle, boolean)","android.os.Message.sendToTarget()"
"android.content.pm.LauncherApps.postOnPackagesUnavailable(String[], UserHandle, boolean)","android.os.Handler.obtainMessage(int, android.content.pm.LauncherApps.CallbackMessageHandler.CallbackInfo)"
"android.content.pm.LauncherApps.removeCallbackLocked(Callback)","java.util.List.size()"
"android.content.pm.LauncherApps.removeCallbackLocked(Callback)","java.util.List.remove(int)"
"android.content.pm.LauncherApps.removeCallbackLocked(Callback)","java.util.List.get(int)"
"android.content.pm.LauncherApps.registerCallback(Callback, Handler)","java.util.List.contains(android.content.pm.LauncherApps.Callback)"
"android.content.pm.LauncherApps.registerCallback(Callback, Handler)","android.content.pm.LauncherApps.addCallbackLocked(android.content.pm.LauncherApps.Callback, android.os.Handler)"
"android.content.pm.LauncherApps.registerCallback(Callback, Handler)","java.util.List.size()"
"android.content.pm.LauncherApps.postOnPackagesAvailable(String[], UserHandle, boolean)","android.os.Message.sendToTarget()"
"android.content.pm.LauncherApps.postOnPackagesAvailable(String[], UserHandle, boolean)","android.os.Handler.obtainMessage(int, android.content.pm.LauncherApps.CallbackMessageHandler.CallbackInfo)"
"android.content.pm.LauncherApps.resolveActivity(Intent, UserHandle)","android.content.pm.PackageManager.getPackageInfo(java.lang.String, int)"
"android.content.pm.LauncherApps.registerCallback(Callback)","android.content.pm.LauncherApps.registerCallback(android.content.pm.LauncherApps.Callback, null)"
"android.content.pm.LauncherApps.getActivityList(String, UserHandle)","android.content.pm.PackageManager.getPackageInfo(java.lang.String, int)"
"android.content.pm.LauncherApps.getActivityList(String, UserHandle)","java.util.ArrayList.add(android.content.pm.LauncherActivityInfo)"
"android.content.pm.LauncherApps.getActivityList(String, UserHandle)","java.util.List.size()"
"android.content.pm.LauncherApps.getActivityList(String, UserHandle)","java.util.List.get(int)"
"android.content.pm.LauncherApps.unregisterCallback(Callback)","android.content.pm.LauncherApps.removeCallbackLocked(android.content.pm.LauncherApps.Callback)"
"android.content.pm.LauncherApps.unregisterCallback(Callback)","java.util.List.size()"
"android.content.pm.LauncherApps.addCallbackLocked(Callback, Handler)","android.os.Handler.getLooper()"
"android.content.pm.LauncherApps.addCallbackLocked(Callback, Handler)","android.content.pm.LauncherApps.removeCallbackLocked(android.content.pm.LauncherApps.Callback)"
"android.content.pm.LauncherApps.addCallbackLocked(Callback, Handler)","java.util.List.add(android.content.pm.LauncherApps.CallbackMessageHandler)"
"android.content.pm.LauncherApps.postOnPackageChanged(String, UserHandle)","android.os.Message.sendToTarget()"
"android.content.pm.LauncherApps.postOnPackageChanged(String, UserHandle)","android.os.Handler.obtainMessage(int, android.content.pm.LauncherApps.CallbackMessageHandler.CallbackInfo)"
"android.content.pm.LauncherApps.postOnPackageRemoved(String, UserHandle)","android.os.Message.sendToTarget()"
"android.content.pm.LauncherApps.postOnPackageRemoved(String, UserHandle)","android.os.Handler.obtainMessage(int, android.content.pm.LauncherApps.CallbackMessageHandler.CallbackInfo)"
"android.content.pm.LauncherApps.handleMessage(Message)","android.content.pm.LauncherApps.Callback.onPackagesUnavailable(java.lang.String[], android.os.UserHandle, boolean)"
"android.content.pm.LauncherApps.handleMessage(Message)","android.content.pm.LauncherApps.Callback.onPackageRemoved(java.lang.String, android.os.UserHandle)"
"android.content.pm.LauncherApps.handleMessage(Message)","android.content.pm.LauncherApps.Callback.onPackageChanged(java.lang.String, android.os.UserHandle)"
"android.content.pm.LauncherApps.handleMessage(Message)","android.content.pm.LauncherApps.Callback.onPackagesAvailable(java.lang.String[], android.os.UserHandle, boolean)"
"android.content.pm.LauncherApps.handleMessage(Message)","android.content.pm.LauncherApps.Callback.onPackageAdded(java.lang.String, android.os.UserHandle)"
"android.content.pm.LauncherApps.postOnPackageAdded(String, UserHandle)","android.os.Message.sendToTarget()"
"android.content.pm.LauncherApps.postOnPackageAdded(String, UserHandle)","android.os.Handler.obtainMessage(int, android.content.pm.LauncherApps.CallbackMessageHandler.CallbackInfo)"
"android.speech.tts.AudioPlaybackQueueItem.stop(int)","android.os.ConditionVariable.open()"
"android.speech.tts.AudioPlaybackQueueItem.setupVolume(MediaPlayer, float, float)","android.speech.tts.AudioPlaybackQueueItem.clip(float, float, float)"
"android.speech.tts.AudioPlaybackQueueItem.run()","android.speech.tts.PlaybackQueueItem.getDispatcher()"
"android.speech.tts.AudioPlaybackQueueItem.run()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnStop()"
"android.speech.tts.AudioPlaybackQueueItem.run()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnStart()"
"android.speech.tts.AudioPlaybackQueueItem.run()","android.os.ConditionVariable.block()"
"android.speech.tts.AudioPlaybackQueueItem.run()","android.speech.tts.AudioPlaybackQueueItem.finish()"
"android.speech.tts.AudioPlaybackQueueItem.run()","android.os.ConditionVariable.open()"
"android.speech.tts.AudioPlaybackQueueItem.run()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnError(int)"
"android.speech.tts.AudioPlaybackQueueItem.run()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnSuccess()"
"android.os.Handler.getPostMessage(Runnable, Object)","android.os.Message.obtain()"
"android.os.Handler.removeCallbacks(Runnable, Object)","android.os.MessageQueue.removeMessages(android.os.Handler, java.lang.Runnable, java.lang.Object)"
"android.os.Handler.sendEmptyMessage(int)","android.os.Handler.sendEmptyMessageDelayed(int, int)"
"android.os.Handler.sendMessageAtTime(Message, long)","android.os.Handler.enqueueMessage(android.os.MessageQueue, android.os.Message, long)"
"android.os.Handler.removeMessages(int)","android.os.MessageQueue.removeMessages(android.os.Handler, int, null)"
"android.os.Handler.sendMessage(Message)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.os.Handler.obtainMessage()","android.os.Message.obtain(android.os.Handler)"
"android.os.Handler.obtainMessage(int)","android.os.Message.obtain(android.os.Handler, int)"
"android.os.Handler.send(Message)","android.os.Handler.sendMessage(android.os.Message)"
"android.os.Handler.send(Message)","android.os.Binder.getCallingUid()"
"android.os.Handler.runWithScissors(Runnable, long)","java.lang.Runnable.run()"
"android.os.Handler.runWithScissors(Runnable, long)","android.os.Looper.myLooper()"
"android.os.Handler.runWithScissors(Runnable, long)","android.os.Handler.BlockingRunnable.postAndWait(android.os.Handler, long)"
"android.os.Handler.getMessageName(Message)","java.lang.Object.getClass()"
"android.os.Handler.getMessageName(Message)","java.lang.Class.getName()"
"android.os.Handler.getMessageName(Message)","java.lang.Integer.toHexString(int)"
"android.os.Handler.hasMessages(int, Object)","android.os.MessageQueue.hasMessages(android.os.Handler, int, java.lang.Object)"
"android.os.Handler.post(Runnable)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.os.Handler.post(Runnable)","android.os.Handler.getPostMessage(java.lang.Runnable)"
"android.os.Handler.dispatchMessage(Message)","android.os.Handler.handleCallback(android.os.Message)"
"android.os.Handler.dispatchMessage(Message)","android.os.Handler.Callback.handleMessage(android.os.Message)"
"android.os.Handler.dispatchMessage(Message)","android.os.Handler.handleMessage(android.os.Message)"
"android.os.Handler.sendMessageAtFrontOfQueue(Message)","android.os.Handler.enqueueMessage(android.os.MessageQueue, android.os.Message, int)"
"android.os.Handler.dump(Printer, String)","android.os.Looper.dump(android.util.Printer, java.lang.String)"
"android.os.Handler.dump(Printer, String)","android.os.SystemClock.uptimeMillis()"
"android.os.Handler.dump(Printer, String)","android.util.Printer.println(java.lang.String)"
"android.os.Handler.sendEmptyMessageAtTime(int, long)","android.os.Handler.sendMessageAtTime(android.os.Message, long)"
"android.os.Handler.sendEmptyMessageAtTime(int, long)","android.os.Message.obtain()"
"android.os.Handler.getPostMessage(Runnable)","android.os.Message.obtain()"
"android.os.Handler.removeCallbacks(Runnable)","android.os.MessageQueue.removeMessages(android.os.Handler, java.lang.Runnable, null)"
"android.os.Handler.obtainMessage(int, int, int)","android.os.Message.obtain(android.os.Handler, int, int, int)"
"android.os.Handler.handleCallback(Message)","java.lang.Runnable.run()"
"android.os.Handler.postDelayed(Runnable, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"android.os.Handler.postDelayed(Runnable, long)","android.os.Handler.getPostMessage(java.lang.Runnable)"
"android.os.Handler.obtainMessage(int, Object)","android.os.Message.obtain(android.os.Handler, int, java.lang.Object)"
"android.os.Handler.removeMessages(int, Object)","android.os.MessageQueue.removeMessages(android.os.Handler, int, java.lang.Object)"
"android.os.Handler.obtainMessage(int, int, int, Object)","android.os.Message.obtain(android.os.Handler, int, int, int, java.lang.Object)"
"android.os.Handler.postAtFrontOfQueue(Runnable)","android.os.Handler.sendMessageAtFrontOfQueue(android.os.Message)"
"android.os.Handler.postAtFrontOfQueue(Runnable)","android.os.Handler.getPostMessage(java.lang.Runnable)"
"android.os.Handler.postAtTime(Runnable, long)","android.os.Handler.sendMessageAtTime(android.os.Message, long)"
"android.os.Handler.postAtTime(Runnable, long)","android.os.Handler.getPostMessage(java.lang.Runnable)"
"android.os.Handler.hasMessages(int)","android.os.MessageQueue.hasMessages(android.os.Handler, int, null)"
"android.os.Handler.sendEmptyMessageDelayed(int, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"android.os.Handler.sendEmptyMessageDelayed(int, long)","android.os.Message.obtain()"
"android.os.Handler.hasCallbacks(Runnable)","android.os.MessageQueue.hasMessages(android.os.Handler, java.lang.Runnable, null)"
"android.os.Handler.removeCallbacksAndMessages(Object)","android.os.MessageQueue.removeCallbacksAndMessages(android.os.Handler, java.lang.Object)"
"android.os.Handler.postAtTime(Runnable, Object, long)","android.os.Handler.sendMessageAtTime(android.os.Message, long)"
"android.os.Handler.postAtTime(Runnable, Object, long)","android.os.Handler.getPostMessage(java.lang.Runnable, java.lang.Object)"
"android.os.Handler.toString()","java.lang.Object.getClass()"
"android.os.Handler.toString()","java.lang.System.identityHashCode(android.os.Handler)"
"android.os.Handler.toString()","java.lang.Class.getName()"
"android.os.Handler.toString()","java.lang.Integer.toHexString(int)"
"android.os.Handler.enqueueMessage(MessageQueue, Message, long)","android.os.Message.setAsynchronous(boolean)"
"android.os.Handler.enqueueMessage(MessageQueue, Message, long)","android.os.MessageQueue.enqueueMessage(android.os.Message, long)"
"android.os.Handler.postAndWait(Handler, long)","java.lang.Object.wait()"
"android.os.Handler.postAndWait(Handler, long)","android.os.SystemClock.uptimeMillis()"
"android.os.Handler.postAndWait(Handler, long)","java.lang.Object.wait(long)"
"android.os.Handler.postAndWait(Handler, long)","android.os.Handler.post(android.os.Handler.BlockingRunnable)"
"android.os.Handler.run()","java.lang.Runnable.run()"
"android.os.Handler.run()","java.lang.Object.notifyAll()"
"android.os.Handler.sendMessageDelayed(Message, long)","android.os.Handler.sendMessageAtTime(android.os.Message, long)"
"android.os.Handler.sendMessageDelayed(Message, long)","android.os.SystemClock.uptimeMillis()"
"android.hardware.input.KeyboardLayout.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.hardware.input.KeyboardLayout.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.input.KeyboardLayout.compareTo(KeyboardLayout)","java.lang.String.compareToIgnoreCase(java.lang.String)"
"android.hardware.input.KeyboardLayout.compareTo(KeyboardLayout)","java.lang.Integer.compare(int, int)"
"android.hardware.input.KeyboardLayout.toString()","java.lang.String.isEmpty()"
"android.os.storage.StorageManager.onObbResult(String, int, int)","android.util.SparseArray.remove(int)"
"android.os.storage.StorageManager.onObbResult(String, int, int)","android.util.SparseArray.get(int)"
"android.os.storage.StorageManager.onObbResult(String, int, int)","android.os.storage.StorageManager.ObbListenerDelegate.sendObbStateChanged(java.lang.String, int)"
"android.os.storage.StorageManager.getPrimaryVolume(StorageVolume[])","android.os.storage.StorageVolume.isPrimary()"
"android.os.storage.StorageManager.isUsbMassStorageConnected()","android.os.storage.IMountService.isUsbMassStorageConnected()"
"android.os.storage.StorageManager.getPrimaryVolume()","android.os.storage.StorageManager.getPrimaryVolume(android.os.storage.StorageVolume[])"
"android.os.storage.StorageManager.getPrimaryVolume()","android.os.storage.StorageManager.getVolumeList()"
"android.os.storage.StorageManager.getVolumePaths()","android.os.storage.StorageManager.getVolumeList()"
"android.os.storage.StorageManager.getVolumePaths()","android.os.storage.StorageVolume.getPath()"
"android.os.storage.StorageManager.addListener(OnObbStateChangeListener)","android.util.SparseArray.put(int, android.os.storage.StorageManager.ObbListenerDelegate)"
"android.os.storage.StorageManager.getStorageBytesUntilLow(File)","java.io.File.getUsableSpace()"
"android.os.storage.StorageManager.getStorageBytesUntilLow(File)","android.os.storage.StorageManager.getStorageFullBytes(java.io.File)"
"android.os.storage.StorageManager.sendObbStateChanged(String, int)","android.os.Handler.sendMessage(android.os.Message)"
"android.os.storage.StorageManager.sendObbStateChanged(String, int)","android.os.storage.StorageManager.StorageEvent.getMessage()"
"android.os.storage.StorageManager.getMountedObbPath(String)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String, java.lang.String)"
"android.os.storage.StorageManager.getMountedObbPath(String)","android.os.storage.IMountService.getMountedObbPath(java.lang.String)"
"android.os.storage.StorageManager.getStorageLowBytes(File)","java.io.File.getTotalSpace()"
"android.os.storage.StorageManager.getStorageLowBytes(File)","android.provider.Settings.Global.getInt(android.content.ContentResolver, java.lang.String, int)"
"android.os.storage.StorageManager.getStorageLowBytes(File)","java.lang.Math.min(long, long)"
"android.os.storage.StorageManager.getStorageLowBytes(File)","android.provider.Settings.Global.getLong(android.content.ContentResolver, java.lang.String, long)"
"android.os.storage.StorageManager.from(Context)","android.content.Context.getSystemService(java.lang.String)"
"android.os.storage.StorageManager.sendStorageStateChanged(String, String, String)","android.os.Handler.sendMessage(android.os.Message)"
"android.os.storage.StorageManager.sendStorageStateChanged(String, String, String)","android.os.storage.StorageManager.StorageEvent.getMessage()"
"android.os.storage.StorageManager.unregisterListener(StorageEventListener)","android.os.storage.StorageManager.ListenerDelegate.getListener()"
"android.os.storage.StorageManager.unregisterListener(StorageEventListener)","java.util.List.size()"
"android.os.storage.StorageManager.unregisterListener(StorageEventListener)","android.os.storage.IMountService.unregisterListener(android.os.storage.StorageManager.MountServiceBinderListener)"
"android.os.storage.StorageManager.unregisterListener(StorageEventListener)","java.util.List.remove(int)"
"android.os.storage.StorageManager.unregisterListener(StorageEventListener)","java.util.List.get(int)"
"android.os.storage.StorageManager.getVolumeState(String)","android.os.storage.IMountService.getVolumeState(java.lang.String)"
"android.os.storage.StorageManager.disableUsbMassStorage()","android.os.storage.IMountService.setUsbMassStorageEnabled(boolean)"
"android.os.storage.StorageManager.registerListener(StorageEventListener)","android.os.storage.IMountService.registerListener(android.os.storage.StorageManager.MountServiceBinderListener)"
"android.os.storage.StorageManager.registerListener(StorageEventListener)","java.util.List.add(android.os.storage.StorageManager.ListenerDelegate)"
"android.os.storage.StorageManager.handleMessage(Message)","android.os.storage.StorageEventListener.onStorageStateChanged(java.lang.String, java.lang.String, java.lang.String)"
"android.os.storage.StorageManager.handleMessage(Message)","android.os.storage.StorageEventListener.onUsbMassStorageConnectionChanged(boolean)"
"android.os.storage.StorageManager.getVolumeList()","android.os.storage.IMountService.getVolumeList()"
"android.os.storage.StorageManager.isObbMounted(String)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String, java.lang.String)"
"android.os.storage.StorageManager.isObbMounted(String)","android.os.storage.IMountService.isObbMounted(java.lang.String)"
"android.os.storage.StorageManager.sendShareAvailabilityChanged(boolean)","android.os.Handler.sendMessage(android.os.Message)"
"android.os.storage.StorageManager.sendShareAvailabilityChanged(boolean)","android.os.storage.StorageManager.StorageEvent.getMessage()"
"android.os.storage.StorageManager.getStorageFullBytes(File)","android.provider.Settings.Global.getLong(android.content.ContentResolver, java.lang.String, long)"
"android.os.storage.StorageManager.getNextNonce()","java.util.concurrent.atomic.AtomicInteger.getAndIncrement()"
"android.os.storage.StorageManager.isUsbMassStorageEnabled()","android.os.storage.IMountService.isUsbMassStorageEnabled()"
"android.os.storage.StorageManager.mountObb(String, String, OnObbStateChangeListener)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String, java.lang.String)"
"android.os.storage.StorageManager.mountObb(String, String, OnObbStateChangeListener)","android.os.storage.StorageManager.ObbActionListener.addListener(android.os.storage.OnObbStateChangeListener)"
"android.os.storage.StorageManager.mountObb(String, String, OnObbStateChangeListener)","com.android.internal.util.Preconditions.checkNotNull(android.os.storage.OnObbStateChangeListener, java.lang.String)"
"android.os.storage.StorageManager.mountObb(String, String, OnObbStateChangeListener)","android.os.storage.IMountService.mountObb(java.lang.String, java.lang.String, java.lang.String, android.os.storage.StorageManager.ObbActionListener, int)"
"android.os.storage.StorageManager.mountObb(String, String, OnObbStateChangeListener)","java.io.File.getCanonicalPath()"
"android.os.storage.StorageManager.unmountObb(String, boolean, OnObbStateChangeListener)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String, java.lang.String)"
"android.os.storage.StorageManager.unmountObb(String, boolean, OnObbStateChangeListener)","android.os.storage.IMountService.unmountObb(java.lang.String, boolean, android.os.storage.StorageManager.ObbActionListener, int)"
"android.os.storage.StorageManager.unmountObb(String, boolean, OnObbStateChangeListener)","android.os.storage.StorageManager.ObbActionListener.addListener(android.os.storage.OnObbStateChangeListener)"
"android.os.storage.StorageManager.unmountObb(String, boolean, OnObbStateChangeListener)","com.android.internal.util.Preconditions.checkNotNull(android.os.storage.OnObbStateChangeListener, java.lang.String)"
"android.os.storage.StorageManager.enableUsbMassStorage()","android.os.storage.IMountService.setUsbMassStorageEnabled(boolean)"
"android.os.storage.StorageManager.onStorageStateChanged(String, String, String)","java.util.List.size()"
"android.os.storage.StorageManager.onStorageStateChanged(String, String, String)","android.os.storage.StorageManager.ListenerDelegate.sendStorageStateChanged(java.lang.String, java.lang.String, java.lang.String)"
"android.os.storage.StorageManager.onStorageStateChanged(String, String, String)","java.util.List.get(int)"
"android.os.storage.StorageManager.onUsbMassStorageConnectionChanged(boolean)","android.os.storage.StorageManager.ListenerDelegate.sendShareAvailabilityChanged(boolean)"
"android.os.storage.StorageManager.onUsbMassStorageConnectionChanged(boolean)","java.util.List.size()"
"android.os.storage.StorageManager.onUsbMassStorageConnectionChanged(boolean)","java.util.List.get(int)"
"com.android.internal.view.menu.ListMenuItemView.getInflater()","android.view.LayoutInflater.from(android.content.Context)"
"com.android.internal.view.menu.ListMenuItemView.setShortcut(boolean, char)","com.android.internal.view.menu.MenuItemImpl.shouldShowShortcut()"
"com.android.internal.view.menu.ListMenuItemView.setChecked(boolean)","com.android.internal.view.menu.MenuItemImpl.isExclusiveCheckable()"
"com.android.internal.view.menu.ListMenuItemView.setIcon(Drawable)","com.android.internal.view.menu.MenuItemImpl.shouldShowIcon()"
"com.android.internal.view.menu.ListMenuItemView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","com.android.internal.view.menu.MenuItemImpl.hasSubMenu()"
"com.android.internal.view.menu.ListMenuItemView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setCanOpenPopup(boolean)"
"com.android.internal.view.menu.ListMenuItemView.setCheckable(boolean)","com.android.internal.view.menu.MenuItemImpl.isExclusiveCheckable()"
"android.view.animation.AnimationSet.setStartOffset(long)","android.view.animation.Animation.setStartOffset(long)"
"android.view.animation.AnimationSet.scaleCurrentDuration(float)","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.scaleCurrentDuration(float)","android.view.animation.Animation.scaleCurrentDuration(float)"
"android.view.animation.AnimationSet.scaleCurrentDuration(float)","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","android.view.animation.Animation.setFillBefore(boolean)"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","android.view.animation.Animation.setRepeatMode(int)"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","android.view.animation.Animation.initialize(int, int, int, int)"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","android.view.animation.Animation.setDuration(long)"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","android.view.animation.Animation.ensureInterpolator()"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","android.view.animation.Animation.getStartOffset()"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","android.view.animation.Animation.setStartOffset(long)"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","android.view.animation.Animation.setInterpolator(android.view.animation.Interpolator)"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","android.view.animation.Animation.setFillAfter(boolean)"
"android.view.animation.AnimationSet.initialize(int, int, int, int)","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.initializeInvalidateRegion(int, int, int, int)","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.initializeInvalidateRegion(int, int, int, int)","android.view.animation.Animation.isFillEnabled()"
"android.view.animation.AnimationSet.initializeInvalidateRegion(int, int, int, int)","android.view.animation.Animation.getStartOffset()"
"android.view.animation.AnimationSet.initializeInvalidateRegion(int, int, int, int)","android.animation.TimeInterpolator.getInterpolation(float)"
"android.view.animation.AnimationSet.initializeInvalidateRegion(int, int, int, int)","android.view.animation.Animation.applyTransformation(float, android.view.animation.Transformation)"
"android.view.animation.AnimationSet.initializeInvalidateRegion(int, int, int, int)","android.view.animation.Transformation.clear()"
"android.view.animation.AnimationSet.initializeInvalidateRegion(int, int, int, int)","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.initializeInvalidateRegion(int, int, int, int)","android.view.animation.Animation.getFillBefore()"
"android.view.animation.AnimationSet.initializeInvalidateRegion(int, int, int, int)","android.view.animation.Transformation.compose(android.view.animation.Transformation)"
"android.view.animation.AnimationSet.setRepeatMode(int)","android.view.animation.Animation.setRepeatMode(int)"
"android.view.animation.AnimationSet.setDuration(long)","android.view.animation.Animation.setDuration(long)"
"android.view.animation.AnimationSet.getStartTime()","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.getStartTime()","java.lang.Math.min(long, long)"
"android.view.animation.AnimationSet.getStartTime()","android.view.animation.Animation.getStartTime()"
"android.view.animation.AnimationSet.getStartTime()","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.setFillAfter(boolean)","android.view.animation.Animation.setFillAfter(boolean)"
"android.view.animation.AnimationSet.hasAlpha()","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.hasAlpha()","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.hasAlpha()","android.view.animation.Animation.hasAlpha()"
"android.view.animation.AnimationSet.setFillBefore(boolean)","android.view.animation.Animation.setFillBefore(boolean)"
"android.view.animation.AnimationSet.computeDurationHint()","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.computeDurationHint()","android.view.animation.Animation.computeDurationHint()"
"android.view.animation.AnimationSet.computeDurationHint()","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.addAnimation(Animation)","java.util.ArrayList.add(android.view.animation.Animation)"
"android.view.animation.AnimationSet.addAnimation(Animation)","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.addAnimation(Animation)","android.view.animation.Animation.willChangeTransformationMatrix()"
"android.view.animation.AnimationSet.addAnimation(Animation)","android.view.animation.Animation.getStartOffset()"
"android.view.animation.AnimationSet.addAnimation(Animation)","android.view.animation.Animation.getDuration()"
"android.view.animation.AnimationSet.addAnimation(Animation)","java.lang.Math.max(long, long)"
"android.view.animation.AnimationSet.addAnimation(Animation)","android.view.animation.Animation.willChangeBounds()"
"android.view.animation.AnimationSet.setStartTime(long)","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.setStartTime(long)","android.view.animation.Animation.setStartTime(long)"
"android.view.animation.AnimationSet.setStartTime(long)","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.clone()","java.util.ArrayList.add(android.view.animation.Animation)"
"android.view.animation.AnimationSet.clone()","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.clone()","android.view.animation.Animation.clone()"
"android.view.animation.AnimationSet.clone()","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.restoreChildrenStartOffset()","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.restoreChildrenStartOffset()","android.view.animation.Animation.setStartOffset(long)"
"android.view.animation.AnimationSet.restoreChildrenStartOffset()","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.restrictDuration(long)","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.restrictDuration(long)","android.view.animation.Animation.restrictDuration(long)"
"android.view.animation.AnimationSet.restrictDuration(long)","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","android.view.animation.Animation.hasStarted()"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","android.view.animation.Animation.getTransformation(long, android.view.animation.Transformation, float)"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","android.view.animation.Animation.AnimationListener.onAnimationStart(android.view.animation.AnimationSet)"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","android.view.animation.Animation.hasEnded()"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","android.view.animation.Animation.AnimationListener.onAnimationEnd(android.view.animation.AnimationSet)"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","android.view.animation.Transformation.clear()"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","android.view.animation.Animation.getScaleFactor()"
"android.view.animation.AnimationSet.getTransformation(long, Transformation)","android.view.animation.Transformation.compose(android.view.animation.Transformation)"
"android.view.animation.AnimationSet.getDuration()","java.util.ArrayList.size()"
"android.view.animation.AnimationSet.getDuration()","android.view.animation.Animation.getDuration()"
"android.view.animation.AnimationSet.getDuration()","java.lang.Math.max(long, long)"
"android.view.animation.AnimationSet.getDuration()","java.util.ArrayList.get(int)"
"android.view.animation.AnimationSet.reset()","android.view.animation.AnimationSet.restoreChildrenStartOffset()"
"android.view.animation.AnimationSet.reset()","android.view.animation.Animation.reset()"
"android.app.AppOpsManager.getDuration()","java.lang.System.currentTimeMillis()"
"android.app.AppOpsManager.strDebugOpToOp(String)","java.lang.String.equals(java.lang.String)"
"android.app.AppOpsManager.startOp(int)","android.content.Context.getOpPackageName()"
"android.app.AppOpsManager.startOp(int)","android.os.Process.myUid()"
"android.app.AppOpsManager.startOp(int)","android.app.AppOpsManager.startOp(int, int, java.lang.String)"
"android.app.AppOpsManager.finishOp(int)","android.content.Context.getOpPackageName()"
"android.app.AppOpsManager.finishOp(int)","android.app.AppOpsManager.finishOp(int, int, java.lang.String)"
"android.app.AppOpsManager.finishOp(int)","android.os.Process.myUid()"
"android.app.AppOpsManager.strOpToOp(String)","java.util.HashMap.get(java.lang.String)"
"android.app.AppOpsManager.startWatchingMode(String, String, OnOpChangedListener)","android.app.AppOpsManager.strOpToOp(java.lang.String)"
"android.app.AppOpsManager.startWatchingMode(String, String, OnOpChangedListener)","android.app.AppOpsManager.startWatchingMode(int, java.lang.String, android.app.AppOpsManager.OnOpChangedListener)"
"android.app.AppOpsManager.noteOp(String, int, String)","android.app.AppOpsManager.strOpToOp(java.lang.String)"
"android.app.AppOpsManager.noteOp(String, int, String)","android.app.AppOpsManager.noteOp(int, int, java.lang.String)"
"android.app.AppOpsManager.noteOp(int, int, String)","android.app.AppOpsManager.buildSecurityExceptionMsg(int, int, java.lang.String)"
"android.app.AppOpsManager.startOp(int, int, String)","android.app.AppOpsManager.buildSecurityExceptionMsg(int, int, java.lang.String)"
"android.app.AppOpsManager.startOp(String, int, String)","android.app.AppOpsManager.strOpToOp(java.lang.String)"
"android.app.AppOpsManager.startOp(String, int, String)","android.app.AppOpsManager.startOp(int, int, java.lang.String)"
"android.app.AppOpsManager.checkOp(int, int, String)","android.app.AppOpsManager.buildSecurityExceptionMsg(int, int, java.lang.String)"
"android.app.AppOpsManager.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.app.AppOpsManager.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.app.AppOpsManager.noteOpNoThrow(String, int, String)","android.app.AppOpsManager.strOpToOp(java.lang.String)"
"android.app.AppOpsManager.noteOpNoThrow(String, int, String)","android.app.AppOpsManager.noteOpNoThrow(int, int, java.lang.String)"
"android.app.AppOpsManager.finishOp(String, int, String)","android.app.AppOpsManager.strOpToOp(java.lang.String)"
"android.app.AppOpsManager.finishOp(String, int, String)","android.app.AppOpsManager.finishOp(int, int, java.lang.String)"
"android.app.AppOpsManager.setRestriction(int, int, int, String[])","android.os.Binder.getCallingUid()"
"android.app.AppOpsManager.checkAudioOp(int, int, int, String)","android.app.AppOpsManager.buildSecurityExceptionMsg(int, int, java.lang.String)"
"android.app.AppOpsManager.noteOp(int)","android.content.Context.getOpPackageName()"
"android.app.AppOpsManager.noteOp(int)","android.app.AppOpsManager.noteOp(int, int, java.lang.String)"
"android.app.AppOpsManager.noteOp(int)","android.os.Process.myUid()"
"android.app.AppOpsManager.checkOp(String, int, String)","android.app.AppOpsManager.strOpToOp(java.lang.String)"
"android.app.AppOpsManager.checkOp(String, int, String)","android.app.AppOpsManager.checkOp(int, int, java.lang.String)"
"android.app.AppOpsManager.checkOpNoThrow(String, int, String)","android.app.AppOpsManager.strOpToOp(java.lang.String)"
"android.app.AppOpsManager.checkOpNoThrow(String, int, String)","android.app.AppOpsManager.checkOpNoThrow(int, int, java.lang.String)"
"android.app.AppOpsManager.startOpNoThrow(String, int, String)","android.app.AppOpsManager.startOpNoThrow(int, int, java.lang.String)"
"android.app.AppOpsManager.startOpNoThrow(String, int, String)","android.app.AppOpsManager.strOpToOp(java.lang.String)"
"android.accounts.AccountAndUser.equals(Object)","android.accounts.Account.equals(android.accounts.Account)"
"android.accounts.AccountAndUser.toString()","android.accounts.Account.toString()"
"android.accounts.AccountAndUser.hashCode()","android.accounts.Account.hashCode()"
"android.content.pm.PackageStats.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.content.pm.PackageStats.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.content.pm.PackageStats.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.pm.PackageStats.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.content.pm.PackageStats.toString()","java.lang.StringBuilder.toString()"
"android.content.pm.PackageStats.toString()","java.lang.Integer.toHexString(int)"
"android.content.pm.PackageStats.toString()","java.lang.System.identityHashCode(android.content.pm.PackageStats)"
"android.content.pm.PackageStats.toString()","java.lang.StringBuilder.append(long)"
"android.print.PrintFileDocumentAdapter.onLayout(PrintAttributes, PrintAttributes, CancellationSignal, LayoutResultCallback, Bundle)","android.print.PrintDocumentAdapter.LayoutResultCallback.onLayoutFinished(android.print.PrintDocumentInfo, boolean)"
"android.print.PrintFileDocumentAdapter.onPostExecute(Void)","android.print.PrintDocumentAdapter.WriteResultCallback.onWriteFinished(android.print.PageRange[])"
"android.print.PrintFileDocumentAdapter.doInBackground(Void[])","java.io.InputStream.read(byte[])"
"android.print.PrintFileDocumentAdapter.doInBackground(Void[])","java.io.OutputStream.write(byte[], int, int)"
"android.print.PrintFileDocumentAdapter.doInBackground(Void[])","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.print.PrintFileDocumentAdapter.doInBackground(Void[])","android.os.AsyncTask.isCancelled()"
"android.print.PrintFileDocumentAdapter.onWrite(PageRange[], ParcelFileDescriptor, CancellationSignal, WriteResultCallback)","android.os.AsyncTask.executeOnExecutor(java.util.concurrent.Executor, java.lang.Void[])"
"android.print.PrintFileDocumentAdapter.onCancel()","android.os.AsyncTask.cancel(boolean)"
"android.net.http.HttpResponseCache.delete()","java.net.ResponseCache.setDefault(null)"
"android.net.http.HttpResponseCache.delete()","java.net.ResponseCache.getDefault()"
"android.net.http.HttpResponseCache.close()","java.net.ResponseCache.setDefault(null)"
"android.net.http.HttpResponseCache.close()","java.net.ResponseCache.getDefault()"
"android.net.http.HttpResponseCache.install(File, long)","java.net.ResponseCache.getDefault()"
"android.net.http.HttpResponseCache.getInstalled()","java.net.ResponseCache.getDefault()"
"android.text.style.AlignmentSpan.writeToParcel(Parcel, int)","java.lang.Enum.name()"
"android.text.style.AlignmentSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.view.accessibility.AccessibilityInteractionClient.focusSearch(int, int, long, int)","java.util.concurrent.atomic.AtomicInteger.getAndIncrement()"
"android.view.accessibility.AccessibilityInteractionClient.focusSearch(int, int, long, int)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.view.accessibility.AccessibilityInteractionClient.focusSearch(int, int, long, int)","android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfoResultAndClear(int)"
"android.view.accessibility.AccessibilityInteractionClient.focusSearch(int, int, long, int)","android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo, int)"
"android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfo(AccessibilityNodeInfo, int)","android.view.accessibility.AccessibilityCache.add(android.view.accessibility.AccessibilityNodeInfo)"
"android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfo(AccessibilityNodeInfo, int)","android.view.accessibility.AccessibilityNodeInfo.setSealed(boolean)"
"android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfo(AccessibilityNodeInfo, int)","android.view.accessibility.AccessibilityNodeInfo.setConnectionId(int)"
"android.view.accessibility.AccessibilityInteractionClient.getWindows(int)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.view.accessibility.AccessibilityInteractionClient.getWindows(int)","android.view.accessibility.AccessibilityCache.getWindows()"
"android.view.accessibility.AccessibilityInteractionClient.getWindows(int)","java.util.List.size()"
"android.view.accessibility.AccessibilityInteractionClient.getWindows(int)","java.util.Collections.emptyList()"
"android.view.accessibility.AccessibilityInteractionClient.getWindows(int)","android.view.accessibility.AccessibilityCache.addWindow(android.view.accessibility.AccessibilityWindowInfo)"
"android.view.accessibility.AccessibilityInteractionClient.getWindows(int)","java.util.List.get(int)"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","android.view.accessibility.AccessibilityNodeInfo.getChildId(int)"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","android.view.accessibility.AccessibilityNodeInfo.getChildCount()"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","java.util.Collection.isEmpty()"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","java.util.HashSet.size()"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","java.util.List.size()"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","android.view.accessibility.AccessibilityNodeInfo.getParentNodeId()"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","java.util.Queue.add(android.view.accessibility.AccessibilityNodeInfo)"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","java.util.Queue.poll()"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","android.view.accessibility.AccessibilityNodeInfo.getSourceNodeId()"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","java.util.List.get(int)"
"android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(List)","java.util.HashSet.add(android.view.accessibility.AccessibilityNodeInfo)"
"android.view.accessibility.AccessibilityInteractionClient.getWindow(int, int)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.view.accessibility.AccessibilityInteractionClient.getWindow(int, int)","android.view.accessibility.AccessibilityCache.getWindow(int)"
"android.view.accessibility.AccessibilityInteractionClient.getWindow(int, int)","android.view.accessibility.AccessibilityCache.addWindow(android.view.accessibility.AccessibilityWindowInfo)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int)","java.util.concurrent.atomic.AtomicInteger.getAndIncrement()"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int)","android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfosResultAndClear(int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int)","java.util.List.isEmpty()"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int)","android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfos(java.util.List<android.view.accessibility.AccessibilityNodeInfo>, int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int)","android.view.accessibility.AccessibilityCache.getNode(int, long)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int)","java.util.List.get(int)"
"android.view.accessibility.AccessibilityInteractionClient.setPerformAccessibilityActionResult(boolean, int)","java.lang.Object.notifyAll()"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByViewId(int, int, long, String)","java.util.concurrent.atomic.AtomicInteger.getAndIncrement()"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByViewId(int, int, long, String)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByViewId(int, int, long, String)","android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfosResultAndClear(int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByViewId(int, int, long, String)","android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfos(java.util.List<android.view.accessibility.AccessibilityNodeInfo>, int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByViewId(int, int, long, String)","java.util.Collections.emptyList()"
"android.view.accessibility.AccessibilityInteractionClient.getInstance()","android.view.accessibility.AccessibilityInteractionClient.getInstanceForThread(long)"
"android.view.accessibility.AccessibilityInteractionClient.getInstance()","java.lang.Thread.currentThread()"
"android.view.accessibility.AccessibilityInteractionClient.getInstance()","java.lang.Thread.getId()"
"android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfoResultAndClear(int)","android.view.accessibility.AccessibilityInteractionClient.clearResultLocked()"
"android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfoResultAndClear(int)","android.view.accessibility.AccessibilityInteractionClient.waitForResultTimedLocked(int)"
"android.view.accessibility.AccessibilityInteractionClient.getPerformAccessibilityActionResultAndClear(int)","android.view.accessibility.AccessibilityInteractionClient.clearResultLocked()"
"android.view.accessibility.AccessibilityInteractionClient.getPerformAccessibilityActionResultAndClear(int)","android.view.accessibility.AccessibilityInteractionClient.waitForResultTimedLocked(int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByText(int, int, long, String)","java.util.concurrent.atomic.AtomicInteger.getAndIncrement()"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByText(int, int, long, String)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByText(int, int, long, String)","android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfosResultAndClear(int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByText(int, int, long, String)","android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfos(java.util.List<android.view.accessibility.AccessibilityNodeInfo>, int)"
"android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByText(int, int, long, String)","java.util.Collections.emptyList()"
"android.view.accessibility.AccessibilityInteractionClient.setFindAccessibilityNodeInfosResult(List, int)","android.os.Binder.getCallingPid()"
"android.view.accessibility.AccessibilityInteractionClient.setFindAccessibilityNodeInfosResult(List, int)","java.lang.Object.notifyAll()"
"android.view.accessibility.AccessibilityInteractionClient.setFindAccessibilityNodeInfosResult(List, int)","java.util.Collections.emptyList()"
"android.view.accessibility.AccessibilityInteractionClient.setFindAccessibilityNodeInfosResult(List, int)","android.os.Process.myPid()"
"android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfos(List, int)","android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo, int)"
"android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfos(List, int)","java.util.List.size()"
"android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfos(List, int)","java.util.List.get(int)"
"android.view.accessibility.AccessibilityInteractionClient.getRootInActiveWindow(int)","android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int)"
"android.view.accessibility.AccessibilityInteractionClient.performAccessibilityAction(int, int, long, int, Bundle)","java.util.concurrent.atomic.AtomicInteger.getAndIncrement()"
"android.view.accessibility.AccessibilityInteractionClient.performAccessibilityAction(int, int, long, int, Bundle)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.view.accessibility.AccessibilityInteractionClient.performAccessibilityAction(int, int, long, int, Bundle)","android.view.accessibility.AccessibilityInteractionClient.getPerformAccessibilityActionResultAndClear(int)"
"android.view.accessibility.AccessibilityInteractionClient.onAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityCache.onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
"android.view.accessibility.AccessibilityInteractionClient.findFocus(int, int, long, int)","java.util.concurrent.atomic.AtomicInteger.getAndIncrement()"
"android.view.accessibility.AccessibilityInteractionClient.findFocus(int, int, long, int)","android.view.accessibility.AccessibilityInteractionClient.getConnection(int)"
"android.view.accessibility.AccessibilityInteractionClient.findFocus(int, int, long, int)","android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfoResultAndClear(int)"
"android.view.accessibility.AccessibilityInteractionClient.findFocus(int, int, long, int)","android.view.accessibility.AccessibilityInteractionClient.finalizeAndCacheAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo, int)"
"android.view.accessibility.AccessibilityInteractionClient.waitForResultTimedLocked(int)","android.view.accessibility.AccessibilityInteractionClient.getSameProcessMessageAndClear()"
"android.view.accessibility.AccessibilityInteractionClient.waitForResultTimedLocked(int)","android.os.SystemClock.uptimeMillis()"
"android.view.accessibility.AccessibilityInteractionClient.waitForResultTimedLocked(int)","java.lang.Object.wait(long)"
"android.view.accessibility.AccessibilityInteractionClient.waitForResultTimedLocked(int)","android.os.Handler.handleMessage(android.os.Message)"
"android.view.accessibility.AccessibilityInteractionClient.waitForResultTimedLocked(int)","android.os.Message.getTarget()"
"android.view.accessibility.AccessibilityInteractionClient.setFindAccessibilityNodeInfoResult(AccessibilityNodeInfo, int)","java.lang.Object.notifyAll()"
"android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfosResultAndClear(int)","android.view.accessibility.AccessibilityInteractionClient.clearResultLocked()"
"android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfosResultAndClear(int)","android.view.accessibility.AccessibilityInteractionClient.waitForResultTimedLocked(int)"
"android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfosResultAndClear(int)","java.util.Collections.emptyList()"
"android.view.accessibility.AccessibilityInteractionClient.getFindAccessibilityNodeInfosResultAndClear(int)","android.view.accessibility.AccessibilityInteractionClient.checkFindAccessibilityNodeInfoResultIntegrity(java.util.List<android.view.accessibility.AccessibilityNodeInfo>)"
"android.view.accessibility.AccessibilityInteractionClient.setSameThreadMessage(Message)","java.lang.Object.notifyAll()"
"android.view.accessibility.AccessibilityInteractionClient.clearCache()","android.view.accessibility.AccessibilityCache.clear()"
"android.view.accessibility.AccessibilityInteractionClient.getInstanceForThread(long)","android.util.LongSparseArray.put(long, android.view.accessibility.AccessibilityInteractionClient)"
"android.view.accessibility.AccessibilityInteractionClient.getInstanceForThread(long)","android.util.LongSparseArray.get(long)"
"android.app.FragmentBreadCrumbs.onLayout(boolean, int, int, int, int)","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.app.FragmentBreadCrumbs.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredWidth()"
"android.app.FragmentBreadCrumbs.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredHeight()"
"android.app.FragmentBreadCrumbs.onLayout(boolean, int, int, int, int)","android.view.View.layout(int, int, int, int)"
"android.app.FragmentBreadCrumbs.createBackStackEntry(CharSequence, CharSequence)","android.app.BackStackRecord.setBreadCrumbShortTitle(java.lang.CharSequence)"
"android.app.FragmentBreadCrumbs.createBackStackEntry(CharSequence, CharSequence)","android.app.Activity.getFragmentManager()"
"android.app.FragmentBreadCrumbs.createBackStackEntry(CharSequence, CharSequence)","android.app.BackStackRecord.setBreadCrumbTitle(java.lang.CharSequence)"
"android.app.FragmentBreadCrumbs.onMeasure(int, int)","android.view.View.getVisibility()"
"android.app.FragmentBreadCrumbs.onMeasure(int, int)","android.view.View.getMeasuredWidth()"
"android.app.FragmentBreadCrumbs.onMeasure(int, int)","android.view.View.getMeasuredHeight()"
"android.app.FragmentBreadCrumbs.onMeasure(int, int)","java.lang.Math.max(int, int)"
"android.app.FragmentBreadCrumbs.updateCrumbs()","android.view.View.setVisibility(int)"
"android.app.FragmentBreadCrumbs.updateCrumbs()","android.app.FragmentManager.getBackStackEntryAt(int)"
"android.app.FragmentBreadCrumbs.updateCrumbs()","android.view.View.getTag()"
"android.app.FragmentBreadCrumbs.updateCrumbs()","android.app.Activity.getFragmentManager()"
"android.app.FragmentBreadCrumbs.updateCrumbs()","android.app.FragmentManager.getBackStackEntryCount()"
"android.app.FragmentBreadCrumbs.setActivity(Activity)","android.app.Activity.getSystemService(java.lang.String)"
"android.app.FragmentBreadCrumbs.onClick(View)","android.app.FragmentManager.BackStackEntry.getId()"
"android.app.FragmentBreadCrumbs.onClick(View)","android.view.View.getTag()"
"android.app.FragmentBreadCrumbs.onClick(View)","android.app.FragmentBreadCrumbs.OnBreadCrumbClickListener.onBreadCrumbClick(android.app.FragmentManager.BackStackEntry, int)"
"android.app.FragmentBreadCrumbs.onClick(View)","android.app.Activity.getFragmentManager()"
"android.app.FragmentBreadCrumbs.onClick(View)","android.view.View.OnClickListener.onClick(android.view.View)"
"android.app.FragmentBreadCrumbs.onClick(View)","android.app.FragmentManager.popBackStack()"
"android.app.FragmentBreadCrumbs.onClick(View)","android.app.FragmentManager.popBackStack(int, int)"
"android.text.style.SuggestionRangeSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrinterDiscoverySession.stopPrinterDiscovery()"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrinterDiscoverySession.startPrinterDiscovery(java.util.List<android.print.PrinterId>)"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrinterDiscoverySession.validatePrinters(java.util.List<android.print.PrinterId>)"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrinterDiscoverySession.startPrinterStateTracking(android.print.PrinterId)"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrintService.onPrintJobQueued(android.printservice.PrintJob)"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrinterDiscoverySession.destroy()"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrintService.onDisconnected()"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrintService.onConnected()"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrintService.onRequestCancelPrintJob(android.printservice.PrintJob)"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrintService.onCreatePrinterDiscoverySession()"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrinterDiscoverySession.getId()"
"android.printservice.PrintService.handleMessage(Message)","android.printservice.PrinterDiscoverySession.stopPrinterStateTracking(android.print.PrinterId)"
"android.printservice.PrintService.generatePrinterId(String)","android.printservice.PrintService.throwIfNotCalledOnMainThread()"
"android.printservice.PrintService.generatePrinterId(String)","java.lang.Object.getClass()"
"android.printservice.PrintService.generatePrinterId(String)","android.content.ContextWrapper.getPackageName()"
"android.printservice.PrintService.generatePrinterId(String)","java.lang.Class.getName()"
"android.printservice.PrintService.getActivePrintJobs()","android.printservice.PrintService.throwIfNotCalledOnMainThread()"
"android.printservice.PrintService.getActivePrintJobs()","java.util.Collections.emptyList()"
"android.printservice.PrintService.getActivePrintJobs()","java.util.List.size()"
"android.printservice.PrintService.getActivePrintJobs()","java.util.List.add(android.printservice.PrintJob)"
"android.printservice.PrintService.getActivePrintJobs()","java.util.List.get(int)"
"android.printservice.PrintService.attachBaseContext(Context)","android.content.ContextWrapper.attachBaseContext(android.content.Context)"
"android.printservice.PrintService.attachBaseContext(Context)","android.content.Context.getMainLooper()"
"android.printservice.PrintService.throwIfNotCalledOnMainThread()","android.os.Looper.getMainLooper()"
"android.printservice.PrintService.throwIfNotCalledOnMainThread()","android.os.Looper.isCurrentThread()"
"com.android.internal.app.DisableCarModeActivity.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"com.android.internal.app.DisableCarModeActivity.onCreate(Bundle)","android.app.Activity.finish()"
"android.content.SyncStats.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.content.SyncStats.toString()","java.lang.StringBuilder.toString()"
"android.content.SyncStats.toString()","java.lang.StringBuilder.append(long)"
"android.content.SyncStats.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.service.wallpaper.WallpaperService.setOffsetNotificationsEnabled(boolean)","android.service.wallpaper.WallpaperService.Engine.updateSurface(boolean, boolean, boolean)"
"android.service.wallpaper.WallpaperService.dispatchPointer(MotionEvent)","android.service.wallpaper.WallpaperService.Engine.dispatchPointer(android.view.MotionEvent)"
"android.service.wallpaper.WallpaperService.dispatchPointer(MotionEvent)","android.view.MotionEvent.recycle()"
"android.service.wallpaper.WallpaperService.onDisplayChanged(int)","android.view.Display.getDisplayId()"
"android.service.wallpaper.WallpaperService.onDisplayChanged(int)","android.service.wallpaper.WallpaperService.Engine.reportVisibility()"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.service.wallpaper.WallpaperService.Engine.doOffsetsChanged(boolean)"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.view.MotionEvent.recycle()"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.service.wallpaper.WallpaperService.Engine.detach()"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.service.wallpaper.WallpaperService.onCreateEngine()"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.service.wallpaper.WallpaperService.Engine.doVisibilityChanged(boolean)"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","java.util.ArrayList.add(android.service.wallpaper.WallpaperService.Engine)"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.view.MotionEvent.getAction()"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.service.wallpaper.WallpaperService.Engine.attach(android.service.wallpaper.WallpaperService.IWallpaperEngineWrapper)"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.service.wallpaper.WallpaperService.Engine.doCommand(android.service.wallpaper.WallpaperService.WallpaperCommand)"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.service.wallpaper.WallpaperService.Engine.onTouchEvent(android.view.MotionEvent)"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.service.wallpaper.WallpaperService.Engine.doDesiredSizeChanged(int, int)"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","java.util.ArrayList.remove(android.service.wallpaper.WallpaperService.Engine)"
"android.service.wallpaper.WallpaperService.executeMessage(Message)","android.service.wallpaper.WallpaperService.Engine.updateSurface(boolean, boolean, boolean)"
"android.service.wallpaper.WallpaperService.setVisibility(boolean)","com.android.internal.os.HandlerCaller.sendMessage(android.os.Message)"
"android.service.wallpaper.WallpaperService.setVisibility(boolean)","com.android.internal.os.HandlerCaller.obtainMessageI(int, int)"
"android.service.wallpaper.WallpaperService.dispatchWallpaperCommand(String, int, int, int, Bundle)","com.android.internal.view.BaseIWindow.dispatchWallpaperCommand(java.lang.String, int, int, int, android.os.Bundle, boolean)"
"android.service.wallpaper.WallpaperService.onRelayoutContainer()","com.android.internal.os.HandlerCaller.sendMessage(android.os.Message)"
"android.service.wallpaper.WallpaperService.onRelayoutContainer()","com.android.internal.os.HandlerCaller.obtainMessage(int)"
"android.service.wallpaper.WallpaperService.doDesiredSizeChanged(int, int)","android.service.wallpaper.WallpaperService.Engine.doOffsetsChanged(boolean)"
"android.service.wallpaper.WallpaperService.doDesiredSizeChanged(int, int)","android.service.wallpaper.WallpaperService.Engine.onDesiredSizeChanged(int, int)"
"android.service.wallpaper.WallpaperService.detach()","android.view.InputEventReceiver.dispose()"
"android.service.wallpaper.WallpaperService.detach()","android.service.wallpaper.WallpaperService.Engine.reportSurfaceDestroyed()"
"android.service.wallpaper.WallpaperService.detach()","android.hardware.display.DisplayManager.unregisterDisplayListener(android.hardware.display.DisplayManager.DisplayListener)"
"android.service.wallpaper.WallpaperService.detach()","android.service.wallpaper.WallpaperService.Engine.onVisibilityChanged(boolean)"
"android.service.wallpaper.WallpaperService.detach()","android.view.InputChannel.dispose()"
"android.service.wallpaper.WallpaperService.detach()","android.service.wallpaper.WallpaperService.Engine.onDestroy()"
"android.service.wallpaper.WallpaperService.detach()","android.view.Surface.release()"
"android.service.wallpaper.WallpaperService.setDesiredSize(int, int)","com.android.internal.os.HandlerCaller.sendMessage(android.os.Message)"
"android.service.wallpaper.WallpaperService.setDesiredSize(int, int)","com.android.internal.os.HandlerCaller.obtainMessageII(int, int, int)"
"android.service.wallpaper.WallpaperService.setDisplayPadding(Rect)","com.android.internal.os.HandlerCaller.sendMessage(android.os.Message)"
"android.service.wallpaper.WallpaperService.onDestroy()","android.service.wallpaper.WallpaperService.Engine.detach()"
"android.service.wallpaper.WallpaperService.onDestroy()","java.util.ArrayList.size()"
"android.service.wallpaper.WallpaperService.onDestroy()","android.app.Service.onDestroy()"
"android.service.wallpaper.WallpaperService.onDestroy()","java.util.ArrayList.get(int)"
"android.service.wallpaper.WallpaperService.onDestroy()","java.util.ArrayList.clear()"
"android.service.wallpaper.WallpaperService.dump(FileDescriptor, PrintWriter, String[])","java.util.ArrayList.size()"
"android.service.wallpaper.WallpaperService.dump(FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(java.lang.String)"
"android.service.wallpaper.WallpaperService.dump(FileDescriptor, PrintWriter, String[])","android.service.wallpaper.WallpaperService.Engine.dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.service.wallpaper.WallpaperService.dump(FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(android.service.wallpaper.WallpaperService)"
"android.service.wallpaper.WallpaperService.dump(FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(android.service.wallpaper.WallpaperService.Engine)"
"android.service.wallpaper.WallpaperService.dump(FileDescriptor, PrintWriter, String[])","java.util.ArrayList.get(int)"
"android.service.wallpaper.WallpaperService.dump(FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(int)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(android.view.WindowManager.LayoutParams)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(float)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(int)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(android.view.Display)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(android.content.res.Configuration)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(android.view.MotionEvent)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(boolean)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(boolean)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.service.wallpaper.WallpaperService.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(float)"
"android.service.wallpaper.WallpaperService.doVisibilityChanged(boolean)","android.service.wallpaper.WallpaperService.Engine.reportVisibility()"
"android.service.wallpaper.WallpaperService.doCommand(WallpaperCommand)","android.service.wallpaper.WallpaperService.Engine.onCommand(java.lang.String, int, int, int, android.os.Bundle, boolean)"
"android.service.wallpaper.WallpaperService.reportVisibility()","android.view.Display.getState()"
"android.service.wallpaper.WallpaperService.reportVisibility()","android.service.wallpaper.WallpaperService.Engine.doOffsetsChanged(boolean)"
"android.service.wallpaper.WallpaperService.reportVisibility()","android.service.wallpaper.WallpaperService.Engine.onVisibilityChanged(boolean)"
"android.service.wallpaper.WallpaperService.reportVisibility()","android.service.wallpaper.WallpaperService.Engine.updateSurface(boolean, boolean, boolean)"
"android.service.wallpaper.WallpaperService.attach(IWallpaperEngineWrapper)","com.android.internal.view.BaseSurfaceHolder.setSizeFromLayout()"
"android.service.wallpaper.WallpaperService.attach(IWallpaperEngineWrapper)","android.hardware.display.DisplayManager.registerDisplayListener(android.hardware.display.DisplayManager.DisplayListener, android.os.Handler)"
"android.service.wallpaper.WallpaperService.attach(IWallpaperEngineWrapper)","android.hardware.display.DisplayManager.getDisplay(int)"
"android.service.wallpaper.WallpaperService.attach(IWallpaperEngineWrapper)","android.content.ContextWrapper.getSystemService(java.lang.String)"
"android.service.wallpaper.WallpaperService.attach(IWallpaperEngineWrapper)","com.android.internal.os.HandlerCaller.getHandler()"
"android.service.wallpaper.WallpaperService.attach(IWallpaperEngineWrapper)","android.service.wallpaper.WallpaperService.Engine.onCreate(com.android.internal.view.BaseSurfaceHolder)"
"android.service.wallpaper.WallpaperService.attach(IWallpaperEngineWrapper)","android.view.WindowManagerGlobal.getWindowSession()"
"android.service.wallpaper.WallpaperService.attach(IWallpaperEngineWrapper)","android.service.wallpaper.WallpaperService.Engine.updateSurface(boolean, boolean, boolean)"
"android.service.wallpaper.WallpaperService.onUpdateSurface()","com.android.internal.os.HandlerCaller.sendMessage(android.os.Message)"
"android.service.wallpaper.WallpaperService.onUpdateSurface()","com.android.internal.os.HandlerCaller.obtainMessage(int)"
"android.service.wallpaper.WallpaperService.onInputEvent(InputEvent)","android.view.InputEventReceiver.finishInputEvent(android.view.InputEvent, boolean)"
"android.service.wallpaper.WallpaperService.onInputEvent(InputEvent)","android.service.wallpaper.WallpaperService.Engine.dispatchPointer(android.view.MotionEvent)"
"android.service.wallpaper.WallpaperService.onInputEvent(InputEvent)","android.view.MotionEvent.obtainNoHistory(android.view.MotionEvent)"
"android.service.wallpaper.WallpaperService.onInputEvent(InputEvent)","android.view.InputEvent.getSource()"
"android.service.wallpaper.WallpaperService.setTouchEventsEnabled(boolean)","android.service.wallpaper.WallpaperService.Engine.updateSurface(boolean, boolean, boolean)"
"android.service.wallpaper.WallpaperService.reportSurfaceDestroyed()","com.android.internal.view.BaseSurfaceHolder.ungetCallbacks()"
"android.service.wallpaper.WallpaperService.reportSurfaceDestroyed()","com.android.internal.view.BaseSurfaceHolder.getCallbacks()"
"android.service.wallpaper.WallpaperService.reportSurfaceDestroyed()","android.view.SurfaceHolder.Callback.surfaceDestroyed(com.android.internal.view.BaseSurfaceHolder)"
"android.service.wallpaper.WallpaperService.reportSurfaceDestroyed()","android.service.wallpaper.WallpaperService.Engine.onSurfaceDestroyed(com.android.internal.view.BaseSurfaceHolder)"
"android.service.wallpaper.WallpaperService.doOffsetsChanged(boolean)","android.service.wallpaper.WallpaperService.Engine.onOffsetsChanged(float, float, float, float, int, int)"
"android.service.wallpaper.WallpaperService.setFixedSize(int, int)","com.android.internal.view.BaseSurfaceHolder.setFixedSize(int, int)"
"android.service.wallpaper.WallpaperService.doDisplayPaddingChanged(Rect)","android.service.wallpaper.WallpaperService.Engine.updateSurface(boolean, boolean, boolean)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","java.lang.Throwable.fillInStackTrace()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.view.SurfaceHolder.Callback2.surfaceRedrawNeeded(com.android.internal.view.BaseSurfaceHolder)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.service.wallpaper.WallpaperService.Engine.onSurfaceCreated(com.android.internal.view.BaseSurfaceHolder)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.service.wallpaper.WallpaperService.Engine.onVisibilityChanged(boolean)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.content.res.TypedArray.recycle()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","com.android.internal.view.BaseSurfaceHolder.getCallbacks()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","com.android.internal.view.BaseSurfaceHolder.getRequestedType()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","com.android.internal.view.BaseSurfaceHolder.getRequestedHeight()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","java.lang.String.contains(java.lang.String)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.content.res.Resources.getDisplayMetrics()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.view.WindowManager.getDefaultDisplay()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.content.ContextWrapper.getResources()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.service.wallpaper.WallpaperService.Engine.onApplyWindowInsets(android.view.WindowInsets)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.service.wallpaper.WallpaperService.Engine.onSurfaceRedrawNeeded(com.android.internal.view.BaseSurfaceHolder)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","com.android.internal.view.BaseSurfaceHolder.getRequestedWidth()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.os.SystemProperties.getBoolean(java.lang.String, boolean)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.util.TypedValue.getDimension(android.util.DisplayMetrics)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","com.android.internal.view.BaseSurfaceHolder.ungetCallbacks()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","com.android.internal.view.BaseSurfaceHolder.getRequestedFormat()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","com.android.internal.view.BaseSurfaceHolder.setSurfaceFrameSize(int, int)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.view.Surface.isValid()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","java.util.concurrent.locks.ReentrantLock.unlock()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.service.wallpaper.WallpaperService.Engine.reportSurfaceDestroyed()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.view.SurfaceHolder.Callback.surfaceChanged(com.android.internal.view.BaseSurfaceHolder, int, int, int)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","java.util.concurrent.locks.ReentrantLock.lock()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.service.wallpaper.WallpaperService.IWallpaperEngineWrapper.reportShown()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.view.SurfaceHolder.Callback.surfaceCreated(com.android.internal.view.BaseSurfaceHolder)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.service.wallpaper.WallpaperService.Engine.onSurfaceChanged(com.android.internal.view.BaseSurfaceHolder, int, int, int)"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.view.Display.getDisplayId()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.os.Looper.myLooper()"
"android.service.wallpaper.WallpaperService.updateSurface(boolean, boolean, boolean)","android.content.ContextWrapper.getSystemService(java.lang.String)"
"android.service.wallpaper.WallpaperService.destroy()","com.android.internal.os.HandlerCaller.sendMessage(android.os.Message)"
"android.service.wallpaper.WallpaperService.destroy()","com.android.internal.os.HandlerCaller.obtainMessage(int)"
"android.service.wallpaper.WallpaperService.onCreate()","android.app.Service.onCreate()"
"android.view.InputEventSender.dispatchInputEventFinished(int, boolean)","android.view.InputEventSender.onInputEventFinished(int, boolean)"
"android.view.InputEventSender.dispose(boolean)","android.view.InputEventSender.nativeDispose(long)"
"android.view.InputEventSender.finalize()","android.view.InputEventSender.dispose(boolean)"
"android.view.InputEventSender.finalize()","java.lang.Object.finalize()"
"android.view.InputEventSender.dispose()","android.view.InputEventSender.dispose(boolean)"
"android.view.InputEventSender.sendInputEvent(int, InputEvent)","android.view.InputEventSender.nativeSendMotionEvent(long, int, android.view.MotionEvent)"
"android.view.InputEventSender.sendInputEvent(int, InputEvent)","android.view.InputEventSender.nativeSendKeyEvent(long, int, android.view.KeyEvent)"
"android.speech.tts.FileSynthesisCallback.stop()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnStop()"
"android.speech.tts.FileSynthesisCallback.stop()","android.speech.tts.FileSynthesisCallback.cleanUp()"
"android.speech.tts.FileSynthesisCallback.error(int)","android.speech.tts.FileSynthesisCallback.cleanUp()"
"android.speech.tts.FileSynthesisCallback.audioAvailable(byte[], int, int)","android.speech.tts.FileSynthesisCallback.cleanUp()"
"android.speech.tts.FileSynthesisCallback.audioAvailable(byte[], int, int)","android.speech.tts.AbstractSynthesisCallback.errorCodeOnStop()"
"android.speech.tts.FileSynthesisCallback.audioAvailable(byte[], int, int)","java.nio.ByteBuffer.wrap(byte[], int, int)"
"android.speech.tts.FileSynthesisCallback.audioAvailable(byte[], int, int)","java.nio.channels.FileChannel.write(java.nio.ByteBuffer)"
"android.speech.tts.FileSynthesisCallback.makeWavHeader(int, int, int, int)","java.nio.ByteBuffer.flip()"
"android.speech.tts.FileSynthesisCallback.makeWavHeader(int, int, int, int)","java.nio.ByteBuffer.wrap(byte[])"
"android.speech.tts.FileSynthesisCallback.makeWavHeader(int, int, int, int)","java.nio.ByteBuffer.put(byte[])"
"android.speech.tts.FileSynthesisCallback.makeWavHeader(int, int, int, int)","java.nio.ByteBuffer.putInt(int)"
"android.speech.tts.FileSynthesisCallback.makeWavHeader(int, int, int, int)","java.nio.ByteBuffer.putShort(short)"
"android.speech.tts.FileSynthesisCallback.makeWavHeader(int, int, int, int)","java.nio.ByteBuffer.order(java.nio.ByteOrder)"
"android.speech.tts.FileSynthesisCallback.error()","android.speech.tts.FileSynthesisCallback.error(int)"
"android.speech.tts.FileSynthesisCallback.done()","android.speech.tts.FileSynthesisCallback.closeFile()"
"android.speech.tts.FileSynthesisCallback.done()","android.speech.tts.FileSynthesisCallback.cleanUp()"
"android.speech.tts.FileSynthesisCallback.done()","android.speech.tts.AbstractSynthesisCallback.errorCodeOnStop()"
"android.speech.tts.FileSynthesisCallback.done()","android.speech.tts.FileSynthesisCallback.makeWavHeader(int, int, int, int)"
"android.speech.tts.FileSynthesisCallback.done()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnError(int)"
"android.speech.tts.FileSynthesisCallback.done()","java.nio.channels.FileChannel.write(java.nio.ByteBuffer)"
"android.speech.tts.FileSynthesisCallback.done()","java.nio.channels.FileChannel.position(int)"
"android.speech.tts.FileSynthesisCallback.done()","java.nio.channels.FileChannel.size()"
"android.speech.tts.FileSynthesisCallback.done()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnSuccess()"
"android.speech.tts.FileSynthesisCallback.cleanUp()","android.speech.tts.FileSynthesisCallback.closeFile()"
"android.speech.tts.FileSynthesisCallback.start(int, int, int)","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnStart()"
"android.speech.tts.FileSynthesisCallback.start(int, int, int)","android.speech.tts.FileSynthesisCallback.cleanUp()"
"android.speech.tts.FileSynthesisCallback.start(int, int, int)","android.speech.tts.AbstractSynthesisCallback.errorCodeOnStop()"
"android.speech.tts.FileSynthesisCallback.start(int, int, int)","java.nio.channels.FileChannel.write(java.nio.ByteBuffer)"
"android.speech.tts.FileSynthesisCallback.start(int, int, int)","java.nio.ByteBuffer.allocate(int)"
"android.os.ParcelableParcel.writeToParcel(Parcel, int)","android.os.Parcel.appendFrom(android.os.Parcel, int, int)"
"android.os.ParcelableParcel.writeToParcel(Parcel, int)","android.os.Parcel.dataSize()"
"android.os.ParcelableParcel.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.os.ParcelableParcel.getParcel()","android.os.Parcel.setDataPosition(int)"
"android.preference.PreferenceScreen.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"android.preference.PreferenceScreen.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.preference.PreferenceScreen.writeToParcel(Parcel, int)","android.os.Parcel.writeBundle(android.os.Bundle)"
"android.preference.PreferenceScreen.onSaveInstanceState()","android.preference.Preference.onSaveInstanceState()"
"android.preference.PreferenceScreen.onSaveInstanceState()","android.app.Dialog.isShowing()"
"android.preference.PreferenceScreen.onSaveInstanceState()","android.app.Dialog.onSaveInstanceState()"
"android.preference.PreferenceScreen.onItemClick(AdapterView, View, int, long)","android.preference.Preference.performClick(android.preference.PreferenceScreen)"
"android.preference.PreferenceScreen.onRestoreInstanceState(Parcelable)","android.view.AbsSavedState.getSuperState()"
"android.preference.PreferenceScreen.onRestoreInstanceState(Parcelable)","java.lang.Object.equals(java.lang.Class<android.preference.PreferenceScreen.SavedState>)"
"android.preference.PreferenceScreen.onRestoreInstanceState(Parcelable)","java.lang.Object.getClass()"
"android.preference.PreferenceScreen.onRestoreInstanceState(Parcelable)","android.preference.Preference.onRestoreInstanceState(android.os.Parcelable)"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.app.Dialog.setOnDismissListener(android.preference.PreferenceScreen)"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.app.Dialog.onRestoreInstanceState(android.os.Bundle)"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.app.Dialog.setTitle(java.lang.CharSequence)"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.app.Dialog.show()"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.view.Window.requestFeature(int)"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.app.Dialog.setContentView(android.view.View)"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.content.Context.getSystemService(java.lang.String)"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.content.Context.getThemeResId()"
"android.preference.PreferenceScreen.showDialog(Bundle)","android.app.Dialog.getWindow()"
"android.hardware.LegacySensorManager.onAccuracyChanged(Sensor, int)","android.hardware.LegacySensorManager.LegacyListener.getLegacySensorType(int)"
"android.hardware.LegacySensorManager.onAccuracyChanged(Sensor, int)","android.hardware.SensorListener.onAccuracyChanged(int, int)"
"android.hardware.LegacySensorManager.onAccuracyChanged(Sensor, int)","android.hardware.Sensor.getType()"
"android.hardware.LegacySensorManager.unregisterLegacyListener(int, int, SensorListener, int)","android.hardware.SensorManager.unregisterListener(android.hardware.LegacySensorManager.LegacyListener, android.hardware.Sensor)"
"android.hardware.LegacySensorManager.unregisterLegacyListener(int, int, SensorListener, int)","android.hardware.LegacySensorManager.LegacyListener.unregisterSensor(int)"
"android.hardware.LegacySensorManager.unregisterLegacyListener(int, int, SensorListener, int)","java.util.HashMap.get(android.hardware.SensorListener)"
"android.hardware.LegacySensorManager.unregisterLegacyListener(int, int, SensorListener, int)","java.util.HashMap.remove(android.hardware.SensorListener)"
"android.hardware.LegacySensorManager.unregisterLegacyListener(int, int, SensorListener, int)","android.hardware.LegacySensorManager.LegacyListener.hasSensors()"
"android.hardware.LegacySensorManager.unregisterLegacyListener(int, int, SensorListener, int)","android.hardware.SensorManager.getDefaultSensor(int)"
"android.hardware.LegacySensorManager.unregisterListener(SensorListener, int)","android.hardware.LegacySensorManager.unregisterLegacyListener(int, int, android.hardware.SensorListener, int)"
"android.hardware.LegacySensorManager.filter(long, float)","java.lang.Math.ceil(float)"
"android.hardware.LegacySensorManager.getSensors()","android.hardware.SensorManager.getFullSensorList()"
"android.hardware.LegacySensorManager.getSensors()","android.hardware.Sensor.getType()"
"android.hardware.LegacySensorManager.registerLegacyListener(int, int, SensorListener, int, int)","java.util.HashMap.put(android.hardware.SensorListener, android.hardware.LegacySensorManager.LegacyListener)"
"android.hardware.LegacySensorManager.registerLegacyListener(int, int, SensorListener, int, int)","java.util.HashMap.get(android.hardware.SensorListener)"
"android.hardware.LegacySensorManager.registerLegacyListener(int, int, SensorListener, int, int)","android.hardware.SensorManager.registerListener(android.hardware.LegacySensorManager.LegacyListener, android.hardware.Sensor, int)"
"android.hardware.LegacySensorManager.registerLegacyListener(int, int, SensorListener, int, int)","android.hardware.SensorManager.getDefaultSensor(int)"
"android.hardware.LegacySensorManager.registerLegacyListener(int, int, SensorListener, int, int)","android.hardware.LegacySensorManager.LegacyListener.registerSensor(int)"
"android.hardware.LegacySensorManager.registerListener(SensorListener, int, int)","android.hardware.LegacySensorManager.registerLegacyListener(int, int, android.hardware.SensorListener, int, int)"
"android.hardware.LegacySensorManager.unregisterSensor(int)","android.hardware.LegacySensorManager.LegacyListener.hasOrientationSensor(int)"
"android.hardware.LegacySensorManager.onSensorChanged(SensorEvent)","android.hardware.LegacySensorManager.LegacyListener.getLegacySensorType(int)"
"android.hardware.LegacySensorManager.onSensorChanged(SensorEvent)","android.hardware.SensorListener.onSensorChanged(int, float[])"
"android.hardware.LegacySensorManager.onSensorChanged(SensorEvent)","android.hardware.LegacySensorManager.LegacyListener.mapSensorDataToWindow(int, float[], int)"
"android.hardware.LegacySensorManager.onSensorChanged(SensorEvent)","android.hardware.LegacySensorManager.LmsFilter.filter(long, float)"
"android.hardware.LegacySensorManager.onSensorChanged(SensorEvent)","android.hardware.Sensor.getType()"
"android.hardware.LegacySensorManager.onSensorChanged(SensorEvent)","android.hardware.LegacySensorManager.getRotation()"
"android.hardware.LegacySensorManager.registerSensor(int)","android.hardware.LegacySensorManager.LegacyListener.hasOrientationSensor(int)"
"com.android.internal.util.StateMachine.invokeExitMethods(StateInfo)","com.android.internal.util.State.exit()"
"com.android.internal.util.StateMachine.invokeExitMethods(StateInfo)","com.android.internal.util.State.getName()"
"com.android.internal.util.StateMachine.invokeExitMethods(StateInfo)","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.onHalting()"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.LogRecords.add(com.android.internal.util.StateMachine, android.os.Message, java.lang.String, com.android.internal.util.State, com.android.internal.util.State, com.android.internal.util.State)"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.recordLogRec(android.os.Message)"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.getLogRecString(android.os.Message)"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.SmHandler.moveTempStateStackToStateStack()"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.LogRecords.logOnlyTransitions()"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.SmHandler.invokeExitMethods(com.android.internal.util.StateMachine.SmHandler.StateInfo)"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.SmHandler.moveDeferredMessageAtFrontOfQueue()"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.SmHandler.invokeEnterMethods(int)"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.SmHandler.setupTempStateStackWithStatesToEnter(com.android.internal.util.State)"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.SmHandler.cleanupAfterQuitting()"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.onQuitting()"
"com.android.internal.util.StateMachine.performTransitions(State, Message)","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.setupInitialStateStack()","java.util.HashMap.get(com.android.internal.util.State)"
"com.android.internal.util.StateMachine.setupInitialStateStack()","com.android.internal.util.StateMachine.SmHandler.moveTempStateStackToStateStack()"
"com.android.internal.util.StateMachine.setupInitialStateStack()","com.android.internal.util.State.getName()"
"com.android.internal.util.StateMachine.setupInitialStateStack()","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.quitNow()","com.android.internal.util.StateMachine.SmHandler.quitNow()"
"com.android.internal.util.StateMachine.getLogRecSize()","com.android.internal.util.StateMachine.LogRecords.size()"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int)","com.android.internal.util.StateMachine.obtainMessage(int)"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int)","android.os.Handler.sendMessageAtFrontOfQueue(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessageDelayed(Message, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"com.android.internal.util.StateMachine.completeConstruction()","java.util.HashMap.values()"
"com.android.internal.util.StateMachine.completeConstruction()","android.os.Handler.sendMessageAtFrontOfQueue(android.os.Message)"
"com.android.internal.util.StateMachine.completeConstruction()","com.android.internal.util.StateMachine.SmHandler.setupInitialStateStack()"
"com.android.internal.util.StateMachine.completeConstruction()","android.os.Handler.obtainMessage(int, java.lang.Object)"
"com.android.internal.util.StateMachine.completeConstruction()","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.transitionToHaltingState()","com.android.internal.util.StateMachine.SmHandler.transitionTo(com.android.internal.util.StateMachine.SmHandler.HaltingState)"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int, int)","com.android.internal.util.StateMachine.obtainMessage(int, int)"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int, int)","android.os.Handler.sendMessageAtFrontOfQueue(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int, int, int, Object)","android.os.Handler.sendMessageAtFrontOfQueue(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int, int, int, Object)","com.android.internal.util.StateMachine.obtainMessage(int, int, int, java.lang.Object)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, int, int, Object, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, int, int, Object, long)","com.android.internal.util.StateMachine.obtainMessage(int, int, int, java.lang.Object)"
"com.android.internal.util.StateMachine.update(StateMachine, Message, String, IState, IState, IState)","java.lang.System.currentTimeMillis()"
"com.android.internal.util.StateMachine.sendMessage(int, int)","android.os.Handler.sendMessage(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessage(int, int)","com.android.internal.util.StateMachine.obtainMessage(int, int)"
"com.android.internal.util.StateMachine.add(StateMachine, Message, String, IState, IState, IState)","java.util.Vector.size()"
"com.android.internal.util.StateMachine.add(StateMachine, Message, String, IState, IState, IState)","java.util.Vector.add(com.android.internal.util.StateMachine.LogRec)"
"com.android.internal.util.StateMachine.add(StateMachine, Message, String, IState, IState, IState)","java.util.Vector.get(int)"
"com.android.internal.util.StateMachine.add(StateMachine, Message, String, IState, IState, IState)","com.android.internal.util.StateMachine.LogRec.update(com.android.internal.util.StateMachine, android.os.Message, java.lang.String, com.android.internal.util.IState, com.android.internal.util.IState, com.android.internal.util.IState)"
"com.android.internal.util.StateMachine.sendMessage(int)","android.os.Handler.sendMessage(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessage(int)","com.android.internal.util.StateMachine.obtainMessage(int)"
"com.android.internal.util.StateMachine.start()","com.android.internal.util.StateMachine.SmHandler.completeConstruction()"
"com.android.internal.util.StateMachine.getCurrentState()","com.android.internal.util.StateMachine.SmHandler.getCurrentState()"
"com.android.internal.util.StateMachine.moveDeferredMessageAtFrontOfQueue()","java.util.ArrayList.size()"
"com.android.internal.util.StateMachine.moveDeferredMessageAtFrontOfQueue()","android.os.Handler.sendMessageAtFrontOfQueue(android.os.Message)"
"com.android.internal.util.StateMachine.moveDeferredMessageAtFrontOfQueue()","java.util.ArrayList.get(int)"
"com.android.internal.util.StateMachine.moveDeferredMessageAtFrontOfQueue()","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.moveDeferredMessageAtFrontOfQueue()","java.util.ArrayList.clear()"
"com.android.internal.util.StateMachine.toString()","java.io.PrintWriter.close()"
"com.android.internal.util.StateMachine.toString()","com.android.internal.util.StateMachine.dump(null, java.io.PrintWriter, null)"
"com.android.internal.util.StateMachine.toString()","java.io.PrintWriter.flush()"
"com.android.internal.util.StateMachine.toString()","java.io.StringWriter.toString()"
"com.android.internal.util.StateMachine.removeMessages(int)","android.os.Handler.removeMessages(int)"
"com.android.internal.util.StateMachine.addLogRec(String)","com.android.internal.util.StateMachine.SmHandler.getCurrentState()"
"com.android.internal.util.StateMachine.addLogRec(String)","com.android.internal.util.StateMachine.LogRecords.add(com.android.internal.util.StateMachine, android.os.Message, java.lang.String, com.android.internal.util.IState, com.android.internal.util.State, com.android.internal.util.State)"
"com.android.internal.util.StateMachine.addLogRec(String)","com.android.internal.util.StateMachine.SmHandler.getCurrentMessage()"
"com.android.internal.util.StateMachine.copyLogRecs()","java.util.Vector.add(com.android.internal.util.StateMachine.LogRec)"
"com.android.internal.util.StateMachine.getLogRec(int)","com.android.internal.util.StateMachine.LogRecords.get(int)"
"com.android.internal.util.StateMachine.getLogRecCount()","com.android.internal.util.StateMachine.LogRecords.count()"
"com.android.internal.util.StateMachine.isDbg()","com.android.internal.util.StateMachine.SmHandler.isDbg()"
"com.android.internal.util.StateMachine.invokeEnterMethods(int)","com.android.internal.util.State.getName()"
"com.android.internal.util.StateMachine.invokeEnterMethods(int)","com.android.internal.util.State.enter()"
"com.android.internal.util.StateMachine.invokeEnterMethods(int)","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.setLogRecSize(int)","com.android.internal.util.StateMachine.LogRecords.setSize(int)"
"com.android.internal.util.StateMachine.logAndAddLogRec(String)","com.android.internal.util.StateMachine.addLogRec(java.lang.String)"
"com.android.internal.util.StateMachine.logAndAddLogRec(String)","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.cleanupAfterQuitting()","android.os.Handler.getLooper()"
"com.android.internal.util.StateMachine.cleanupAfterQuitting()","com.android.internal.util.StateMachine.LogRecords.cleanup()"
"com.android.internal.util.StateMachine.cleanupAfterQuitting()","java.util.HashMap.clear()"
"com.android.internal.util.StateMachine.cleanupAfterQuitting()","android.os.Looper.quit()"
"com.android.internal.util.StateMachine.cleanupAfterQuitting()","java.util.ArrayList.clear()"
"com.android.internal.util.StateMachine.sendMessage(int, int, int, Object)","android.os.Handler.sendMessage(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessage(int, int, int, Object)","com.android.internal.util.StateMachine.obtainMessage(int, int, int, java.lang.Object)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, Object, long)","com.android.internal.util.StateMachine.obtainMessage(int, java.lang.Object)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, Object, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"com.android.internal.util.StateMachine.deferMessage(Message)","com.android.internal.util.StateMachine.SmHandler.deferMessage(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, int, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, int, long)","com.android.internal.util.StateMachine.obtainMessage(int, int)"
"com.android.internal.util.StateMachine.obtainMessage(int, int)","android.os.Message.obtain(com.android.internal.util.StateMachine.SmHandler, int, int, int)"
"com.android.internal.util.StateMachine.setupTempStateStackWithStatesToEnter(State)","java.util.HashMap.get(com.android.internal.util.State)"
"com.android.internal.util.StateMachine.setupTempStateStackWithStatesToEnter(State)","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.sendMessage(int, int, int)","android.os.Handler.sendMessage(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessage(int, int, int)","com.android.internal.util.StateMachine.obtainMessage(int, int, int)"
"com.android.internal.util.StateMachine.cleanup()","java.util.Vector.clear()"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int, int, int)","android.os.Handler.sendMessageAtFrontOfQueue(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int, int, int)","com.android.internal.util.StateMachine.obtainMessage(int, int, int)"
"com.android.internal.util.StateMachine.get(int)","java.util.Vector.get(int)"
"com.android.internal.util.StateMachine.get(int)","com.android.internal.util.StateMachine.LogRecords.size()"
"com.android.internal.util.StateMachine.setLogOnlyTransitions(boolean)","com.android.internal.util.StateMachine.LogRecords.setLogOnlyTransitions(boolean)"
"com.android.internal.util.StateMachine.addState(State, State)","com.android.internal.util.StateMachine.SmHandler.addState(com.android.internal.util.State, com.android.internal.util.State)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, long)","com.android.internal.util.StateMachine.obtainMessage(int)"
"com.android.internal.util.StateMachine.obtainMessage(int, int, int)","android.os.Message.obtain(com.android.internal.util.StateMachine.SmHandler, int, int, int)"
"com.android.internal.util.StateMachine.isQuit(Message)","com.android.internal.util.StateMachine.SmHandler.isQuit(android.os.Message)"
"com.android.internal.util.StateMachine.transitionTo(IState)","com.android.internal.util.StateMachine.SmHandler.transitionTo(com.android.internal.util.IState)"
"com.android.internal.util.StateMachine.addState(State)","com.android.internal.util.StateMachine.SmHandler.addState(com.android.internal.util.State, null)"
"com.android.internal.util.StateMachine.moveTempStateStackToStateStack()","com.android.internal.util.State.getName()"
"com.android.internal.util.StateMachine.moveTempStateStackToStateStack()","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(Message)","android.os.Handler.sendMessageAtFrontOfQueue(android.os.Message)"
"com.android.internal.util.StateMachine.processMsg(Message)","com.android.internal.util.StateMachine.unhandledMessage(android.os.Message)"
"com.android.internal.util.StateMachine.processMsg(Message)","com.android.internal.util.StateMachine.SmHandler.transitionTo(com.android.internal.util.StateMachine.SmHandler.QuittingState)"
"com.android.internal.util.StateMachine.processMsg(Message)","com.android.internal.util.State.processMessage(android.os.Message)"
"com.android.internal.util.StateMachine.processMsg(Message)","com.android.internal.util.State.getName()"
"com.android.internal.util.StateMachine.processMsg(Message)","com.android.internal.util.StateMachine.SmHandler.isQuit(android.os.Message)"
"com.android.internal.util.StateMachine.processMsg(Message)","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.setSize(int)","java.util.Vector.clear()"
"com.android.internal.util.StateMachine.obtainMessage()","android.os.Message.obtain(com.android.internal.util.StateMachine.SmHandler)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, int, int, long)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"com.android.internal.util.StateMachine.sendMessageDelayed(int, int, int, long)","com.android.internal.util.StateMachine.obtainMessage(int, int, int)"
"com.android.internal.util.StateMachine.sendMessage(Message)","android.os.Handler.sendMessage(android.os.Message)"
"com.android.internal.util.StateMachine.size()","java.util.Vector.size()"
"com.android.internal.util.StateMachine.getCurrentMessage()","com.android.internal.util.StateMachine.SmHandler.getCurrentMessage()"
"com.android.internal.util.StateMachine.setDbg(boolean)","com.android.internal.util.StateMachine.SmHandler.setDbg(boolean)"
"com.android.internal.util.StateMachine.obtainMessage(int)","android.os.Message.obtain(com.android.internal.util.StateMachine.SmHandler, int)"
"com.android.internal.util.StateMachine.setInitialState(State)","com.android.internal.util.StateMachine.SmHandler.setInitialState(com.android.internal.util.State)"
"com.android.internal.util.StateMachine.sendMessage(int, Object)","com.android.internal.util.StateMachine.obtainMessage(int, java.lang.Object)"
"com.android.internal.util.StateMachine.sendMessage(int, Object)","android.os.Handler.sendMessage(android.os.Message)"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int, Object)","com.android.internal.util.StateMachine.obtainMessage(int, java.lang.Object)"
"com.android.internal.util.StateMachine.sendMessageAtFrontOfQueue(int, Object)","android.os.Handler.sendMessageAtFrontOfQueue(android.os.Message)"
"com.android.internal.util.StateMachine.obtainMessage(int, int, int, Object)","android.os.Message.obtain(com.android.internal.util.StateMachine.SmHandler, int, int, int, java.lang.Object)"
"com.android.internal.util.StateMachine.unhandledMessage(Message)","com.android.internal.util.StateMachine.loge(java.lang.String)"
"com.android.internal.util.StateMachine.handleMessage(Message)","com.android.internal.util.StateMachine.SmHandler.performTransitions(com.android.internal.util.State, android.os.Message)"
"com.android.internal.util.StateMachine.handleMessage(Message)","com.android.internal.util.StateMachine.SmHandler.invokeEnterMethods(int)"
"com.android.internal.util.StateMachine.handleMessage(Message)","com.android.internal.util.StateMachine.SmHandler.processMsg(android.os.Message)"
"com.android.internal.util.StateMachine.handleMessage(Message)","com.android.internal.util.StateMachine.log(java.lang.String)"
"com.android.internal.util.StateMachine.obtainMessage(int, Object)","android.os.Message.obtain(com.android.internal.util.StateMachine.SmHandler, int, java.lang.Object)"
"com.android.internal.util.StateMachine.dump(FileDescriptor, PrintWriter, String[])","com.android.internal.util.IState.getName()"
"com.android.internal.util.StateMachine.dump(FileDescriptor, PrintWriter, String[])","com.android.internal.util.StateMachine.getCurrentState()"
"com.android.internal.util.StateMachine.dump(FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(java.lang.String)"
"com.android.internal.util.StateMachine.dump(FileDescriptor, PrintWriter, String[])","com.android.internal.util.StateMachine.getLogRecCount()"
"com.android.internal.util.StateMachine.dump(FileDescriptor, PrintWriter, String[])","com.android.internal.util.StateMachine.LogRec.toString()"
"com.android.internal.util.StateMachine.dump(FileDescriptor, PrintWriter, String[])","com.android.internal.util.StateMachine.getLogRec(int)"
"com.android.internal.util.StateMachine.dump(FileDescriptor, PrintWriter, String[])","com.android.internal.util.StateMachine.getLogRecSize()"
"com.android.internal.util.StateMachine.dump(FileDescriptor, PrintWriter, String[])","com.android.internal.util.StateMachine.getName()"
"com.android.internal.util.StateMachine.dump(FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.flush()"
"com.android.internal.util.StateMachine.quit()","com.android.internal.util.StateMachine.SmHandler.quit()"
"android.widget.SimpleMonthAdapter.setFirstDayOfWeek(int)","android.widget.BaseAdapter.notifyDataSetInvalidated()"
"android.widget.SimpleMonthAdapter.onDayClick(SimpleMonthView, Calendar)","android.widget.SimpleMonthAdapter.OnDaySelectedListener.onDaySelected(android.widget.SimpleMonthAdapter, java.util.Calendar)"
"android.widget.SimpleMonthAdapter.getCount()","java.util.Calendar.get(int)"
"android.widget.SimpleMonthAdapter.getView(int, View, ViewGroup)","java.util.Calendar.get(int)"
"android.widget.SimpleMonthAdapter.getView(int, View, ViewGroup)","android.widget.SimpleMonthAdapter.isSelectedDayInMonth(int, int)"
"android.widget.SimpleMonthAdapter.setSelectedDay(Calendar)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.SimpleMonthAdapter.setRange(Calendar, Calendar)","android.widget.BaseAdapter.notifyDataSetInvalidated()"
"android.widget.SimpleMonthAdapter.setRange(Calendar, Calendar)","java.util.Calendar.setTimeInMillis(long)"
"android.widget.SimpleMonthAdapter.setRange(Calendar, Calendar)","java.util.Calendar.getTimeInMillis()"
"android.widget.SimpleMonthAdapter.setCalendarTextAppearance(int)","android.content.res.TypedArray.recycle()"
"android.widget.SimpleMonthAdapter.isSelectedDayInMonth(int, int)","java.util.Calendar.get(int)"
"android.widget.SimpleMonthAdapter.isCalendarInRange(Calendar)","java.util.Calendar.compareTo(java.util.Calendar)"
"android.bluetooth.BluetoothSocket.readAll(InputStream, byte[])","java.io.InputStream.read(byte[], int, int)"
"android.bluetooth.BluetoothSocket.accept(int)","android.bluetooth.BluetoothSocket.waitSocketSignal(java.io.InputStream)"
"android.bluetooth.BluetoothSocket.accept(int)","android.bluetooth.BluetoothSocket.acceptSocket(java.lang.String)"
"android.bluetooth.BluetoothSocket.accept(int)","android.net.LocalSocket.setSoTimeout(int)"
"android.bluetooth.BluetoothSocket.connect()","android.bluetooth.BluetoothSocket.waitSocketSignal(java.io.InputStream)"
"android.bluetooth.BluetoothSocket.connect()","java.lang.Throwable.getMessage()"
"android.bluetooth.BluetoothSocket.connect()","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.bluetooth.BluetoothSocket.connect()","android.net.LocalSocket.getInputStream()"
"android.bluetooth.BluetoothSocket.connect()","android.net.LocalSocket.getOutputStream()"
"android.bluetooth.BluetoothSocket.connect()","android.bluetooth.BluetoothSocket.readInt(java.io.InputStream)"
"android.bluetooth.BluetoothSocket.convertAddr(byte[])","java.lang.String.format(java.util.Locale, java.lang.String, byte, byte, byte, byte, byte, byte)"
"android.bluetooth.BluetoothSocket.bindListen()","android.os.ParcelFileDescriptor.getFileDescriptor()"
"android.bluetooth.BluetoothSocket.bindListen()","android.net.LocalSocket.getInputStream()"
"android.bluetooth.BluetoothSocket.bindListen()","android.net.LocalSocket.getOutputStream()"
"android.bluetooth.BluetoothSocket.bindListen()","android.bluetooth.BluetoothSocket.readInt(java.io.InputStream)"
"android.bluetooth.BluetoothSocket.bindListen()","android.os.ParcelFileDescriptor.close()"
"android.bluetooth.BluetoothSocket.acceptSocket(String)","android.net.LocalSocket.getAncillaryFileDescriptors()"
"android.bluetooth.BluetoothSocket.acceptSocket(String)","android.net.LocalSocket.getInputStream()"
"android.bluetooth.BluetoothSocket.acceptSocket(String)","android.net.LocalSocket.getOutputStream()"
"android.bluetooth.BluetoothSocket.acceptSocket(String)","android.bluetooth.BluetoothAdapter.getRemoteDevice(java.lang.String)"
"android.bluetooth.BluetoothSocket.acceptSocket(String)","android.bluetooth.BluetoothSocket.close()"
"android.bluetooth.BluetoothSocket.acceptSocket(String)","android.bluetooth.BluetoothAdapter.getDefaultAdapter()"
"android.bluetooth.BluetoothSocket.close()","android.net.LocalSocket.close()"
"android.bluetooth.BluetoothSocket.close()","android.net.LocalSocket.shutdownOutput()"
"android.bluetooth.BluetoothSocket.close()","android.net.LocalSocket.shutdownInput()"
"android.bluetooth.BluetoothSocket.close()","android.os.ParcelFileDescriptor.close()"
"android.bluetooth.BluetoothSocket.waitSocketSignal(InputStream)","java.nio.ByteBuffer.getInt()"
"android.bluetooth.BluetoothSocket.waitSocketSignal(InputStream)","android.bluetooth.BluetoothSocket.readAll(java.io.InputStream, byte[])"
"android.bluetooth.BluetoothSocket.waitSocketSignal(InputStream)","java.nio.ByteOrder.nativeOrder()"
"android.bluetooth.BluetoothSocket.waitSocketSignal(InputStream)","java.nio.ByteBuffer.wrap(byte[])"
"android.bluetooth.BluetoothSocket.waitSocketSignal(InputStream)","android.bluetooth.BluetoothSocket.convertAddr(byte[])"
"android.bluetooth.BluetoothSocket.waitSocketSignal(InputStream)","java.nio.ByteBuffer.get(byte[])"
"android.bluetooth.BluetoothSocket.waitSocketSignal(InputStream)","java.nio.ByteBuffer.getShort()"
"android.bluetooth.BluetoothSocket.waitSocketSignal(InputStream)","java.nio.ByteBuffer.order(java.nio.ByteOrder)"
"android.bluetooth.BluetoothSocket.available()","java.io.InputStream.available()"
"android.bluetooth.BluetoothSocket.finalize()","java.lang.Object.finalize()"
"android.bluetooth.BluetoothSocket.finalize()","android.bluetooth.BluetoothSocket.close()"
"android.bluetooth.BluetoothSocket.write(byte[], int, int)","java.io.OutputStream.write(byte[], int, int)"
"android.bluetooth.BluetoothSocket.read(byte[], int, int)","java.io.InputStream.read(byte[], int, int)"
"android.bluetooth.BluetoothSocket.flush()","java.io.OutputStream.flush()"
"android.bluetooth.BluetoothSocket.readInt(InputStream)","java.nio.ByteBuffer.getInt()"
"android.bluetooth.BluetoothSocket.readInt(InputStream)","android.bluetooth.BluetoothSocket.readAll(java.io.InputStream, byte[])"
"android.bluetooth.BluetoothSocket.readInt(InputStream)","java.nio.ByteOrder.nativeOrder()"
"android.bluetooth.BluetoothSocket.readInt(InputStream)","java.nio.ByteBuffer.wrap(byte[])"
"android.bluetooth.BluetoothSocket.readInt(InputStream)","java.nio.ByteBuffer.order(java.nio.ByteOrder)"
"android.gesture.GestureLibraries.fromFile(String)","android.gesture.GestureLibraries.fromFile(java.io.File)"
"android.gesture.GestureLibraries.load()","android.gesture.GestureStore.load(java.io.InputStream, boolean)"
"android.gesture.GestureLibraries.load()","java.lang.ref.Reference.get()"
"android.gesture.GestureLibraries.load()","android.content.Context.getResources()"
"android.gesture.GestureLibraries.load()","android.content.res.Resources.openRawResource(int)"
"android.gesture.GestureLibraries.fromPrivateFile(Context, String)","android.gesture.GestureLibraries.fromFile(java.io.File)"
"android.gesture.GestureLibraries.fromPrivateFile(Context, String)","android.content.Context.getFileStreamPath(java.lang.String)"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentProviderClient, Uri, Point, CancellationSignal)","android.content.res.AssetFileDescriptor.getStartOffset()"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentProviderClient, Uri, Point, CancellationSignal)","android.os.BaseBundle.getInt(java.lang.String, int)"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentProviderClient, Uri, Point, CancellationSignal)","android.content.res.AssetFileDescriptor.getExtras()"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentProviderClient, Uri, Point, CancellationSignal)","android.content.ContentProviderClient.openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal)"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentProviderClient, Uri, Point, CancellationSignal)","java.io.BufferedInputStream.reset()"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentProviderClient, Uri, Point, CancellationSignal)","java.io.BufferedInputStream.mark(int)"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentProviderClient, Uri, Point, CancellationSignal)","android.content.res.AssetFileDescriptor.getFileDescriptor()"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentProviderClient, Uri, Point, CancellationSignal)","java.lang.Math.min(int, int)"
"android.provider.DocumentsContract.buildDocumentUriUsingTree(Uri, String)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.DocumentsContract.buildDocumentUriUsingTree(Uri, String)","android.provider.DocumentsContract.getTreeDocumentId(android.net.Uri)"
"android.provider.DocumentsContract.buildDocumentUriUsingTree(Uri, String)","android.net.Uri.Builder.scheme(java.lang.String)"
"android.provider.DocumentsContract.buildDocumentUriUsingTree(Uri, String)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.buildDocumentUriUsingTree(Uri, String)","android.net.Uri.Builder.authority(java.lang.String)"
"android.provider.DocumentsContract.buildDocumentUriUsingTree(Uri, String)","android.net.Uri.getAuthority()"
"android.provider.DocumentsContract.buildDocumentUri(String, String)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.DocumentsContract.buildDocumentUri(String, String)","android.net.Uri.Builder.scheme(java.lang.String)"
"android.provider.DocumentsContract.buildDocumentUri(String, String)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.buildDocumentUri(String, String)","android.net.Uri.Builder.authority(java.lang.String)"
"android.provider.DocumentsContract.deleteDocument(ContentProviderClient, Uri)","android.os.Bundle.putParcelable(java.lang.String, android.net.Uri)"
"android.provider.DocumentsContract.deleteDocument(ContentProviderClient, Uri)","android.content.ContentProviderClient.call(java.lang.String, null, android.os.Bundle)"
"android.provider.DocumentsContract.getDocumentId(Uri)","java.util.List.size()"
"android.provider.DocumentsContract.getDocumentId(Uri)","android.net.Uri.getPathSegments()"
"android.provider.DocumentsContract.getDocumentId(Uri)","java.lang.String.equals(java.lang.String)"
"android.provider.DocumentsContract.getDocumentId(Uri)","java.util.List.get(int)"
"android.provider.DocumentsContract.renameDocument(ContentResolver, Uri, String)","android.content.ContentProviderClient.releaseQuietly(android.content.ContentProviderClient)"
"android.provider.DocumentsContract.renameDocument(ContentResolver, Uri, String)","android.provider.DocumentsContract.renameDocument(android.content.ContentProviderClient, android.net.Uri, java.lang.String)"
"android.provider.DocumentsContract.renameDocument(ContentResolver, Uri, String)","android.content.ContentResolver.acquireUnstableContentProviderClient(java.lang.String)"
"android.provider.DocumentsContract.renameDocument(ContentResolver, Uri, String)","android.net.Uri.getAuthority()"
"android.provider.DocumentsContract.isDocumentUri(Context, Uri)","java.util.List.size()"
"android.provider.DocumentsContract.isDocumentUri(Context, Uri)","android.net.Uri.getPathSegments()"
"android.provider.DocumentsContract.isDocumentUri(Context, Uri)","java.lang.String.equals(java.lang.String)"
"android.provider.DocumentsContract.isDocumentUri(Context, Uri)","java.util.List.get(int)"
"android.provider.DocumentsContract.isDocumentUri(Context, Uri)","android.net.Uri.getAuthority()"
"android.provider.DocumentsContract.isDocumentUri(Context, Uri)","android.provider.DocumentsContract.isDocumentsProvider(android.content.Context, java.lang.String)"
"android.provider.DocumentsContract.buildSearchDocumentsUri(String, String, String)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.DocumentsContract.buildSearchDocumentsUri(String, String, String)","android.net.Uri.Builder.scheme(java.lang.String)"
"android.provider.DocumentsContract.buildSearchDocumentsUri(String, String, String)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.buildSearchDocumentsUri(String, String, String)","android.net.Uri.Builder.appendQueryParameter(java.lang.String, java.lang.String)"
"android.provider.DocumentsContract.buildSearchDocumentsUri(String, String, String)","android.net.Uri.Builder.authority(java.lang.String)"
"android.provider.DocumentsContract.buildRootUri(String, String)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.DocumentsContract.buildRootUri(String, String)","android.net.Uri.Builder.scheme(java.lang.String)"
"android.provider.DocumentsContract.buildRootUri(String, String)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.buildRootUri(String, String)","android.net.Uri.Builder.authority(java.lang.String)"
"android.provider.DocumentsContract.renameDocument(ContentProviderClient, Uri, String)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.provider.DocumentsContract.renameDocument(ContentProviderClient, Uri, String)","android.os.Bundle.putParcelable(java.lang.String, android.net.Uri)"
"android.provider.DocumentsContract.renameDocument(ContentProviderClient, Uri, String)","android.content.ContentProviderClient.call(java.lang.String, null, android.os.Bundle)"
"android.provider.DocumentsContract.renameDocument(ContentProviderClient, Uri, String)","android.os.Bundle.getParcelable(java.lang.String)"
"android.provider.DocumentsContract.buildRecentDocumentsUri(String, String)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.DocumentsContract.buildRecentDocumentsUri(String, String)","android.net.Uri.Builder.scheme(java.lang.String)"
"android.provider.DocumentsContract.buildRecentDocumentsUri(String, String)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.buildRecentDocumentsUri(String, String)","android.net.Uri.Builder.authority(java.lang.String)"
"android.provider.DocumentsContract.buildChildDocumentsUri(String, String)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.DocumentsContract.buildChildDocumentsUri(String, String)","android.net.Uri.Builder.scheme(java.lang.String)"
"android.provider.DocumentsContract.buildChildDocumentsUri(String, String)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.buildChildDocumentsUri(String, String)","android.net.Uri.Builder.authority(java.lang.String)"
"android.provider.DocumentsContract.isManageMode(Uri)","android.net.Uri.getBooleanQueryParameter(java.lang.String, boolean)"
"android.provider.DocumentsContract.setManageMode(Uri)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.setManageMode(Uri)","android.net.Uri.Builder.appendQueryParameter(java.lang.String, java.lang.String)"
"android.provider.DocumentsContract.setManageMode(Uri)","android.net.Uri.buildUpon()"
"android.provider.DocumentsContract.isDocumentsProvider(Context, String)","android.content.Context.getPackageManager()"
"android.provider.DocumentsContract.isDocumentsProvider(Context, String)","java.lang.String.equals(java.lang.String)"
"android.provider.DocumentsContract.isDocumentsProvider(Context, String)","android.content.pm.PackageManager.queryIntentContentProviders(android.content.Intent, int)"
"android.provider.DocumentsContract.buildDocumentUriMaybeUsingTree(Uri, String)","android.provider.DocumentsContract.isTreeUri(android.net.Uri)"
"android.provider.DocumentsContract.buildDocumentUriMaybeUsingTree(Uri, String)","android.provider.DocumentsContract.buildDocumentUri(java.lang.String, java.lang.String)"
"android.provider.DocumentsContract.buildDocumentUriMaybeUsingTree(Uri, String)","android.provider.DocumentsContract.buildDocumentUriUsingTree(android.net.Uri, java.lang.String)"
"android.provider.DocumentsContract.buildDocumentUriMaybeUsingTree(Uri, String)","android.net.Uri.getAuthority()"
"android.provider.DocumentsContract.deleteDocument(ContentResolver, Uri)","android.content.ContentProviderClient.releaseQuietly(android.content.ContentProviderClient)"
"android.provider.DocumentsContract.deleteDocument(ContentResolver, Uri)","android.content.ContentResolver.acquireUnstableContentProviderClient(java.lang.String)"
"android.provider.DocumentsContract.deleteDocument(ContentResolver, Uri)","android.net.Uri.getAuthority()"
"android.provider.DocumentsContract.deleteDocument(ContentResolver, Uri)","android.provider.DocumentsContract.deleteDocument(android.content.ContentProviderClient, android.net.Uri)"
"android.provider.DocumentsContract.isTreeUri(Uri)","java.util.List.size()"
"android.provider.DocumentsContract.isTreeUri(Uri)","android.net.Uri.getPathSegments()"
"android.provider.DocumentsContract.isTreeUri(Uri)","java.lang.String.equals(java.lang.String)"
"android.provider.DocumentsContract.isTreeUri(Uri)","java.util.List.get(int)"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentResolver, Uri, Point, CancellationSignal)","android.content.ContentProviderClient.releaseQuietly(android.content.ContentProviderClient)"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentResolver, Uri, Point, CancellationSignal)","android.content.ContentResolver.acquireUnstableContentProviderClient(java.lang.String)"
"android.provider.DocumentsContract.getDocumentThumbnail(ContentResolver, Uri, Point, CancellationSignal)","android.net.Uri.getAuthority()"
"android.provider.DocumentsContract.openImageThumbnail(File)","java.io.File.getAbsolutePath()"
"android.provider.DocumentsContract.openImageThumbnail(File)","android.os.ParcelFileDescriptor.open(java.io.File, int)"
"android.provider.DocumentsContract.createDocument(ContentResolver, Uri, String, String)","android.content.ContentProviderClient.releaseQuietly(android.content.ContentProviderClient)"
"android.provider.DocumentsContract.createDocument(ContentResolver, Uri, String, String)","android.provider.DocumentsContract.createDocument(android.content.ContentProviderClient, android.net.Uri, java.lang.String, java.lang.String)"
"android.provider.DocumentsContract.createDocument(ContentResolver, Uri, String, String)","android.content.ContentResolver.acquireUnstableContentProviderClient(java.lang.String)"
"android.provider.DocumentsContract.createDocument(ContentResolver, Uri, String, String)","android.net.Uri.getAuthority()"
"android.provider.DocumentsContract.buildChildDocumentsUriUsingTree(Uri, String)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.DocumentsContract.buildChildDocumentsUriUsingTree(Uri, String)","android.provider.DocumentsContract.getTreeDocumentId(android.net.Uri)"
"android.provider.DocumentsContract.buildChildDocumentsUriUsingTree(Uri, String)","android.net.Uri.Builder.scheme(java.lang.String)"
"android.provider.DocumentsContract.buildChildDocumentsUriUsingTree(Uri, String)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.buildChildDocumentsUriUsingTree(Uri, String)","android.net.Uri.Builder.authority(java.lang.String)"
"android.provider.DocumentsContract.buildChildDocumentsUriUsingTree(Uri, String)","android.net.Uri.getAuthority()"
"android.provider.DocumentsContract.buildRootsUri(String)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.DocumentsContract.buildRootsUri(String)","android.net.Uri.Builder.scheme(java.lang.String)"
"android.provider.DocumentsContract.buildRootsUri(String)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.buildRootsUri(String)","android.net.Uri.Builder.authority(java.lang.String)"
"android.provider.DocumentsContract.getRootId(Uri)","java.util.List.size()"
"android.provider.DocumentsContract.getRootId(Uri)","android.net.Uri.getPathSegments()"
"android.provider.DocumentsContract.getRootId(Uri)","java.lang.String.equals(java.lang.String)"
"android.provider.DocumentsContract.getRootId(Uri)","java.util.List.get(int)"
"android.provider.DocumentsContract.getTreeDocumentId(Uri)","java.util.List.size()"
"android.provider.DocumentsContract.getTreeDocumentId(Uri)","android.net.Uri.getPathSegments()"
"android.provider.DocumentsContract.getTreeDocumentId(Uri)","java.lang.String.equals(java.lang.String)"
"android.provider.DocumentsContract.getTreeDocumentId(Uri)","java.util.List.get(int)"
"android.provider.DocumentsContract.buildTreeDocumentUri(String, String)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.DocumentsContract.buildTreeDocumentUri(String, String)","android.net.Uri.Builder.scheme(java.lang.String)"
"android.provider.DocumentsContract.buildTreeDocumentUri(String, String)","android.net.Uri.Builder.build()"
"android.provider.DocumentsContract.buildTreeDocumentUri(String, String)","android.net.Uri.Builder.authority(java.lang.String)"
"android.provider.DocumentsContract.getSearchDocumentsQuery(Uri)","android.net.Uri.getQueryParameter(java.lang.String)"
"android.provider.DocumentsContract.createDocument(ContentProviderClient, Uri, String, String)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.provider.DocumentsContract.createDocument(ContentProviderClient, Uri, String, String)","android.os.Bundle.putParcelable(java.lang.String, android.net.Uri)"
"android.provider.DocumentsContract.createDocument(ContentProviderClient, Uri, String, String)","android.content.ContentProviderClient.call(java.lang.String, null, android.os.Bundle)"
"android.provider.DocumentsContract.createDocument(ContentProviderClient, Uri, String, String)","android.os.Bundle.getParcelable(java.lang.String)"
"android.view.textservice.SentenceSuggestionsInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeIntArray(int[])"
"android.view.textservice.SentenceSuggestionsInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeTypedArray(android.view.textservice.SuggestionsInfo[], int)"
"android.view.textservice.SentenceSuggestionsInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.view.DisplayEventReceiver.dispatchHotplug(long, int, boolean)","android.view.DisplayEventReceiver.onHotplug(long, int, boolean)"
"android.view.DisplayEventReceiver.finalize()","java.lang.Object.finalize()"
"android.view.DisplayEventReceiver.finalize()","android.view.DisplayEventReceiver.dispose(boolean)"
"android.view.DisplayEventReceiver.dispose()","android.view.DisplayEventReceiver.dispose(boolean)"
"android.view.DisplayEventReceiver.dispose(boolean)","android.view.DisplayEventReceiver.nativeDispose(long)"
"android.view.DisplayEventReceiver.scheduleVsync()","android.view.DisplayEventReceiver.nativeScheduleVsync(long)"
"android.view.DisplayEventReceiver.dispatchVsync(long, int, int)","android.view.DisplayEventReceiver.onVsync(long, int, int)"
"android.hardware.camera2.dispatch.ArgumentReplacingDispatcher.dispatch(Method, Object[])","android.hardware.camera2.dispatch.ArgumentReplacingDispatcher.arrayCopy(java.lang.Object[])"
"android.hardware.camera2.dispatch.ArgumentReplacingDispatcher.dispatch(Method, Object[])","android.hardware.camera2.dispatch.Dispatchable.dispatch(java.lang.reflect.Method, java.lang.Object[])"
"android.view.animation.GridLayoutAnimationController.getTransformedColumnIndex(AnimationParameters)","java.util.Random.nextFloat()"
"android.view.animation.GridLayoutAnimationController.getTransformedColumnIndex(AnimationParameters)","android.view.animation.LayoutAnimationController.getOrder()"
"android.view.animation.GridLayoutAnimationController.getDelayForView(View)","android.view.View.getLayoutParams()"
"android.view.animation.GridLayoutAnimationController.getDelayForView(View)","android.view.animation.Animation.getDuration()"
"android.view.animation.GridLayoutAnimationController.getDelayForView(View)","android.view.animation.GridLayoutAnimationController.getTransformedColumnIndex(android.view.animation.GridLayoutAnimationController.AnimationParameters)"
"android.view.animation.GridLayoutAnimationController.getDelayForView(View)","android.animation.TimeInterpolator.getInterpolation(float)"
"android.view.animation.GridLayoutAnimationController.getDelayForView(View)","android.view.animation.GridLayoutAnimationController.getTransformedRowIndex(android.view.animation.GridLayoutAnimationController.AnimationParameters)"
"android.view.animation.GridLayoutAnimationController.getTransformedRowIndex(AnimationParameters)","java.util.Random.nextFloat()"
"android.view.animation.GridLayoutAnimationController.getTransformedRowIndex(AnimationParameters)","android.view.animation.LayoutAnimationController.getOrder()"
"com.android.internal.app.ExternalMediaFormatActivity.onPause()","android.app.Activity.onPause()"
"com.android.internal.app.ExternalMediaFormatActivity.onPause()","android.content.ContextWrapper.unregisterReceiver(android.content.BroadcastReceiver)"
"com.android.internal.app.ExternalMediaFormatActivity.onClick(DialogInterface, int)","android.app.Activity.finish()"
"com.android.internal.app.ExternalMediaFormatActivity.onClick(DialogInterface, int)","android.content.Intent.setComponent(android.content.ComponentName)"
"com.android.internal.app.ExternalMediaFormatActivity.onClick(DialogInterface, int)","android.content.ContextWrapper.startService(android.content.Intent)"
"com.android.internal.app.ExternalMediaFormatActivity.onResume()","android.app.Activity.onResume()"
"com.android.internal.app.ExternalMediaFormatActivity.onResume()","android.content.ContextWrapper.registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"
"com.android.internal.app.ExternalMediaFormatActivity.onResume()","android.content.IntentFilter.addAction(java.lang.String)"
"com.android.internal.app.ExternalMediaFormatActivity.onCreate(Bundle)","com.android.internal.app.AlertActivity.setupAlert()"
"com.android.internal.app.ExternalMediaFormatActivity.onCreate(Bundle)","com.android.internal.app.AlertActivity.onCreate(android.os.Bundle)"
"com.android.internal.app.ExternalMediaFormatActivity.onReceive(Context, Intent)","android.app.Activity.finish()"
"com.android.internal.app.ExternalMediaFormatActivity.onReceive(Context, Intent)","android.content.Intent.getAction()"
"android.app.ApplicationPackageManager.getApplicationBanner(ApplicationInfo)","android.content.pm.PackageItemInfo.loadBanner(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.getDrawable(String, int, ApplicationInfo)","android.app.ApplicationPackageManager.getCachedIcon(android.app.ApplicationPackageManager.ResourceName)"
"android.app.ApplicationPackageManager.getDrawable(String, int, ApplicationInfo)","java.lang.Throwable.fillInStackTrace()"
"android.app.ApplicationPackageManager.getDrawable(String, int, ApplicationInfo)","android.app.ApplicationPackageManager.getResourcesForApplication(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getDrawable(String, int, ApplicationInfo)","android.content.res.Resources.getDrawable(int)"
"android.app.ApplicationPackageManager.getDrawable(String, int, ApplicationInfo)","android.app.ApplicationPackageManager.getApplicationInfo(java.lang.String, int)"
"android.app.ApplicationPackageManager.getPackageInstaller()","android.app.ContextImpl.getPackageName()"
"android.app.ApplicationPackageManager.getPackageInstaller()","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.getPackageInstaller()","android.os.RemoteException.rethrowAsRuntimeException()"
"android.app.ApplicationPackageManager.queryBroadcastReceivers(Intent, int)","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.queryBroadcastReceivers(Intent, int)","android.app.ApplicationPackageManager.queryBroadcastReceivers(android.content.Intent, int, int)"
"android.app.ApplicationPackageManager.getResourcesForApplication(String)","android.app.ApplicationPackageManager.getResourcesForApplication(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getResourcesForApplication(String)","android.app.ApplicationPackageManager.getApplicationInfo(java.lang.String, int)"
"android.app.ApplicationPackageManager.getInstalledApplications(int)","android.content.pm.ParceledListSlice.getList()"
"android.app.ApplicationPackageManager.getInstalledApplications(int)","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.installPackage(Uri, PackageInstallObserver, int, String)","android.app.ApplicationPackageManager.installCommon(android.net.Uri, android.app.PackageInstallObserver, int, java.lang.String, android.content.pm.VerificationParams, null)"
"android.app.ApplicationPackageManager.queryIntentServices(Intent, int)","android.app.ApplicationPackageManager.queryIntentServicesAsUser(android.content.Intent, int, int)"
"android.app.ApplicationPackageManager.queryIntentServices(Intent, int)","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.maybeAdjustApplicationInfo(ApplicationInfo)","java.lang.String.equals(java.lang.String)"
"android.app.ApplicationPackageManager.getInstrumentationInfo(ComponentName, int)","android.content.ComponentName.toString()"
"android.app.ApplicationPackageManager.getApplicationBanner(String)","android.app.ApplicationPackageManager.getApplicationBanner(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getApplicationBanner(String)","android.app.ApplicationPackageManager.getApplicationInfo(java.lang.String, int)"
"android.app.ApplicationPackageManager.queryIntentActivityOptions(ComponentName, Intent[], Intent, int)","android.content.Intent.resolveTypeIfNeeded(android.content.ContentResolver)"
"android.app.ApplicationPackageManager.queryIntentActivityOptions(ComponentName, Intent[], Intent, int)","android.app.ContextImpl.getContentResolver()"
"android.app.ApplicationPackageManager.getInstalledPackages(int, int)","android.content.pm.ParceledListSlice.getList()"
"android.app.ApplicationPackageManager.getUserBadgedIcon(Drawable, UserHandle)","android.app.ApplicationPackageManager.getBadgeResIdForUser(int)"
"android.app.ApplicationPackageManager.getUserBadgedIcon(Drawable, UserHandle)","android.os.UserHandle.getIdentifier()"
"android.app.ApplicationPackageManager.getUserBadgedIcon(Drawable, UserHandle)","android.app.ApplicationPackageManager.getDrawable(java.lang.String, int, null)"
"android.app.ApplicationPackageManager.getResourcesForApplicationAsUser(String, int)","android.app.ApplicationPackageManager.getResourcesForApplication(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getResourcesForApplicationAsUser(String, int)","android.app.ContextImpl.getResources()"
"android.app.ApplicationPackageManager.getResourcesForApplicationAsUser(String, int)","android.app.ActivityThread.getSystemContext()"
"android.app.ApplicationPackageManager.getResourcesForApplicationAsUser(String, int)","java.lang.String.equals(java.lang.String)"
"android.app.ApplicationPackageManager.configurationChanged()","android.util.ArrayMap.clear()"
"android.app.ApplicationPackageManager.getActivityBanner(ComponentName)","android.app.ApplicationPackageManager.getActivityInfo(android.content.ComponentName, int)"
"android.app.ApplicationPackageManager.getActivityBanner(ComponentName)","android.content.pm.PackageItemInfo.loadBanner(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.queryIntentContentProviders(Intent, int)","android.app.ApplicationPackageManager.queryIntentContentProvidersAsUser(android.content.Intent, int, int)"
"android.app.ApplicationPackageManager.queryIntentContentProviders(Intent, int)","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.isSignedBy(String, KeySet)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String)"
"android.app.ApplicationPackageManager.isSignedBy(String, KeySet)","com.android.internal.util.Preconditions.checkNotNull(android.content.pm.KeySet)"
"android.app.ApplicationPackageManager.getLeanbackLaunchIntentForPackage(String)","android.content.Intent.setClassName(java.lang.String, java.lang.String)"
"android.app.ApplicationPackageManager.getLeanbackLaunchIntentForPackage(String)","java.util.List.size()"
"android.app.ApplicationPackageManager.getLeanbackLaunchIntentForPackage(String)","android.content.Intent.setPackage(java.lang.String)"
"android.app.ApplicationPackageManager.getLeanbackLaunchIntentForPackage(String)","android.content.Intent.setFlags(int)"
"android.app.ApplicationPackageManager.getLeanbackLaunchIntentForPackage(String)","android.content.Intent.addCategory(java.lang.String)"
"android.app.ApplicationPackageManager.getLeanbackLaunchIntentForPackage(String)","android.app.ApplicationPackageManager.queryIntentActivities(android.content.Intent, int)"
"android.app.ApplicationPackageManager.getLeanbackLaunchIntentForPackage(String)","java.util.List.get(int)"
"android.app.ApplicationPackageManager.resolveActivity(Intent, int)","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.resolveActivity(Intent, int)","android.app.ApplicationPackageManager.resolveActivityAsUser(android.content.Intent, int, int)"
"android.app.ApplicationPackageManager.getLaunchIntentForPackage(String)","android.content.Intent.setClassName(java.lang.String, java.lang.String)"
"android.app.ApplicationPackageManager.getLaunchIntentForPackage(String)","java.util.List.size()"
"android.app.ApplicationPackageManager.getLaunchIntentForPackage(String)","android.content.Intent.setPackage(java.lang.String)"
"android.app.ApplicationPackageManager.getLaunchIntentForPackage(String)","android.content.Intent.setFlags(int)"
"android.app.ApplicationPackageManager.getLaunchIntentForPackage(String)","android.content.Intent.addCategory(java.lang.String)"
"android.app.ApplicationPackageManager.getLaunchIntentForPackage(String)","android.app.ApplicationPackageManager.queryIntentActivities(android.content.Intent, int)"
"android.app.ApplicationPackageManager.getLaunchIntentForPackage(String)","android.content.Intent.removeCategory(java.lang.String)"
"android.app.ApplicationPackageManager.getLaunchIntentForPackage(String)","java.util.List.get(int)"
"android.app.ApplicationPackageManager.getResourcesForActivity(ComponentName)","android.app.ApplicationPackageManager.getResourcesForApplication(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getResourcesForActivity(ComponentName)","android.app.ApplicationPackageManager.getActivityInfo(android.content.ComponentName, int)"
"android.app.ApplicationPackageManager.getUserBadgeForDensity(UserHandle, int)","android.app.ContextImpl.getResources()"
"android.app.ApplicationPackageManager.getUserBadgeForDensity(UserHandle, int)","android.os.UserHandle.getIdentifier()"
"android.app.ApplicationPackageManager.getUserBadgeForDensity(UserHandle, int)","android.content.pm.UserInfo.isManagedProfile()"
"android.app.ApplicationPackageManager.getUserBadgeForDensity(UserHandle, int)","android.app.ApplicationPackageManager.getUserIfProfile(int)"
"android.app.ApplicationPackageManager.getUserBadgeForDensity(UserHandle, int)","android.content.res.Resources.getDisplayMetrics()"
"android.app.ApplicationPackageManager.getKeySetByAlias(String, String)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String)"
"android.app.ApplicationPackageManager.putCachedString(ResourceName, CharSequence)","android.util.ArrayMap.put(android.app.ApplicationPackageManager.ResourceName, java.lang.ref.WeakReference<java.lang.CharSequence>)"
"android.app.ApplicationPackageManager.getApplicationLogo(String)","android.app.ApplicationPackageManager.getApplicationLogo(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getApplicationLogo(String)","android.app.ApplicationPackageManager.getApplicationInfo(java.lang.String, int)"
"android.app.ApplicationPackageManager.getBadgedDrawable(Drawable, Drawable, Rect, boolean)","android.app.ContextImpl.getResources()"
"android.app.ApplicationPackageManager.getActivityLogo(Intent)","android.app.ApplicationPackageManager.getActivityLogo(android.content.ComponentName)"
"android.app.ApplicationPackageManager.getActivityLogo(Intent)","android.content.pm.PackageItemInfo.loadLogo(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.getActivityLogo(Intent)","android.content.Intent.getComponent()"
"android.app.ApplicationPackageManager.getActivityLogo(Intent)","android.content.Intent.toUri(int)"
"android.app.ApplicationPackageManager.getActivityLogo(Intent)","android.app.ApplicationPackageManager.resolveActivity(android.content.Intent, int)"
"android.app.ApplicationPackageManager.getServiceInfo(ComponentName, int)","android.content.ComponentName.toString()"
"android.app.ApplicationPackageManager.loadItemIcon(PackageItemInfo, ApplicationInfo)","android.app.ApplicationPackageManager.loadUnbadgedItemIcon(android.content.pm.PackageItemInfo, android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getUserManager()","android.os.UserManager.get(android.app.ContextImpl)"
"android.app.ApplicationPackageManager.getActivityInfo(ComponentName, int)","android.content.ComponentName.toString()"
"android.app.ApplicationPackageManager.getApplicationLabel(ApplicationInfo)","android.content.pm.PackageItemInfo.loadLabel(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.installPackageWithVerificationAndEncryption(Uri, IPackageInstallObserver, int, String, VerificationParams, ContainerEncryptionParams)","android.app.ApplicationPackageManager.installCommon(android.net.Uri, android.content.pm.PackageManager.LegacyPackageInstallObserver, int, java.lang.String, android.content.pm.VerificationParams, android.content.pm.ContainerEncryptionParams)"
"android.app.ApplicationPackageManager.getApplicationLogo(ApplicationInfo)","android.content.pm.PackageItemInfo.loadLogo(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.isPackageAvailable(String)","android.os.RemoteException.rethrowAsRuntimeException()"
"android.app.ApplicationPackageManager.hashCode()","java.lang.String.hashCode()"
"android.app.ApplicationPackageManager.getActivityIcon(ComponentName)","android.content.pm.PackageItemInfo.loadIcon(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.getActivityIcon(ComponentName)","android.app.ApplicationPackageManager.getActivityInfo(android.content.ComponentName, int)"
"android.app.ApplicationPackageManager.installPackageWithVerificationAndEncryption(Uri, PackageInstallObserver, int, String, VerificationParams, ContainerEncryptionParams)","android.app.ApplicationPackageManager.installCommon(android.net.Uri, android.app.PackageInstallObserver, int, java.lang.String, android.content.pm.VerificationParams, android.content.pm.ContainerEncryptionParams)"
"android.app.ApplicationPackageManager.getCachedString(ResourceName)","android.util.ArrayMap.get(android.app.ApplicationPackageManager.ResourceName)"
"android.app.ApplicationPackageManager.getCachedString(ResourceName)","java.lang.ref.Reference.get()"
"android.app.ApplicationPackageManager.getCachedString(ResourceName)","android.util.ArrayMap.remove(android.app.ApplicationPackageManager.ResourceName)"
"android.app.ApplicationPackageManager.getReceiverInfo(ComponentName, int)","android.content.ComponentName.toString()"
"android.app.ApplicationPackageManager.queryIntentActivities(Intent, int)","android.app.ApplicationPackageManager.queryIntentActivitiesAsUser(android.content.Intent, int, int)"
"android.app.ApplicationPackageManager.queryIntentActivities(Intent, int)","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.installPackageWithVerification(Uri, IPackageInstallObserver, int, String, Uri, ManifestDigest, ContainerEncryptionParams)","android.app.ApplicationPackageManager.installCommon(android.net.Uri, android.content.pm.PackageManager.LegacyPackageInstallObserver, int, java.lang.String, android.content.pm.VerificationParams, android.content.pm.ContainerEncryptionParams)"
"android.app.ApplicationPackageManager.installPackage(Uri, IPackageInstallObserver, int, String)","android.app.ApplicationPackageManager.installCommon(android.net.Uri, android.content.pm.PackageManager.LegacyPackageInstallObserver, int, java.lang.String, android.content.pm.VerificationParams, null)"
"android.app.ApplicationPackageManager.resolveContentProvider(String, int)","android.app.ApplicationPackageManager.resolveContentProviderAsUser(java.lang.String, int, int)"
"android.app.ApplicationPackageManager.resolveContentProvider(String, int)","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.getXml(String, int, ApplicationInfo)","android.app.ApplicationPackageManager.getResourcesForApplication(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getXml(String, int, ApplicationInfo)","android.content.res.Resources.getXml(int)"
"android.app.ApplicationPackageManager.getXml(String, int, ApplicationInfo)","android.app.ApplicationPackageManager.getApplicationInfo(java.lang.String, int)"
"android.app.ApplicationPackageManager.loadUnbadgedItemIcon(PackageItemInfo, ApplicationInfo)","android.app.ApplicationPackageManager.getUserManager()"
"android.app.ApplicationPackageManager.loadUnbadgedItemIcon(PackageItemInfo, ApplicationInfo)","android.content.pm.PackageItemInfo.loadDefaultIcon(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.loadUnbadgedItemIcon(PackageItemInfo, ApplicationInfo)","android.os.UserManager.getUserIcon(int)"
"android.app.ApplicationPackageManager.loadUnbadgedItemIcon(PackageItemInfo, ApplicationInfo)","com.android.internal.util.UserIcons.getDefaultUserIcon(int, boolean)"
"android.app.ApplicationPackageManager.loadUnbadgedItemIcon(PackageItemInfo, ApplicationInfo)","android.app.ApplicationPackageManager.getDrawable(java.lang.String, int, android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getActivityLogo(ComponentName)","android.app.ApplicationPackageManager.getActivityInfo(android.content.ComponentName, int)"
"android.app.ApplicationPackageManager.getActivityLogo(ComponentName)","android.content.pm.PackageItemInfo.loadLogo(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.equals(Object)","java.lang.Object.getClass()"
"android.app.ApplicationPackageManager.equals(Object)","java.lang.String.equals(java.lang.String)"
"android.app.ApplicationPackageManager.getApplicationInfo(String, int)","android.app.ApplicationPackageManager.maybeAdjustApplicationInfo(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getProviderInfo(ComponentName, int)","android.content.ComponentName.toString()"
"android.app.ApplicationPackageManager.getActivityIcon(Intent)","android.content.pm.PackageItemInfo.loadIcon(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.getActivityIcon(Intent)","android.content.Intent.getComponent()"
"android.app.ApplicationPackageManager.getActivityIcon(Intent)","android.content.Intent.toUri(int)"
"android.app.ApplicationPackageManager.getActivityIcon(Intent)","android.app.ApplicationPackageManager.resolveActivity(android.content.Intent, int)"
"android.app.ApplicationPackageManager.getActivityIcon(Intent)","android.app.ApplicationPackageManager.getActivityIcon(android.content.ComponentName)"
"android.app.ApplicationPackageManager.installPackageWithVerification(Uri, PackageInstallObserver, int, String, Uri, ManifestDigest, ContainerEncryptionParams)","android.app.ApplicationPackageManager.installCommon(android.net.Uri, android.app.PackageInstallObserver, int, java.lang.String, android.content.pm.VerificationParams, android.content.pm.ContainerEncryptionParams)"
"android.app.ApplicationPackageManager.getBadgeResIdForUser(int)","android.content.pm.UserInfo.isManagedProfile()"
"android.app.ApplicationPackageManager.getBadgeResIdForUser(int)","android.app.ApplicationPackageManager.getUserIfProfile(int)"
"android.app.ApplicationPackageManager.getActivityBanner(Intent)","android.app.ApplicationPackageManager.getActivityBanner(android.content.ComponentName)"
"android.app.ApplicationPackageManager.getActivityBanner(Intent)","android.content.Intent.getComponent()"
"android.app.ApplicationPackageManager.getActivityBanner(Intent)","android.content.pm.PackageItemInfo.loadBanner(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.getActivityBanner(Intent)","android.content.Intent.toUri(int)"
"android.app.ApplicationPackageManager.getActivityBanner(Intent)","android.app.ApplicationPackageManager.resolveActivity(android.content.Intent, int)"
"android.app.ApplicationPackageManager.handlePackageBroadcast(int, String[], boolean)","android.util.ArrayMap.keyAt(int)"
"android.app.ApplicationPackageManager.handlePackageBroadcast(int, String[], boolean)","java.lang.Runtime.gc()"
"android.app.ApplicationPackageManager.handlePackageBroadcast(int, String[], boolean)","android.util.ArrayMap.removeAt(int)"
"android.app.ApplicationPackageManager.handlePackageBroadcast(int, String[], boolean)","android.app.ActivityThread.currentActivityThread()"
"android.app.ApplicationPackageManager.handlePackageBroadcast(int, String[], boolean)","java.lang.Runtime.getRuntime()"
"android.app.ApplicationPackageManager.handlePackageBroadcast(int, String[], boolean)","java.lang.String.equals(java.lang.String)"
"android.app.ApplicationPackageManager.handlePackageBroadcast(int, String[], boolean)","android.app.ActivityThread.scheduleGcIdler()"
"android.app.ApplicationPackageManager.handlePackageBroadcast(int, String[], boolean)","android.util.ArrayMap.size()"
"android.app.ApplicationPackageManager.getApplicationIcon(String)","android.app.ApplicationPackageManager.getApplicationIcon(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getApplicationIcon(String)","android.app.ApplicationPackageManager.getApplicationInfo(java.lang.String, int)"
"android.app.ApplicationPackageManager.getUserIfProfile(int)","android.app.ApplicationPackageManager.getUserManager()"
"android.app.ApplicationPackageManager.getUserIfProfile(int)","android.os.UserHandle.myUserId()"
"android.app.ApplicationPackageManager.getUserIfProfile(int)","android.os.UserManager.getProfiles(int)"
"android.app.ApplicationPackageManager.getPackagesHoldingPermissions(String[], int)","android.content.pm.ParceledListSlice.getList()"
"android.app.ApplicationPackageManager.getPackagesHoldingPermissions(String[], int)","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.getText(String, int, ApplicationInfo)","android.app.ApplicationPackageManager.getResourcesForApplication(android.content.pm.ApplicationInfo)"
"android.app.ApplicationPackageManager.getText(String, int, ApplicationInfo)","android.app.ApplicationPackageManager.putCachedString(android.app.ApplicationPackageManager.ResourceName, java.lang.CharSequence)"
"android.app.ApplicationPackageManager.getText(String, int, ApplicationInfo)","android.content.res.Resources.getText(int)"
"android.app.ApplicationPackageManager.getText(String, int, ApplicationInfo)","android.app.ApplicationPackageManager.getApplicationInfo(java.lang.String, int)"
"android.app.ApplicationPackageManager.getText(String, int, ApplicationInfo)","android.app.ApplicationPackageManager.getCachedString(android.app.ApplicationPackageManager.ResourceName)"
"android.app.ApplicationPackageManager.getResourcesForApplication(ApplicationInfo)","android.app.ActivityThread.getTopLevelResources(java.lang.String, java.lang.String[], java.lang.String[], java.lang.String[], int, null, android.app.LoadedApk)"
"android.app.ApplicationPackageManager.getResourcesForApplication(ApplicationInfo)","android.app.ContextImpl.getResources()"
"android.app.ApplicationPackageManager.getResourcesForApplication(ApplicationInfo)","android.os.Process.myUid()"
"android.app.ApplicationPackageManager.getResourcesForApplication(ApplicationInfo)","android.app.ActivityThread.getSystemContext()"
"android.app.ApplicationPackageManager.getResourcesForApplication(ApplicationInfo)","java.lang.String.equals(java.lang.String)"
"android.app.ApplicationPackageManager.installCommon(Uri, PackageInstallObserver, int, String, VerificationParams, ContainerEncryptionParams)","android.net.Uri.getPath()"
"android.app.ApplicationPackageManager.installCommon(Uri, PackageInstallObserver, int, String, VerificationParams, ContainerEncryptionParams)","java.lang.String.equals(java.lang.String)"
"android.app.ApplicationPackageManager.installCommon(Uri, PackageInstallObserver, int, String, VerificationParams, ContainerEncryptionParams)","android.net.Uri.getScheme()"
"android.app.ApplicationPackageManager.getInstalledPackages(int)","android.app.ApplicationPackageManager.getInstalledPackages(int, int)"
"android.app.ApplicationPackageManager.getInstalledPackages(int)","android.app.ContextImpl.getUserId()"
"android.app.ApplicationPackageManager.getUserBadgedDrawableForDensity(Drawable, UserHandle, Rect, int)","android.app.ApplicationPackageManager.getUserBadgeForDensity(android.os.UserHandle, int)"
"android.app.ApplicationPackageManager.getApplicationIcon(ApplicationInfo)","android.content.pm.PackageItemInfo.loadIcon(android.app.ApplicationPackageManager)"
"android.app.ApplicationPackageManager.getSigningKeySet(String)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String)"
"android.app.ApplicationPackageManager.isSignedByExactly(String, KeySet)","com.android.internal.util.Preconditions.checkNotNull(java.lang.String)"
"android.app.ApplicationPackageManager.isSignedByExactly(String, KeySet)","com.android.internal.util.Preconditions.checkNotNull(android.content.pm.KeySet)"
"android.app.ApplicationPackageManager.getUserBadgedLabel(CharSequence, UserHandle)","android.os.UserHandle.getIdentifier()"
"android.app.ApplicationPackageManager.getUserBadgedLabel(CharSequence, UserHandle)","android.content.pm.UserInfo.isManagedProfile()"
"android.app.ApplicationPackageManager.getUserBadgedLabel(CharSequence, UserHandle)","android.app.ApplicationPackageManager.getUserIfProfile(int)"
"android.hardware.camera2.params.StreamConfiguration.hashCode()","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int, int, int, int)"
"android.os.Debug.setFieldsOn(Class)","android.os.Debug.setFieldsOn(java.lang.Class<?>, boolean)"
"android.os.Debug.getCallers(int, int)","java.lang.StringBuffer.toString()"
"android.os.Debug.getCallers(int, int)","android.os.Debug.getCaller(java.lang.StackTraceElement[], int)"
"android.os.Debug.getCallers(int, int)","java.lang.Thread.currentThread()"
"android.os.Debug.getCallers(int, int)","java.lang.Thread.getStackTrace()"
"android.os.Debug.getCallers(int, int)","java.lang.StringBuffer.append(java.lang.String)"
"android.os.Debug.writeToParcel(Parcel, int)","android.os.Parcel.writeIntArray(int[])"
"android.os.Debug.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.os.Debug.getCaller()","android.os.Debug.getCaller(java.lang.StackTraceElement[], int)"
"android.os.Debug.getCaller()","java.lang.Thread.currentThread()"
"android.os.Debug.getCaller()","java.lang.Thread.getStackTrace()"
"android.os.Debug.dumpService(String, FileDescriptor, String[])","android.os.ServiceManager.getService(java.lang.String)"
"android.os.Debug.dumpService(String, FileDescriptor, String[])","android.os.IBinder.dump(java.io.FileDescriptor, java.lang.String[])"
"android.os.Debug.getCallers(int)","java.lang.StringBuffer.toString()"
"android.os.Debug.getCallers(int)","android.os.Debug.getCaller(java.lang.StackTraceElement[], int)"
"android.os.Debug.getCallers(int)","java.lang.Thread.currentThread()"
"android.os.Debug.getCallers(int)","java.lang.Thread.getStackTrace()"
"android.os.Debug.getCallers(int)","java.lang.StringBuffer.append(java.lang.String)"
"android.os.Debug.modifyFieldIfSet(Field, TypedProperties, String)","java.lang.reflect.Field.set(null, java.lang.Object)"
"android.os.Debug.modifyFieldIfSet(Field, TypedProperties, String)","java.lang.reflect.Field.getType()"
"android.os.Debug.modifyFieldIfSet(Field, TypedProperties, String)","com.android.internal.util.TypedProperties.get(java.lang.String)"
"android.os.Debug.modifyFieldIfSet(Field, TypedProperties, String)","com.android.internal.util.TypedProperties.getStringInfo(java.lang.String)"
"android.os.Debug.modifyFieldIfSet(Field, TypedProperties, String)","android.os.Debug.fieldTypeMatches(java.lang.reflect.Field, java.lang.Class<?>)"
"android.os.Debug.modifyFieldIfSet(Field, TypedProperties, String)","java.lang.Object.getClass()"
"android.os.Debug.modifyFieldIfSet(Field, TypedProperties, String)","java.lang.reflect.Field.set(null, null)"
"android.os.Debug.stopNativeTracing()","java.io.PrintWriter.close()"
"android.os.Debug.stopNativeTracing()","java.io.PrintWriter.println(java.lang.String)"
"android.os.Debug.setFieldsOn(Class, boolean)","java.lang.reflect.Modifier.isFinal(int)"
"android.os.Debug.setFieldsOn(Class, boolean)","android.os.Debug.modifyFieldIfSet(java.lang.reflect.Field, com.android.internal.util.TypedProperties, java.lang.String)"
"android.os.Debug.setFieldsOn(Class, boolean)","java.lang.reflect.Field.getName()"
"android.os.Debug.setFieldsOn(Class, boolean)","java.lang.reflect.Field.getModifiers()"
"android.os.Debug.setFieldsOn(Class, boolean)","java.lang.Class.getName()"
"android.os.Debug.setFieldsOn(Class, boolean)","java.lang.Class.getDeclaredFields()"
"android.os.Debug.setFieldsOn(Class, boolean)","java.lang.reflect.Field.getAnnotation(java.lang.Class<android.os.Debug.DebugProperty>)"
"android.os.Debug.setFieldsOn(Class, boolean)","java.lang.reflect.Modifier.isStatic(int)"
"android.os.Debug.waitForDebugger()","java.io.PrintStream.println(java.lang.String)"
"android.os.Debug.waitForDebugger()","android.os.Debug.isDebuggerConnected()"
"android.os.Debug.waitForDebugger()","java.lang.Thread.sleep(int)"
"android.os.Debug.readFromParcel(Parcel)","android.os.Parcel.createIntArray()"
"android.os.Debug.readFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.os.Debug.fixTraceName(String)","java.lang.String.charAt(int)"
"android.os.Debug.fixTraceName(String)","java.lang.String.endsWith(java.lang.String)"
"android.os.Debug.startNativeTracing()","java.io.PrintWriter.close()"
"android.os.Debug.startNativeTracing()","java.io.PrintWriter.println(java.lang.String)"
"android.os.Debug.getCallers(int, String)","java.lang.StringBuffer.toString()"
"android.os.Debug.getCallers(int, String)","android.os.Debug.getCaller(java.lang.StackTraceElement[], int)"
"android.os.Debug.getCallers(int, String)","java.lang.Thread.currentThread()"
"android.os.Debug.getCallers(int, String)","java.lang.Thread.getStackTrace()"
"android.os.Debug.getCallers(int, String)","java.lang.StringBuffer.append(java.lang.String)"
"android.os.Debug.startMethodTracing(String)","android.os.Debug.startMethodTracing(java.lang.String, int, int)"
"android.os.Debug.fieldTypeMatches(Field, Class)","java.lang.reflect.Field.getType()"
"android.os.Debug.fieldTypeMatches(Field, Class)","java.lang.reflect.Field.get(null)"
"android.os.Debug.fieldTypeMatches(Field, Class)","java.lang.Class.getField(java.lang.String)"
"android.os.Debug.startMethodTracing(String, int)","android.os.Debug.startMethodTracing(java.lang.String, int, int)"
"android.os.Debug.getCaller(StackTraceElement[], int)","java.lang.StackTraceElement.getClassName()"
"android.os.Debug.getCaller(StackTraceElement[], int)","java.lang.StackTraceElement.getMethodName()"
"android.os.Debug.getCaller(StackTraceElement[], int)","java.lang.StackTraceElement.getLineNumber()"
"android.os.FactoryTest.isLongPressOnPowerOffEnabled()","android.os.SystemProperties.getInt(java.lang.String, int)"
"android.os.FactoryTest.getMode()","android.os.SystemProperties.getInt(java.lang.String, int)"
"android.text.method.AllCapsTransformationMethod.getTransformation(CharSequence, View)","java.lang.CharSequence.toString()"
"android.text.method.AllCapsTransformationMethod.getTransformation(CharSequence, View)","java.lang.String.toUpperCase(java.util.Locale)"
"com.android.internal.widget.ResolverDrawerLayout.isMoving()","android.widget.OverScroller.isFinished()"
"com.android.internal.widget.ResolverDrawerLayout.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"com.android.internal.widget.ResolverDrawerLayout.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"com.android.internal.widget.ResolverDrawerLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"com.android.internal.widget.ResolverDrawerLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setScrollable(boolean)"
"com.android.internal.widget.ResolverDrawerLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"com.android.internal.widget.ResolverDrawerLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.addAction(int)"
"com.android.internal.widget.ResolverDrawerLayout.onLayout(boolean, int, int, int, int)","android.view.View.getVisibility()"
"com.android.internal.widget.ResolverDrawerLayout.onLayout(boolean, int, int, int, int)","android.view.View.getLayoutParams()"
"com.android.internal.widget.ResolverDrawerLayout.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredWidth()"
"com.android.internal.widget.ResolverDrawerLayout.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredHeight()"
"com.android.internal.widget.ResolverDrawerLayout.onLayout(boolean, int, int, int, int)","android.view.View.layout(int, int, int, int)"
"com.android.internal.widget.ResolverDrawerLayout.smoothScrollTo(int, float)","java.lang.Math.round(float)"
"com.android.internal.widget.ResolverDrawerLayout.smoothScrollTo(int, float)","java.lang.Math.abs(int)"
"com.android.internal.widget.ResolverDrawerLayout.smoothScrollTo(int, float)","java.lang.Math.abs(float)"
"com.android.internal.widget.ResolverDrawerLayout.smoothScrollTo(int, float)","android.widget.OverScroller.startScroll(int, int, int, int, int)"
"com.android.internal.widget.ResolverDrawerLayout.smoothScrollTo(int, float)","java.lang.Math.min(float, float)"
"com.android.internal.widget.ResolverDrawerLayout.smoothScrollTo(int, float)","java.lang.Math.min(int, int)"
"com.android.internal.widget.ResolverDrawerLayout.resetTouch()","android.view.VelocityTracker.clear()"
"com.android.internal.widget.ResolverDrawerLayout.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"com.android.internal.widget.ResolverDrawerLayout.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"com.android.internal.widget.ResolverDrawerLayout.abortAnimation()","android.widget.OverScroller.abortAnimation()"
"com.android.internal.widget.ResolverDrawerLayout.dispatchOnDismissed()","com.android.internal.widget.ResolverDrawerLayout.OnDismissedListener.onDismissed()"
"com.android.internal.widget.ResolverDrawerLayout.computeScroll()","android.widget.OverScroller.isFinished()"
"com.android.internal.widget.ResolverDrawerLayout.computeScroll()","android.widget.OverScroller.computeScrollOffset()"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.MotionEvent.getY()"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.MotionEvent.getX(int)"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","java.lang.Math.abs(float)"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.MotionEvent.getY(int)"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.MotionEvent.getActionIndex()"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.MotionEvent.getX()"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.VelocityTracker.getYVelocity(int)"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.VelocityTracker.computeCurrentVelocity(int)"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.MotionEvent.findPointerIndex(int)"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","java.lang.Math.max(float, float)"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","java.lang.Math.min(float, float)"
"com.android.internal.widget.ResolverDrawerLayout.onTouchEvent(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"com.android.internal.widget.ResolverDrawerLayout.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getX(int)"
"com.android.internal.widget.ResolverDrawerLayout.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getY(int)"
"com.android.internal.widget.ResolverDrawerLayout.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getActionIndex()"
"com.android.internal.widget.ResolverDrawerLayout.onSecondaryPointerUp(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"com.android.internal.widget.ResolverDrawerLayout.isChildUnder(View, float, float)","android.view.View.getX()"
"com.android.internal.widget.ResolverDrawerLayout.isChildUnder(View, float, float)","android.view.View.getWidth()"
"com.android.internal.widget.ResolverDrawerLayout.isChildUnder(View, float, float)","android.view.View.getHeight()"
"com.android.internal.widget.ResolverDrawerLayout.isChildUnder(View, float, float)","android.view.View.getY()"
"com.android.internal.widget.ResolverDrawerLayout.isDescendantClipped(View)","android.view.View.getVisibility()"
"com.android.internal.widget.ResolverDrawerLayout.isDescendantClipped(View)","android.view.View.getTop()"
"com.android.internal.widget.ResolverDrawerLayout.isDescendantClipped(View)","android.view.View.getParent()"
"com.android.internal.widget.ResolverDrawerLayout.isDescendantClipped(View)","java.lang.Math.min(int, int)"
"com.android.internal.widget.ResolverDrawerLayout.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getY()"
"com.android.internal.widget.ResolverDrawerLayout.onInterceptTouchEvent(MotionEvent)","android.view.VelocityTracker.clear()"
"com.android.internal.widget.ResolverDrawerLayout.onInterceptTouchEvent(MotionEvent)","java.lang.Math.abs(float)"
"com.android.internal.widget.ResolverDrawerLayout.onInterceptTouchEvent(MotionEvent)","java.lang.Math.max(float, float)"
"com.android.internal.widget.ResolverDrawerLayout.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"com.android.internal.widget.ResolverDrawerLayout.onInterceptTouchEvent(MotionEvent)","java.lang.Math.min(float, float)"
"com.android.internal.widget.ResolverDrawerLayout.onInterceptTouchEvent(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"com.android.internal.widget.ResolverDrawerLayout.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getX()"
"com.android.internal.widget.ResolverDrawerLayout.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getPointerId(int)"
"com.android.internal.widget.ResolverDrawerLayout.performDrag(float)","android.view.View.getLayoutParams()"
"com.android.internal.widget.ResolverDrawerLayout.performDrag(float)","java.lang.Math.max(int, float)"
"com.android.internal.widget.ResolverDrawerLayout.performDrag(float)","java.lang.Math.min(float, int)"
"com.android.internal.widget.ResolverDrawerLayout.performDrag(float)","android.view.View.offsetTopAndBottom(int)"
"com.android.internal.widget.ResolverDrawerLayout.findListChildUnder(float, float)","android.view.View.getX()"
"com.android.internal.widget.ResolverDrawerLayout.findListChildUnder(float, float)","android.view.View.getY()"
"com.android.internal.widget.ResolverDrawerLayout.onNestedFling(View, float, float, boolean)","java.lang.Math.abs(float)"
"com.android.internal.widget.ResolverDrawerLayout.onStopNestedScroll(View)","android.widget.OverScroller.isFinished()"
"com.android.internal.widget.ResolverDrawerLayout.onMeasure(int, int)","android.view.View.getVisibility()"
"com.android.internal.widget.ResolverDrawerLayout.onMeasure(int, int)","android.view.View.getLayoutParams()"
"com.android.internal.widget.ResolverDrawerLayout.onMeasure(int, int)","android.view.View.getMeasuredHeight()"
"com.android.internal.widget.ResolverDrawerLayout.onMeasure(int, int)","java.lang.Math.min(float, int)"
"com.android.internal.widget.ResolverDrawerLayout.onMeasure(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"com.android.internal.widget.ResolverDrawerLayout.onMeasure(int, int)","java.lang.Math.max(int, int)"
"com.android.internal.widget.ResolverDrawerLayout.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"com.android.internal.widget.ResolverDrawerLayout.onMeasure(int, int)","java.lang.Math.min(int, int)"
"com.android.internal.widget.ResolverDrawerLayout.distanceInfluenceForSnapDuration(float)","java.lang.Math.sin(float)"
"com.android.internal.util.Preconditions.checkArgumentFinite(float, String)","java.lang.Float.isNaN(float)"
"com.android.internal.util.Preconditions.checkArgumentFinite(float, String)","java.lang.Float.isInfinite(float)"
"com.android.internal.util.Preconditions.checkArgumentInRange(int, int, int, String)","java.lang.String.format(java.lang.String, java.lang.String, int, int)"
"com.android.internal.util.Preconditions.checkArrayElementsNotNull(T[], String)","java.lang.String.format(java.lang.String, java.lang.String, int)"
"com.android.internal.util.Preconditions.checkCollectionElementsNotNull(Collection, String)","java.lang.String.format(java.lang.String, java.lang.String, long)"
"com.android.internal.util.Preconditions.checkNotNull(T, Object)","java.lang.String.valueOf(java.lang.Object)"
"com.android.internal.util.Preconditions.checkFlagsArgument(int, int)","java.lang.Integer.toHexString(int)"
"com.android.internal.util.Preconditions.checkArgumentInRange(float, float, float, String)","java.lang.Float.isNaN(float)"
"com.android.internal.util.Preconditions.checkArgumentInRange(float, float, float, String)","java.lang.String.format(java.lang.String, java.lang.String, float, float)"
"com.android.internal.util.Preconditions.checkArrayElementsInRange(float[], float, float, String)","java.lang.Float.isNaN(float)"
"com.android.internal.util.Preconditions.checkArrayElementsInRange(float[], float, float, String)","com.android.internal.util.Preconditions.checkNotNull(float[], java.lang.String)"
"com.android.internal.util.Preconditions.checkArrayElementsInRange(float[], float, float, String)","java.lang.String.format(java.lang.String, java.lang.String, int, float, float)"
"com.android.internal.util.Preconditions.checkCollectionNotEmpty(Collection, String)","java.util.Collection.isEmpty()"
"android.hardware.display.WifiDisplaySessionInfo.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.hardware.display.WifiDisplaySessionInfo.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.display.WifiDisplaySessionInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.hardware.display.WifiDisplaySessionInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.hdmi.HdmiPortInfo.toString()","java.lang.StringBuffer.append(int)"
"android.hardware.hdmi.HdmiPortInfo.toString()","java.lang.StringBuffer.toString()"
"android.hardware.hdmi.HdmiPortInfo.toString()","java.lang.String.format(java.lang.String, int)"
"android.hardware.hdmi.HdmiPortInfo.toString()","java.lang.StringBuffer.append(java.lang.String)"
"android.hardware.hdmi.HdmiPortInfo.toString()","java.lang.StringBuffer.append(boolean)"
"android.hardware.hdmi.HdmiPortInfo.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.hdmi.HdmiPortInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.view.animation.Animation.getTransformation(long, Transformation, float)","android.view.animation.Animation.getTransformation(long, android.view.animation.Transformation)"
"android.view.animation.Animation.computeDurationHint()","android.view.animation.Animation.getStartOffset()"
"android.view.animation.Animation.computeDurationHint()","android.view.animation.Animation.getDuration()"
"android.view.animation.Animation.computeDurationHint()","android.view.animation.Animation.getRepeatCount()"
"android.view.animation.Animation.getTransformation(long, Transformation)","android.view.animation.Animation.fireAnimationStart()"
"android.view.animation.Animation.getTransformation(long, Transformation)","android.view.animation.Animation.getStartOffset()"
"android.view.animation.Animation.getTransformation(long, Transformation)","java.lang.Math.max(float, float)"
"android.view.animation.Animation.getTransformation(long, Transformation)","android.view.animation.Animation.fireAnimationEnd()"
"android.view.animation.Animation.getTransformation(long, Transformation)","android.view.animation.Animation.fireAnimationRepeat()"
"android.view.animation.Animation.getTransformation(long, Transformation)","android.animation.TimeInterpolator.getInterpolation(float)"
"android.view.animation.Animation.getTransformation(long, Transformation)","java.lang.Math.min(float, float)"
"android.view.animation.Animation.getTransformation(long, Transformation)","android.view.animation.Animation.applyTransformation(float, android.view.animation.Transformation)"
"android.view.animation.Animation.detach()","android.view.animation.Animation.fireAnimationEnd()"
"android.view.animation.Animation.startNow()","android.view.animation.Animation.setStartTime(long)"
"android.view.animation.Animation.startNow()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.view.animation.Animation.setListenerHandler(Handler)","android.view.animation.Animation.AnimationListener.onAnimationStart(android.view.animation.Animation)"
"android.view.animation.Animation.setListenerHandler(Handler)","android.view.animation.Animation.AnimationListener.onAnimationEnd(android.view.animation.Animation)"
"android.view.animation.Animation.setListenerHandler(Handler)","android.view.animation.Animation.AnimationListener.onAnimationRepeat(android.view.animation.Animation)"
"android.view.animation.Animation.clone()","java.lang.Object.clone()"
"android.view.animation.Animation.fireAnimationEnd()","android.view.animation.Animation.AnimationListener.onAnimationEnd(android.view.animation.Animation)"
"android.view.animation.Animation.fireAnimationEnd()","android.os.Handler.postAtFrontOfQueue(java.lang.Runnable)"
"android.view.animation.Animation.getInvalidateRegion(int, int, int, int, RectF, Transformation)","android.view.animation.Transformation.set(android.view.animation.Transformation)"
"android.view.animation.Animation.fireAnimationRepeat()","android.view.animation.Animation.AnimationListener.onAnimationRepeat(android.view.animation.Animation)"
"android.view.animation.Animation.fireAnimationRepeat()","android.os.Handler.postAtFrontOfQueue(java.lang.Runnable)"
"android.view.animation.Animation.parseValue(TypedValue)","android.util.TypedValue.complexToFloat(int)"
"android.view.animation.Animation.parseValue(TypedValue)","android.util.TypedValue.getFloat()"
"android.view.animation.Animation.fireAnimationStart()","android.view.animation.Animation.AnimationListener.onAnimationStart(android.view.animation.Animation)"
"android.view.animation.Animation.fireAnimationStart()","android.os.Handler.postAtFrontOfQueue(java.lang.Runnable)"
"android.view.animation.Animation.setInterpolator(Context, int)","android.view.animation.Animation.setInterpolator(android.view.animation.Interpolator)"
"android.view.animation.Animation.setInterpolator(Context, int)","android.view.animation.AnimationUtils.loadInterpolator(android.content.Context, int)"
"android.view.animation.Animation.cancel()","android.view.animation.Animation.fireAnimationEnd()"
"android.view.animation.Animation.initialize(int, int, int, int)","android.view.animation.Animation.reset()"
"android.view.animation.Animation.initializeInvalidateRegion(int, int, int, int)","android.animation.TimeInterpolator.getInterpolation(float)"
"android.view.animation.Animation.initializeInvalidateRegion(int, int, int, int)","android.view.animation.Animation.applyTransformation(float, android.view.animation.Transformation)"
"android.view.animation.Animation.start()","android.view.animation.Animation.setStartTime(int)"
"android.view.animation.Animation.reset()","android.view.animation.Transformation.clear()"
"android.view.animation.Animation.finalize()","java.lang.Object.finalize()"
"android.hardware.display.DisplayManagerGlobal.getInstance()","android.os.ServiceManager.getService(java.lang.String)"
"android.hardware.display.DisplayManagerGlobal.onStopped()","android.os.Handler.sendEmptyMessage(int)"
"android.hardware.display.DisplayManagerGlobal.onResumed()","android.os.Handler.sendEmptyMessage(int)"
"android.hardware.display.DisplayManagerGlobal.handleMessage(Message)","android.hardware.display.VirtualDisplay.Callback.onStopped()"
"android.hardware.display.DisplayManagerGlobal.handleMessage(Message)","android.hardware.display.VirtualDisplay.Callback.onPaused()"
"android.hardware.display.DisplayManagerGlobal.handleMessage(Message)","android.hardware.display.VirtualDisplay.Callback.onResumed()"
"android.hardware.display.DisplayManagerGlobal.clearEvents()","android.os.Handler.removeCallbacksAndMessages(null)"
"android.hardware.display.DisplayManagerGlobal.findDisplayListenerLocked(DisplayListener)","java.util.ArrayList.size()"
"android.hardware.display.DisplayManagerGlobal.findDisplayListenerLocked(DisplayListener)","java.util.ArrayList.get(int)"
"android.hardware.display.DisplayManagerGlobal.onDisplayEvent(int, int)","android.hardware.display.DisplayManagerGlobal.handleDisplayEvent(int, int)"
"android.hardware.display.DisplayManagerGlobal.onPaused()","android.os.Handler.sendEmptyMessage(int)"
"android.hardware.display.DisplayManagerGlobal.registerDisplayListener(DisplayListener, Handler)","android.hardware.display.DisplayManagerGlobal.findDisplayListenerLocked(android.hardware.display.DisplayManager.DisplayListener)"
"android.hardware.display.DisplayManagerGlobal.registerDisplayListener(DisplayListener, Handler)","android.hardware.display.DisplayManagerGlobal.registerCallbackIfNeededLocked()"
"android.hardware.display.DisplayManagerGlobal.registerDisplayListener(DisplayListener, Handler)","java.util.ArrayList.add(android.hardware.display.DisplayManagerGlobal.DisplayListenerDelegate)"
"android.hardware.display.DisplayManagerGlobal.handleDisplayEvent(int, int)","android.util.SparseArray.remove(int)"
"android.hardware.display.DisplayManagerGlobal.handleDisplayEvent(int, int)","java.util.ArrayList.size()"
"android.hardware.display.DisplayManagerGlobal.handleDisplayEvent(int, int)","android.hardware.display.DisplayManagerGlobal.DisplayListenerDelegate.sendDisplayEvent(int, int)"
"android.hardware.display.DisplayManagerGlobal.handleDisplayEvent(int, int)","java.util.ArrayList.get(int)"
"android.hardware.display.DisplayManagerGlobal.getRealDisplay(int)","android.hardware.display.DisplayManagerGlobal.getCompatibleDisplay(int, android.view.DisplayAdjustments)"
"android.hardware.display.DisplayManagerGlobal.getDisplayInfo(int)","android.util.SparseArray.put(int, android.view.DisplayInfo)"
"android.hardware.display.DisplayManagerGlobal.getDisplayInfo(int)","android.util.SparseArray.get(int)"
"android.hardware.display.DisplayManagerGlobal.getDisplayInfo(int)","android.hardware.display.DisplayManagerGlobal.registerCallbackIfNeededLocked()"
"android.hardware.display.DisplayManagerGlobal.sendDisplayEvent(int, int)","android.os.Handler.sendMessage(android.os.Message)"
"android.hardware.display.DisplayManagerGlobal.sendDisplayEvent(int, int)","android.os.Handler.obtainMessage(int, int, int)"
"android.hardware.display.DisplayManagerGlobal.createVirtualDisplay(Context, MediaProjection, String, int, int, int, Surface, int, VirtualDisplay.Callback, Handler)","android.hardware.display.DisplayManagerGlobal.getRealDisplay(int)"
"android.hardware.display.DisplayManagerGlobal.createVirtualDisplay(Context, MediaProjection, String, int, int, int, Surface, int, VirtualDisplay.Callback, Handler)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.hardware.display.DisplayManagerGlobal.getDisplayIds()","android.hardware.display.DisplayManagerGlobal.registerCallbackIfNeededLocked()"
"android.hardware.display.DisplayManagerGlobal.getCompatibleDisplay(int, DisplayAdjustments)","android.hardware.display.DisplayManagerGlobal.getDisplayInfo(int)"
"android.hardware.display.DisplayManagerGlobal.getRealDisplay(int, IBinder)","android.hardware.display.DisplayManagerGlobal.getCompatibleDisplay(int, android.view.DisplayAdjustments)"
"android.hardware.display.DisplayManagerGlobal.unregisterDisplayListener(DisplayListener)","android.hardware.display.DisplayManagerGlobal.findDisplayListenerLocked(android.hardware.display.DisplayManager.DisplayListener)"
"android.hardware.display.DisplayManagerGlobal.unregisterDisplayListener(DisplayListener)","android.hardware.display.DisplayManagerGlobal.DisplayListenerDelegate.clearEvents()"
"android.hardware.display.DisplayManagerGlobal.unregisterDisplayListener(DisplayListener)","java.util.ArrayList.remove(int)"
"android.hardware.display.DisplayManagerGlobal.unregisterDisplayListener(DisplayListener)","java.util.ArrayList.get(int)"
"android.hardware.display.DisplayManagerGlobal.startWifiDisplayScan()","android.hardware.display.DisplayManagerGlobal.registerCallbackIfNeededLocked()"
"android.text.style.LeadingMarginSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.camera2.dispatch.DuckTypingDispatcher.dispatch(Method, Object[])","java.lang.reflect.Method.getName()"
"android.hardware.camera2.dispatch.DuckTypingDispatcher.dispatch(Method, Object[])","android.hardware.camera2.dispatch.MethodNameInvoker.invoke(java.lang.String, java.lang.Object[])"
"android.text.TextLine.recycle(TextLine)","android.text.SpanSet.recycle()"
"android.text.TextLine.ascent(int)","android.text.style.MetricAffectingSpan.updateMeasureState(android.text.TextPaint)"
"android.text.TextLine.ascent(int)","android.text.TextPaint.set(android.text.TextPaint)"
"android.text.TextLine.ascent(int)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.MetricAffectingSpan>)"
"android.text.TextLine.set(TextPaint, CharSequence, int, int, int, Directions, boolean, TabStops)","android.text.TextUtils.getChars(java.lang.CharSequence, int, int, char[], int)"
"android.text.TextLine.set(TextPaint, CharSequence, int, int, int, Directions, boolean, TabStops)","android.text.SpanSet.hasSpansIntersecting(int, int)"
"android.text.TextLine.set(TextPaint, CharSequence, int, int, int, Directions, boolean, TabStops)","android.text.SpanSet.getNextTransition(int, int)"
"android.text.TextLine.set(TextPaint, CharSequence, int, int, int, Directions, boolean, TabStops)","com.android.internal.util.ArrayUtils.newUnpaddedCharArray(int)"
"android.text.TextLine.set(TextPaint, CharSequence, int, int, int, Directions, boolean, TabStops)","android.text.SpanSet.init(android.text.Spanned, int, int)"
"android.text.TextLine.getOffsetBeforeAfter(int, int, int, boolean, int, boolean)","android.text.style.MetricAffectingSpan.updateMeasureState(android.text.TextPaint)"
"android.text.TextLine.getOffsetBeforeAfter(int, int, int, boolean, int, boolean)","android.text.TextUtils.removeEmptySpans(android.text.style.MetricAffectingSpan[], android.text.Spanned, java.lang.Class<android.text.style.MetricAffectingSpan>)"
"android.text.TextLine.getOffsetBeforeAfter(int, int, int, boolean, int, boolean)","android.text.TextPaint.set(android.text.TextPaint)"
"android.text.TextLine.getOffsetBeforeAfter(int, int, int, boolean, int, boolean)","android.text.Spanned.nextSpanTransition(int, int, java.lang.Class<android.text.style.MetricAffectingSpan>)"
"android.text.TextLine.getOffsetBeforeAfter(int, int, int, boolean, int, boolean)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.style.MetricAffectingSpan>)"
"android.text.TextLine.getOffsetBeforeAfter(int, int, int, boolean, int, boolean)","android.text.TextUtils.getOffsetAfter(java.lang.CharSequence, int)"
"android.text.TextLine.getOffsetBeforeAfter(int, int, int, boolean, int, boolean)","android.text.TextUtils.getOffsetBefore(java.lang.CharSequence, int)"
"android.text.TextLine.handleRun(int, int, int, boolean, Canvas, float, int, int, int, FontMetricsInt, boolean)","android.text.style.CharacterStyle.updateDrawState(android.text.TextPaint)"
"android.text.TextLine.handleRun(int, int, int, boolean, Canvas, float, int, int, int, FontMetricsInt, boolean)","android.text.SpanSet.getNextTransition(int, int)"
"android.text.TextLine.handleRun(int, int, int, boolean, Canvas, float, int, int, int, FontMetricsInt, boolean)","android.text.TextPaint.set(android.text.TextPaint)"
"android.text.TextLine.handleRun(int, int, int, boolean, Canvas, float, int, int, int, FontMetricsInt, boolean)","android.text.SpanSet.init(android.text.Spanned, int, int)"
"android.text.TextLine.handleRun(int, int, int, boolean, Canvas, float, int, int, int, FontMetricsInt, boolean)","java.lang.Math.min(int, int)"
"android.text.TextLine.draw(Canvas, float, int, int, int)","android.text.TextLine.ascent(int)"
"android.text.TextLine.draw(Canvas, float, int, int, int)","java.lang.Character.codePointAt(char[], int)"
"android.text.TextLine.draw(Canvas, float, int, int, int)","android.text.TextLine.nextTab(float)"
"android.text.TextLine.draw(Canvas, float, int, int, int)","android.emoji.EmojiFactory.getBitmapFromAndroidPua(int)"
"android.text.TextLine.nextTab(float)","android.text.Layout.TabStops.nextDefaultStop(float, int)"
"android.text.TextLine.nextTab(float)","android.text.Layout.TabStops.nextTab(float)"
"android.text.TextLine.getOffsetToLeftRightOf(int, boolean)","android.text.TextLine.getOffsetBeforeAfter(int, int, int, boolean, int, boolean)"
"android.text.TextLine.measure(int, boolean, FontMetricsInt)","android.text.TextLine.ascent(int)"
"android.text.TextLine.measure(int, boolean, FontMetricsInt)","java.lang.Character.codePointAt(char[], int)"
"android.text.TextLine.measure(int, boolean, FontMetricsInt)","android.text.TextLine.nextTab(float)"
"android.text.TextLine.measure(int, boolean, FontMetricsInt)","android.emoji.EmojiFactory.getBitmapFromAndroidPua(int)"
"android.net.http.ErrorStrings.getString(int, Context)","android.content.Context.getText(int)"
"android.net.http.ErrorStrings.getString(int, Context)","java.lang.CharSequence.toString()"
"android.net.http.ErrorStrings.getString(int, Context)","android.net.http.ErrorStrings.getResource(int)"
"android.util.Log.d(String, String, Throwable)","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.util.Log.d(String, String, Throwable)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.println(int, String, String)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.i(String, String)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.w(String, String)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.getStackTraceString(Throwable)","java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
"android.util.Log.getStackTraceString(Throwable)","java.lang.Throwable.getCause()"
"android.util.Log.getStackTraceString(Throwable)","java.io.PrintWriter.flush()"
"android.util.Log.getStackTraceString(Throwable)","java.io.StringWriter.toString()"
"android.util.Log.i(String, String, Throwable)","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.util.Log.i(String, String, Throwable)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.w(String, Throwable)","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.util.Log.w(String, Throwable)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.wtf(int, String, String, Throwable, boolean, boolean)","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.util.Log.wtf(int, String, String, Throwable, boolean, boolean)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.wtf(int, String, String, Throwable, boolean, boolean)","android.util.Log.TerribleFailureHandler.onTerribleFailure(java.lang.String, android.util.Log.TerribleFailure, boolean)"
"android.util.Log.v(String, String)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.d(String, String)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.e(String, String, Throwable)","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.util.Log.e(String, String, Throwable)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.e(String, String)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.wtfQuiet(int, String, String, boolean)","android.util.Log.TerribleFailureHandler.onTerribleFailure(java.lang.String, android.util.Log.TerribleFailure, boolean)"
"android.util.Log.w(String, String, Throwable)","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.util.Log.w(String, String, Throwable)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.util.Log.v(String, String, Throwable)","android.util.Log.getStackTraceString(java.lang.Throwable)"
"android.util.Log.v(String, String, Throwable)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"android.widget.Scroller.extendDuration(int)","android.widget.Scroller.timePassed()"
"android.widget.Scroller.getInterpolation(float)","android.widget.Scroller.ViscousFluidInterpolator.viscousFluid(float)"
"android.widget.Scroller.viscousFluid(float)","java.lang.Math.exp(float)"
"android.widget.Scroller.startScroll(int, int, int, int)","android.widget.Scroller.startScroll(int, int, int, int, int)"
"android.widget.Scroller.timePassed()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.widget.Scroller.getSplineFlingDistance(float)","android.widget.Scroller.getSplineDeceleration(float)"
"android.widget.Scroller.getSplineFlingDistance(float)","java.lang.Math.exp(double)"
"android.widget.Scroller.isScrollingInDirection(float, float)","java.lang.Math.signum(int)"
"android.widget.Scroller.isScrollingInDirection(float, float)","java.lang.Math.signum(float)"
"android.widget.Scroller.getSplineDeceleration(float)","java.lang.Math.log(float)"
"android.widget.Scroller.getSplineDeceleration(float)","java.lang.Math.abs(float)"
"android.widget.Scroller.startScroll(int, int, int, int, int)","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.widget.Scroller.getSplineFlingDuration(float)","android.widget.Scroller.getSplineDeceleration(float)"
"android.widget.Scroller.getSplineFlingDuration(float)","java.lang.Math.exp(double)"
"android.widget.Scroller.getCurrVelocity()","android.widget.Scroller.timePassed()"
"android.widget.Scroller.computeScrollOffset()","java.lang.Math.round(float)"
"android.widget.Scroller.computeScrollOffset()","android.animation.TimeInterpolator.getInterpolation(float)"
"android.widget.Scroller.computeScrollOffset()","java.lang.Math.max(int, int)"
"android.widget.Scroller.computeScrollOffset()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.widget.Scroller.computeScrollOffset()","java.lang.Math.min(int, int)"
"android.widget.Scroller.setFriction(float)","android.widget.Scroller.computeDeceleration(float)"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","java.lang.Math.round(double)"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","android.util.FloatMath.sqrt(float)"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","java.lang.Math.signum(int)"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","android.widget.Scroller.getCurrVelocity()"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","android.util.FloatMath.sqrt(int)"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","android.widget.Scroller.getSplineFlingDuration(float)"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","java.lang.Math.signum(float)"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","android.widget.Scroller.getSplineFlingDistance(float)"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","java.lang.Math.max(int, int)"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.widget.Scroller.fling(int, int, int, int, int, int, int, int)","java.lang.Math.min(int, int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.calculateElementMarshalSize(Marshaler, Object, int)","android.hardware.camera2.marshal.Marshaler.calculateMarshalSize(TElem)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.calculateElementMarshalSize(Marshaler, Object, int)","java.lang.reflect.Array.get(java.lang.Object, int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.copyListToArray(ArrayList, Object)","java.util.ArrayList.toArray(T[])"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.isTypeMappingSupported(TypeReference, int)","android.hardware.camera2.utils.TypeReference.getRawType()"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.isTypeMappingSupported(TypeReference, int)","java.lang.Class.isArray()"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.marshal(T, ByteBuffer)","android.hardware.camera2.marshal.impl.MarshalQueryableArray.MarshalerArray.marshalArrayElement(android.hardware.camera2.marshal.Marshaler<?>, java.nio.ByteBuffer, T, int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.marshal(T, ByteBuffer)","java.lang.reflect.Array.getLength(T)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","android.hardware.camera2.marshal.Marshaler.getNativeSize()"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","java.util.ArrayList.size()"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","java.nio.Buffer.remaining()"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","java.util.ArrayList.add(java.lang.Object)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","java.lang.Class.cast(java.lang.Object)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","android.hardware.camera2.marshal.Marshaler.unmarshal(java.nio.ByteBuffer)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","java.lang.reflect.Array.newInstance(java.lang.Class<?>, int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","android.hardware.camera2.marshal.impl.MarshalQueryableArray.MarshalerArray.copyListToArray(java.util.ArrayList<java.lang.Object>, java.lang.Object)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","java.nio.Buffer.hasRemaining()"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.unmarshal(ByteBuffer)","java.lang.reflect.Array.set(java.lang.Object, int, java.lang.Object)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.marshalArrayElement(Marshaler, ByteBuffer, Object, int)","android.hardware.camera2.marshal.Marshaler.marshal(TElem, java.nio.ByteBuffer)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.marshalArrayElement(Marshaler, ByteBuffer, Object, int)","java.lang.reflect.Array.get(java.lang.Object, int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.calculateMarshalSize(T)","android.hardware.camera2.marshal.Marshaler.getNativeSize()"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.calculateMarshalSize(T)","android.hardware.camera2.marshal.impl.MarshalQueryableArray.MarshalerArray.calculateElementMarshalSize(android.hardware.camera2.marshal.Marshaler<?>, T, int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableArray.calculateMarshalSize(T)","java.lang.reflect.Array.getLength(T)"
"com.android.internal.widget.multiwaveview.PointCloud.makePointCloud(float, float)","java.lang.Math.round(float)"
"com.android.internal.widget.multiwaveview.PointCloud.makePointCloud(float, float)","android.util.FloatMath.cos(float)"
"com.android.internal.widget.multiwaveview.PointCloud.makePointCloud(float, float)","java.util.ArrayList.add(com.android.internal.widget.multiwaveview.PointCloud.Point)"
"com.android.internal.widget.multiwaveview.PointCloud.makePointCloud(float, float)","java.util.ArrayList.clear()"
"com.android.internal.widget.multiwaveview.PointCloud.makePointCloud(float, float)","android.util.FloatMath.sin(float)"
"com.android.internal.widget.multiwaveview.PointCloud.getAlphaForPoint(Point)","android.util.FloatMath.cos(float)"
"com.android.internal.widget.multiwaveview.PointCloud.getAlphaForPoint(Point)","java.lang.Math.pow(float, float)"
"com.android.internal.widget.multiwaveview.PointCloud.getAlphaForPoint(Point)","com.android.internal.widget.multiwaveview.PointCloud.max(float, float)"
"com.android.internal.widget.multiwaveview.PointCloud.getAlphaForPoint(Point)","com.android.internal.widget.multiwaveview.PointCloud.hypot(float, float)"
"com.android.internal.widget.multiwaveview.PointCloud.draw(Canvas)","java.util.ArrayList.size()"
"com.android.internal.widget.multiwaveview.PointCloud.draw(Canvas)","com.android.internal.widget.multiwaveview.PointCloud.interp(float, float, float)"
"com.android.internal.widget.multiwaveview.PointCloud.draw(Canvas)","com.android.internal.widget.multiwaveview.PointCloud.getAlphaForPoint(com.android.internal.widget.multiwaveview.PointCloud.Point)"
"com.android.internal.widget.multiwaveview.PointCloud.draw(Canvas)","java.util.ArrayList.get(int)"
"com.android.internal.widget.multiwaveview.PointCloud.hypot(float, float)","android.util.FloatMath.sqrt(float)"
"android.content.ContentUris.withAppendedId(Uri, long)","android.net.Uri.Builder.build()"
"android.content.ContentUris.withAppendedId(Uri, long)","android.net.Uri.buildUpon()"
"android.content.ContentUris.withAppendedId(Uri, long)","android.content.ContentUris.appendId(android.net.Uri.Builder, long)"
"android.content.ContentUris.appendId(Uri.Builder, long)","java.lang.String.valueOf(long)"
"android.content.ContentUris.appendId(Uri.Builder, long)","android.net.Uri.Builder.appendEncodedPath(java.lang.String)"
"android.content.ContentUris.parseId(Uri)","android.net.Uri.getLastPathSegment()"
"android.content.ContentUris.parseId(Uri)","java.lang.Long.parseLong(java.lang.String)"
"android.hardware.soundtrigger.SoundTrigger.writeToParcel(Parcel, int)","android.os.Parcel.writeBlob(byte[])"
"android.hardware.soundtrigger.SoundTrigger.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.soundtrigger.SoundTrigger.createFromParcel(Parcel)","android.hardware.soundtrigger.SoundTrigger.SoundModelEvent.fromParcel(android.os.Parcel)"
"android.hardware.soundtrigger.SoundTrigger.fromParcel(Parcel)","android.os.Parcel.readBlob()"
"android.hardware.soundtrigger.SoundTrigger.fromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.soundtrigger.SoundTrigger.equals(Object)","java.util.Arrays.equals(byte[], byte[])"
"android.hardware.soundtrigger.SoundTrigger.equals(Object)","java.lang.Object.getClass()"
"android.hardware.soundtrigger.SoundTrigger.hashCode()","java.util.Arrays.hashCode(byte[])"
"android.content.SyncResult.toString()","java.lang.StringBuilder.append(android.content.SyncStats)"
"android.content.SyncResult.toString()","java.lang.StringBuilder.append(boolean)"
"android.content.SyncResult.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.content.SyncResult.toString()","java.lang.StringBuilder.toString()"
"android.content.SyncResult.toString()","java.lang.StringBuilder.append(long)"
"android.content.SyncResult.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.content.SyncResult.writeToParcel(Parcel, int)","android.content.SyncStats.writeToParcel(android.os.Parcel, int)"
"android.content.SyncResult.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.SyncResult.hasError()","android.content.SyncResult.hasHardError()"
"android.content.SyncResult.hasError()","android.content.SyncResult.hasSoftError()"
"android.content.SyncResult.toDebugString()","android.content.SyncResult.hasHardError()"
"android.content.SyncResult.toDebugString()","java.lang.StringBuffer.toString()"
"android.content.SyncResult.toDebugString()","java.lang.StringBuffer.append(long)"
"android.content.SyncResult.toDebugString()","java.lang.StringBuffer.append(java.lang.String)"
"android.content.SyncResult.toDebugString()","android.content.SyncResult.hasSoftError()"
"android.content.SyncResult.clear()","android.content.SyncStats.clear()"
"android.database.BulkCursorDescriptor.writeToParcel(Parcel, int)","android.os.Parcel.writeStringArray(java.lang.String[])"
"android.database.BulkCursorDescriptor.writeToParcel(Parcel, int)","android.os.Parcel.writeStrongBinder(android.os.IBinder)"
"android.database.BulkCursorDescriptor.writeToParcel(Parcel, int)","android.os.IInterface.asBinder()"
"android.database.BulkCursorDescriptor.writeToParcel(Parcel, int)","android.database.CursorWindow.writeToParcel(android.os.Parcel, int)"
"android.database.BulkCursorDescriptor.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.database.BulkCursorDescriptor.createFromParcel(Parcel)","android.database.BulkCursorDescriptor.readFromParcel(android.os.Parcel)"
"android.database.BulkCursorDescriptor.readFromParcel(Parcel)","android.database.BulkCursorNative.asInterface(android.os.IBinder)"
"android.database.BulkCursorDescriptor.readFromParcel(Parcel)","android.os.Parcel.readStrongBinder()"
"android.database.BulkCursorDescriptor.readFromParcel(Parcel)","android.os.Parcel.readStringArray()"
"android.database.BulkCursorDescriptor.readFromParcel(Parcel)","android.os.Parcelable.Creator.createFromParcel(android.os.Parcel)"
"android.database.BulkCursorDescriptor.readFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.widget.AutoCompleteTextView.getDropDownBackground()","android.widget.ListPopupWindow.getBackground()"
"android.widget.AutoCompleteTextView.setDropDownAnimationStyle(int)","android.widget.ListPopupWindow.setAnimationStyle(int)"
"android.widget.AutoCompleteTextView.getDropDownAnimationStyle()","android.widget.ListPopupWindow.getAnimationStyle()"
"android.widget.AutoCompleteTextView.isPopupShowing()","android.widget.ListPopupWindow.isShowing()"
"android.widget.AutoCompleteTextView.setForceIgnoreOutsideTouch(boolean)","android.widget.ListPopupWindow.setForceIgnoreOutsideTouch(boolean)"
"android.widget.AutoCompleteTextView.onKeyUp(int, KeyEvent)","android.view.KeyEvent.hasNoModifiers()"
"android.widget.AutoCompleteTextView.onKeyUp(int, KeyEvent)","android.widget.ListPopupWindow.onKeyUp(int, android.view.KeyEvent)"
"android.widget.AutoCompleteTextView.dismissDropDown()","android.widget.ListPopupWindow.dismiss()"
"android.widget.AutoCompleteTextView.dismissDropDown()","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.AutoCompleteTextView.performValidation()","android.widget.AutoCompleteTextView.Validator.isValid(java.lang.CharSequence)"
"android.widget.AutoCompleteTextView.performValidation()","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.widget.AutoCompleteTextView.setListSelection(int)","android.widget.ListPopupWindow.setSelection(int)"
"android.widget.AutoCompleteTextView.doAfterTextChanged()","android.widget.Filter.filter(null)"
"android.widget.AutoCompleteTextView.doAfterTextChanged()","android.widget.ListPopupWindow.isDropDownAlwaysVisible()"
"android.widget.AutoCompleteTextView.getListSelection()","android.widget.ListPopupWindow.getSelectedItemPosition()"
"android.widget.AutoCompleteTextView.onWindowFocusChanged(boolean)","android.widget.ListPopupWindow.isDropDownAlwaysVisible()"
"android.widget.AutoCompleteTextView.replaceText(CharSequence)","android.text.Selection.setSelection(android.text.Editable, int)"
"android.widget.AutoCompleteTextView.replaceText(CharSequence)","java.lang.CharSequence.length()"
"android.widget.AutoCompleteTextView.setAdapter(T)","android.widget.ListPopupWindow.setAdapter(android.widget.ListAdapter)"
"android.widget.AutoCompleteTextView.setAdapter(T)","android.widget.Filterable.getFilter()"
"android.widget.AutoCompleteTextView.setAdapter(T)","android.widget.Adapter.unregisterDataSetObserver(android.widget.AutoCompleteTextView.PopupDataSetObserver)"
"android.widget.AutoCompleteTextView.setAdapter(T)","android.widget.Adapter.registerDataSetObserver(android.widget.AutoCompleteTextView.PopupDataSetObserver)"
"android.widget.AutoCompleteTextView.onClick(View)","android.view.View.OnClickListener.onClick(android.view.View)"
"android.widget.AutoCompleteTextView.onFocusChanged(boolean, int, Rect)","android.widget.ListPopupWindow.isDropDownAlwaysVisible()"
"android.widget.AutoCompleteTextView.onCommitCompletion(CompletionInfo)","android.widget.ListPopupWindow.performItemClick(int)"
"android.widget.AutoCompleteTextView.onCommitCompletion(CompletionInfo)","android.view.inputmethod.CompletionInfo.getPosition()"
"android.widget.AutoCompleteTextView.onChanged()","java.lang.ref.Reference.get()"
"android.widget.AutoCompleteTextView.setDropDownAlwaysVisible(boolean)","android.widget.ListPopupWindow.setDropDownAlwaysVisible(boolean)"
"android.widget.AutoCompleteTextView.convertSelectionToString(Object)","android.widget.Filter.convertResultToString(java.lang.Object)"
"android.widget.AutoCompleteTextView.isInputMethodNotNeeded()","android.widget.ListPopupWindow.getInputMethodMode()"
"android.widget.AutoCompleteTextView.getDropDownVerticalOffset()","android.widget.ListPopupWindow.getVerticalOffset()"
"android.widget.AutoCompleteTextView.onDisplayHint(int)","android.widget.ListPopupWindow.isDropDownAlwaysVisible()"
"android.widget.AutoCompleteTextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.isTracking()"
"android.widget.AutoCompleteTextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"android.widget.AutoCompleteTextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.isCanceled()"
"android.widget.AutoCompleteTextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.DispatcherState.startTracking(android.view.KeyEvent, android.widget.AutoCompleteTextView)"
"android.widget.AutoCompleteTextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.DispatcherState.handleUpEvent(android.view.KeyEvent)"
"android.widget.AutoCompleteTextView.onKeyPreIme(int, KeyEvent)","android.widget.ListPopupWindow.isDropDownAlwaysVisible()"
"android.widget.AutoCompleteTextView.onKeyPreIme(int, KeyEvent)","android.view.KeyEvent.getAction()"
"android.widget.AutoCompleteTextView.setDropDownVerticalOffset(int)","android.widget.ListPopupWindow.setVerticalOffset(int)"
"android.widget.AutoCompleteTextView.setDropDownAnchor(int)","android.widget.ListPopupWindow.setAnchorView(null)"
"android.widget.AutoCompleteTextView.updateDropDownForFilter(int)","android.widget.ListPopupWindow.isDropDownAlwaysVisible()"
"android.widget.AutoCompleteTextView.getDropDownHorizontalOffset()","android.widget.ListPopupWindow.getHorizontalOffset()"
"android.widget.AutoCompleteTextView.isDropDownAlwaysVisible()","android.widget.ListPopupWindow.isDropDownAlwaysVisible()"
"android.widget.AutoCompleteTextView.buildImeCompletions()","android.widget.ListAdapter.isEnabled(int)"
"android.widget.AutoCompleteTextView.buildImeCompletions()","android.widget.Adapter.getCount()"
"android.widget.AutoCompleteTextView.buildImeCompletions()","java.lang.System.arraycopy(android.view.inputmethod.CompletionInfo[], int, android.view.inputmethod.CompletionInfo[], int, int)"
"android.widget.AutoCompleteTextView.buildImeCompletions()","android.widget.Adapter.getItemId(int)"
"android.widget.AutoCompleteTextView.buildImeCompletions()","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.AutoCompleteTextView.buildImeCompletions()","android.widget.Adapter.getItem(int)"
"android.widget.AutoCompleteTextView.buildImeCompletions()","java.lang.Math.min(int, int)"
"android.widget.AutoCompleteTextView.ensureImeVisible(boolean)","android.widget.ListPopupWindow.setInputMethodMode(int)"
"android.widget.AutoCompleteTextView.ensureImeVisible(boolean)","android.widget.ListPopupWindow.isDropDownAlwaysVisible()"
"android.widget.AutoCompleteTextView.onKeyDown(int, KeyEvent)","android.view.KeyEvent.hasNoModifiers()"
"android.widget.AutoCompleteTextView.onKeyDown(int, KeyEvent)","android.widget.ListPopupWindow.onKeyDown(int, android.view.KeyEvent)"
"android.widget.AutoCompleteTextView.showDropDownAfterLayout()","android.widget.ListPopupWindow.postShow()"
"android.widget.AutoCompleteTextView.clearListSelection()","android.widget.ListPopupWindow.clearListSelection()"
"android.widget.AutoCompleteTextView.setDropDownHeight(int)","android.widget.ListPopupWindow.setHeight(int)"
"android.widget.AutoCompleteTextView.getDropDownWidth()","android.widget.ListPopupWindow.getWidth()"
"android.widget.AutoCompleteTextView.showDropDown()","android.widget.ListPopupWindow.setInputMethodMode(int)"
"android.widget.AutoCompleteTextView.showDropDown()","android.widget.ListPopupWindow.getAnchorView()"
"android.widget.AutoCompleteTextView.showDropDown()","android.widget.ListPopupWindow.setListItemExpandMax(int)"
"android.widget.AutoCompleteTextView.showDropDown()","android.widget.ListPopupWindow.show()"
"android.widget.AutoCompleteTextView.setCompletionHint(CharSequence)","android.widget.ListPopupWindow.setPromptView(null)"
"android.widget.AutoCompleteTextView.getDropDownHeight()","android.widget.ListPopupWindow.getHeight()"
"android.widget.AutoCompleteTextView.run()","java.lang.ref.Reference.get()"
"android.widget.AutoCompleteTextView.setOnDismissListener(OnDismissListener)","android.widget.AutoCompleteTextView.OnDismissListener.onDismiss()"
"android.widget.AutoCompleteTextView.setOnDismissListener(OnDismissListener)","android.widget.ListPopupWindow.setOnDismissListener(android.widget.PopupWindow.OnDismissListener)"
"android.widget.AutoCompleteTextView.performCompletion(View, int, long)","android.widget.ListPopupWindow.getSelectedItemId()"
"android.widget.AutoCompleteTextView.performCompletion(View, int, long)","android.widget.ListPopupWindow.getSelectedItemPosition()"
"android.widget.AutoCompleteTextView.performCompletion(View, int, long)","android.widget.ListPopupWindow.getSelectedView()"
"android.widget.AutoCompleteTextView.performCompletion(View, int, long)","android.widget.ListPopupWindow.getSelectedItem()"
"android.widget.AutoCompleteTextView.performCompletion(View, int, long)","android.widget.ListPopupWindow.isDropDownAlwaysVisible()"
"android.widget.AutoCompleteTextView.performCompletion(View, int, long)","android.widget.Adapter.getItem(int)"
"android.widget.AutoCompleteTextView.setDropDownHorizontalOffset(int)","android.widget.ListPopupWindow.setHorizontalOffset(int)"
"android.widget.AutoCompleteTextView.setDropDownWidth(int)","android.widget.ListPopupWindow.setWidth(int)"
"android.hardware.camera2.utils.ParamsUtils.createRect(Size)","com.android.internal.util.Preconditions.checkNotNull(android.util.Size, java.lang.String)"
"android.hardware.camera2.utils.ParamsUtils.createRect(Size)","android.util.Size.getWidth()"
"android.hardware.camera2.utils.ParamsUtils.createRect(Size)","android.util.Size.getHeight()"
"android.hardware.camera2.utils.ParamsUtils.getOrDefault(CaptureRequest, CaptureRequest.Key, T)","android.hardware.camera2.CaptureRequest.get(android.hardware.camera2.CaptureRequest.Key<T>)"
"android.hardware.camera2.utils.ParamsUtils.getOrDefault(CaptureRequest, CaptureRequest.Key, T)","com.android.internal.util.Preconditions.checkNotNull(T, java.lang.String)"
"android.hardware.camera2.utils.ParamsUtils.getOrDefault(CaptureRequest, CaptureRequest.Key, T)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.camera2.CaptureRequest.Key<T>, java.lang.String)"
"android.hardware.camera2.utils.ParamsUtils.getOrDefault(CaptureRequest, CaptureRequest.Key, T)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.camera2.CaptureRequest, java.lang.String)"
"android.hardware.camera2.utils.ParamsUtils.createRational(float)","java.lang.Float.isNaN(float)"
"android.net.NetworkStatsHistory.recordHistory(NetworkStatsHistory, long, long)","android.net.NetworkStatsHistory.recordData(long, long, android.net.NetworkStats.Entry)"
"android.net.NetworkStatsHistory.recordHistory(NetworkStatsHistory, long, long)","android.net.NetworkStatsHistory.getLong(long[], int, long)"
"android.net.NetworkStatsHistory.getValues(int, Entry)","android.net.NetworkStatsHistory.getLong(long[], int, long)"
"android.net.NetworkStatsHistory.writeToStream(DataOutputStream)","java.io.DataOutputStream.writeLong(long)"
"android.net.NetworkStatsHistory.writeToStream(DataOutputStream)","android.net.NetworkStatsHistory.DataStreamUtils.writeVarLongArray(java.io.DataOutputStream, long[], int)"
"android.net.NetworkStatsHistory.writeToStream(DataOutputStream)","java.io.DataOutputStream.writeInt(int)"
"android.net.NetworkStatsHistory.randomLong(Random, long, long)","java.util.Random.nextFloat()"
"android.net.NetworkStatsHistory.estimateResizeBuckets(long)","android.net.NetworkStatsHistory.size()"
"android.net.NetworkStatsHistory.estimateResizeBuckets(long)","android.net.NetworkStatsHistory.getBucketDuration()"
"android.net.NetworkStatsHistory.getValues(long, long, long, Entry)","android.net.NetworkStatsHistory.getIndexAfter(long)"
"android.net.NetworkStatsHistory.readFullLongArray(DataInputStream)","java.io.DataInputStream.readInt()"
"android.net.NetworkStatsHistory.readFullLongArray(DataInputStream)","java.io.DataInputStream.readLong()"
"android.net.NetworkStatsHistory.recordEntireHistory(NetworkStatsHistory)","android.net.NetworkStatsHistory.recordHistory(android.net.NetworkStatsHistory, long, long)"
"android.net.NetworkStatsHistory.recordData(long, long, NetworkStats.Entry)","android.net.NetworkStats.Entry.isNegative()"
"android.net.NetworkStatsHistory.recordData(long, long, NetworkStats.Entry)","android.net.NetworkStatsHistory.ensureBuckets(long, long)"
"android.net.NetworkStatsHistory.recordData(long, long, NetworkStats.Entry)","android.net.NetworkStatsHistory.addLong(long[], int, long)"
"android.net.NetworkStatsHistory.recordData(long, long, NetworkStats.Entry)","java.lang.Math.min(long, long)"
"android.net.NetworkStatsHistory.recordData(long, long, NetworkStats.Entry)","android.net.NetworkStatsHistory.getIndexAfter(long)"
"android.net.NetworkStatsHistory.recordData(long, long, NetworkStats.Entry)","java.lang.Math.max(long, long)"
"android.net.NetworkStatsHistory.recordData(long, long, NetworkStats.Entry)","android.net.NetworkStats.Entry.isEmpty()"
"android.net.NetworkStatsHistory.dump(IndentingPrintWriter, boolean)","java.io.PrintWriter.print(int)"
"android.net.NetworkStatsHistory.dump(IndentingPrintWriter, boolean)","java.io.PrintWriter.print(long)"
"android.net.NetworkStatsHistory.dump(IndentingPrintWriter, boolean)","java.io.PrintWriter.println(java.lang.String)"
"android.net.NetworkStatsHistory.dump(IndentingPrintWriter, boolean)","com.android.internal.util.IndentingPrintWriter.increaseIndent()"
"android.net.NetworkStatsHistory.dump(IndentingPrintWriter, boolean)","java.io.PrintWriter.println()"
"android.net.NetworkStatsHistory.dump(IndentingPrintWriter, boolean)","java.io.PrintWriter.println(long)"
"android.net.NetworkStatsHistory.dump(IndentingPrintWriter, boolean)","java.lang.Math.max(int, int)"
"android.net.NetworkStatsHistory.dump(IndentingPrintWriter, boolean)","com.android.internal.util.IndentingPrintWriter.decreaseIndent()"
"android.net.NetworkStatsHistory.dump(IndentingPrintWriter, boolean)","java.io.PrintWriter.print(java.lang.String)"
"android.net.NetworkStatsHistory.generateRandom(long, long, long, long, long, long, long, Random)","android.net.NetworkStatsHistory.recordData(long, long, android.net.NetworkStats.Entry)"
"android.net.NetworkStatsHistory.generateRandom(long, long, long, long, long, long, long, Random)","android.net.NetworkStatsHistory.ensureBuckets(long, long)"
"android.net.NetworkStatsHistory.generateRandom(long, long, long, long, long, long, long, Random)","android.net.NetworkStatsHistory.randomLong(java.util.Random, int, long)"
"android.net.NetworkStatsHistory.generateRandom(long, long, long, long, long, long, long, Random)","android.net.NetworkStatsHistory.randomLong(java.util.Random, long, long)"
"android.net.NetworkStatsHistory.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.net.NetworkStatsHistory.writeToParcel(Parcel, int)","android.net.NetworkStatsHistory.ParcelUtils.writeLongArray(android.os.Parcel, long[], int)"
"android.net.NetworkStatsHistory.insertBucket(int, long)","android.net.NetworkStatsHistory.setLong(long[], int, long)"
"android.net.NetworkStatsHistory.insertBucket(int, long)","java.util.Arrays.copyOf(long[], int)"
"android.net.NetworkStatsHistory.insertBucket(int, long)","java.lang.Math.max(int, int)"
"android.net.NetworkStatsHistory.insertBucket(int, long)","java.lang.System.arraycopy(long[], int, long[], int, int)"
"android.net.NetworkStatsHistory.ensureBuckets(long, long)","java.util.Arrays.binarySearch(long[], int, int, long)"
"android.net.NetworkStatsHistory.ensureBuckets(long, long)","android.net.NetworkStatsHistory.insertBucket(int, long)"
"android.net.NetworkStatsHistory.readVarLong(DataInputStream)","java.io.DataInputStream.readByte()"
"android.net.NetworkStatsHistory.toString()","java.io.CharArrayWriter.toString()"
"android.net.NetworkStatsHistory.toString()","android.net.NetworkStatsHistory.dump(com.android.internal.util.IndentingPrintWriter, boolean)"
"android.net.NetworkStatsHistory.getIndexAfter(long)","java.util.Arrays.binarySearch(long[], int, int, long)"
"android.net.NetworkStatsHistory.getIndexAfter(long)","android.util.MathUtils.constrain(int, int, int)"
"android.net.NetworkStatsHistory.getIndexBefore(long)","java.util.Arrays.binarySearch(long[], int, int, long)"
"android.net.NetworkStatsHistory.getIndexBefore(long)","android.util.MathUtils.constrain(int, int, int)"
"android.net.NetworkStatsHistory.getValues(long, long, Entry)","android.net.NetworkStatsHistory.getValues(long, long, long, android.net.NetworkStatsHistory.Entry)"
"android.net.NetworkStatsHistory.removeBucketsBefore(long)","java.util.Arrays.copyOfRange(long[], int, int)"
"android.net.NetworkStatsHistory.generateRandom(long, long, long)","android.net.NetworkStatsHistory.generateRandom(long, long, long, long, long, long, long, java.util.Random)"
"android.net.NetworkStatsHistory.generateRandom(long, long, long)","java.util.Random.nextFloat()"
"android.net.NetworkStatsHistory.intersects(long, long)","android.net.NetworkStatsHistory.getStart()"
"android.net.NetworkStatsHistory.intersects(long, long)","android.net.NetworkStatsHistory.getEnd()"
"android.net.NetworkStatsHistory.dumpCheckin(PrintWriter)","java.io.PrintWriter.print(long)"
"android.net.NetworkStatsHistory.dumpCheckin(PrintWriter)","java.io.PrintWriter.print(char)"
"android.net.NetworkStatsHistory.dumpCheckin(PrintWriter)","java.io.PrintWriter.println()"
"android.net.NetworkStatsHistory.dumpCheckin(PrintWriter)","java.io.PrintWriter.print(java.lang.String)"
"android.net.NetworkStatsHistory.writeLongArray(Parcel, long[], int)","android.os.Parcel.writeLong(long)"
"android.net.NetworkStatsHistory.writeLongArray(Parcel, long[], int)","android.os.Parcel.writeInt(int)"
"android.net.NetworkStatsHistory.readLongArray(Parcel)","android.os.Parcel.readLong()"
"android.net.NetworkStatsHistory.readLongArray(Parcel)","android.os.Parcel.readInt()"
"android.net.NetworkStatsHistory.recordData(long, long, long, long)","android.net.NetworkStatsHistory.recordData(long, long, android.net.NetworkStats.Entry)"
"android.net.NetworkStatsHistory.writeVarLongArray(DataOutputStream, long[], int)","android.net.NetworkStatsHistory.DataStreamUtils.writeVarLong(java.io.DataOutputStream, long)"
"android.net.NetworkStatsHistory.writeVarLongArray(DataOutputStream, long[], int)","java.io.DataOutputStream.writeInt(int)"
"android.net.NetworkStatsHistory.writeVarLong(DataOutputStream, long)","java.io.DataOutputStream.writeByte(int)"
"android.net.NetworkStatsHistory.readVarLongArray(DataInputStream)","java.io.DataInputStream.readInt()"
"android.net.NetworkStatsHistory.readVarLongArray(DataInputStream)","android.net.NetworkStatsHistory.DataStreamUtils.readVarLong(java.io.DataInputStream)"
"android.net.http.SslCertificate.saveState(SslCertificate)","android.net.http.SslCertificate.getIssuedBy()"
"android.net.http.SslCertificate.saveState(SslCertificate)","android.net.http.SslCertificate.getValidNotAfter()"
"android.net.http.SslCertificate.saveState(SslCertificate)","java.security.cert.Certificate.getEncoded()"
"android.net.http.SslCertificate.saveState(SslCertificate)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.net.http.SslCertificate.saveState(SslCertificate)","android.net.http.SslCertificate.getIssuedTo()"
"android.net.http.SslCertificate.saveState(SslCertificate)","android.net.http.SslCertificate.getValidNotBefore()"
"android.net.http.SslCertificate.saveState(SslCertificate)","android.net.http.SslCertificate.DName.getDName()"
"android.net.http.SslCertificate.saveState(SslCertificate)","android.os.Bundle.putByteArray(java.lang.String, byte[])"
"android.net.http.SslCertificate.parseDate(String)","java.text.DateFormat.parse(java.lang.String)"
"android.net.http.SslCertificate.restoreState(Bundle)","android.net.http.SslCertificate.parseDate(java.lang.String)"
"android.net.http.SslCertificate.restoreState(Bundle)","android.os.BaseBundle.getString(java.lang.String)"
"android.net.http.SslCertificate.restoreState(Bundle)","java.security.cert.CertificateFactory.getInstance(java.lang.String)"
"android.net.http.SslCertificate.restoreState(Bundle)","java.security.cert.CertificateFactory.generateCertificate(java.io.ByteArrayInputStream)"
"android.net.http.SslCertificate.restoreState(Bundle)","android.os.Bundle.getByteArray(java.lang.String)"
"android.net.http.SslCertificate.cloneDate(Date)","java.util.Date.clone()"
"android.net.http.SslCertificate.formatCertificateDate(Context, Date)","android.text.format.DateFormat.getDateFormat(android.content.Context)"
"android.net.http.SslCertificate.formatCertificateDate(Context, Date)","java.text.DateFormat.format(java.util.Date)"
"android.net.http.SslCertificate.toString()","android.net.http.SslCertificate.DName.getDName()"
"android.net.http.SslCertificate.getValidNotAfter()","android.net.http.SslCertificate.formatDate(java.util.Date)"
"android.net.http.SslCertificate.getValidNotBeforeDate()","android.net.http.SslCertificate.cloneDate(java.util.Date)"
"android.net.http.SslCertificate.getValidNotBefore()","android.net.http.SslCertificate.formatDate(java.util.Date)"
"android.net.http.SslCertificate.fingerprint(byte[])","java.lang.StringBuilder.toString()"
"android.net.http.SslCertificate.fingerprint(byte[])","java.lang.StringBuilder.append(char)"
"android.net.http.SslCertificate.formatDate(Date)","java.text.DateFormat.format(java.util.Date)"
"android.net.http.SslCertificate.getDigest(X509Certificate, String)","java.security.cert.Certificate.getEncoded()"
"android.net.http.SslCertificate.getDigest(X509Certificate, String)","java.security.MessageDigest.digest(byte[])"
"android.net.http.SslCertificate.getDigest(X509Certificate, String)","android.net.http.SslCertificate.fingerprint(byte[])"
"android.net.http.SslCertificate.getDigest(X509Certificate, String)","java.security.MessageDigest.getInstance(java.lang.String)"
"android.net.http.SslCertificate.getSerialNumber(X509Certificate)","java.math.BigInteger.toByteArray()"
"android.net.http.SslCertificate.getSerialNumber(X509Certificate)","android.net.http.SslCertificate.fingerprint(byte[])"
"android.net.http.SslCertificate.getSerialNumber(X509Certificate)","java.security.cert.X509Certificate.getSerialNumber()"
"android.net.http.SslCertificate.inflateCertificateView(Context)","android.net.http.SslCertificate.getIssuedBy()"
"android.net.http.SslCertificate.inflateCertificateView(Context)","android.net.http.SslCertificate.getValidNotBeforeDate()"
"android.net.http.SslCertificate.inflateCertificateView(Context)","android.net.http.SslCertificate.getIssuedTo()"
"android.net.http.SslCertificate.inflateCertificateView(Context)","android.view.LayoutInflater.from(android.content.Context)"
"android.net.http.SslCertificate.inflateCertificateView(Context)","android.net.http.SslCertificate.formatCertificateDate(android.content.Context, java.util.Date)"
"android.net.http.SslCertificate.inflateCertificateView(Context)","android.net.http.SslCertificate.getValidNotAfterDate()"
"android.net.http.SslCertificate.getValidNotAfterDate()","android.net.http.SslCertificate.cloneDate(java.util.Date)"
"android.preference.VolumePreference.onKey(View, int, KeyEvent)","android.view.KeyEvent.getAction()"
"android.preference.VolumePreference.onBindDialogView(View)","android.view.View.setOnKeyListener(android.preference.VolumePreference)"
"android.preference.VolumePreference.onBindDialogView(View)","android.preference.SeekBarDialogPreference.onBindDialogView(android.view.View)"
"android.preference.VolumePreference.onBindDialogView(View)","android.view.View.setFocusableInTouchMode(boolean)"
"android.preference.VolumePreference.onRestoreInstanceState(Parcelable)","android.view.AbsSavedState.getSuperState()"
"android.preference.VolumePreference.onRestoreInstanceState(Parcelable)","android.preference.DialogPreference.onRestoreInstanceState(android.os.Parcelable)"
"android.preference.VolumePreference.onRestoreInstanceState(Parcelable)","java.lang.Object.getClass()"
"android.preference.VolumePreference.onRestoreInstanceState(Parcelable)","java.lang.Object.equals(java.lang.Class<android.preference.VolumePreference.SavedState>)"
"android.preference.VolumePreference.onSaveInstanceState()","android.preference.DialogPreference.onSaveInstanceState()"
"android.preference.VolumePreference.onDialogClosed(boolean)","android.preference.DialogPreference.onDialogClosed(boolean)"
"android.preference.VolumePreference.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"android.preference.VolumePreference.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.preference.VolumePreference.cleanup()","android.view.View.setOnKeyListener(null)"
"android.preference.VolumePreference.cleanup()","android.app.Dialog.isShowing()"
"android.bluetooth.BluetoothServerSocket.setServiceName(String)","android.bluetooth.BluetoothSocket.setServiceName(java.lang.String)"
"android.bluetooth.BluetoothServerSocket.accept()","android.bluetooth.BluetoothServerSocket.accept(int)"
"android.bluetooth.BluetoothServerSocket.close()","android.os.Message.sendToTarget()"
"android.bluetooth.BluetoothServerSocket.close()","android.bluetooth.BluetoothSocket.close()"
"android.bluetooth.BluetoothServerSocket.close()","android.os.Handler.obtainMessage(int)"
"android.bluetooth.BluetoothServerSocket.accept(int)","android.bluetooth.BluetoothSocket.accept(int)"
"android.speech.tts.PlaybackSynthesisCallback.done()","android.speech.tts.SynthesisPlaybackQueueItem.done()"
"android.speech.tts.PlaybackSynthesisCallback.done()","android.speech.tts.AbstractSynthesisCallback.errorCodeOnStop()"
"android.speech.tts.PlaybackSynthesisCallback.done()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnError(int)"
"android.speech.tts.PlaybackSynthesisCallback.done()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnSuccess()"
"android.speech.tts.PlaybackSynthesisCallback.done()","android.speech.tts.AbstractEventLogger.onEngineComplete()"
"android.speech.tts.PlaybackSynthesisCallback.done()","android.speech.tts.SynthesisPlaybackQueueItem.stop(int)"
"android.speech.tts.PlaybackSynthesisCallback.audioAvailable(byte[], int, int)","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"android.speech.tts.PlaybackSynthesisCallback.audioAvailable(byte[], int, int)","android.speech.tts.PlaybackSynthesisCallback.getMaxBufferSize()"
"android.speech.tts.PlaybackSynthesisCallback.audioAvailable(byte[], int, int)","android.speech.tts.AbstractSynthesisCallback.errorCodeOnStop()"
"android.speech.tts.PlaybackSynthesisCallback.audioAvailable(byte[], int, int)","android.speech.tts.AbstractEventLogger.onEngineDataReceived()"
"android.speech.tts.PlaybackSynthesisCallback.audioAvailable(byte[], int, int)","android.speech.tts.SynthesisPlaybackQueueItem.put(byte[])"
"android.speech.tts.PlaybackSynthesisCallback.stop()","android.speech.tts.TextToSpeechService.UtteranceProgressDispatcher.dispatchOnStop()"
"android.speech.tts.PlaybackSynthesisCallback.stop()","android.speech.tts.AbstractEventLogger.onCompleted(int)"
"android.speech.tts.PlaybackSynthesisCallback.stop()","android.speech.tts.SynthesisPlaybackQueueItem.stop(int)"
"android.speech.tts.PlaybackSynthesisCallback.start(int, int, int)","android.speech.tts.BlockingAudioTrack.getChannelConfig(int)"
"android.speech.tts.PlaybackSynthesisCallback.start(int, int, int)","android.speech.tts.AudioPlaybackHandler.enqueue(android.speech.tts.SynthesisPlaybackQueueItem)"
"android.speech.tts.PlaybackSynthesisCallback.start(int, int, int)","android.speech.tts.AbstractSynthesisCallback.errorCodeOnStop()"
"android.speech.tts.PlaybackSynthesisCallback.error()","android.speech.tts.PlaybackSynthesisCallback.error(int)"
"android.os.storage.IMountShutdownObserver.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.enforceInterface(java.lang.String)"
"android.os.storage.IMountShutdownObserver.onTransact(int, Parcel, Parcel, int)","android.os.storage.IMountShutdownObserver.onShutDownComplete(int)"
"android.os.storage.IMountShutdownObserver.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.os.storage.IMountShutdownObserver.onTransact(int, Parcel, Parcel, int)","android.os.Binder.onTransact(int, android.os.Parcel, android.os.Parcel, int)"
"android.os.storage.IMountShutdownObserver.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.readInt()"
"android.os.storage.IMountShutdownObserver.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.writeNoException()"
"android.os.storage.IMountShutdownObserver.asInterface(IBinder)","android.os.IBinder.queryLocalInterface(java.lang.String)"
"android.app.ProfilerInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.app.ProfilerInfo.writeToParcel(Parcel, int)","android.os.ParcelFileDescriptor.writeToParcel(android.os.Parcel, int)"
"android.app.ProfilerInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.app.ProfilerInfo.describeContents()","android.os.ParcelFileDescriptor.describeContents()"
"android.widget.Filter.filter(CharSequence, FilterListener)","android.os.HandlerThread.getLooper()"
"android.widget.Filter.filter(CharSequence, FilterListener)","android.os.Handler.sendMessageDelayed(android.os.Message, long)"
"android.widget.Filter.filter(CharSequence, FilterListener)","android.widget.Filter.Delayer.getPostingDelay(java.lang.CharSequence)"
"android.widget.Filter.filter(CharSequence, FilterListener)","android.os.Handler.removeMessages(int)"
"android.widget.Filter.filter(CharSequence, FilterListener)","java.lang.Thread.start()"
"android.widget.Filter.filter(CharSequence, FilterListener)","java.lang.CharSequence.toString()"
"android.widget.Filter.filter(CharSequence, FilterListener)","android.os.Handler.obtainMessage(int)"
"android.widget.Filter.convertResultToString(Object)","java.lang.Object.toString()"
"android.widget.Filter.handleMessage(Message)","android.widget.Filter.FilterListener.onFilterComplete(int)"
"android.widget.Filter.handleMessage(Message)","android.widget.Filter.publishResults(java.lang.CharSequence, android.widget.Filter.FilterResults)"
"android.widget.Filter.filter(CharSequence)","android.widget.Filter.filter(java.lang.CharSequence, null)"
"android.net.WebAddress.toString()","java.lang.Integer.toString(int)"
"android.net.WebAddress.toString()","java.lang.String.equals(java.lang.String)"
"android.net.WebAddress.toString()","java.lang.String.length()"
"android.speech.tts.TtsEngines.settingsActivityFromServiceInfo(ServiceInfo, PackageManager)","android.content.pm.PackageItemInfo.loadXmlMetaData(android.content.pm.PackageManager, java.lang.String)"
"android.speech.tts.TtsEngines.settingsActivityFromServiceInfo(ServiceInfo, PackageManager)","android.content.res.TypedArray.recycle()"
"android.speech.tts.TtsEngines.settingsActivityFromServiceInfo(ServiceInfo, PackageManager)","android.content.res.XmlResourceParser.close()"
"android.speech.tts.TtsEngines.settingsActivityFromServiceInfo(ServiceInfo, PackageManager)","android.content.pm.PackageManager.getResourcesForApplication(android.content.pm.ApplicationInfo)"
"android.speech.tts.TtsEngines.parseLocaleString(String)","java.lang.String.split(java.lang.String)"
"android.speech.tts.TtsEngines.parseLocaleString(String)","java.util.Locale.getISO3Language()"
"android.speech.tts.TtsEngines.parseLocaleString(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.speech.tts.TtsEngines.parseLocaleString(String)","java.util.Map.get(java.lang.String)"
"android.speech.tts.TtsEngines.parseLocaleString(String)","java.lang.String.toUpperCase()"
"android.speech.tts.TtsEngines.parseLocaleString(String)","java.util.Locale.getISO3Country()"
"android.speech.tts.TtsEngines.parseLocaleString(String)","java.lang.String.toLowerCase()"
"android.speech.tts.TtsEngines.parseEnginePrefFromList(String, String)","java.lang.String.split(java.lang.String)"
"android.speech.tts.TtsEngines.parseEnginePrefFromList(String, String)","java.lang.String.substring(int)"
"android.speech.tts.TtsEngines.parseEnginePrefFromList(String, String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.speech.tts.TtsEngines.parseEnginePrefFromList(String, String)","java.lang.String.substring(int, int)"
"android.speech.tts.TtsEngines.parseEnginePrefFromList(String, String)","java.lang.String.equals(java.lang.String)"
"android.speech.tts.TtsEngines.parseEnginePrefFromList(String, String)","java.lang.String.indexOf(char)"
"android.speech.tts.TtsEngines.getDefaultEngine()","android.provider.Settings.Secure.getString(android.content.ContentResolver, java.lang.String)"
"android.speech.tts.TtsEngines.getDefaultEngine()","android.speech.tts.TtsEngines.isEngineInstalled(java.lang.String)"
"android.speech.tts.TtsEngines.getDefaultEngine()","android.content.Context.getContentResolver()"
"android.speech.tts.TtsEngines.getDefaultEngine()","android.speech.tts.TtsEngines.getHighestRankedEngineName()"
"android.speech.tts.TtsEngines.getEngineInfo(String)","android.speech.tts.TtsEngines.getEngineInfo(android.content.pm.ResolveInfo, android.content.pm.PackageManager)"
"android.speech.tts.TtsEngines.getEngineInfo(String)","android.content.Context.getPackageManager()"
"android.speech.tts.TtsEngines.getEngineInfo(String)","android.content.pm.PackageManager.queryIntentServices(android.content.Intent, int)"
"android.speech.tts.TtsEngines.getEngineInfo(String)","java.util.List.size()"
"android.speech.tts.TtsEngines.getEngineInfo(String)","android.content.Intent.setPackage(java.lang.String)"
"android.speech.tts.TtsEngines.getEngineInfo(String)","java.util.List.get(int)"
"android.speech.tts.TtsEngines.isLocaleSetToDefaultForEngine(String)","android.provider.Settings.Secure.getString(android.content.ContentResolver, java.lang.String)"
"android.speech.tts.TtsEngines.isLocaleSetToDefaultForEngine(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.speech.tts.TtsEngines.isLocaleSetToDefaultForEngine(String)","android.content.Context.getContentResolver()"
"android.speech.tts.TtsEngines.isLocaleSetToDefaultForEngine(String)","android.speech.tts.TtsEngines.parseEnginePrefFromList(java.lang.String, java.lang.String)"
"android.speech.tts.TtsEngines.updateLocalePrefForEngine(String, Locale)","android.provider.Settings.Secure.getString(android.content.ContentResolver, java.lang.String)"
"android.speech.tts.TtsEngines.updateLocalePrefForEngine(String, Locale)","java.util.Locale.toString()"
"android.speech.tts.TtsEngines.updateLocalePrefForEngine(String, Locale)","android.content.Context.getContentResolver()"
"android.speech.tts.TtsEngines.updateLocalePrefForEngine(String, Locale)","android.speech.tts.TtsEngines.updateValueInCommaSeparatedList(java.lang.String, java.lang.String, java.lang.String)"
"android.speech.tts.TtsEngines.updateLocalePrefForEngine(String, Locale)","android.provider.Settings.Secure.putString(android.content.ContentResolver, java.lang.String, java.lang.String)"
"android.speech.tts.TtsEngines.updateLocalePrefForEngine(String, Locale)","java.lang.String.toString()"
"android.speech.tts.TtsEngines.getSettingsIntent(String)","android.content.Context.getPackageManager()"
"android.speech.tts.TtsEngines.getSettingsIntent(String)","android.content.Intent.setClassName(java.lang.String, java.lang.String)"
"android.speech.tts.TtsEngines.getSettingsIntent(String)","android.content.pm.PackageManager.queryIntentServices(android.content.Intent, int)"
"android.speech.tts.TtsEngines.getSettingsIntent(String)","java.util.List.size()"
"android.speech.tts.TtsEngines.getSettingsIntent(String)","android.content.Intent.setPackage(java.lang.String)"
"android.speech.tts.TtsEngines.getSettingsIntent(String)","android.speech.tts.TtsEngines.settingsActivityFromServiceInfo(android.content.pm.ServiceInfo, android.content.pm.PackageManager)"
"android.speech.tts.TtsEngines.getSettingsIntent(String)","java.util.List.get(int)"
"android.speech.tts.TtsEngines.getEngines()","android.speech.tts.TtsEngines.getEngineInfo(android.content.pm.ResolveInfo, android.content.pm.PackageManager)"
"android.speech.tts.TtsEngines.getEngines()","android.content.Context.getPackageManager()"
"android.speech.tts.TtsEngines.getEngines()","android.content.pm.PackageManager.queryIntentServices(android.content.Intent, int)"
"android.speech.tts.TtsEngines.getEngines()","java.util.Collections.emptyList()"
"android.speech.tts.TtsEngines.getEngines()","java.util.List.size()"
"android.speech.tts.TtsEngines.getEngines()","java.util.Collections.sort(java.util.List<android.speech.tts.TextToSpeech.EngineInfo>, android.speech.tts.TtsEngines.EngineInfoComparator)"
"android.speech.tts.TtsEngines.getEngines()","java.util.List.add(android.speech.tts.TextToSpeech.EngineInfo)"
"android.speech.tts.TtsEngines.getHighestRankedEngineName()","android.speech.tts.TtsEngines.getEngines()"
"android.speech.tts.TtsEngines.getHighestRankedEngineName()","java.util.List.size()"
"android.speech.tts.TtsEngines.getHighestRankedEngineName()","java.util.List.get(int)"
"android.speech.tts.TtsEngines.getLocalePrefForEngine(String)","android.provider.Settings.Secure.getString(android.content.ContentResolver, java.lang.String)"
"android.speech.tts.TtsEngines.getLocalePrefForEngine(String)","android.content.Context.getContentResolver()"
"android.speech.tts.TtsEngines.getLocalePrefForEngine(String)","android.speech.tts.TtsEngines.getLocalePrefForEngine(java.lang.String, java.lang.String)"
"android.speech.tts.TtsEngines.normalizeTTSLocale(Locale)","java.util.Locale.getCountry()"
"android.speech.tts.TtsEngines.normalizeTTSLocale(Locale)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.speech.tts.TtsEngines.normalizeTTSLocale(Locale)","java.util.Map.get(java.lang.String)"
"android.speech.tts.TtsEngines.normalizeTTSLocale(Locale)","java.util.Locale.getLanguage()"
"android.speech.tts.TtsEngines.normalizeTTSLocale(Locale)","java.util.Locale.getVariant()"
"android.speech.tts.TtsEngines.toOldLocaleStringFormat(Locale)","java.util.Locale.getISO3Language()"
"android.speech.tts.TtsEngines.toOldLocaleStringFormat(Locale)","java.util.Locale.getVariant()"
"android.speech.tts.TtsEngines.toOldLocaleStringFormat(Locale)","java.util.Locale.getISO3Country()"
"android.speech.tts.TtsEngines.updateValueInCommaSeparatedList(String, String, String)","java.lang.String.split(java.lang.String)"
"android.speech.tts.TtsEngines.updateValueInCommaSeparatedList(String, String, String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.speech.tts.TtsEngines.updateValueInCommaSeparatedList(String, String, String)","java.lang.StringBuilder.append(java.lang.String)"
"android.speech.tts.TtsEngines.updateValueInCommaSeparatedList(String, String, String)","java.lang.StringBuilder.toString()"
"android.speech.tts.TtsEngines.updateValueInCommaSeparatedList(String, String, String)","java.lang.String.substring(int, int)"
"android.speech.tts.TtsEngines.updateValueInCommaSeparatedList(String, String, String)","java.lang.StringBuilder.append(char)"
"android.speech.tts.TtsEngines.updateValueInCommaSeparatedList(String, String, String)","java.lang.String.equals(java.lang.String)"
"android.speech.tts.TtsEngines.updateValueInCommaSeparatedList(String, String, String)","java.lang.String.indexOf(char)"
"android.speech.tts.TtsEngines.getEngineInfo(ResolveInfo, PackageManager)","android.content.pm.ComponentInfo.loadLabel(android.content.pm.PackageManager)"
"android.speech.tts.TtsEngines.getEngineInfo(ResolveInfo, PackageManager)","java.lang.CharSequence.toString()"
"android.speech.tts.TtsEngines.getEngineInfo(ResolveInfo, PackageManager)","android.speech.tts.TtsEngines.isSystemEngine(android.content.pm.ServiceInfo)"
"android.speech.tts.TtsEngines.getEngineInfo(ResolveInfo, PackageManager)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.speech.tts.TtsEngines.getEngineInfo(ResolveInfo, PackageManager)","android.content.pm.ComponentInfo.getIconResource()"
"android.speech.tts.TtsEngines.isEngineInstalled(String)","android.speech.tts.TtsEngines.getEngineInfo(java.lang.String)"
"android.speech.tts.TtsEngines.getLocalePrefForEngine(String, String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.speech.tts.TtsEngines.getLocalePrefForEngine(String, String)","android.speech.tts.TtsEngines.parseLocaleString(java.lang.String)"
"android.speech.tts.TtsEngines.getLocalePrefForEngine(String, String)","android.speech.tts.TtsEngines.parseEnginePrefFromList(java.lang.String, java.lang.String)"
"android.speech.tts.TtsEngines.getLocalePrefForEngine(String, String)","java.util.Locale.getDefault()"
"android.hardware.location.ActivityRecognitionEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.hardware.location.ActivityRecognitionEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.hardware.location.ActivityRecognitionEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.location.ActivityRecognitionEvent.createFromParcel(Parcel)","android.os.Parcel.readLong()"
"android.hardware.location.ActivityRecognitionEvent.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.hardware.location.ActivityRecognitionEvent.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.location.ActivityRecognitionEvent.toString()","java.lang.String.format(java.lang.String, java.lang.String, int, long)"
"android.text.method.QwertyKeyListener.markAsReplaced(Spannable, int, int, String)","java.lang.String.getChars(int, int, char[], int)"
"android.text.method.QwertyKeyListener.markAsReplaced(Spannable, int, int, String)","android.text.Spannable.setSpan(android.text.method.QwertyKeyListener.Replaced, int, int, int)"
"android.text.method.QwertyKeyListener.markAsReplaced(Spannable, int, int, String)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.QwertyKeyListener.Replaced>)"
"android.text.method.QwertyKeyListener.markAsReplaced(Spannable, int, int, String)","android.text.Spannable.removeSpan(android.text.method.QwertyKeyListener.Replaced)"
"android.text.method.QwertyKeyListener.markAsReplaced(Spannable, int, int, String)","java.lang.CharSequence.length()"
"android.text.method.QwertyKeyListener.markAsReplaced(Spannable, int, int, String)","java.lang.String.length()"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","java.lang.CharSequence.charAt(int)"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","java.lang.Character.isUpperCase(char)"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","android.text.TextUtils.substring(java.lang.CharSequence, int, int)"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","java.lang.String.toUpperCase()"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","android.text.method.QwertyKeyListener.toTitleCase(java.lang.String)"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","java.lang.String.toLowerCase()"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","android.text.AutoText.get(java.lang.String, int, int, android.view.View)"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","android.text.AutoText.get(java.lang.CharSequence, int, int, android.view.View)"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","java.lang.String.length()"
"android.text.method.QwertyKeyListener.getReplacement(CharSequence, int, int, View)","android.text.TextUtils.regionMatches(java.lang.CharSequence, int, java.lang.String, int, int)"
"android.text.method.QwertyKeyListener.getInputType()","android.text.method.BaseKeyListener.makeTextContentType(android.text.method.TextKeyListener.Capitalize, boolean)"
"android.text.method.QwertyKeyListener.showCharacterPicker(View, Editable, char, boolean, int)","android.util.SparseArray.get(char)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.view.KeyEvent.getDeadChar(char, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.TextUtils.substring(android.text.Editable, int, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Integer.parseInt(java.lang.String, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spanned.getSpanStart(android.text.method.QwertyKeyListener.Replaced)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Character.getType(int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Editable.replace(int, int, java.lang.String)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Selection.setSelection(android.text.Editable, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Character.isLetter(char)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.CharSequence.charAt(int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spannable.setSpan(android.text.method.QwertyKeyListener.Replaced, int, int, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.MetaKeyKeyListener.resetMetaState(android.text.Editable)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.QwertyKeyListener.Replaced>)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.MetaKeyKeyListener.getMetaState(android.text.Editable, android.view.KeyEvent)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.QwertyKeyListener.getReplacement(android.text.Editable, int, int, android.view.View)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.view.KeyEvent.hasModifiers(int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spanned.getSpanStart(java.lang.Object)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.TextKeyListener.getInstance()"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Character.toUpperCase(int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spannable.removeSpan(android.text.method.QwertyKeyListener.Replaced)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.view.View.getContext()"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.QwertyKeyListener.showCharacterPicker(android.view.View, android.text.Editable, char, boolean, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.TextUtils.getChars(android.text.Editable, int, int, char[], int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.MetaKeyKeyListener.adjustMetaAfterKeypress(android.text.Editable)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Character.isLowerCase(int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spanned.getSpanEnd(java.lang.Object)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.TextKeyListener.shouldCap(android.text.method.TextKeyListener.Capitalize, android.text.Editable, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.BaseKeyListener.onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Character.isDigit(char)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Math.min(int, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Character.digit(char, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Character.getType(char)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Selection.setSelection(android.text.Editable, int, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.TextKeyListener.getPrefs(android.content.Context)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.view.KeyEvent.getUnicodeChar(int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.view.KeyEvent.hasNoModifiers()"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.Math.max(int, int)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.String.valueOf(char)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spanned.getSpanEnd(android.text.method.QwertyKeyListener.Replaced)"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","java.lang.CharSequence.length()"
"android.text.method.QwertyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.QwertyKeyListener.toTitleCase(String)","java.lang.String.charAt(int)"
"android.text.method.QwertyKeyListener.toTitleCase(String)","java.lang.String.substring(int)"
"android.text.method.QwertyKeyListener.toTitleCase(String)","java.lang.Character.toUpperCase(char)"
"android.text.method.QwertyKeyListener.getInstance(boolean, Capitalize)","java.lang.Enum.ordinal()"
"android.bluetooth.BluetoothPan.isEnabled()","android.bluetooth.BluetoothAdapter.getState()"
"android.bluetooth.BluetoothPan.finalize()","android.bluetooth.BluetoothPan.close()"
"android.bluetooth.BluetoothPan.getConnectedDevices()","android.bluetooth.BluetoothPan.log(java.lang.String)"
"android.bluetooth.BluetoothPan.getConnectedDevices()","android.bluetooth.BluetoothPan.isEnabled()"
"android.bluetooth.BluetoothPan.connect(BluetoothDevice)","android.bluetooth.BluetoothPan.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothPan.connect(BluetoothDevice)","android.bluetooth.BluetoothPan.log(java.lang.String)"
"android.bluetooth.BluetoothPan.connect(BluetoothDevice)","android.bluetooth.BluetoothPan.isEnabled()"
"android.bluetooth.BluetoothPan.close()","android.bluetooth.BluetoothPan.log(java.lang.String)"
"android.bluetooth.BluetoothPan.close()","android.content.Context.unbindService(android.content.ServiceConnection)"
"android.bluetooth.BluetoothPan.close()","android.bluetooth.BluetoothAdapter.getBluetoothManager()"
"android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothPan.log(java.lang.String)"
"android.bluetooth.BluetoothPan.getDevicesMatchingConnectionStates(int[])","android.bluetooth.BluetoothPan.isEnabled()"
"android.bluetooth.BluetoothPan.onServiceConnected(ComponentName, IBinder)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceConnected(int, android.bluetooth.BluetoothPan)"
"android.bluetooth.BluetoothPan.setBluetoothTethering(boolean)","android.bluetooth.BluetoothPan.log(java.lang.String)"
"android.bluetooth.BluetoothPan.onServiceDisconnected(ComponentName)","android.bluetooth.BluetoothProfile.ServiceListener.onServiceDisconnected(int)"
"android.bluetooth.BluetoothPan.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothPan.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothPan.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothPan.log(java.lang.String)"
"android.bluetooth.BluetoothPan.getConnectionState(BluetoothDevice)","android.bluetooth.BluetoothPan.isEnabled()"
"android.bluetooth.BluetoothPan.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothDevice.getAddress()"
"android.bluetooth.BluetoothPan.isValidDevice(BluetoothDevice)","android.bluetooth.BluetoothAdapter.checkBluetoothAddress(java.lang.String)"
"android.bluetooth.BluetoothPan.disconnect(BluetoothDevice)","android.bluetooth.BluetoothPan.isValidDevice(android.bluetooth.BluetoothDevice)"
"android.bluetooth.BluetoothPan.disconnect(BluetoothDevice)","android.bluetooth.BluetoothPan.log(java.lang.String)"
"android.bluetooth.BluetoothPan.disconnect(BluetoothDevice)","android.bluetooth.BluetoothPan.isEnabled()"
"android.bluetooth.BluetoothPan.doBind()","android.content.Context.getPackageManager()"
"android.bluetooth.BluetoothPan.doBind()","android.content.Intent.setComponent(android.content.ComponentName)"
"android.bluetooth.BluetoothPan.doBind()","android.os.Process.myUserHandle()"
"android.bluetooth.BluetoothPan.doBind()","android.content.Intent.resolveSystemService(android.content.pm.PackageManager, int)"
"android.bluetooth.BluetoothPan.doBind()","android.content.Context.bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)"
"android.bluetooth.BluetoothPan.isTetheringOn()","android.bluetooth.BluetoothPan.log(java.lang.String)"
"android.content.BroadcastReceiver.setResultExtras(Bundle)","android.content.BroadcastReceiver.checkSynchronousHint()"
"android.content.BroadcastReceiver.setResultCode(int)","android.content.BroadcastReceiver.checkSynchronousHint()"
"android.content.BroadcastReceiver.checkSynchronousHint()","java.lang.Throwable.fillInStackTrace()"
"android.content.BroadcastReceiver.peekService(Context, Intent)","android.app.IActivityManager.peekService(android.content.Intent, java.lang.String)"
"android.content.BroadcastReceiver.peekService(Context, Intent)","android.content.Context.getContentResolver()"
"android.content.BroadcastReceiver.peekService(Context, Intent)","android.app.ActivityManagerNative.getDefault()"
"android.content.BroadcastReceiver.peekService(Context, Intent)","android.content.Intent.resolveTypeIfNeeded(android.content.ContentResolver)"
"android.content.BroadcastReceiver.peekService(Context, Intent)","android.content.Intent.prepareToLeaveProcess()"
"android.content.BroadcastReceiver.setResultData(String)","android.content.BroadcastReceiver.checkSynchronousHint()"
"android.content.BroadcastReceiver.setExtrasClassLoader(ClassLoader)","android.os.Bundle.setClassLoader(java.lang.ClassLoader)"
"android.content.BroadcastReceiver.abortBroadcast()","android.content.BroadcastReceiver.checkSynchronousHint()"
"android.content.BroadcastReceiver.finish()","android.content.BroadcastReceiver.PendingResult.sendFinished(android.app.IActivityManager)"
"android.content.BroadcastReceiver.finish()","android.app.QueuedWork.hasPendingWork()"
"android.content.BroadcastReceiver.finish()","android.app.QueuedWork.singleThreadExecutor()"
"android.content.BroadcastReceiver.finish()","android.app.ActivityManagerNative.getDefault()"
"android.content.BroadcastReceiver.finish()","java.util.concurrent.Executor.execute(java.lang.Runnable)"
"android.content.BroadcastReceiver.sendFinished(IActivityManager)","android.app.IActivityManager.finishReceiver(android.os.IBinder, int, null, null, boolean)"
"android.content.BroadcastReceiver.sendFinished(IActivityManager)","android.app.IActivityManager.finishReceiver(android.os.IBinder, int, java.lang.String, android.os.Bundle, boolean)"
"android.content.BroadcastReceiver.sendFinished(IActivityManager)","android.os.Bundle.setAllowFds(boolean)"
"android.content.BroadcastReceiver.setResult(int, String, Bundle)","android.content.BroadcastReceiver.checkSynchronousHint()"
"android.hardware.camera2.marshal.impl.MarshalQueryableRect.unmarshal(ByteBuffer)","java.nio.ByteBuffer.getInt()"
"android.preference.PreferenceActivity.getSummary(Resources)","android.content.res.Resources.getText(int)"
"android.preference.PreferenceActivity.invalidateHeaders()","android.os.Handler.hasMessages(int)"
"android.preference.PreferenceActivity.invalidateHeaders()","android.os.Handler.sendEmptyMessage(int)"
"android.preference.PreferenceActivity.onListItemClick(ListView, View, int, long)","android.app.ListActivity.onListItemClick(android.widget.ListView, android.view.View, int, long)"
"android.preference.PreferenceActivity.onListItemClick(ListView, View, int, long)","android.app.Activity.isResumed()"
"android.preference.PreferenceActivity.onListItemClick(ListView, View, int, long)","android.preference.PreferenceActivity.onHeaderClick(android.preference.PreferenceActivity.Header, int)"
"android.preference.PreferenceActivity.onListItemClick(ListView, View, int, long)","android.widget.Adapter.getItem(int)"
"android.preference.PreferenceActivity.getPreferenceScreen()","android.preference.PreferenceManager.getPreferenceScreen()"
"android.preference.PreferenceActivity.getTitle(Resources)","android.content.res.Resources.getText(int)"
"android.preference.PreferenceActivity.addPreferencesFromIntent(Intent)","android.preference.PreferenceManager.inflateFromIntent(android.content.Intent, android.preference.PreferenceScreen)"
"android.preference.PreferenceActivity.addPreferencesFromIntent(Intent)","android.preference.PreferenceActivity.setPreferenceScreen(android.preference.PreferenceScreen)"
"android.preference.PreferenceActivity.addPreferencesFromIntent(Intent)","android.preference.PreferenceActivity.requirePreferenceManager()"
"android.preference.PreferenceActivity.addPreferencesFromIntent(Intent)","android.preference.PreferenceActivity.getPreferenceScreen()"
"android.preference.PreferenceActivity.addPreferencesFromResource(int)","android.preference.PreferenceActivity.setPreferenceScreen(android.preference.PreferenceScreen)"
"android.preference.PreferenceActivity.addPreferencesFromResource(int)","android.preference.PreferenceActivity.requirePreferenceManager()"
"android.preference.PreferenceActivity.addPreferencesFromResource(int)","android.preference.PreferenceActivity.getPreferenceScreen()"
"android.preference.PreferenceActivity.addPreferencesFromResource(int)","android.preference.PreferenceManager.inflateFromResource(android.preference.PreferenceActivity, int, android.preference.PreferenceScreen)"
"android.preference.PreferenceActivity.showBreadCrumbs(CharSequence, CharSequence)","android.view.View.setVisibility(int)"
"android.preference.PreferenceActivity.showBreadCrumbs(CharSequence, CharSequence)","android.app.Activity.setTitle(java.lang.CharSequence)"
"android.preference.PreferenceActivity.onBuildStartFragmentIntent(String, Bundle, int, int)","android.content.Intent.putExtra(java.lang.String, java.lang.String)"
"android.preference.PreferenceActivity.onBuildStartFragmentIntent(String, Bundle, int, int)","android.content.Intent.putExtra(java.lang.String, boolean)"
"android.preference.PreferenceActivity.onBuildStartFragmentIntent(String, Bundle, int, int)","android.content.Intent.putExtra(java.lang.String, int)"
"android.preference.PreferenceActivity.onBuildStartFragmentIntent(String, Bundle, int, int)","android.content.Intent.putExtra(java.lang.String, android.os.Bundle)"
"android.preference.PreferenceActivity.onBuildStartFragmentIntent(String, Bundle, int, int)","java.lang.Object.getClass()"
"android.preference.PreferenceActivity.onBuildStartFragmentIntent(String, Bundle, int, int)","android.content.Intent.setClass(android.preference.PreferenceActivity, java.lang.Class<?>)"
"android.preference.PreferenceActivity.onStop()","android.app.Activity.onStop()"
"android.preference.PreferenceActivity.onStop()","android.preference.PreferenceManager.dispatchActivityStop()"
"android.preference.PreferenceActivity.onPreferenceStartFragment(PreferenceFragment, Preference)","android.preference.PreferenceActivity.startPreferencePanel(java.lang.String, android.os.Bundle, int, java.lang.CharSequence, null, int)"
"android.preference.PreferenceActivity.onPreferenceStartFragment(PreferenceFragment, Preference)","android.preference.Preference.getExtras()"
"android.preference.PreferenceActivity.onPreferenceStartFragment(PreferenceFragment, Preference)","android.preference.Preference.getTitle()"
"android.preference.PreferenceActivity.onPreferenceStartFragment(PreferenceFragment, Preference)","android.preference.Preference.getFragment()"
"android.preference.PreferenceActivity.onPreferenceStartFragment(PreferenceFragment, Preference)","android.preference.Preference.getTitleRes()"
"android.preference.PreferenceActivity.showBreadCrumbs(Header)","android.preference.PreferenceActivity.Header.getTitle(android.content.res.Resources)"
"android.preference.PreferenceActivity.showBreadCrumbs(Header)","android.preference.PreferenceActivity.showBreadCrumbs(java.lang.CharSequence, java.lang.CharSequence)"
"android.preference.PreferenceActivity.showBreadCrumbs(Header)","android.app.Activity.getTitle()"
"android.preference.PreferenceActivity.showBreadCrumbs(Header)","android.view.ContextThemeWrapper.getResources()"
"android.preference.PreferenceActivity.showBreadCrumbs(Header)","android.preference.PreferenceActivity.showBreadCrumbs(java.lang.CharSequence, null)"
"android.preference.PreferenceActivity.showBreadCrumbs(Header)","android.preference.PreferenceActivity.Header.getBreadCrumbShortTitle(android.content.res.Resources)"
"android.preference.PreferenceActivity.showBreadCrumbs(Header)","android.preference.PreferenceActivity.Header.getBreadCrumbTitle(android.content.res.Resources)"
"android.preference.PreferenceActivity.onNewIntent(Intent)","android.preference.PreferenceManager.dispatchNewIntent(android.content.Intent)"
"android.preference.PreferenceActivity.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.preference.PreferenceActivity.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.preference.PreferenceActivity.writeToParcel(Parcel, int)","android.text.TextUtils.writeToParcel(java.lang.CharSequence, android.os.Parcel, int)"
"android.preference.PreferenceActivity.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.preference.PreferenceActivity.writeToParcel(Parcel, int)","android.os.Parcel.writeBundle(android.os.Bundle)"
"android.preference.PreferenceActivity.writeToParcel(Parcel, int)","android.content.Intent.writeToParcel(android.os.Parcel, int)"
"android.preference.PreferenceActivity.switchToHeader(String, Bundle)","java.util.ArrayList.size()"
"android.preference.PreferenceActivity.switchToHeader(String, Bundle)","android.preference.PreferenceActivity.setSelectedHeader(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.switchToHeader(String, Bundle)","java.lang.String.equals(java.lang.String)"
"android.preference.PreferenceActivity.switchToHeader(String, Bundle)","android.preference.PreferenceActivity.switchToHeaderInner(java.lang.String, android.os.Bundle)"
"android.preference.PreferenceActivity.switchToHeader(String, Bundle)","java.util.ArrayList.get(int)"
"android.preference.PreferenceActivity.bindPreferences()","android.app.ListActivity.onRestoreInstanceState(android.os.Bundle)"
"android.preference.PreferenceActivity.bindPreferences()","android.preference.PreferenceActivity.getPreferenceScreen()"
"android.preference.PreferenceActivity.isMultiPane()","android.preference.PreferenceActivity.hasHeaders()"
"android.preference.PreferenceActivity.onGetInitialHeader()","java.util.ArrayList.size()"
"android.preference.PreferenceActivity.onGetInitialHeader()","java.util.ArrayList.get(int)"
"android.preference.PreferenceActivity.setSelectedHeader(Header)","android.preference.PreferenceActivity.showBreadCrumbs(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.setSelectedHeader(Header)","java.util.ArrayList.indexOf(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.startWithFragment(String, Bundle, Fragment, int)","android.preference.PreferenceActivity.startWithFragment(java.lang.String, android.os.Bundle, android.app.Fragment, int, int, int)"
"android.preference.PreferenceActivity.startWithFragment(String, Bundle, Fragment, int, int, int)","android.preference.PreferenceActivity.onBuildStartFragmentIntent(java.lang.String, android.os.Bundle, int, int)"
"android.preference.PreferenceActivity.startWithFragment(String, Bundle, Fragment, int, int, int)","android.app.Fragment.startActivityForResult(android.content.Intent, int)"
"android.preference.PreferenceActivity.startWithFragment(String, Bundle, Fragment, int, int, int)","android.app.Activity.startActivity(android.content.Intent)"
"android.preference.PreferenceActivity.findPreference(CharSequence)","android.preference.PreferenceManager.findPreference(java.lang.CharSequence)"
"android.preference.PreferenceActivity.onHeaderClick(Header, int)","android.preference.PreferenceActivity.switchToHeader(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.onHeaderClick(Header, int)","android.preference.PreferenceActivity.startWithFragment(java.lang.String, android.os.Bundle, null, int, int, int)"
"android.preference.PreferenceActivity.onHeaderClick(Header, int)","android.app.Activity.startActivity(android.content.Intent)"
"android.preference.PreferenceActivity.onContentChanged()","android.preference.PreferenceActivity.postBindPreferences()"
"android.preference.PreferenceActivity.onContentChanged()","android.app.ListActivity.onContentChanged()"
"android.preference.PreferenceActivity.getBreadCrumbTitle(Resources)","android.content.res.Resources.getText(int)"
"android.preference.PreferenceActivity.startPreferenceFragment(Fragment, boolean)","android.app.FragmentTransaction.setTransition(int)"
"android.preference.PreferenceActivity.startPreferenceFragment(Fragment, boolean)","android.app.FragmentTransaction.addToBackStack(java.lang.String)"
"android.preference.PreferenceActivity.startPreferenceFragment(Fragment, boolean)","android.app.FragmentManager.beginTransaction()"
"android.preference.PreferenceActivity.startPreferenceFragment(Fragment, boolean)","android.app.Activity.getFragmentManager()"
"android.preference.PreferenceActivity.startPreferenceFragment(Fragment, boolean)","android.app.FragmentTransaction.commitAllowingStateLoss()"
"android.preference.PreferenceActivity.setPreferenceScreen(PreferenceScreen)","android.preference.PreferenceActivity.postBindPreferences()"
"android.preference.PreferenceActivity.setPreferenceScreen(PreferenceScreen)","android.preference.PreferenceManager.setPreferences(android.preference.PreferenceScreen)"
"android.preference.PreferenceActivity.setPreferenceScreen(PreferenceScreen)","android.app.Activity.setTitle(java.lang.CharSequence)"
"android.preference.PreferenceActivity.setPreferenceScreen(PreferenceScreen)","android.preference.PreferenceActivity.requirePreferenceManager()"
"android.preference.PreferenceActivity.handleMessage(Message)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.preference.PreferenceActivity.handleMessage(Message)","android.preference.PreferenceActivity.setSelectedHeader(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.handleMessage(Message)","android.preference.PreferenceActivity.switchToHeader(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.handleMessage(Message)","android.preference.PreferenceActivity.onGetNewHeader()"
"android.preference.PreferenceActivity.handleMessage(Message)","android.preference.PreferenceActivity.onBuildHeaders(java.util.ArrayList<android.preference.PreferenceActivity.Header>)"
"android.preference.PreferenceActivity.handleMessage(Message)","android.preference.PreferenceActivity.bindPreferences()"
"android.preference.PreferenceActivity.handleMessage(Message)","android.preference.PreferenceActivity.findBestMatchingHeader(android.preference.PreferenceActivity.Header, java.util.ArrayList<android.preference.PreferenceActivity.Header>)"
"android.preference.PreferenceActivity.handleMessage(Message)","java.util.ArrayList.clear()"
"android.preference.PreferenceActivity.onDestroy()","android.os.Handler.removeMessages(int)"
"android.preference.PreferenceActivity.onDestroy()","android.preference.PreferenceManager.dispatchActivityDestroy()"
"android.preference.PreferenceActivity.onDestroy()","android.app.ListActivity.onDestroy()"
"android.preference.PreferenceActivity.onActivityResult(int, int, Intent)","android.app.Activity.onActivityResult(int, int, android.content.Intent)"
"android.preference.PreferenceActivity.onActivityResult(int, int, Intent)","android.preference.PreferenceManager.dispatchActivityResult(int, int, android.content.Intent)"
"android.preference.PreferenceActivity.getBreadCrumbShortTitle(Resources)","android.content.res.Resources.getText(int)"
"android.preference.PreferenceActivity.getView(int, View, ViewGroup)","android.view.View.setTag(android.preference.PreferenceActivity.HeaderAdapter.HeaderViewHolder)"
"android.preference.PreferenceActivity.getView(int, View, ViewGroup)","android.widget.ArrayAdapter.getContext()"
"android.preference.PreferenceActivity.getView(int, View, ViewGroup)","android.view.View.getTag()"
"android.preference.PreferenceActivity.getView(int, View, ViewGroup)","android.preference.PreferenceActivity.Header.getSummary(android.content.res.Resources)"
"android.preference.PreferenceActivity.getView(int, View, ViewGroup)","android.content.Context.getResources()"
"android.preference.PreferenceActivity.getView(int, View, ViewGroup)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.preference.PreferenceActivity.getView(int, View, ViewGroup)","android.widget.ArrayAdapter.getItem(int)"
"android.preference.PreferenceActivity.switchToHeader(Header)","android.preference.PreferenceActivity.setSelectedHeader(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.switchToHeader(Header)","android.app.Activity.getFragmentManager()"
"android.preference.PreferenceActivity.switchToHeader(Header)","android.preference.PreferenceActivity.switchToHeaderInner(java.lang.String, android.os.Bundle)"
"android.preference.PreferenceActivity.switchToHeader(Header)","android.app.FragmentManager.popBackStack(java.lang.String, int)"
"android.preference.PreferenceActivity.loadHeadersFromResource(int, List)","java.util.List.add(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.loadHeadersFromResource(int, List)","android.content.res.Resources.getXml(int)"
"android.preference.PreferenceActivity.loadHeadersFromResource(int, List)","android.view.ContextThemeWrapper.getResources()"
"android.preference.PreferenceActivity.loadHeadersFromResource(int, List)","android.os.BaseBundle.size()"
"android.preference.PreferenceActivity.loadHeadersFromResource(int, List)","android.content.res.TypedArray.recycle()"
"android.preference.PreferenceActivity.loadHeadersFromResource(int, List)","java.lang.String.equals(java.lang.String)"
"android.preference.PreferenceActivity.loadHeadersFromResource(int, List)","android.content.res.XmlResourceParser.close()"
"android.preference.PreferenceActivity.loadHeadersFromResource(int, List)","android.util.AttributeSet.getPositionDescription()"
"android.preference.PreferenceActivity.loadHeadersFromResource(int, List)","android.content.res.Resources.parseBundleExtra(java.lang.String, android.util.AttributeSet, android.os.Bundle)"
"android.preference.PreferenceActivity.finishPreferencePanel(Fragment, int, Intent)","android.app.Activity.onBackPressed()"
"android.preference.PreferenceActivity.finishPreferencePanel(Fragment, int, Intent)","android.app.Activity.finish()"
"android.preference.PreferenceActivity.finishPreferencePanel(Fragment, int, Intent)","android.app.Fragment.onActivityResult(int, int, android.content.Intent)"
"android.preference.PreferenceActivity.finishPreferencePanel(Fragment, int, Intent)","android.app.Fragment.getTargetFragment()"
"android.preference.PreferenceActivity.finishPreferencePanel(Fragment, int, Intent)","android.app.Activity.setResult(int, android.content.Intent)"
"android.preference.PreferenceActivity.finishPreferencePanel(Fragment, int, Intent)","android.app.Fragment.getTargetRequestCode()"
"android.preference.PreferenceActivity.postBindPreferences()","android.os.Handler.hasMessages(int)"
"android.preference.PreferenceActivity.postBindPreferences()","android.os.Message.sendToTarget()"
"android.preference.PreferenceActivity.postBindPreferences()","android.os.Handler.obtainMessage(int)"
"android.preference.PreferenceActivity.findBestMatchingHeader(Header, ArrayList)","java.util.ArrayList.size()"
"android.preference.PreferenceActivity.findBestMatchingHeader(Header, ArrayList)","java.lang.Object.equals(java.lang.CharSequence)"
"android.preference.PreferenceActivity.findBestMatchingHeader(Header, ArrayList)","java.lang.Object.equals(android.content.Intent)"
"android.preference.PreferenceActivity.findBestMatchingHeader(Header, ArrayList)","java.lang.String.equals(java.lang.String)"
"android.preference.PreferenceActivity.findBestMatchingHeader(Header, ArrayList)","java.lang.Object.equals(android.os.Bundle)"
"android.preference.PreferenceActivity.findBestMatchingHeader(Header, ArrayList)","java.util.ArrayList.get(int)"
"android.preference.PreferenceActivity.findBestMatchingHeader(Header, ArrayList)","java.util.ArrayList.clear()"
"android.preference.PreferenceActivity.findBestMatchingHeader(Header, ArrayList)","java.util.ArrayList.add(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.app.Fragment.instantiate(android.preference.PreferenceActivity, java.lang.String, android.os.Bundle)"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.app.FragmentTransaction.setTransition(int)"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.app.FragmentTransaction.addToBackStack(java.lang.String)"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.app.FragmentManager.beginTransaction()"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.app.Activity.getFragmentManager()"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.app.Fragment.setTargetFragment(android.app.Fragment, int)"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.preference.PreferenceActivity.startWithFragment(java.lang.String, android.os.Bundle, android.app.Fragment, int, int, int)"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.app.FragmentTransaction.commitAllowingStateLoss()"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.app.FragmentTransaction.setBreadCrumbTitle(java.lang.CharSequence)"
"android.preference.PreferenceActivity.startPreferencePanel(String, Bundle, int, CharSequence, Fragment, int)","android.app.FragmentTransaction.setBreadCrumbTitle(int)"
"android.preference.PreferenceActivity.onSaveInstanceState(Bundle)","android.app.Activity.onSaveInstanceState(android.os.Bundle)"
"android.preference.PreferenceActivity.onSaveInstanceState(Bundle)","java.util.ArrayList.size()"
"android.preference.PreferenceActivity.onSaveInstanceState(Bundle)","android.os.BaseBundle.putInt(java.lang.String, int)"
"android.preference.PreferenceActivity.onSaveInstanceState(Bundle)","android.os.Bundle.putParcelableArrayList(java.lang.String, java.util.ArrayList<android.preference.PreferenceActivity.Header>)"
"android.preference.PreferenceActivity.onSaveInstanceState(Bundle)","android.preference.PreferenceActivity.getPreferenceScreen()"
"android.preference.PreferenceActivity.onSaveInstanceState(Bundle)","android.os.Bundle.putBundle(java.lang.String, android.os.Bundle)"
"android.preference.PreferenceActivity.onSaveInstanceState(Bundle)","java.util.ArrayList.indexOf(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.onRestoreInstanceState(Bundle)","android.app.ListActivity.onRestoreInstanceState(android.os.Bundle)"
"android.preference.PreferenceActivity.onRestoreInstanceState(Bundle)","android.os.Bundle.getBundle(java.lang.String)"
"android.preference.PreferenceActivity.onRestoreInstanceState(Bundle)","android.preference.PreferenceActivity.getPreferenceScreen()"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.preference.PreferenceManager.setOnPreferenceTreeClickListener(android.preference.PreferenceActivity)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.preference.PreferenceActivity.showBreadCrumbs(java.lang.CharSequence, java.lang.CharSequence)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.app.Activity.setContentView(int)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.content.Intent.getBundleExtra(java.lang.String)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.preference.PreferenceActivity.setSelectedHeader(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.content.Intent.getIntExtra(java.lang.String, int)"
"android.preference.PreferenceActivity.onCreate(Bundle)","java.util.ArrayList.addAll(java.util.ArrayList<android.preference.PreferenceActivity.Header>)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.preference.PreferenceActivity.onIsHidingHeaders()"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.content.Intent.getBooleanExtra(java.lang.String, boolean)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.content.res.TypedArray.recycle()"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.os.Bundle.getParcelableArrayList(java.lang.String)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.content.Context.getText(int)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.preference.PreferenceActivity.switchToHeader(java.lang.String, android.os.Bundle)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.content.Intent.getStringExtra(java.lang.String)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.preference.PreferenceActivity.onIsMultiPane()"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.app.Activity.getIntent()"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.preference.PreferenceActivity.onGetInitialHeader()"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.content.Intent.hasExtra(java.lang.String)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.preference.PreferenceActivity.onBuildHeaders(java.util.ArrayList<android.preference.PreferenceActivity.Header>)"
"android.preference.PreferenceActivity.onCreate(Bundle)","java.util.ArrayList.size()"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.preference.PreferenceActivity.switchToHeader(android.preference.PreferenceActivity.Header)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.os.BaseBundle.getInt(java.lang.String, int)"
"android.preference.PreferenceActivity.onCreate(Bundle)","java.util.ArrayList.get(int)"
"android.preference.PreferenceActivity.onCreate(Bundle)","android.app.ListActivity.setListAdapter(android.preference.PreferenceActivity.HeaderAdapter)"
"android.preference.PreferenceActivity.readFromParcel(Parcel)","android.os.Parcel.readLong()"
"android.preference.PreferenceActivity.readFromParcel(Parcel)","android.os.Parcelable.Creator.createFromParcel(android.os.Parcel)"
"android.preference.PreferenceActivity.readFromParcel(Parcel)","android.os.Parcel.readString()"
"android.preference.PreferenceActivity.readFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.preference.PreferenceActivity.readFromParcel(Parcel)","android.os.Parcel.readBundle()"
"android.preference.PreferenceActivity.switchToHeaderInner(String, Bundle)","android.app.Fragment.instantiate(android.preference.PreferenceActivity, java.lang.String, android.os.Bundle)"
"android.preference.PreferenceActivity.switchToHeaderInner(String, Bundle)","android.app.FragmentTransaction.setTransition(int)"
"android.preference.PreferenceActivity.switchToHeaderInner(String, Bundle)","android.app.Activity.getFragmentManager()"
"android.preference.PreferenceActivity.switchToHeaderInner(String, Bundle)","android.app.FragmentManager.beginTransaction()"
"android.preference.PreferenceActivity.switchToHeaderInner(String, Bundle)","android.app.FragmentManager.popBackStack(java.lang.String, int)"
"android.preference.PreferenceActivity.switchToHeaderInner(String, Bundle)","android.app.FragmentTransaction.commitAllowingStateLoss()"
"android.preference.PreferenceActivity.switchToHeaderInner(String, Bundle)","android.preference.PreferenceActivity.isValidFragment(java.lang.String)"
"android.preference.PreferenceActivity.onIsHidingHeaders()","android.content.Intent.getBooleanExtra(java.lang.String, boolean)"
"android.preference.PreferenceActivity.onIsHidingHeaders()","android.app.Activity.getIntent()"
"android.preference.PreferenceActivity.isValidFragment(String)","android.content.ContextWrapper.getApplicationInfo()"
"android.preference.PreferenceActivity.isValidFragment(String)","java.lang.Object.getClass()"
"android.preference.PreferenceActivity.isValidFragment(String)","java.lang.Class.getName()"
"android.net.UrlQuerySanitizer.getValue(String)","java.util.HashMap.get(java.lang.String)"
"android.net.UrlQuerySanitizer.parseEntry(String, String)","android.net.UrlQuerySanitizer.getEffectiveValueSanitizer(java.lang.String)"
"android.net.UrlQuerySanitizer.parseEntry(String, String)","android.net.UrlQuerySanitizer.addSanitizedEntry(java.lang.String, java.lang.String)"
"android.net.UrlQuerySanitizer.parseEntry(String, String)","android.net.UrlQuerySanitizer.ValueSanitizer.sanitize(java.lang.String)"
"android.net.UrlQuerySanitizer.parseEntry(String, String)","android.net.UrlQuerySanitizer.unescape(java.lang.String)"
"android.net.UrlQuerySanitizer.hasParameter(String)","java.util.HashMap.containsKey(java.lang.String)"
"android.net.UrlQuerySanitizer.trimWhitespace(String)","java.lang.String.charAt(int)"
"android.net.UrlQuerySanitizer.trimWhitespace(String)","android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer.isWhitespace(char)"
"android.net.UrlQuerySanitizer.trimWhitespace(String)","java.lang.String.substring(int, int)"
"android.net.UrlQuerySanitizer.trimWhitespace(String)","java.lang.String.length()"
"android.net.UrlQuerySanitizer.sanitize(String)","java.lang.String.charAt(int)"
"android.net.UrlQuerySanitizer.sanitize(String)","android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer.trimWhitespace(java.lang.String)"
"android.net.UrlQuerySanitizer.sanitize(String)","java.lang.String.startsWith(java.lang.String)"
"android.net.UrlQuerySanitizer.sanitize(String)","java.lang.StringBuilder.toString()"
"android.net.UrlQuerySanitizer.sanitize(String)","java.lang.StringBuilder.append(char)"
"android.net.UrlQuerySanitizer.sanitize(String)","android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer.characterIsLegal(char)"
"android.net.UrlQuerySanitizer.sanitize(String)","java.lang.String.length()"
"android.net.UrlQuerySanitizer.sanitize(String)","java.lang.String.toLowerCase(java.util.Locale)"
"android.net.UrlQuerySanitizer.isHexDigit(char)","android.net.UrlQuerySanitizer.decodeHexDigit(char)"
"android.net.UrlQuerySanitizer.unescape(String)","java.lang.String.charAt(int)"
"android.net.UrlQuerySanitizer.unescape(String)","java.lang.StringBuilder.append(java.lang.String)"
"android.net.UrlQuerySanitizer.unescape(String)","java.lang.StringBuilder.toString()"
"android.net.UrlQuerySanitizer.unescape(String)","java.lang.String.substring(int, int)"
"android.net.UrlQuerySanitizer.unescape(String)","java.lang.StringBuilder.append(char)"
"android.net.UrlQuerySanitizer.unescape(String)","java.lang.String.indexOf(char)"
"android.net.UrlQuerySanitizer.unescape(String)","android.net.UrlQuerySanitizer.decodeHexDigit(char)"
"android.net.UrlQuerySanitizer.unescape(String)","android.net.UrlQuerySanitizer.isHexDigit(char)"
"android.net.UrlQuerySanitizer.unescape(String)","java.lang.String.length()"
"android.net.UrlQuerySanitizer.addSanitizedEntry(String, String)","java.util.ArrayList.add(android.net.UrlQuerySanitizer.ParameterValuePair)"
"android.net.UrlQuerySanitizer.addSanitizedEntry(String, String)","java.util.HashMap.containsKey(java.lang.String)"
"android.net.UrlQuerySanitizer.addSanitizedEntry(String, String)","java.util.HashMap.put(java.lang.String, java.lang.String)"
"android.net.UrlQuerySanitizer.getParameterSet()","java.util.HashMap.keySet()"
"android.net.UrlQuerySanitizer.getEffectiveValueSanitizer(String)","android.net.UrlQuerySanitizer.getValueSanitizer(java.lang.String)"
"android.net.UrlQuerySanitizer.getEffectiveValueSanitizer(String)","android.net.UrlQuerySanitizer.getUnregisteredParameterValueSanitizer()"
"android.net.UrlQuerySanitizer.parseUrl(String)","java.lang.String.substring(int)"
"android.net.UrlQuerySanitizer.parseUrl(String)","android.net.UrlQuerySanitizer.parseQuery(java.lang.String)"
"android.net.UrlQuerySanitizer.parseUrl(String)","java.lang.String.indexOf(char)"
"android.net.UrlQuerySanitizer.registerParameters(String[], ValueSanitizer)","java.util.HashMap.put(java.lang.String, android.net.UrlQuerySanitizer.ValueSanitizer)"
"android.net.UrlQuerySanitizer.getValueSanitizer(String)","java.util.HashMap.get(java.lang.String)"
"android.net.UrlQuerySanitizer.clear()","java.util.HashMap.clear()"
"android.net.UrlQuerySanitizer.clear()","java.util.ArrayList.clear()"
"android.net.UrlQuerySanitizer.registerParameter(String, ValueSanitizer)","java.util.HashMap.remove(java.lang.String)"
"android.net.UrlQuerySanitizer.registerParameter(String, ValueSanitizer)","java.util.HashMap.put(java.lang.String, android.net.UrlQuerySanitizer.ValueSanitizer)"
"android.net.UrlQuerySanitizer.parseQuery(String)","java.lang.String.substring(int)"
"android.net.UrlQuerySanitizer.parseQuery(String)","java.util.StringTokenizer.hasMoreElements()"
"android.net.UrlQuerySanitizer.parseQuery(String)","android.net.UrlQuerySanitizer.clear()"
"android.net.UrlQuerySanitizer.parseQuery(String)","java.util.StringTokenizer.nextToken()"
"android.net.UrlQuerySanitizer.parseQuery(String)","android.net.UrlQuerySanitizer.parseEntry(java.lang.String, java.lang.String)"
"android.net.UrlQuerySanitizer.parseQuery(String)","java.lang.String.substring(int, int)"
"android.net.UrlQuerySanitizer.parseQuery(String)","java.lang.String.indexOf(char)"
"android.net.UrlQuerySanitizer.parseQuery(String)","java.lang.String.length()"
"android.view.animation.RotateAnimation.applyTransformation(float, Transformation)","android.view.animation.Animation.getScaleFactor()"
"android.view.animation.RotateAnimation.initialize(int, int, int, int)","android.view.animation.Animation.initialize(int, int, int, int)"
"android.view.animation.RotateAnimation.initialize(int, int, int, int)","android.view.animation.Animation.resolveSize(int, float, int, int)"
"android.text.method.Touch.getInitialScrollX(TextView, Spannable)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.Touch.DragState>)"
"android.text.method.Touch.getInitialScrollX(TextView, Spannable)","java.lang.CharSequence.length()"
"android.text.method.Touch.getInitialScrollY(TextView, Spannable)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.Touch.DragState>)"
"android.text.method.Touch.getInitialScrollY(TextView, Spannable)","java.lang.CharSequence.length()"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.view.MotionEvent.getY()"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.Spannable.removeSpan(android.text.method.Touch.DragState)"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","java.lang.Math.abs(float)"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.method.Touch.scrollTo(android.widget.TextView, android.text.Layout, int, int)"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.view.MotionEvent.getX()"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.method.MetaKeyKeyListener.getMetaState(android.text.Spannable, int)"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.Spannable.setSpan(android.text.method.Touch.DragState, int, int, int)"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.view.MotionEvent.getMetaState()"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.Touch.DragState>)"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","android.view.MotionEvent.isButtonPressed(int)"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","java.lang.Math.max(int, int)"
"android.text.method.Touch.onTouchEvent(TextView, Spannable, MotionEvent)","java.lang.CharSequence.length()"
"android.text.method.Touch.isActivelySelecting(Spannable)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.Touch.DragState>)"
"android.text.method.Touch.isActivelySelecting(Spannable)","java.lang.CharSequence.length()"
"android.text.method.Touch.isSelectionStarted(Spannable)","android.text.Spanned.getSpans(int, int, java.lang.Class<android.text.method.Touch.DragState>)"
"android.text.method.Touch.isSelectionStarted(Spannable)","java.lang.CharSequence.length()"
"android.text.method.Touch.scrollTo(TextView, Layout, int, int)","android.text.Layout.getLineRight(int)"
"android.text.method.Touch.scrollTo(TextView, Layout, int, int)","android.text.Layout.getParagraphDirection(int)"
"android.text.method.Touch.scrollTo(TextView, Layout, int, int)","android.text.Layout.getLineForVertical(int)"
"android.text.method.Touch.scrollTo(TextView, Layout, int, int)","android.text.Layout.getParagraphAlignment(int)"
"android.text.method.Touch.scrollTo(TextView, Layout, int, int)","java.lang.Math.max(int, float)"
"android.text.method.Touch.scrollTo(TextView, Layout, int, int)","android.text.Layout.getLineLeft(int)"
"android.text.method.Touch.scrollTo(TextView, Layout, int, int)","java.lang.Math.min(int, float)"
"android.text.method.Touch.scrollTo(TextView, Layout, int, int)","java.lang.Math.max(int, int)"
"android.text.method.Touch.scrollTo(TextView, Layout, int, int)","java.lang.Math.min(int, int)"
"com.android.internal.os.ProcessCpuTracker.update()","android.os.Process.readProcFile(java.lang.String, int[], null, long[], null)"
"com.android.internal.os.ProcessCpuTracker.update()","com.android.internal.os.ProcessCpuTracker.onLoadChanged(float, float, float)"
"com.android.internal.os.ProcessCpuTracker.update()","android.os.SystemClock.uptimeMillis()"
"com.android.internal.os.ProcessCpuTracker.update()","android.os.SystemClock.elapsedRealtime()"
"com.android.internal.os.ProcessCpuTracker.update()","android.os.StrictMode.allowThreadDiskReads()"
"com.android.internal.os.ProcessCpuTracker.update()","com.android.internal.os.ProcessCpuTracker.collectStats(java.lang.String, int, boolean, int[], java.util.ArrayList<com.android.internal.os.ProcessCpuTracker.Stats>)"
"com.android.internal.os.ProcessCpuTracker.update()","android.os.StrictMode.setThreadPolicy(android.os.StrictMode.ThreadPolicy)"
"com.android.internal.os.ProcessCpuTracker.update()","android.os.Process.readProcFile(java.lang.String, int[], null, null, float[])"
"com.android.internal.os.ProcessCpuTracker.printCurrentState(long)","java.io.PrintWriter.print(long)"
"com.android.internal.os.ProcessCpuTracker.printCurrentState(long)","java.util.ArrayList.size()"
"com.android.internal.os.ProcessCpuTracker.printCurrentState(long)","com.android.internal.os.ProcessCpuTracker.printProcessCPU(java.io.PrintWriter, java.lang.String, int, java.lang.String, int, int, int, int, int, int, int, int)"
"com.android.internal.os.ProcessCpuTracker.printCurrentState(long)","java.io.PrintWriter.println(java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.printCurrentState(long)","com.android.internal.os.ProcessCpuTracker.buildWorkingProcs()"
"com.android.internal.os.ProcessCpuTracker.printCurrentState(long)","java.util.ArrayList.get(int)"
"com.android.internal.os.ProcessCpuTracker.printCurrentState(long)","java.io.PrintWriter.flush()"
"com.android.internal.os.ProcessCpuTracker.printCurrentState(long)","java.io.StringWriter.toString()"
"com.android.internal.os.ProcessCpuTracker.printCurrentState(long)","java.io.PrintWriter.print(java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","android.os.Process.readProcFile(java.lang.String, int[], null, long[], null)"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","java.util.ArrayList.size()"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","android.os.SystemClock.uptimeMillis()"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","android.os.Process.getPids(java.lang.String, int[])"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","com.android.internal.os.ProcessCpuTracker.collectStats(java.lang.String, int, boolean, int[], java.util.ArrayList<com.android.internal.os.ProcessCpuTracker.Stats>)"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","android.os.Process.readProcFile(java.lang.String, int[], java.lang.String[], long[], null)"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","java.lang.String.toString()"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","java.util.ArrayList.add(int, com.android.internal.os.ProcessCpuTracker.Stats)"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","com.android.internal.os.ProcessCpuTracker.getName(com.android.internal.os.ProcessCpuTracker.Stats, java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","java.util.ArrayList.remove(int)"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","com.android.internal.os.ProcessCpuTracker.onMeasureProcessName(java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.collectStats(String, int, boolean, int[], ArrayList)","java.util.ArrayList.get(int)"
"com.android.internal.os.ProcessCpuTracker.buildWorkingProcs()","java.util.ArrayList.size()"
"com.android.internal.os.ProcessCpuTracker.buildWorkingProcs()","java.util.Collections.sort(java.util.ArrayList<com.android.internal.os.ProcessCpuTracker.Stats>, java.util.Comparator<com.android.internal.os.ProcessCpuTracker.Stats>)"
"com.android.internal.os.ProcessCpuTracker.buildWorkingProcs()","java.util.ArrayList.add(com.android.internal.os.ProcessCpuTracker.Stats)"
"com.android.internal.os.ProcessCpuTracker.buildWorkingProcs()","java.util.ArrayList.get(int)"
"com.android.internal.os.ProcessCpuTracker.buildWorkingProcs()","java.util.ArrayList.clear()"
"com.android.internal.os.ProcessCpuTracker.init()","com.android.internal.os.ProcessCpuTracker.update()"
"com.android.internal.os.ProcessCpuTracker.getWorkingStats(int)","java.util.ArrayList.get(int)"
"com.android.internal.os.ProcessCpuTracker.printCurrentLoad()","java.io.PrintWriter.println(float)"
"com.android.internal.os.ProcessCpuTracker.printCurrentLoad()","java.io.PrintWriter.flush()"
"com.android.internal.os.ProcessCpuTracker.printCurrentLoad()","java.io.StringWriter.toString()"
"com.android.internal.os.ProcessCpuTracker.printCurrentLoad()","java.io.PrintWriter.print(java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.printCurrentLoad()","java.io.PrintWriter.print(float)"
"com.android.internal.os.ProcessCpuTracker.printRatio(PrintWriter, long, long)","java.io.PrintWriter.print(long)"
"com.android.internal.os.ProcessCpuTracker.printRatio(PrintWriter, long, long)","java.io.PrintWriter.print(char)"
"com.android.internal.os.ProcessCpuTracker.countStats()","java.util.ArrayList.size()"
"com.android.internal.os.ProcessCpuTracker.getCpuSpeedTimes(long[])","java.util.StringTokenizer.hasMoreElements()"
"com.android.internal.os.ProcessCpuTracker.getCpuSpeedTimes(long[])","java.lang.Long.parseLong(java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.getCpuSpeedTimes(long[])","java.util.StringTokenizer.nextToken()"
"com.android.internal.os.ProcessCpuTracker.getCpuSpeedTimes(long[])","com.android.internal.os.ProcessCpuTracker.readFile(java.lang.String, char)"
"com.android.internal.os.ProcessCpuTracker.getCpuSpeedTimes(long[])","java.lang.System.arraycopy(long[], int, long[], int, int)"
"com.android.internal.os.ProcessCpuTracker.printProcessCPU(PrintWriter, String, int, String, int, int, int, int, int, int, int, int)","java.io.PrintWriter.print(int)"
"com.android.internal.os.ProcessCpuTracker.printProcessCPU(PrintWriter, String, int, String, int, int, int, int, int, int, int, int)","com.android.internal.os.ProcessCpuTracker.printRatio(java.io.PrintWriter, int, int)"
"com.android.internal.os.ProcessCpuTracker.printProcessCPU(PrintWriter, String, int, String, int, int, int, int, int, int, int, int)","java.io.PrintWriter.println()"
"com.android.internal.os.ProcessCpuTracker.printProcessCPU(PrintWriter, String, int, String, int, int, int, int, int, int, int, int)","java.io.PrintWriter.print(java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.countWorkingStats()","java.util.ArrayList.size()"
"com.android.internal.os.ProcessCpuTracker.countWorkingStats()","com.android.internal.os.ProcessCpuTracker.buildWorkingProcs()"
"com.android.internal.os.ProcessCpuTracker.getCpuTimeForPid(int)","android.os.Process.readProcFile(java.lang.String, int[], null, long[], null)"
"com.android.internal.os.ProcessCpuTracker.readFile(String, char)","java.io.FileInputStream.close()"
"com.android.internal.os.ProcessCpuTracker.readFile(String, char)","android.os.StrictMode.allowThreadDiskReads()"
"com.android.internal.os.ProcessCpuTracker.readFile(String, char)","java.io.FileInputStream.read(byte[])"
"com.android.internal.os.ProcessCpuTracker.readFile(String, char)","android.os.StrictMode.setThreadPolicy(android.os.StrictMode.ThreadPolicy)"
"com.android.internal.os.ProcessCpuTracker.getLastCpuSpeedTimes()","com.android.internal.os.ProcessCpuTracker.getCpuSpeedTimes(null)"
"com.android.internal.os.ProcessCpuTracker.getLastCpuSpeedTimes()","com.android.internal.os.ProcessCpuTracker.getCpuSpeedTimes(long[])"
"com.android.internal.os.ProcessCpuTracker.getStats(int)","java.util.ArrayList.get(int)"
"com.android.internal.os.ProcessCpuTracker.getName(Stats, String)","java.lang.String.substring(int)"
"com.android.internal.os.ProcessCpuTracker.getName(Stats, String)","java.lang.String.lastIndexOf(java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.getName(Stats, String)","java.lang.String.equals(java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.getName(Stats, String)","com.android.internal.os.ProcessCpuTracker.readFile(java.lang.String, char)"
"com.android.internal.os.ProcessCpuTracker.getName(Stats, String)","com.android.internal.os.ProcessCpuTracker.onMeasureProcessName(java.lang.String)"
"com.android.internal.os.ProcessCpuTracker.getName(Stats, String)","java.lang.String.length()"
"android.animation.AnimatorSet.pause()","android.animation.ValueAnimator.pause()"
"android.animation.AnimatorSet.pause()","android.animation.Animator.pause()"
"android.animation.AnimatorSet.setupStartValues()","android.animation.Animator.setupStartValues()"
"android.animation.AnimatorSet.after(Animator)","android.animation.AnimatorSet.Node.addDependency(android.animation.AnimatorSet.Dependency)"
"android.animation.AnimatorSet.after(Animator)","java.util.ArrayList.add(android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.after(Animator)","java.util.HashMap.get(android.animation.Animator)"
"android.animation.AnimatorSet.after(Animator)","java.util.HashMap.put(android.animation.Animator, android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.setTarget(Object)","android.animation.ObjectAnimator.setTarget(java.lang.Object)"
"android.animation.AnimatorSet.setTarget(Object)","android.animation.AnimatorSet.setTarget(java.lang.Object)"
"android.animation.AnimatorSet.isRunning()","android.animation.Animator.isRunning()"
"android.animation.AnimatorSet.resume()","android.animation.ValueAnimator.resume()"
"android.animation.AnimatorSet.resume()","android.animation.Animator.resume()"
"android.animation.AnimatorSet.canReverse()","android.animation.Animator.canReverse()"
"android.animation.AnimatorSet.canReverse()","android.animation.Animator.getStartDelay()"
"android.animation.AnimatorSet.playTogether(Animator[])","android.animation.AnimatorSet.play(android.animation.Animator)"
"android.animation.AnimatorSet.playTogether(Animator[])","android.animation.AnimatorSet.Builder.with(android.animation.Animator)"
"android.animation.AnimatorSet.after(long)","android.animation.ValueAnimator.setDuration(long)"
"android.animation.AnimatorSet.after(long)","android.animation.ValueAnimator.ofFloat(float, float)"
"android.animation.AnimatorSet.after(long)","android.animation.AnimatorSet.Builder.after(android.animation.ValueAnimator)"
"android.animation.AnimatorSet.getChildAnimations()","java.util.ArrayList.add(android.animation.Animator)"
"android.animation.AnimatorSet.playSequentially(Animator[])","android.animation.AnimatorSet.play(android.animation.Animator)"
"android.animation.AnimatorSet.playSequentially(Animator[])","android.animation.AnimatorSet.Builder.before(android.animation.Animator)"
"android.animation.AnimatorSet.reverse()","android.animation.Animator.reverse()"
"android.animation.AnimatorSet.reverse()","android.animation.AnimatorSet.canReverse()"
"android.animation.AnimatorSet.with(Animator)","android.animation.AnimatorSet.Node.addDependency(android.animation.AnimatorSet.Dependency)"
"android.animation.AnimatorSet.with(Animator)","java.util.ArrayList.add(android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.with(Animator)","java.util.HashMap.get(android.animation.Animator)"
"android.animation.AnimatorSet.with(Animator)","java.util.HashMap.put(android.animation.Animator, android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.startIfReady(Animator)","java.util.ArrayList.remove(android.animation.AnimatorSet.Dependency)"
"android.animation.AnimatorSet.startIfReady(Animator)","java.util.ArrayList.size()"
"android.animation.AnimatorSet.startIfReady(Animator)","android.animation.Animator.removeListener(android.animation.AnimatorSet.DependencyListener)"
"android.animation.AnimatorSet.startIfReady(Animator)","java.util.ArrayList.add(android.animation.Animator)"
"android.animation.AnimatorSet.startIfReady(Animator)","java.util.ArrayList.get(int)"
"android.animation.AnimatorSet.startIfReady(Animator)","android.animation.Animator.start()"
"android.animation.AnimatorSet.getChangingConfigurations()","java.util.ArrayList.size()"
"android.animation.AnimatorSet.getChangingConfigurations()","android.animation.Animator.getChangingConfigurations()"
"android.animation.AnimatorSet.getChangingConfigurations()","java.util.ArrayList.get(int)"
"android.animation.AnimatorSet.playTogether(Collection)","android.animation.AnimatorSet.play(android.animation.Animator)"
"android.animation.AnimatorSet.playTogether(Collection)","java.util.Collection.size()"
"android.animation.AnimatorSet.playTogether(Collection)","android.animation.AnimatorSet.Builder.with(android.animation.Animator)"
"android.animation.AnimatorSet.before(Animator)","android.animation.AnimatorSet.Node.addDependency(android.animation.AnimatorSet.Dependency)"
"android.animation.AnimatorSet.before(Animator)","java.util.ArrayList.add(android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.before(Animator)","java.util.HashMap.get(android.animation.Animator)"
"android.animation.AnimatorSet.before(Animator)","java.util.HashMap.put(android.animation.Animator, android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.playSequentially(List)","android.animation.AnimatorSet.play(android.animation.Animator)"
"android.animation.AnimatorSet.playSequentially(List)","java.util.List.size()"
"android.animation.AnimatorSet.playSequentially(List)","android.animation.AnimatorSet.Builder.before(android.animation.Animator)"
"android.animation.AnimatorSet.playSequentially(List)","java.util.List.get(int)"
"android.animation.AnimatorSet.start()","android.animation.Animator.addListener(android.animation.AnimatorSet.AnimatorSetListener)"
"android.animation.AnimatorSet.start()","android.animation.Animator.addListener(android.animation.AnimatorListenerAdapter)"
"android.animation.AnimatorSet.start()","java.util.ArrayList.add(android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.start()","java.util.ArrayList.add(android.animation.Animator)"
"android.animation.AnimatorSet.start()","android.animation.Animator.AnimatorListener.onAnimationStart(android.animation.AnimatorSet)"
"android.animation.AnimatorSet.start()","java.util.ArrayList.size()"
"android.animation.AnimatorSet.start()","android.animation.ValueAnimator.setDuration(long)"
"android.animation.AnimatorSet.start()","android.animation.Animator.setAllowRunningAsynchronously(boolean)"
"android.animation.AnimatorSet.start()","android.animation.ValueAnimator.start()"
"android.animation.AnimatorSet.start()","android.animation.Animator.addListener(android.animation.AnimatorSet.DependencyListener)"
"android.animation.AnimatorSet.start()","android.animation.Animator.setDuration(long)"
"android.animation.AnimatorSet.start()","android.animation.Animator.getListeners()"
"android.animation.AnimatorSet.start()","android.animation.ValueAnimator.ofFloat(float, float)"
"android.animation.AnimatorSet.start()","android.animation.Animator.AnimatorListener.onAnimationEnd(android.animation.AnimatorSet)"
"android.animation.AnimatorSet.start()","android.animation.AnimatorSet.sortNodes()"
"android.animation.AnimatorSet.start()","android.animation.Animator.removeListener(android.animation.Animator.AnimatorListener)"
"android.animation.AnimatorSet.start()","android.animation.Animator.setInterpolator(android.animation.TimeInterpolator)"
"android.animation.AnimatorSet.start()","java.util.ArrayList.clone()"
"android.animation.AnimatorSet.start()","java.util.ArrayList.get(int)"
"android.animation.AnimatorSet.start()","android.animation.Animator.start()"
"android.animation.AnimatorSet.cancel()","java.util.ArrayList.size()"
"android.animation.AnimatorSet.cancel()","android.animation.Animator.cancel()"
"android.animation.AnimatorSet.cancel()","android.animation.Animator.AnimatorListener.onAnimationEnd(android.animation.AnimatorSet)"
"android.animation.AnimatorSet.cancel()","android.animation.AnimatorSet.isStarted()"
"android.animation.AnimatorSet.cancel()","java.util.ArrayList.clone()"
"android.animation.AnimatorSet.cancel()","android.animation.Animator.AnimatorListener.onAnimationCancel(android.animation.AnimatorSet)"
"android.animation.AnimatorSet.cancel()","android.animation.ValueAnimator.isRunning()"
"android.animation.AnimatorSet.cancel()","android.animation.ValueAnimator.cancel()"
"android.animation.AnimatorSet.clone()","android.animation.Animator.clone()"
"android.animation.AnimatorSet.clone()","java.lang.Object.clone()"
"android.animation.AnimatorSet.setupEndValues()","android.animation.Animator.setupEndValues()"
"android.animation.AnimatorSet.addDependency(Dependency)","java.util.ArrayList.add(android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.addDependency(Dependency)","java.util.ArrayList.contains(android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.addDependency(Dependency)","java.util.ArrayList.add(android.animation.AnimatorSet.Dependency)"
"android.animation.AnimatorSet.sortNodes()","java.util.ArrayList.size()"
"android.animation.AnimatorSet.sortNodes()","java.util.ArrayList.add(android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.sortNodes()","java.util.ArrayList.addAll(java.util.ArrayList<android.animation.AnimatorSet.Node>)"
"android.animation.AnimatorSet.sortNodes()","java.util.ArrayList.contains(android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.sortNodes()","java.util.ArrayList.get(int)"
"android.animation.AnimatorSet.sortNodes()","java.util.ArrayList.clear()"
"android.animation.AnimatorSet.sortNodes()","java.util.ArrayList.remove(android.animation.AnimatorSet.Node)"
"android.animation.AnimatorSet.end()","android.animation.Animator.addListener(android.animation.AnimatorSet.AnimatorSetListener)"
"android.animation.AnimatorSet.end()","java.util.ArrayList.size()"
"android.animation.AnimatorSet.end()","android.animation.Animator.AnimatorListener.onAnimationEnd(android.animation.AnimatorSet)"
"android.animation.AnimatorSet.end()","android.animation.AnimatorSet.isStarted()"
"android.animation.AnimatorSet.end()","android.animation.AnimatorSet.sortNodes()"
"android.animation.AnimatorSet.end()","java.util.ArrayList.clone()"
"android.animation.AnimatorSet.end()","android.animation.Animator.end()"
"android.animation.AnimatorSet.end()","android.animation.ValueAnimator.cancel()"
"android.animation.AnimatorSet.onAnimationEnd(Animator)","android.animation.Animator.removeListener(android.animation.AnimatorSet.AnimatorSetListener)"
"android.animation.AnimatorSet.onAnimationEnd(Animator)","java.util.ArrayList.size()"
"android.animation.AnimatorSet.onAnimationEnd(Animator)","java.util.ArrayList.remove(android.animation.Animator)"
"android.animation.AnimatorSet.onAnimationEnd(Animator)","java.util.HashMap.get(android.animation.Animator)"
"android.animation.AnimatorSet.onAnimationEnd(Animator)","android.animation.Animator.AnimatorListener.onAnimationEnd(android.animation.AnimatorSet)"
"android.animation.AnimatorSet.onAnimationEnd(Animator)","java.util.ArrayList.clone()"
"android.animation.AnimatorSet.onAnimationEnd(Animator)","java.util.ArrayList.get(int)"
"android.animation.AnimatorSet.onAnimationCancel(Animator)","java.util.ArrayList.size()"
"android.animation.AnimatorSet.onAnimationCancel(Animator)","android.animation.Animator.AnimatorListener.onAnimationCancel(android.animation.AnimatorSet)"
"android.animation.AnimatorSet.onAnimationCancel(Animator)","java.util.ArrayList.get(int)"
"android.hardware.camera2.legacy.LegacyFaceDetectMapper.processFaceDetectMode(CaptureRequest, Camera.Parameters)","android.hardware.Camera.startFaceDetection()"
"android.hardware.camera2.legacy.LegacyFaceDetectMapper.processFaceDetectMode(CaptureRequest, Camera.Parameters)","android.hardware.Camera.stopFaceDetection()"
"android.hardware.camera2.legacy.LegacyFaceDetectMapper.processFaceDetectMode(CaptureRequest, Camera.Parameters)","android.hardware.camera2.utils.ParamsUtils.getOrDefault(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyFaceDetectMapper.processFaceDetectMode(CaptureRequest, Camera.Parameters)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.camera2.CaptureRequest, java.lang.String)"
"android.hardware.camera2.legacy.LegacyFaceDetectMapper.mapResultFaces(CameraMetadataNative, LegacyRequest)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.camera2.legacy.LegacyRequest, java.lang.String)"
"android.hardware.camera2.legacy.LegacyFaceDetectMapper.mapResultFaces(CameraMetadataNative, LegacyRequest)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<android.hardware.camera2.params.Face[]>, android.hardware.camera2.params.Face[])"
"android.hardware.camera2.legacy.LegacyFaceDetectMapper.mapResultFaces(CameraMetadataNative, LegacyRequest)","java.util.List.toArray(android.hardware.camera2.params.Face[])"
"android.hardware.camera2.legacy.LegacyFaceDetectMapper.mapResultFaces(CameraMetadataNative, LegacyRequest)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyFaceDetectMapper.mapResultFaces(CameraMetadataNative, LegacyRequest)","com.android.internal.util.Preconditions.checkNotNull(android.hardware.camera2.impl.CameraMetadataNative, java.lang.String)"
"com.android.internal.util.Predicates.or(Predicate<? super T>[])","java.util.Arrays.asList(com.android.internal.util.Predicate<? super T>[])"
"com.android.internal.util.Predicates.or(Predicate<? super T>[])","com.android.internal.util.Predicates.or(java.util.List<com.android.internal.util.Predicate<? super T>>)"
"com.android.internal.util.Predicates.and(Predicate<? super T>[])","com.android.internal.util.Predicates.and(java.util.List<com.android.internal.util.Predicate<? super T>>)"
"com.android.internal.util.Predicates.and(Predicate<? super T>[])","java.util.Arrays.asList(com.android.internal.util.Predicate<? super T>[])"
"com.android.internal.util.Predicates.apply(T)","com.android.internal.util.Predicate.apply(T)"
"android.app.Activity.onCreate(Bundle, PersistableBundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.app.Activity.hasView()","android.app.Activity.getWindow()"
"android.app.Activity.hasView()","android.view.Window.peekDecorView()"
"android.app.Activity.startActivityAsUser(Intent, UserHandle)","android.app.Activity.startActivityAsUser(android.content.Intent, null, android.os.UserHandle)"
"android.app.Activity.performRestart()","android.content.ContextWrapper.getApplicationInfo()"
"android.app.Activity.performRestart()","java.util.ArrayList.size()"
"android.app.Activity.performRestart()","android.app.Activity.performStart()"
"android.app.Activity.performRestart()","android.app.FragmentManagerImpl.noteStateNotSaved()"
"android.app.Activity.performRestart()","android.app.Instrumentation.callActivityOnRestart(android.app.Activity)"
"android.app.Activity.performRestart()","android.view.WindowManagerGlobal.getInstance()"
"android.app.Activity.performRestart()","java.util.ArrayList.get(int)"
"android.app.Activity.performRestart()","android.content.ComponentName.toShortString()"
"android.app.Activity.performRestart()","android.view.WindowManagerGlobal.setStoppedState(android.os.IBinder, boolean)"
"android.app.Activity.performRestart()","android.database.Cursor.requery()"
"android.app.Activity.onLowMemory()","android.app.FragmentManagerImpl.dispatchLowMemory()"
"android.app.Activity.startActivityIfNeeded(Intent, int)","android.app.Activity.startActivityIfNeeded(android.content.Intent, int, null)"
"android.app.Activity.dispatchTouchEvent(MotionEvent)","android.app.Activity.getWindow()"
"android.app.Activity.dispatchTouchEvent(MotionEvent)","android.view.Window.superDispatchTouchEvent(android.view.MotionEvent)"
"android.app.Activity.dispatchTouchEvent(MotionEvent)","android.app.Activity.onTouchEvent(android.view.MotionEvent)"
"android.app.Activity.dispatchTouchEvent(MotionEvent)","android.app.Activity.onUserInteraction()"
"android.app.Activity.dispatchTouchEvent(MotionEvent)","android.view.MotionEvent.getAction()"
"android.app.Activity.convertFromTranslucent()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.convertFromTranslucent()","android.app.IActivityManager.convertFromTranslucent(android.os.IBinder)"
"android.app.Activity.convertFromTranslucent()","android.view.WindowManagerGlobal.changeCanvasOpacity(android.os.IBinder, boolean)"
"android.app.Activity.convertFromTranslucent()","android.view.WindowManagerGlobal.getInstance()"
"android.app.Activity.setTitleColor(int)","android.app.Activity.onTitleChanged(java.lang.CharSequence, int)"
"android.app.Activity.recreate()","android.app.ActivityThread.requestRelaunchActivity(android.os.IBinder, null, null, int, boolean, null, boolean)"
"android.app.Activity.recreate()","android.os.Looper.myLooper()"
"android.app.Activity.recreate()","android.app.ActivityThread.getLooper()"
"android.app.Activity.startActivityFromFragment(Fragment, Intent, int, Bundle)","android.app.ActivityThread.getApplicationThread()"
"android.app.Activity.startActivityFromFragment(Fragment, Intent, int, Bundle)","android.app.Instrumentation.ActivityResult.getResultCode()"
"android.app.Activity.startActivityFromFragment(Fragment, Intent, int, Bundle)","android.app.ActivityThread.sendActivityResult(android.os.IBinder, java.lang.String, int, int, android.content.Intent)"
"android.app.Activity.startActivityFromFragment(Fragment, Intent, int, Bundle)","android.app.Instrumentation.ActivityResult.getResultData()"
"android.app.Activity.startActivityFromFragment(Fragment, Intent, int, Bundle)","android.app.ActivityTransitionState.startExitOutTransition(android.app.Activity, android.os.Bundle)"
"android.app.Activity.startActivityFromFragment(Fragment, Intent, int, Bundle)","android.app.Instrumentation.execStartActivity(android.app.Activity, android.app.ActivityThread.ApplicationThread, android.os.IBinder, android.app.Fragment, android.content.Intent, int, android.os.Bundle)"
"android.app.Activity.onCreateOptionsMenu(Menu)","android.app.Activity.onCreateOptionsMenu(android.view.Menu)"
"android.app.Activity.setActionBar(Toolbar)","android.app.ActionBar.invalidateOptionsMenu()"
"android.app.Activity.setActionBar(Toolbar)","android.app.Activity.getTitle()"
"android.app.Activity.setActionBar(Toolbar)","com.android.internal.app.ToolbarActionBar.getWrappedWindowCallback()"
"android.app.Activity.setActionBar(Toolbar)","android.view.Window.setCallback(android.view.Window.Callback)"
"android.app.Activity.setActionBar(Toolbar)","android.app.Activity.getActionBar()"
"android.app.Activity.makeVisible()","android.app.Activity.getWindow()"
"android.app.Activity.makeVisible()","android.view.View.setVisibility(int)"
"android.app.Activity.makeVisible()","android.app.Activity.getWindowManager()"
"android.app.Activity.makeVisible()","android.view.Window.getAttributes()"
"android.app.Activity.makeVisible()","android.view.ViewManager.addView(android.view.View, android.view.WindowManager.LayoutParams)"
"android.app.Activity.onRestoreInstanceState(Bundle, PersistableBundle)","android.app.Activity.onRestoreInstanceState(android.os.Bundle)"
"android.app.Activity.getPreferences(int)","android.content.ContextWrapper.getSharedPreferences(java.lang.String, int)"
"android.app.Activity.getPreferences(int)","android.app.Activity.getLocalClassName()"
"android.app.Activity.closeOptionsMenu()","android.view.Window.hasFeature(int)"
"android.app.Activity.closeOptionsMenu()","android.view.Window.closePanel(int)"
"android.app.Activity.getActivityToken()","android.app.Activity.getActivityToken()"
"android.app.Activity.setProgressBarIndeterminateVisibility(boolean)","android.app.Activity.getWindow()"
"android.app.Activity.setProgressBarIndeterminateVisibility(boolean)","android.view.Window.setFeatureInt(int, int)"
"android.app.Activity.performResume()","android.app.Instrumentation.callActivityOnResume(android.app.Activity)"
"android.app.Activity.performResume()","android.app.Activity.onPostResume()"
"android.app.Activity.performResume()","android.app.Activity.performRestart()"
"android.app.Activity.performResume()","android.app.FragmentManagerImpl.dispatchResume()"
"android.app.Activity.performResume()","android.content.ComponentName.toShortString()"
"android.app.Activity.performResume()","android.app.FragmentManagerImpl.execPendingActions()"
"android.app.Activity.onCreate(Bundle)","android.app.FragmentManagerImpl.restoreAllState(android.os.Parcelable, java.util.ArrayList<android.app.Fragment>)"
"android.app.Activity.onCreate(Bundle)","android.app.Application.dispatchActivityCreated(android.app.Activity, android.os.Bundle)"
"android.app.Activity.onCreate(Bundle)","android.app.ActionBar.setDefaultDisplayHomeAsUpEnabled(boolean)"
"android.app.Activity.onCreate(Bundle)","android.app.VoiceInteractor.attachActivity(android.app.Activity)"
"android.app.Activity.onCreate(Bundle)","android.app.FragmentManagerImpl.dispatchCreate()"
"android.app.Activity.onCreate(Bundle)","android.os.Bundle.getParcelable(java.lang.String)"
"android.app.Activity.onCreate(Bundle)","android.app.Activity.getApplication()"
"android.app.Activity.onPreparePanel(int, View, Menu)","android.app.FragmentManagerImpl.dispatchPrepareOptionsMenu(android.view.Menu)"
"android.app.Activity.onPreparePanel(int, View, Menu)","android.app.Activity.onPrepareOptionsMenu(android.view.Menu)"
"android.app.Activity.startSearch(String, boolean, Bundle, boolean)","android.app.Activity.ensureSearchManager()"
"android.app.Activity.startActivityForResult(Intent, int)","android.app.Activity.startActivityForResult(android.content.Intent, int, null)"
"android.app.Activity.onBackPressed()","android.app.Activity.finishAfterTransition()"
"android.app.Activity.onBackPressed()","android.app.ActionBar.collapseActionView()"
"android.app.Activity.onBackPressed()","android.app.FragmentManagerImpl.popBackStackImmediate()"
"android.app.Activity.onOptionsMenuClosed(Menu)","android.app.Activity.onOptionsMenuClosed(android.view.Menu)"
"android.app.Activity.removeDialog(int)","android.util.SparseArray.remove(int)"
"android.app.Activity.removeDialog(int)","android.util.SparseArray.get(int)"
"android.app.Activity.removeDialog(int)","android.app.Dialog.dismiss()"
"android.app.Activity.openContextMenu(View)","android.view.View.showContextMenu()"
"android.app.Activity.requestWindowFeature(int)","android.app.Activity.getWindow()"
"android.app.Activity.requestWindowFeature(int)","android.view.Window.requestFeature(int)"
"android.app.Activity.openOptionsMenu()","android.view.Window.hasFeature(int)"
"android.app.Activity.openOptionsMenu()","android.view.Window.openPanel(int, null)"
"android.app.Activity.openOptionsMenu()","android.app.ActionBar.openOptionsMenu()"
"android.app.Activity.finishAndRemoveTask()","android.app.Activity.finish(boolean)"
"android.app.Activity.onNavigateUpFromChild(Activity)","android.app.Activity.onNavigateUp()"
"android.app.Activity.startActivityFromChild(Activity, Intent, int)","android.app.Activity.startActivityFromChild(android.app.Activity, android.content.Intent, int, null)"
"android.app.Activity.startActivities(Intent[])","android.app.Activity.startActivities(android.content.Intent[], null)"
"android.app.Activity.onWindowAttributesChanged(WindowManager.LayoutParams)","android.view.ViewManager.updateViewLayout(android.view.View, android.view.WindowManager.LayoutParams)"
"android.app.Activity.onWindowAttributesChanged(WindowManager.LayoutParams)","android.app.Activity.getWindowManager()"
"android.app.Activity.onWindowAttributesChanged(WindowManager.LayoutParams)","android.view.View.getParent()"
"android.app.Activity.performCreate(Bundle, PersistableBundle)","android.app.Activity.onCreate(android.os.Bundle, android.os.PersistableBundle)"
"android.app.Activity.performCreate(Bundle, PersistableBundle)","android.app.ActivityTransitionState.readState(android.os.Bundle)"
"android.app.Activity.performCreate(Bundle, PersistableBundle)","android.app.Activity.performCreateCommon()"
"android.app.Activity.setFeatureDrawableUri(int, Uri)","android.view.Window.setFeatureDrawableUri(int, android.net.Uri)"
"android.app.Activity.setFeatureDrawableUri(int, Uri)","android.app.Activity.getWindow()"
"android.app.Activity.setVolumeControlStream(int)","android.app.Activity.getWindow()"
"android.app.Activity.setVolumeControlStream(int)","android.view.Window.setVolumeControlStream(int)"
"android.app.Activity.getTaskId()","android.app.IActivityManager.getTaskForActivity(android.os.IBinder, boolean)"
"android.app.Activity.getTaskId()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.onPostCreate(Bundle)","android.app.Activity.getTitleColor()"
"android.app.Activity.onPostCreate(Bundle)","android.app.Activity.isChild()"
"android.app.Activity.onPostCreate(Bundle)","android.app.Activity.getTitle()"
"android.app.Activity.onPostCreate(Bundle)","android.app.Activity.onTitleChanged(java.lang.CharSequence, int)"
"android.app.Activity.onPause()","android.app.Application.dispatchActivityPaused(android.app.Activity)"
"android.app.Activity.onPause()","android.app.Activity.getApplication()"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.app.FragmentManagerImpl.dispatchOptionsItemSelected(android.view.MenuItem)"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.app.FragmentManagerImpl.dispatchContextItemSelected(android.view.MenuItem)"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.app.Activity.onContextItemSelected(android.view.MenuItem)"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.util.EventLog.writeEvent(int, int, java.lang.String)"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.app.Activity.onOptionsItemSelected(android.view.MenuItem)"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","java.lang.CharSequence.toString()"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.view.MenuItem.getItemId()"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.app.ActionBar.getDisplayOptions()"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.view.MenuItem.getTitleCondensed()"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.app.Activity.onNavigateUp()"
"android.app.Activity.onMenuItemSelected(int, MenuItem)","android.app.Activity.onNavigateUpFromChild(android.app.Activity)"
"android.app.Activity.getLoaderManager()","android.app.Activity.getLoaderManager(java.lang.String, boolean, boolean)"
"android.app.Activity.isImmersive()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.isImmersive()","android.app.IActivityManager.isImmersive(android.os.IBinder)"
"android.app.Activity.startIntentSenderFromChild(Activity, IntentSender, int, Intent, int, int, int)","android.app.Activity.startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int, null)"
"android.app.Activity.setFinishOnTouchOutside(boolean)","android.view.Window.setCloseOnTouchOutside(boolean)"
"android.app.Activity.onPostResume()","android.view.Window.makeActive()"
"android.app.Activity.onPostResume()","android.app.Activity.getWindow()"
"android.app.Activity.onPostResume()","android.app.ActionBar.setShowHideAnimationEnabled(boolean)"
"android.app.Activity.hasWindowFocus()","android.app.Activity.getWindow()"
"android.app.Activity.hasWindowFocus()","android.view.View.hasWindowFocus()"
"android.app.Activity.hasWindowFocus()","android.view.Window.getDecorView()"
"android.app.Activity.startActivities(Intent[], Bundle)","android.app.ActivityThread.getApplicationThread()"
"android.app.Activity.startActivities(Intent[], Bundle)","android.app.Instrumentation.execStartActivities(android.app.Activity, android.app.ActivityThread.ApplicationThread, android.os.IBinder, android.app.Activity, android.content.Intent[], android.os.Bundle)"
"android.app.Activity.onCreateDialog(int, Bundle)","android.app.Activity.onCreateDialog(int)"
"android.app.Activity.startNextMatchingActivity(Intent, Bundle)","android.content.Intent.migrateExtraStreamToClipData()"
"android.app.Activity.startNextMatchingActivity(Intent, Bundle)","android.app.IActivityManager.startNextMatchingActivity(android.os.IBinder, android.content.Intent, android.os.Bundle)"
"android.app.Activity.startNextMatchingActivity(Intent, Bundle)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.startNextMatchingActivity(Intent, Bundle)","android.content.Intent.prepareToLeaveProcess()"
"android.app.Activity.isTaskRoot()","android.app.IActivityManager.getTaskForActivity(android.os.IBinder, boolean)"
"android.app.Activity.isTaskRoot()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.setDefaultKeyMode(int)","android.text.Selection.setSelection(android.text.SpannableStringBuilder, int)"
"android.app.Activity.showDialog(int, Bundle)","android.util.SparseArray.put(int, android.app.Activity.ManagedDialog)"
"android.app.Activity.showDialog(int, Bundle)","android.app.Activity.createDialog(int, null, android.os.Bundle)"
"android.app.Activity.showDialog(int, Bundle)","android.app.Dialog.show()"
"android.app.Activity.showDialog(int, Bundle)","android.util.SparseArray.get(int)"
"android.app.Activity.showDialog(int, Bundle)","android.app.Activity.onPrepareDialog(int, android.app.Dialog, android.os.Bundle)"
"android.app.Activity.onPanelClosed(int, Menu)","android.app.Activity.onOptionsMenuClosed(android.view.Menu)"
"android.app.Activity.onPanelClosed(int, Menu)","android.app.ActionBar.dispatchMenuVisibilityChanged(boolean)"
"android.app.Activity.onPanelClosed(int, Menu)","android.app.FragmentManagerImpl.dispatchOptionsMenuClosed(android.view.Menu)"
"android.app.Activity.onPanelClosed(int, Menu)","android.app.Activity.initWindowDecorActionBar()"
"android.app.Activity.onPanelClosed(int, Menu)","android.app.Activity.onContextMenuClosed(android.view.Menu)"
"android.app.Activity.performCreateCommon()","android.app.Activity.getActivityOptions()"
"android.app.Activity.performCreateCommon()","android.app.ActivityTransitionState.setEnterActivityOptions(android.app.Activity, android.app.ActivityOptions)"
"android.app.Activity.performCreateCommon()","android.app.FragmentManagerImpl.dispatchActivityCreated()"
"android.app.Activity.retainNonConfigurationInstances()","android.app.FragmentManagerImpl.retainNonConfig()"
"android.app.Activity.retainNonConfigurationInstances()","android.app.Activity.onRetainNonConfigurationChildInstances()"
"android.app.Activity.retainNonConfigurationInstances()","android.app.Activity.onRetainNonConfigurationInstance()"
"android.app.Activity.retainNonConfigurationInstances()","android.app.LoaderManagerImpl.doDestroy()"
"android.app.Activity.retainNonConfigurationInstances()","android.util.ArrayMap.valueAt(int)"
"android.app.Activity.retainNonConfigurationInstances()","android.util.ArrayMap.size()"
"android.app.Activity.retainNonConfigurationInstances()","android.util.ArrayMap.remove(java.lang.String)"
"android.app.Activity.dispatchGenericMotionEvent(MotionEvent)","android.app.Activity.getWindow()"
"android.app.Activity.dispatchGenericMotionEvent(MotionEvent)","android.view.Window.superDispatchGenericMotionEvent(android.view.MotionEvent)"
"android.app.Activity.dispatchGenericMotionEvent(MotionEvent)","android.app.Activity.onUserInteraction()"
"android.app.Activity.dispatchGenericMotionEvent(MotionEvent)","android.app.Activity.onGenericMotionEvent(android.view.MotionEvent)"
"android.app.Activity.getCallingPackage()","android.app.IActivityManager.getCallingPackage(android.os.IBinder)"
"android.app.Activity.getCallingPackage()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.onApplyThemeResource(Resources.Theme, int, boolean)","android.view.ContextThemeWrapper.onApplyThemeResource(android.content.res.Resources.Theme, int, boolean)"
"android.app.Activity.onApplyThemeResource(Resources.Theme, int, boolean)","android.view.ContextThemeWrapper.getTheme()"
"android.app.Activity.onApplyThemeResource(Resources.Theme, int, boolean)","android.content.res.Resources.Theme.applyStyle(int, boolean)"
"android.app.Activity.onApplyThemeResource(Resources.Theme, int, boolean)","android.content.res.TypedArray.recycle()"
"android.app.Activity.onApplyThemeResource(Resources.Theme, int, boolean)","android.app.Activity.setTaskDescription(android.app.ActivityManager.TaskDescription)"
"android.app.Activity.onApplyThemeResource(Resources.Theme, int, boolean)","android.content.res.Resources.Theme.setTo(android.content.res.Resources.Theme)"
"android.app.Activity.closeContextMenu()","android.view.Window.hasFeature(int)"
"android.app.Activity.closeContextMenu()","android.view.Window.closePanel(int)"
"android.app.Activity.onSaveInstanceState(Bundle)","android.os.Bundle.putParcelable(java.lang.String, android.os.Parcelable)"
"android.app.Activity.onSaveInstanceState(Bundle)","android.view.Window.saveHierarchyState()"
"android.app.Activity.onSaveInstanceState(Bundle)","android.app.Application.dispatchActivitySaveInstanceState(android.app.Activity, android.os.Bundle)"
"android.app.Activity.onSaveInstanceState(Bundle)","android.app.FragmentManagerImpl.saveAllState()"
"android.app.Activity.onSaveInstanceState(Bundle)","android.os.Bundle.putBundle(java.lang.String, android.os.Bundle)"
"android.app.Activity.onSaveInstanceState(Bundle)","android.app.Activity.getApplication()"
"android.app.Activity.startActivityForResultAsUser(Intent, int, UserHandle)","android.app.Activity.startActivityForResultAsUser(android.content.Intent, int, null, android.os.UserHandle)"
"android.app.Activity.managedQuery(Uri, String[], String, String)","android.app.Activity.startManagingCursor(android.database.Cursor)"
"android.app.Activity.managedQuery(Uri, String[], String, String)","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, null, java.lang.String)"
"android.app.Activity.managedQuery(Uri, String[], String, String)","android.content.ContextWrapper.getContentResolver()"
"android.app.Activity.onMenuOpened(int, Menu)","android.app.ActionBar.dispatchMenuVisibilityChanged(boolean)"
"android.app.Activity.onMenuOpened(int, Menu)","android.app.Activity.initWindowDecorActionBar()"
"android.app.Activity.getRequestedOrientation()","android.app.IActivityManager.getRequestedOrientation(android.os.IBinder)"
"android.app.Activity.getRequestedOrientation()","android.app.Activity.getRequestedOrientation()"
"android.app.Activity.getRequestedOrientation()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.performUserLeaving()","android.app.Activity.onUserInteraction()"
"android.app.Activity.performUserLeaving()","android.app.Activity.onUserLeaveHint()"
"android.app.Activity.showDialog(int)","android.app.Activity.showDialog(int, null)"
"android.app.Activity.finish()","android.app.Activity.finish(boolean)"
"android.app.Activity.finishAffinity()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.finishAffinity()","android.app.IActivityManager.finishActivityAffinity(android.os.IBinder)"
"android.app.Activity.navigateUpTo(Intent)","android.app.Activity.navigateUpToFromChild(android.app.Activity, android.content.Intent)"
"android.app.Activity.navigateUpTo(Intent)","android.content.Intent.resolveActivity(android.content.pm.PackageManager)"
"android.app.Activity.navigateUpTo(Intent)","android.content.Intent.setComponent(android.content.ComponentName)"
"android.app.Activity.navigateUpTo(Intent)","android.content.ContextWrapper.getPackageManager()"
"android.app.Activity.navigateUpTo(Intent)","android.app.IActivityManager.navigateUpTo(android.os.IBinder, android.content.Intent, int, android.content.Intent)"
"android.app.Activity.navigateUpTo(Intent)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.navigateUpTo(Intent)","android.content.Intent.getComponent()"
"android.app.Activity.navigateUpTo(Intent)","android.content.Intent.prepareToLeaveProcess()"
"android.app.Activity.performCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.app.Activity.performCreate(Bundle)","android.app.ActivityTransitionState.readState(android.os.Bundle)"
"android.app.Activity.performCreate(Bundle)","android.app.Activity.performCreateCommon()"
"android.app.Activity.overridePendingTransition(int, int)","android.app.IActivityManager.overridePendingTransition(android.os.IBinder, java.lang.String, int, int)"
"android.app.Activity.overridePendingTransition(int, int)","android.content.ContextWrapper.getPackageName()"
"android.app.Activity.overridePendingTransition(int, int)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.dismissDialog(int)","android.app.Activity.missingDialog(int)"
"android.app.Activity.dismissDialog(int)","android.util.SparseArray.get(int)"
"android.app.Activity.dismissDialog(int)","android.app.Dialog.dismiss()"
"android.app.Activity.setFeatureDrawableAlpha(int, int)","android.app.Activity.getWindow()"
"android.app.Activity.setFeatureDrawableAlpha(int, int)","android.view.Window.setFeatureDrawableAlpha(int, int)"
"android.app.Activity.getVolumeControlStream()","android.app.Activity.getWindow()"
"android.app.Activity.getVolumeControlStream()","android.view.Window.getVolumeControlStream()"
"android.app.Activity.onOptionsItemSelected(MenuItem)","android.app.Activity.onOptionsItemSelected(android.view.MenuItem)"
"android.app.Activity.setFeatureDrawableResource(int, int)","android.app.Activity.getWindow()"
"android.app.Activity.setFeatureDrawableResource(int, int)","android.view.Window.setFeatureDrawableResource(int, int)"
"android.app.Activity.onContextItemSelected(MenuItem)","android.app.Activity.onContextItemSelected(android.view.MenuItem)"
"android.app.Activity.getLayoutInflater()","android.app.Activity.getWindow()"
"android.app.Activity.getLayoutInflater()","android.view.Window.getLayoutInflater()"
"android.app.Activity.onCreateView(View, String, Context, AttributeSet)","java.lang.String.equals(java.lang.String)"
"android.app.Activity.onCreateView(View, String, Context, AttributeSet)","android.app.Activity.onCreateView(java.lang.String, android.content.Context, android.util.AttributeSet)"
"android.app.Activity.onCreateView(View, String, Context, AttributeSet)","android.app.FragmentManagerImpl.onCreateView(android.view.View, java.lang.String, android.content.Context, android.util.AttributeSet)"
"android.app.Activity.stopManagingCursor(Cursor)","java.util.ArrayList.size()"
"android.app.Activity.stopManagingCursor(Cursor)","java.util.ArrayList.remove(int)"
"android.app.Activity.stopManagingCursor(Cursor)","java.util.ArrayList.get(int)"
"android.app.Activity.performPause()","android.app.Activity.onPause()"
"android.app.Activity.performPause()","android.content.ContextWrapper.getApplicationInfo()"
"android.app.Activity.performPause()","android.content.ComponentName.toShortString()"
"android.app.Activity.performPause()","android.app.FragmentManagerImpl.dispatchPause()"
"android.app.Activity.dump(String, FileDescriptor, PrintWriter, String[])","android.app.Activity.dumpInner(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.app.Activity.onConfigurationChanged(Configuration)","android.app.ActionBar.onConfigurationChanged(android.content.res.Configuration)"
"android.app.Activity.onConfigurationChanged(Configuration)","android.app.FragmentManagerImpl.dispatchConfigurationChanged(android.content.res.Configuration)"
"android.app.Activity.onConfigurationChanged(Configuration)","android.view.Window.onConfigurationChanged(android.content.res.Configuration)"
"android.app.Activity.startLockTask()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.startLockTask()","android.app.IActivityManager.startLockTaskMode(android.os.IBinder)"
"android.app.Activity.getParentActivityIntent()","android.text.TextUtils.isEmpty(java.lang.String)"
"android.app.Activity.getParentActivityIntent()","android.content.Intent.setComponent(android.content.ComponentName)"
"android.app.Activity.getParentActivityIntent()","android.content.ContextWrapper.getPackageManager()"
"android.app.Activity.getParentActivityIntent()","android.content.Intent.makeMainActivity(android.content.ComponentName)"
"android.app.Activity.getParentActivityIntent()","android.content.pm.PackageManager.getActivityInfo(android.content.ComponentName, int)"
"android.app.Activity.dispatchKeyShortcutEvent(KeyEvent)","android.app.Activity.getWindow()"
"android.app.Activity.dispatchKeyShortcutEvent(KeyEvent)","android.app.Activity.onUserInteraction()"
"android.app.Activity.dispatchKeyShortcutEvent(KeyEvent)","android.app.Activity.onKeyShortcut(int, android.view.KeyEvent)"
"android.app.Activity.dispatchKeyShortcutEvent(KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.app.Activity.dispatchKeyShortcutEvent(KeyEvent)","android.view.Window.superDispatchKeyShortcutEvent(android.view.KeyEvent)"
"android.app.Activity.dispatchActivityResult(String, int, int, Intent)","android.app.FragmentManagerImpl.findFragmentByWho(java.lang.String)"
"android.app.Activity.dispatchActivityResult(String, int, int, Intent)","android.app.Fragment.onActivityResult(int, int, android.content.Intent)"
"android.app.Activity.dispatchActivityResult(String, int, int, Intent)","android.app.FragmentManagerImpl.noteStateNotSaved()"
"android.app.Activity.dispatchActivityResult(String, int, int, Intent)","android.app.Activity.onActivityResult(int, int, android.content.Intent)"
"android.app.Activity.startManagingCursor(Cursor)","java.util.ArrayList.add(android.app.Activity.ManagedCursor)"
"android.app.Activity.startActivity(Intent)","android.app.Activity.startActivity(android.content.Intent, null)"
"android.app.Activity.finishActivity(int)","android.app.Activity.finishActivityFromChild(android.app.Activity, int)"
"android.app.Activity.finishActivity(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.finishActivity(int)","android.app.IActivityManager.finishSubActivity(android.os.IBinder, java.lang.String, int)"
"android.app.Activity.onContextMenuClosed(Menu)","android.app.Activity.onContextMenuClosed(android.view.Menu)"
"android.app.Activity.onSaveInstanceState(Bundle, PersistableBundle)","android.app.Activity.onSaveInstanceState(android.os.Bundle)"
"android.app.Activity.onPostCreate(Bundle, PersistableBundle)","android.app.Activity.onPostCreate(android.os.Bundle)"
"android.app.Activity.onWindowStartingActionMode(ActionMode.Callback)","android.app.ActionBar.startActionMode(android.view.ActionMode.Callback)"
"android.app.Activity.onWindowStartingActionMode(ActionMode.Callback)","android.app.Activity.initWindowDecorActionBar()"
"android.app.Activity.startIntentSender(IntentSender, Intent, int, int, int, Bundle)","android.app.Activity.startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int)"
"android.app.Activity.startIntentSender(IntentSender, Intent, int, int, int, Bundle)","android.app.Activity.startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)"
"android.app.Activity.createPendingResult(int, Intent, int)","android.app.IActivityManager.getIntentSender(int, java.lang.String, android.os.IBinder, java.lang.String, int, android.content.Intent[], null, int, null, int)"
"android.app.Activity.createPendingResult(int, Intent, int)","android.content.ContextWrapper.getPackageName()"
"android.app.Activity.createPendingResult(int, Intent, int)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.createPendingResult(int, Intent, int)","android.content.Intent.prepareToLeaveProcess()"
"android.app.Activity.createPendingResult(int, Intent, int)","android.os.UserHandle.myUserId()"
"android.app.Activity.setContentView(View, ViewGroup.LayoutParams)","android.app.Activity.getWindow()"
"android.app.Activity.setContentView(View, ViewGroup.LayoutParams)","android.app.Activity.initWindowDecorActionBar()"
"android.app.Activity.setContentView(View, ViewGroup.LayoutParams)","android.view.Window.setContentView(android.view.View, android.view.ViewGroup.LayoutParams)"
"android.app.Activity.startActivityIfNeeded(Intent, int, Bundle)","android.content.Intent.migrateExtraStreamToClipData()"
"android.app.Activity.startActivityIfNeeded(Intent, int, Bundle)","android.app.ActivityThread.getApplicationThread()"
"android.app.Activity.startActivityIfNeeded(Intent, int, Bundle)","android.content.ContextWrapper.getBasePackageName()"
"android.app.Activity.startActivityIfNeeded(Intent, int, Bundle)","android.app.IActivityManager.startActivity(android.app.ActivityThread.ApplicationThread, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, null, android.os.Bundle)"
"android.app.Activity.startActivityIfNeeded(Intent, int, Bundle)","android.content.ContextWrapper.getContentResolver()"
"android.app.Activity.startActivityIfNeeded(Intent, int, Bundle)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.startActivityIfNeeded(Intent, int, Bundle)","android.content.Intent.resolveTypeIfNeeded(android.content.ContentResolver)"
"android.app.Activity.startActivityIfNeeded(Intent, int, Bundle)","android.content.Intent.prepareToLeaveProcess()"
"android.app.Activity.startActivityIfNeeded(Intent, int, Bundle)","android.app.Instrumentation.checkStartActivityResult(int, android.content.Intent)"
"android.app.Activity.invalidateOptionsMenu()","android.view.Window.hasFeature(int)"
"android.app.Activity.invalidateOptionsMenu()","android.app.ActionBar.invalidateOptionsMenu()"
"android.app.Activity.invalidateOptionsMenu()","android.view.Window.invalidatePanelMenu(int)"
"android.app.Activity.triggerSearch(String, Bundle)","android.app.Activity.ensureSearchManager()"
"android.app.Activity.triggerSearch(String, Bundle)","android.app.SearchManager.triggerSearch(java.lang.String, android.content.ComponentName, android.os.Bundle)"
"android.app.Activity.triggerSearch(String, Bundle)","android.app.Activity.getComponentName()"
"android.app.Activity.startActionMode(ActionMode.Callback)","android.view.View.startActionMode(android.view.ActionMode.Callback)"
"android.app.Activity.startActionMode(ActionMode.Callback)","android.view.Window.getDecorView()"
"android.app.Activity.startNextMatchingActivity(Intent)","android.app.Activity.startNextMatchingActivity(android.content.Intent, null)"
"android.app.Activity.onSearchRequested()","android.view.ContextThemeWrapper.getResources()"
"android.app.Activity.onSearchRequested()","android.content.res.Resources.getConfiguration()"
"android.app.Activity.onSearchRequested()","android.app.Activity.startSearch(null, boolean, null, boolean)"
"android.app.Activity.dispatchEnterAnimationComplete()","android.app.Activity.getWindow()"
"android.app.Activity.dispatchEnterAnimationComplete()","android.view.View.getViewTreeObserver()"
"android.app.Activity.dispatchEnterAnimationComplete()","android.app.Activity.onEnterAnimationComplete()"
"android.app.Activity.dispatchEnterAnimationComplete()","android.view.Window.getDecorView()"
"android.app.Activity.dispatchEnterAnimationComplete()","android.view.ViewTreeObserver.dispatchOnEnterAnimationComplete()"
"android.app.Activity.setTitle(int)","android.app.Activity.setTitle(java.lang.CharSequence)"
"android.app.Activity.setTitle(int)","android.content.Context.getText(int)"
"android.app.Activity.startPostponedEnterTransition()","android.app.ActivityTransitionState.startPostponedEnterTransition()"
"android.app.Activity.invalidateFragment(String)","android.app.LoaderManagerImpl.doDestroy()"
"android.app.Activity.invalidateFragment(String)","android.util.ArrayMap.get(java.lang.String)"
"android.app.Activity.invalidateFragment(String)","android.util.ArrayMap.remove(java.lang.String)"
"android.app.Activity.finish(boolean)","android.app.Activity.finishFromChild(android.app.Activity)"
"android.app.Activity.finish(boolean)","android.app.IActivityManager.finishActivity(android.os.IBinder, int, android.content.Intent, boolean)"
"android.app.Activity.finish(boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.finish(boolean)","android.content.Intent.prepareToLeaveProcess()"
"android.app.Activity.finishActivityFromChild(Activity, int)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.finishActivityFromChild(Activity, int)","android.app.IActivityManager.finishSubActivity(android.os.IBinder, java.lang.String, int)"
"android.app.Activity.saveManagedDialogs(Bundle)","android.util.SparseArray.valueAt(int)"
"android.app.Activity.saveManagedDialogs(Bundle)","android.os.BaseBundle.putIntArray(java.lang.String, int[])"
"android.app.Activity.saveManagedDialogs(Bundle)","android.util.SparseArray.size()"
"android.app.Activity.saveManagedDialogs(Bundle)","android.app.Activity.savedDialogKeyFor(int)"
"android.app.Activity.saveManagedDialogs(Bundle)","android.util.SparseArray.keyAt(int)"
"android.app.Activity.saveManagedDialogs(Bundle)","android.app.Activity.savedDialogArgsKeyFor(int)"
"android.app.Activity.saveManagedDialogs(Bundle)","android.os.Bundle.putBundle(java.lang.String, android.os.Bundle)"
"android.app.Activity.saveManagedDialogs(Bundle)","android.app.Dialog.onSaveInstanceState()"
"android.app.Activity.performDestroy()","android.view.Window.destroy()"
"android.app.Activity.performDestroy()","android.app.FragmentManagerImpl.dispatchDestroy()"
"android.app.Activity.performDestroy()","android.app.Activity.onDestroy()"
"android.app.Activity.performDestroy()","android.app.LoaderManagerImpl.doDestroy()"
"android.app.Activity.performDestroy()","android.app.VoiceInteractor.detachActivity()"
"android.app.Activity.convertToTranslucent(TranslucentConversionListener, ActivityOptions)","android.app.IActivityManager.convertToTranslucent(android.os.IBinder, android.app.ActivityOptions)"
"android.app.Activity.convertToTranslucent(TranslucentConversionListener, ActivityOptions)","android.app.Activity.TranslucentConversionListener.onTranslucentConversionComplete(boolean)"
"android.app.Activity.convertToTranslucent(TranslucentConversionListener, ActivityOptions)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.convertToTranslucent(TranslucentConversionListener, ActivityOptions)","android.view.WindowManagerGlobal.changeCanvasOpacity(android.os.IBinder, boolean)"
"android.app.Activity.convertToTranslucent(TranslucentConversionListener, ActivityOptions)","android.view.WindowManagerGlobal.getInstance()"
"android.app.Activity.takeKeyEvents(boolean)","android.app.Activity.getWindow()"
"android.app.Activity.takeKeyEvents(boolean)","android.view.Window.takeKeyEvents(boolean)"
"android.app.Activity.onCreateNavigateUpTaskStack(TaskStackBuilder)","android.app.TaskStackBuilder.addParentStack(android.app.Activity)"
"android.app.Activity.managedQuery(Uri, String[], String, String[], String)","android.app.Activity.startManagingCursor(android.database.Cursor)"
"android.app.Activity.managedQuery(Uri, String[], String, String[], String)","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)"
"android.app.Activity.managedQuery(Uri, String[], String, String[], String)","android.content.ContextWrapper.getContentResolver()"
"android.app.Activity.startIntentSender(IntentSender, Intent, int, int, int)","android.app.Activity.startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, null)"
"android.app.Activity.startActivity(Intent, Bundle)","android.app.Activity.startActivityForResult(android.content.Intent, int, android.os.Bundle)"
"android.app.Activity.startActivity(Intent, Bundle)","android.app.Activity.startActivityForResult(android.content.Intent, int)"
"android.app.Activity.findViewById(int)","android.app.Activity.getWindow()"
"android.app.Activity.findViewById(int)","android.view.Window.findViewById(int)"
"android.app.Activity.onNewActivityOptions(ActivityOptions)","android.app.ActivityTransitionState.enterReady(android.app.Activity)"
"android.app.Activity.onNewActivityOptions(ActivityOptions)","android.app.ActivityTransitionState.setEnterActivityOptions(android.app.Activity, android.app.ActivityOptions)"
"android.app.Activity.onRestoreInstanceState(Bundle)","android.os.Bundle.getBundle(java.lang.String)"
"android.app.Activity.onRestoreInstanceState(Bundle)","android.view.Window.restoreHierarchyState(android.os.Bundle)"
"android.app.Activity.onStart()","android.app.Application.dispatchActivityStarted(android.app.Activity)"
"android.app.Activity.onStart()","android.app.LoaderManagerImpl.doStart()"
"android.app.Activity.onStart()","android.app.Activity.getLoaderManager(java.lang.String, boolean, boolean)"
"android.app.Activity.onStart()","android.app.Activity.getApplication()"
"android.app.Activity.onPrepareOptionsMenu(Menu)","android.app.Activity.onPrepareOptionsMenu(android.view.Menu)"
"android.app.Activity.reportFullyDrawn()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.reportFullyDrawn()","android.app.IActivityManager.reportActivityFullyDrawn(android.os.IBinder)"
"android.app.Activity.dispatchKeyEvent(KeyEvent)","android.app.Activity.getWindow()"
"android.app.Activity.dispatchKeyEvent(KeyEvent)","android.app.Activity.onUserInteraction()"
"android.app.Activity.dispatchKeyEvent(KeyEvent)","android.view.Window.superDispatchKeyEvent(android.view.KeyEvent)"
"android.app.Activity.dispatchKeyEvent(KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.app.Activity.dispatchKeyEvent(KeyEvent)","android.app.ActionBar.onMenuKeyEvent(android.view.KeyEvent)"
"android.app.Activity.dispatchKeyEvent(KeyEvent)","android.view.View.getKeyDispatcherState()"
"android.app.Activity.dispatchKeyEvent(KeyEvent)","android.view.KeyEvent.dispatch(android.app.Activity, android.view.KeyEvent.DispatcherState, android.app.Activity)"
"android.app.Activity.dispatchKeyEvent(KeyEvent)","android.view.Window.getDecorView()"
"android.app.Activity.postponeEnterTransition()","android.app.ActivityTransitionState.postponeEnterTransition()"
"android.app.Activity.onTrimMemory(int)","android.app.FragmentManagerImpl.dispatchTrimMemory(int)"
"android.app.Activity.stopLockTask()","android.app.IActivityManager.stopLockTaskMode()"
"android.app.Activity.stopLockTask()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.setContentView(int)","android.app.Activity.getWindow()"
"android.app.Activity.setContentView(int)","android.app.Activity.initWindowDecorActionBar()"
"android.app.Activity.setContentView(int)","android.view.Window.setContentView(int)"
"android.app.Activity.onDestroy()","android.util.SparseArray.valueAt(int)"
"android.app.Activity.onDestroy()","java.util.ArrayList.size()"
"android.app.Activity.onDestroy()","android.app.SearchManager.stopSearch()"
"android.app.Activity.onDestroy()","android.util.SparseArray.size()"
"android.app.Activity.onDestroy()","android.app.Dialog.isShowing()"
"android.app.Activity.onDestroy()","android.app.Application.dispatchActivityDestroyed(android.app.Activity)"
"android.app.Activity.onDestroy()","android.database.Cursor.close()"
"android.app.Activity.onDestroy()","android.app.Dialog.dismiss()"
"android.app.Activity.onDestroy()","java.util.ArrayList.get(int)"
"android.app.Activity.onDestroy()","java.util.ArrayList.clear()"
"android.app.Activity.onDestroy()","android.app.Activity.getApplication()"
"android.app.Activity.startIntentSenderForResultInner(IntentSender, int, Intent, int, int, Activity, Bundle)","android.content.Intent.migrateExtraStreamToClipData()"
"android.app.Activity.startIntentSenderForResultInner(IntentSender, int, Intent, int, int, Activity, Bundle)","android.app.ActivityThread.getApplicationThread()"
"android.app.Activity.startIntentSenderForResultInner(IntentSender, int, Intent, int, int, Activity, Bundle)","android.app.IActivityManager.startActivityIntentSender(android.app.ActivityThread.ApplicationThread, android.content.IntentSender, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle)"
"android.app.Activity.startIntentSenderForResultInner(IntentSender, int, Intent, int, int, Activity, Bundle)","android.content.ContextWrapper.getContentResolver()"
"android.app.Activity.startIntentSenderForResultInner(IntentSender, int, Intent, int, int, Activity, Bundle)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.startIntentSenderForResultInner(IntentSender, int, Intent, int, int, Activity, Bundle)","android.content.Intent.resolveTypeIfNeeded(android.content.ContentResolver)"
"android.app.Activity.startIntentSenderForResultInner(IntentSender, int, Intent, int, int, Activity, Bundle)","android.app.Instrumentation.checkStartActivityResult(int, null)"
"android.app.Activity.startIntentSenderForResultInner(IntentSender, int, Intent, int, int, Activity, Bundle)","android.content.Intent.prepareToLeaveProcess()"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","android.view.ViewRootImpl.dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","java.lang.System.identityHashCode(android.app.Activity)"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","android.view.Window.peekDecorView()"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(android.content.res.Configuration)"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(boolean)"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","android.view.View.getViewRootImpl()"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","android.os.Handler.getLooper()"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","java.lang.System.identityHashCode(android.app.LoaderManagerImpl)"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","android.app.Activity.getWindow()"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(java.lang.String)"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","android.app.LoaderManagerImpl.dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","android.app.FragmentManagerImpl.dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","java.lang.Integer.toHexString(int)"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","android.os.Looper.dump(android.util.PrintWriterPrinter, java.lang.String)"
"android.app.Activity.dumpInner(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(boolean)"
"android.app.Activity.unregisterForContextMenu(View)","android.view.View.setOnCreateContextMenuListener(null)"
"android.app.Activity.onNavigateUp()","android.app.Activity.getParentActivityIntent()"
"android.app.Activity.onNavigateUp()","android.app.Activity.finish()"
"android.app.Activity.onNavigateUp()","android.app.Activity.onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)"
"android.app.Activity.onNavigateUp()","android.app.Activity.finishAffinity()"
"android.app.Activity.onNavigateUp()","android.app.Activity.navigateUpTo(android.content.Intent)"
"android.app.Activity.onNavigateUp()","android.app.TaskStackBuilder.create(android.app.Activity)"
"android.app.Activity.onNavigateUp()","android.app.TaskStackBuilder.startActivities()"
"android.app.Activity.onNavigateUp()","android.app.Activity.onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)"
"android.app.Activity.onNavigateUp()","android.app.Activity.shouldUpRecreateTask(android.content.Intent)"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.app.ActivityThread.getApplicationThread()"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.app.Instrumentation.ActivityResult.getResultCode()"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.app.Activity.startActivityFromChild(android.app.Activity, android.content.Intent, int)"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.app.ActivityThread.sendActivityResult(android.os.IBinder, java.lang.String, int, int, android.content.Intent)"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.view.View.cancelPendingInputEvents()"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.app.Instrumentation.ActivityResult.getResultData()"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.view.Window.peekDecorView()"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.app.Activity.startActivityFromChild(android.app.Activity, android.content.Intent, int, android.os.Bundle)"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.app.ActivityTransitionState.startExitOutTransition(android.app.Activity, android.os.Bundle)"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.app.Instrumentation.execStartActivity(android.app.Activity, android.app.ActivityThread.ApplicationThread, android.os.IBinder, android.app.Activity, android.content.Intent, int, android.os.Bundle)"
"android.app.Activity.startActivityForResult(Intent, int, Bundle)","android.app.Activity.isTopOfTask()"
"android.app.Activity.setSecondaryProgress(int)","android.app.Activity.getWindow()"
"android.app.Activity.setSecondaryProgress(int)","android.view.Window.setFeatureInt(int, int)"
"android.app.Activity.setVisible(boolean)","android.app.Activity.makeVisible()"
"android.app.Activity.setVisible(boolean)","android.view.View.setVisibility(int)"
"android.app.Activity.startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle)","android.app.Activity.startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int)"
"android.app.Activity.startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle)","android.app.Activity.startIntentSenderForResultInner(android.content.IntentSender, int, android.content.Intent, int, int, android.app.Activity, android.os.Bundle)"
"android.app.Activity.startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle)","android.app.Activity.startIntentSenderFromChild(android.app.Activity, android.content.IntentSender, int, android.content.Intent, int, int, int, android.os.Bundle)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.content.ComponentName.flattenToString()"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","java.lang.Thread.currentThread()"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.content.Intent.getComponent()"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.Window.setCallback(android.app.Activity)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.Window.setOnWindowDismissedCallback(android.app.Activity)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.Window.setSoftInputMode(int)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.Window.getWindowManager()"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.ContextThemeWrapper.attachBaseContext(android.content.Context)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.content.Context.getSystemService(java.lang.String)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.Window.setContainer(android.view.Window)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.app.Activity.getWindow()"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.Window.getLayoutInflater()"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.os.Looper.myLooper()"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.app.FragmentManagerImpl.attachActivity(android.app.Activity, android.app.FragmentContainer, null)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","com.android.internal.policy.PolicyManager.makeNewWindow(android.app.Activity)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.Window.setWindowManager(android.view.WindowManager, android.os.IBinder, java.lang.String, boolean)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.LayoutInflater.setPrivateFactory(android.app.Activity)"
"android.app.Activity.attach(Context, ActivityThread, Instrumentation, IBinder, int, Application, Intent, ActivityInfo, CharSequence, Activity, String, NonConfigurationInstances, Configuration, String, IVoiceInteractor)","android.view.Window.setUiOptions(int)"
"android.app.Activity.initWindowDecorActionBar()","android.app.Activity.getWindow()"
"android.app.Activity.initWindowDecorActionBar()","android.view.Window.hasFeature(int)"
"android.app.Activity.initWindowDecorActionBar()","android.app.Activity.isChild()"
"android.app.Activity.initWindowDecorActionBar()","android.view.Window.setDefaultIcon(int)"
"android.app.Activity.initWindowDecorActionBar()","android.view.Window.setDefaultLogo(int)"
"android.app.Activity.initWindowDecorActionBar()","android.content.pm.ComponentInfo.getLogoResource()"
"android.app.Activity.initWindowDecorActionBar()","android.app.ActionBar.setDefaultDisplayHomeAsUpEnabled(boolean)"
"android.app.Activity.initWindowDecorActionBar()","android.view.Window.getDecorView()"
"android.app.Activity.initWindowDecorActionBar()","android.content.pm.ComponentInfo.getIconResource()"
"android.app.Activity.onResume()","android.app.Application.dispatchActivityResumed(android.app.Activity)"
"android.app.Activity.onResume()","android.app.ActivityTransitionState.onResume()"
"android.app.Activity.onResume()","android.app.Activity.getApplication()"
"android.app.Activity.getMediaController()","android.app.Activity.getWindow()"
"android.app.Activity.getMediaController()","android.view.Window.getMediaController()"
"android.app.Activity.moveTaskToBack(boolean)","android.app.IActivityManager.moveActivityTaskToBack(android.os.IBinder, boolean)"
"android.app.Activity.moveTaskToBack(boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.setProgressBarIndeterminate(boolean)","android.app.Activity.getWindow()"
"android.app.Activity.setProgressBarIndeterminate(boolean)","android.view.Window.setFeatureInt(int, int)"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.setPackageName(java.lang.String)"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.app.Activity.getWindow()"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setFullScreen(boolean)"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.app.Activity.getTitle()"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","java.lang.Object.getClass()"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.content.ContextWrapper.getPackageName()"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","java.util.List.add(java.lang.CharSequence)"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.Window.getAttributes()"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.getText()"
"android.app.Activity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.app.Activity.releaseInstance()","android.app.IActivityManager.releaseActivityInstance(android.os.IBinder)"
"android.app.Activity.releaseInstance()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.createDialog(Integer, Bundle, Bundle)","android.app.Dialog.dispatchOnCreate(android.os.Bundle)"
"android.app.Activity.createDialog(Integer, Bundle, Bundle)","android.app.Activity.onCreateDialog(java.lang.Integer, android.os.Bundle)"
"android.app.Activity.onStop()","android.app.Application.dispatchActivityStopped(android.app.Activity)"
"android.app.Activity.onStop()","android.app.ActivityTransitionState.onStop()"
"android.app.Activity.onStop()","android.app.ActionBar.setShowHideAnimationEnabled(boolean)"
"android.app.Activity.onStop()","android.app.Activity.getApplication()"
"android.app.Activity.getCallingActivity()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.getCallingActivity()","android.app.IActivityManager.getCallingActivity(android.os.IBinder)"
"android.app.Activity.restoreManagedDialogs(Bundle)","android.os.BaseBundle.getIntArray(java.lang.String)"
"android.app.Activity.restoreManagedDialogs(Bundle)","android.app.Activity.createDialog(java.lang.Integer, android.os.Bundle, android.os.Bundle)"
"android.app.Activity.restoreManagedDialogs(Bundle)","android.app.Dialog.onRestoreInstanceState(android.os.Bundle)"
"android.app.Activity.restoreManagedDialogs(Bundle)","android.app.Activity.onPrepareDialog(java.lang.Integer, android.app.Dialog, android.os.Bundle)"
"android.app.Activity.restoreManagedDialogs(Bundle)","android.os.Bundle.getBundle(java.lang.String)"
"android.app.Activity.restoreManagedDialogs(Bundle)","android.app.Activity.savedDialogArgsKeyFor(java.lang.Integer)"
"android.app.Activity.restoreManagedDialogs(Bundle)","android.app.Activity.savedDialogKeyFor(java.lang.Integer)"
"android.app.Activity.restoreManagedDialogs(Bundle)","android.util.SparseArray.put(java.lang.Integer, android.app.Activity.ManagedDialog)"
"android.app.Activity.startIntentSenderForResult(IntentSender, int, Intent, int, int, int)","android.app.Activity.startIntentSenderForResult(android.content.IntentSender, int, android.content.Intent, int, int, int, null)"
"android.app.Activity.shouldUpRecreateTask(Intent)","android.content.Intent.resolveActivity(android.content.pm.PackageManager)"
"android.app.Activity.shouldUpRecreateTask(Intent)","android.content.ContextWrapper.getPackageManager()"
"android.app.Activity.shouldUpRecreateTask(Intent)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.shouldUpRecreateTask(Intent)","android.content.Intent.getComponent()"
"android.app.Activity.shouldUpRecreateTask(Intent)","android.content.pm.PackageManager.getActivityInfo(android.content.ComponentName, int)"
"android.app.Activity.shouldUpRecreateTask(Intent)","android.app.IActivityManager.shouldUpRecreateTask(android.os.IBinder, java.lang.String)"
"android.app.Activity.performRestoreInstanceState(Bundle)","android.app.Activity.onRestoreInstanceState(android.os.Bundle)"
"android.app.Activity.performRestoreInstanceState(Bundle)","android.app.Activity.restoreManagedDialogs(android.os.Bundle)"
"android.app.Activity.onKeyUp(int, KeyEvent)","android.content.ContextWrapper.getApplicationInfo()"
"android.app.Activity.onKeyUp(int, KeyEvent)","android.app.Activity.onBackPressed()"
"android.app.Activity.onKeyUp(int, KeyEvent)","android.view.KeyEvent.isTracking()"
"android.app.Activity.onKeyUp(int, KeyEvent)","android.view.KeyEvent.isCanceled()"
"android.app.Activity.finishFromChild(Activity)","android.app.Activity.finish()"
"android.app.Activity.getContentScene()","android.app.Activity.getWindow()"
"android.app.Activity.getContentScene()","android.view.Window.getContentScene()"
"android.app.Activity.startIntentSenderFromChild(Activity, IntentSender, int, Intent, int, int, int, Bundle)","android.app.Activity.startIntentSenderForResultInner(android.content.IntentSender, int, android.content.Intent, int, int, android.app.Activity, android.os.Bundle)"
"android.app.Activity.isTopOfTask()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.isTopOfTask()","android.app.IActivityManager.isTopOfTask(android.os.IBinder)"
"android.app.Activity.getActivityOptions()","android.app.IActivityManager.getActivityOptions(android.os.IBinder)"
"android.app.Activity.getActivityOptions()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.performSaveInstanceState(Bundle)","android.app.Activity.onSaveInstanceState(android.os.Bundle)"
"android.app.Activity.performSaveInstanceState(Bundle)","android.app.Activity.saveManagedDialogs(android.os.Bundle)"
"android.app.Activity.performSaveInstanceState(Bundle)","android.app.ActivityTransitionState.saveState(android.os.Bundle)"
"android.app.Activity.onWindowDismissed()","android.app.Activity.finish()"
"android.app.Activity.performStart()","android.app.Activity.getActivityOptions()"
"android.app.Activity.performStart()","android.app.ActivityTransitionState.enterReady(android.app.Activity)"
"android.app.Activity.performStart()","android.app.ActivityTransitionState.setEnterActivityOptions(android.app.Activity, android.app.ActivityOptions)"
"android.app.Activity.performStart()","android.app.FragmentManagerImpl.dispatchStart()"
"android.app.Activity.performStart()","android.util.ArrayMap.valueAt(int)"
"android.app.Activity.performStart()","android.app.LoaderManagerImpl.finishRetain()"
"android.app.Activity.performStart()","android.app.Instrumentation.callActivityOnStart(android.app.Activity)"
"android.app.Activity.performStart()","android.app.FragmentManagerImpl.noteStateNotSaved()"
"android.app.Activity.performStart()","android.content.ComponentName.toShortString()"
"android.app.Activity.performStart()","android.util.ArrayMap.size()"
"android.app.Activity.performStart()","android.app.LoaderManagerImpl.doReportStart()"
"android.app.Activity.performStart()","android.app.FragmentManagerImpl.execPendingActions()"
"android.app.Activity.navigateUpToFromChild(Activity, Intent)","android.app.Activity.navigateUpTo(android.content.Intent)"
"android.app.Activity.dispatchTrackballEvent(MotionEvent)","android.view.Window.superDispatchTrackballEvent(android.view.MotionEvent)"
"android.app.Activity.dispatchTrackballEvent(MotionEvent)","android.app.Activity.getWindow()"
"android.app.Activity.dispatchTrackballEvent(MotionEvent)","android.app.Activity.onUserInteraction()"
"android.app.Activity.dispatchTrackballEvent(MotionEvent)","android.app.Activity.onTrackballEvent(android.view.MotionEvent)"
"android.app.Activity.finishAfterTransition()","android.app.Activity.finish()"
"android.app.Activity.finishAfterTransition()","android.app.ActivityTransitionState.startExitBackTransition(android.app.Activity)"
"android.app.Activity.onCreatePanelMenu(int, Menu)","android.app.Activity.onCreateOptionsMenu(android.view.Menu)"
"android.app.Activity.onCreatePanelMenu(int, Menu)","android.app.FragmentManagerImpl.dispatchCreateOptionsMenu(android.view.Menu, android.view.MenuInflater)"
"android.app.Activity.onCreatePanelMenu(int, Menu)","android.app.Activity.getMenuInflater()"
"android.app.Activity.startActivityAsCaller(Intent, Bundle, int)","android.app.ActivityThread.getApplicationThread()"
"android.app.Activity.startActivityAsCaller(Intent, Bundle, int)","android.app.Instrumentation.ActivityResult.getResultCode()"
"android.app.Activity.startActivityAsCaller(Intent, Bundle, int)","android.app.ActivityThread.sendActivityResult(android.os.IBinder, java.lang.String, int, int, android.content.Intent)"
"android.app.Activity.startActivityAsCaller(Intent, Bundle, int)","android.app.Instrumentation.execStartActivityAsCaller(android.app.Activity, android.app.ActivityThread.ApplicationThread, android.os.IBinder, android.app.Activity, android.content.Intent, int, android.os.Bundle, int)"
"android.app.Activity.startActivityAsCaller(Intent, Bundle, int)","android.app.Instrumentation.ActivityResult.getResultData()"
"android.app.Activity.registerForContextMenu(View)","android.view.View.setOnCreateContextMenuListener(android.app.Activity)"
"android.app.Activity.performRestoreInstanceState(Bundle, PersistableBundle)","android.app.Activity.restoreManagedDialogs(android.os.Bundle)"
"android.app.Activity.performRestoreInstanceState(Bundle, PersistableBundle)","android.app.Activity.onRestoreInstanceState(android.os.Bundle, android.os.PersistableBundle)"
"android.app.Activity.setTitle(CharSequence)","android.app.Activity.onChildTitleChanged(android.app.Activity, java.lang.CharSequence)"
"android.app.Activity.setTitle(CharSequence)","android.app.Activity.onTitleChanged(java.lang.CharSequence, int)"
"android.app.Activity.startActivityForResultAsUser(Intent, int, Bundle, UserHandle)","android.app.ActivityThread.getApplicationThread()"
"android.app.Activity.startActivityForResultAsUser(Intent, int, Bundle, UserHandle)","android.app.Instrumentation.ActivityResult.getResultCode()"
"android.app.Activity.startActivityForResultAsUser(Intent, int, Bundle, UserHandle)","android.app.ActivityThread.sendActivityResult(android.os.IBinder, java.lang.String, int, int, android.content.Intent)"
"android.app.Activity.startActivityForResultAsUser(Intent, int, Bundle, UserHandle)","android.view.View.cancelPendingInputEvents()"
"android.app.Activity.startActivityForResultAsUser(Intent, int, Bundle, UserHandle)","android.app.Instrumentation.ActivityResult.getResultData()"
"android.app.Activity.startActivityForResultAsUser(Intent, int, Bundle, UserHandle)","android.view.Window.peekDecorView()"
"android.app.Activity.startActivityForResultAsUser(Intent, int, Bundle, UserHandle)","android.app.ActivityTransitionState.startExitOutTransition(android.app.Activity, android.os.Bundle)"
"android.app.Activity.startActivityForResultAsUser(Intent, int, Bundle, UserHandle)","android.app.Instrumentation.execStartActivity(android.app.Activity, android.app.ActivityThread.ApplicationThread, android.os.IBinder, android.app.Activity, android.content.Intent, int, android.os.Bundle, android.os.UserHandle)"
"android.app.Activity.requestVisibleBehind(boolean)","android.app.IActivityManager.requestVisibleBehind(android.os.IBinder, boolean)"
"android.app.Activity.requestVisibleBehind(boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.startActivityFromChild(Activity, Intent, int, Bundle)","android.app.ActivityThread.getApplicationThread()"
"android.app.Activity.startActivityFromChild(Activity, Intent, int, Bundle)","android.app.Instrumentation.ActivityResult.getResultCode()"
"android.app.Activity.startActivityFromChild(Activity, Intent, int, Bundle)","android.app.ActivityThread.sendActivityResult(android.os.IBinder, java.lang.String, int, int, android.content.Intent)"
"android.app.Activity.startActivityFromChild(Activity, Intent, int, Bundle)","android.app.Instrumentation.ActivityResult.getResultData()"
"android.app.Activity.startActivityFromChild(Activity, Intent, int, Bundle)","android.app.Instrumentation.execStartActivity(android.app.Activity, android.app.ActivityThread.ApplicationThread, android.os.IBinder, android.app.Activity, android.content.Intent, int, android.os.Bundle)"
"android.app.Activity.onPrepareDialog(int, Dialog)","android.app.Dialog.setOwnerActivity(android.app.Activity)"
"android.app.Activity.getCurrentFocus()","android.view.Window.getCurrentFocus()"
"android.app.Activity.setProgress(int)","android.app.Activity.getWindow()"
"android.app.Activity.setProgress(int)","android.view.Window.setFeatureInt(int, int)"
"android.app.Activity.getContentTransitionManager()","android.app.Activity.getWindow()"
"android.app.Activity.getContentTransitionManager()","android.view.Window.getTransitionManager()"
"android.app.Activity.setContentTransitionManager(TransitionManager)","android.app.Activity.getWindow()"
"android.app.Activity.setContentTransitionManager(TransitionManager)","android.view.Window.setTransitionManager(android.transition.TransitionManager)"
"android.app.Activity.getLocalClassName()","java.lang.String.charAt(int)"
"android.app.Activity.getLocalClassName()","java.lang.String.substring(int)"
"android.app.Activity.getLocalClassName()","java.lang.String.startsWith(java.lang.String)"
"android.app.Activity.getLocalClassName()","android.content.ContextWrapper.getPackageName()"
"android.app.Activity.getLocalClassName()","android.content.ComponentName.getClassName()"
"android.app.Activity.getLocalClassName()","java.lang.String.length()"
"android.app.Activity.runOnUiThread(Runnable)","java.lang.Runnable.run()"
"android.app.Activity.runOnUiThread(Runnable)","java.lang.Thread.currentThread()"
"android.app.Activity.runOnUiThread(Runnable)","android.os.Handler.post(java.lang.Runnable)"
"android.app.Activity.addContentView(View, ViewGroup.LayoutParams)","android.app.Activity.getWindow()"
"android.app.Activity.addContentView(View, ViewGroup.LayoutParams)","android.view.Window.addContentView(android.view.View, android.view.ViewGroup.LayoutParams)"
"android.app.Activity.addContentView(View, ViewGroup.LayoutParams)","android.app.Activity.initWindowDecorActionBar()"
"android.app.Activity.getReferrer()","android.content.Intent.getParcelableExtra(java.lang.String)"
"android.app.Activity.getReferrer()","android.content.Intent.getStringExtra(java.lang.String)"
"android.app.Activity.getReferrer()","android.net.Uri.Builder.scheme(java.lang.String)"
"android.app.Activity.getReferrer()","android.net.Uri.Builder.build()"
"android.app.Activity.getReferrer()","android.net.Uri.Builder.authority(java.lang.String)"
"android.app.Activity.getReferrer()","android.net.Uri.parse(java.lang.String)"
"android.app.Activity.getReferrer()","android.app.Activity.getIntent()"
"android.app.Activity.startActivityFromFragment(Fragment, Intent, int)","android.app.Activity.startActivityFromFragment(android.app.Fragment, android.content.Intent, int, null)"
"android.app.Activity.onPrepareDialog(int, Dialog, Bundle)","android.app.Activity.onPrepareDialog(int, android.app.Dialog)"
"android.app.Activity.getMenuInflater()","android.app.Activity.initWindowDecorActionBar()"
"android.app.Activity.getMenuInflater()","android.app.ActionBar.getThemedContext()"
"android.app.Activity.setProgressBarVisibility(boolean)","android.app.Activity.getWindow()"
"android.app.Activity.setProgressBarVisibility(boolean)","android.view.Window.setFeatureInt(int, int)"
"android.app.Activity.getLoaderManager(String, boolean, boolean)","android.app.LoaderManagerImpl.updateActivity(android.app.Activity)"
"android.app.Activity.getLoaderManager(String, boolean, boolean)","android.util.ArrayMap.put(java.lang.String, android.app.LoaderManagerImpl)"
"android.app.Activity.getLoaderManager(String, boolean, boolean)","android.util.ArrayMap.get(java.lang.String)"
"android.app.Activity.onTitleChanged(CharSequence, int)","android.app.Activity.getWindow()"
"android.app.Activity.onTitleChanged(CharSequence, int)","android.view.Window.setTitle(java.lang.CharSequence)"
"android.app.Activity.onTitleChanged(CharSequence, int)","android.app.ActionBar.setWindowTitle(java.lang.CharSequence)"
"android.app.Activity.onTitleChanged(CharSequence, int)","android.view.Window.setTitleColor(int)"
"android.app.Activity.performSaveInstanceState(Bundle, PersistableBundle)","android.app.Activity.onSaveInstanceState(android.os.Bundle, android.os.PersistableBundle)"
"android.app.Activity.performSaveInstanceState(Bundle, PersistableBundle)","android.app.Activity.saveManagedDialogs(android.os.Bundle)"
"android.app.Activity.getActionBar()","android.app.Activity.initWindowDecorActionBar()"
"android.app.Activity.setImmersive(boolean)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.setImmersive(boolean)","android.app.IActivityManager.setImmersive(android.os.IBinder, boolean)"
"android.app.Activity.performStop()","android.database.Cursor.deactivate()"
"android.app.Activity.performStop()","android.app.LoaderManagerImpl.doRetain()"
"android.app.Activity.performStop()","java.util.ArrayList.size()"
"android.app.Activity.performStop()","android.app.FragmentManagerImpl.dispatchStop()"
"android.app.Activity.performStop()","android.app.Instrumentation.callActivityOnStop(android.app.Activity)"
"android.app.Activity.performStop()","android.app.LoaderManagerImpl.doStop()"
"android.app.Activity.performStop()","android.view.Window.closeAllPanels()"
"android.app.Activity.performStop()","android.view.WindowManagerGlobal.getInstance()"
"android.app.Activity.performStop()","android.content.ComponentName.toShortString()"
"android.app.Activity.performStop()","java.util.ArrayList.get(int)"
"android.app.Activity.performStop()","android.view.WindowManagerGlobal.setStoppedState(android.os.IBinder, boolean)"
"android.app.Activity.setRequestedOrientation(int)","android.app.Activity.setRequestedOrientation(int)"
"android.app.Activity.setRequestedOrientation(int)","android.app.IActivityManager.setRequestedOrientation(android.os.IBinder, int)"
"android.app.Activity.setRequestedOrientation(int)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.getSystemService(String)","android.app.Activity.ensureSearchManager()"
"android.app.Activity.getSystemService(String)","android.view.ContextThemeWrapper.getSystemService(java.lang.String)"
"android.app.Activity.getSystemService(String)","android.content.ContextWrapper.getBaseContext()"
"android.app.Activity.getSystemService(String)","java.lang.String.equals(java.lang.String)"
"android.app.Activity.setContentView(View)","android.app.Activity.getWindow()"
"android.app.Activity.setContentView(View)","android.view.Window.setContentView(android.view.View)"
"android.app.Activity.setContentView(View)","android.app.Activity.initWindowDecorActionBar()"
"android.app.Activity.isBackgroundVisibleBehind()","android.app.IActivityManager.isBackgroundVisibleBehind(android.os.IBinder)"
"android.app.Activity.isBackgroundVisibleBehind()","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.onTouchEvent(MotionEvent)","android.app.Activity.finish()"
"android.app.Activity.onTouchEvent(MotionEvent)","android.view.Window.shouldCloseOnTouch(android.app.Activity, android.view.MotionEvent)"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.text.SpannableStringBuilder.length()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.text.method.TextKeyListener.getInstance()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.view.Window.hasFeature(int)"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.view.KeyEvent.isSystem()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.text.SpannableStringBuilder.clear()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.net.Uri.parse(java.lang.String)"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.text.Selection.setSelection(android.text.SpannableStringBuilder, int)"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.content.ContextWrapper.getApplicationInfo()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.app.Activity.onBackPressed()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.app.Activity.startSearch(java.lang.String, boolean, null, boolean)"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.app.Activity.getWindow()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.text.method.TextKeyListener.onKeyDown(null, android.text.SpannableStringBuilder, int, android.view.KeyEvent)"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.text.SpannableStringBuilder.toString()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.view.KeyEvent.startTracking()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.content.Intent.addFlags(int)"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.app.Activity.startActivity(android.content.Intent)"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.text.SpannableStringBuilder.clearSpans()"
"android.app.Activity.onKeyDown(int, KeyEvent)","android.view.Window.performPanelShortcut(int, int, android.view.KeyEvent, int)"
"android.app.Activity.startActivityAsUser(Intent, Bundle, UserHandle)","android.app.ActivityThread.getApplicationThread()"
"android.app.Activity.startActivityAsUser(Intent, Bundle, UserHandle)","android.app.Instrumentation.ActivityResult.getResultCode()"
"android.app.Activity.startActivityAsUser(Intent, Bundle, UserHandle)","android.app.ActivityThread.sendActivityResult(android.os.IBinder, java.lang.String, int, int, android.content.Intent)"
"android.app.Activity.startActivityAsUser(Intent, Bundle, UserHandle)","android.app.Instrumentation.ActivityResult.getResultData()"
"android.app.Activity.startActivityAsUser(Intent, Bundle, UserHandle)","android.app.Instrumentation.execStartActivity(android.app.Activity, android.app.ActivityThread.ApplicationThread, android.os.IBinder, android.app.Activity, android.content.Intent, int, android.os.Bundle, android.os.UserHandle)"
"android.app.Activity.setTaskDescription(ActivityManager.TaskDescription)","android.app.ActivityManager.TaskDescription.getIconFilename()"
"android.app.Activity.setTaskDescription(ActivityManager.TaskDescription)","android.app.IActivityManager.setTaskDescription(android.os.IBinder, android.app.ActivityManager.TaskDescription)"
"android.app.Activity.setTaskDescription(ActivityManager.TaskDescription)","android.app.ActivityManager.getLauncherLargeIconSizeInner(android.app.Activity)"
"android.app.Activity.setTaskDescription(ActivityManager.TaskDescription)","android.app.ActivityManager.TaskDescription.getLabel()"
"android.app.Activity.setTaskDescription(ActivityManager.TaskDescription)","android.app.ActivityManager.TaskDescription.getIcon()"
"android.app.Activity.setTaskDescription(ActivityManager.TaskDescription)","android.app.ActivityManagerNative.getDefault()"
"android.app.Activity.setTaskDescription(ActivityManager.TaskDescription)","android.app.ActivityManager.TaskDescription.getPrimaryColor()"
"com.android.internal.os.BinderInternal.forceBinderGc()","com.android.internal.os.BinderInternal.forceGc(java.lang.String)"
"com.android.internal.os.BinderInternal.forceGc(String)","java.lang.Runtime.gc()"
"com.android.internal.os.BinderInternal.forceGc(String)","android.util.EventLog.writeEvent(int, java.lang.String)"
"com.android.internal.os.BinderInternal.forceGc(String)","java.lang.Runtime.getRuntime()"
"com.android.internal.os.BinderInternal.addGcWatcher(Runnable)","java.util.ArrayList.add(java.lang.Runnable)"
"com.android.internal.os.BinderInternal.finalize()","java.lang.Runnable.run()"
"com.android.internal.os.BinderInternal.finalize()","android.os.SystemClock.uptimeMillis()"
"com.android.internal.os.BinderInternal.finalize()","com.android.internal.os.BinderInternal.handleGc()"
"com.android.internal.os.BinderInternal.finalize()","java.util.ArrayList.toArray(java.lang.Runnable[])"
"android.preference.SeekBarVolumizer.postSetVolume(int)","android.os.Handler.removeMessages(int)"
"android.preference.SeekBarVolumizer.postSetVolume(int)","android.os.Handler.sendMessage(android.os.Message)"
"android.preference.SeekBarVolumizer.postSetVolume(int)","android.os.Handler.obtainMessage(int)"
"android.preference.SeekBarVolumizer.postUpdateSlider(int, boolean)","android.os.Handler.obtainMessage(int, int, int)"
"android.preference.SeekBarVolumizer.postUpdateSlider(int, boolean)","android.os.Message.sendToTarget()"
"android.preference.SeekBarVolumizer.start()","android.os.HandlerThread.getLooper()"
"android.preference.SeekBarVolumizer.start()","android.content.ContentResolver.registerContentObserver(android.net.Uri, boolean, android.preference.SeekBarVolumizer.Observer)"
"android.preference.SeekBarVolumizer.start()","java.lang.Thread.start()"
"android.preference.SeekBarVolumizer.start()","android.provider.Settings.System.getUriFor(java.lang.String)"
"android.preference.SeekBarVolumizer.start()","android.content.Context.getContentResolver()"
"android.preference.SeekBarVolumizer.start()","android.os.Handler.sendEmptyMessage(int)"
"android.preference.SeekBarVolumizer.start()","android.preference.SeekBarVolumizer.Receiver.setListening(boolean)"
"android.preference.SeekBarVolumizer.onChange(boolean)","android.database.ContentObserver.onChange(boolean)"
"android.preference.SeekBarVolumizer.setListening(boolean)","android.content.Context.registerReceiver(android.preference.SeekBarVolumizer.Receiver, android.content.IntentFilter)"
"android.preference.SeekBarVolumizer.setListening(boolean)","android.content.Context.unregisterReceiver(android.preference.SeekBarVolumizer.Receiver)"
"android.preference.SeekBarVolumizer.postStopSample()","android.os.Handler.removeMessages(int)"
"android.preference.SeekBarVolumizer.postStopSample()","android.os.Handler.sendMessage(android.os.Message)"
"android.preference.SeekBarVolumizer.postStopSample()","android.os.Handler.obtainMessage(int)"
"android.preference.SeekBarVolumizer.stop()","android.os.Handler.getLooper()"
"android.preference.SeekBarVolumizer.stop()","android.content.Context.getContentResolver()"
"android.preference.SeekBarVolumizer.stop()","android.content.ContentResolver.unregisterContentObserver(android.preference.SeekBarVolumizer.Observer)"
"android.preference.SeekBarVolumizer.stop()","android.os.Looper.quitSafely()"
"android.preference.SeekBarVolumizer.stop()","android.preference.SeekBarVolumizer.Receiver.setListening(boolean)"
"android.preference.SeekBarVolumizer.onProgressChanged(SeekBar, int, boolean)","android.preference.SeekBarVolumizer.Callback.onProgressChanged(android.widget.SeekBar, int, boolean)"
"android.preference.SeekBarVolumizer.postStartSample()","android.os.Handler.removeMessages(int)"
"android.preference.SeekBarVolumizer.postStartSample()","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.preference.SeekBarVolumizer.postStartSample()","android.os.Handler.obtainMessage(int)"
"android.preference.SeekBarVolumizer.onReceive(Context, Intent)","android.content.Intent.getAction()"
"android.preference.SeekBarVolumizer.onReceive(Context, Intent)","android.preference.SeekBarVolumizer.H.postUpdateSlider(int, boolean)"
"android.preference.SeekBarVolumizer.onStartSample()","android.preference.SeekBarVolumizer.Callback.onSampleStarting(android.preference.SeekBarVolumizer)"
"android.preference.SeekBarVolumizer.updateSlider()","android.preference.SeekBarVolumizer.H.postUpdateSlider(int, boolean)"
"android.net.WifiKey.equals(Object)","java.lang.Object.getClass()"
"android.net.WifiKey.equals(Object)","java.util.Objects.equals(java.lang.String, java.lang.String)"
"android.net.WifiKey.hashCode()","java.util.Objects.hash(java.lang.String, java.lang.String)"
"android.net.WifiKey.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.bluetooth.BluetoothDevice.connectGatt(Context, boolean, BluetoothGattCallback, int)","android.bluetooth.BluetoothGatt.connect(boolean, android.bluetooth.BluetoothGattCallback)"
"android.bluetooth.BluetoothDevice.connectGatt(Context, boolean, BluetoothGattCallback, int)","android.bluetooth.BluetoothAdapter.getBluetoothManager()"
"android.bluetooth.BluetoothDevice.connectGatt(Context, boolean, BluetoothGattCallback, int)","android.bluetooth.BluetoothAdapter.getDefaultAdapter()"
"android.bluetooth.BluetoothDevice.getAliasName()","android.bluetooth.BluetoothDevice.getAlias()"
"android.bluetooth.BluetoothDevice.getAliasName()","android.bluetooth.BluetoothDevice.getName()"
"android.bluetooth.BluetoothDevice.hashCode()","java.lang.String.hashCode()"
"android.bluetooth.BluetoothDevice.getService()","android.bluetooth.BluetoothAdapter.getDefaultAdapter()"
"android.bluetooth.BluetoothDevice.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.bluetooth.BluetoothDevice.convertPinToBytes(String)","java.lang.String.getBytes(java.lang.String)"
"android.bluetooth.BluetoothDevice.equals(Object)","android.bluetooth.BluetoothDevice.getAddress()"
"android.bluetooth.BluetoothDevice.equals(Object)","java.lang.String.equals(java.lang.String)"
"android.bluetooth.BluetoothDevice.connectGatt(Context, boolean, BluetoothGattCallback)","android.bluetooth.BluetoothDevice.connectGatt(android.content.Context, boolean, android.bluetooth.BluetoothGattCallback, int)"
"android.bluetooth.BluetoothDevice.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.view.animation.LayoutAnimationController.isDone()","android.view.animation.Animation.getStartTime()"
"android.view.animation.LayoutAnimationController.isDone()","android.view.animation.AnimationUtils.currentAnimationTimeMillis()"
"android.view.animation.LayoutAnimationController.start()","android.view.animation.Animation.getDuration()"
"android.view.animation.LayoutAnimationController.start()","android.view.animation.Animation.setStartTime(int)"
"android.view.animation.LayoutAnimationController.setAnimation(Context, int)","android.view.animation.LayoutAnimationController.setAnimation(android.view.animation.Animation)"
"android.view.animation.LayoutAnimationController.setAnimation(Context, int)","android.view.animation.AnimationUtils.loadAnimation(android.content.Context, int)"
"android.view.animation.LayoutAnimationController.getAnimationForView(View)","android.view.animation.Animation.getStartOffset()"
"android.view.animation.LayoutAnimationController.getAnimationForView(View)","android.view.animation.Animation.setStartOffset(long)"
"android.view.animation.LayoutAnimationController.getAnimationForView(View)","java.lang.Math.max(long, long)"
"android.view.animation.LayoutAnimationController.getAnimationForView(View)","android.view.animation.LayoutAnimationController.getDelayForView(android.view.View)"
"android.view.animation.LayoutAnimationController.getAnimationForView(View)","android.view.animation.Animation.clone()"
"android.view.animation.LayoutAnimationController.setAnimation(Animation)","android.view.animation.Animation.setFillBefore(boolean)"
"android.view.animation.LayoutAnimationController.setInterpolator(Context, int)","android.view.animation.LayoutAnimationController.setInterpolator(android.view.animation.Interpolator)"
"android.view.animation.LayoutAnimationController.setInterpolator(Context, int)","android.view.animation.AnimationUtils.loadInterpolator(android.content.Context, int)"
"android.view.animation.LayoutAnimationController.getTransformedIndex(AnimationParameters)","java.util.Random.nextFloat()"
"android.view.animation.LayoutAnimationController.getTransformedIndex(AnimationParameters)","android.view.animation.LayoutAnimationController.getOrder()"
"android.view.animation.LayoutAnimationController.getDelayForView(View)","android.view.animation.LayoutAnimationController.getTransformedIndex(android.view.animation.LayoutAnimationController.AnimationParameters)"
"android.view.animation.LayoutAnimationController.getDelayForView(View)","android.view.View.getLayoutParams()"
"android.view.animation.LayoutAnimationController.getDelayForView(View)","android.view.animation.Animation.getDuration()"
"android.view.animation.LayoutAnimationController.getDelayForView(View)","android.animation.TimeInterpolator.getInterpolation(float)"
"android.widget.TextViewWithCircularIndicator.onDraw(Canvas)","java.lang.Math.min(int, int)"
"android.widget.TextViewWithCircularIndicator.getContentDescription()","java.lang.String.format(java.lang.String, java.lang.CharSequence)"
"android.transition.Slide.captureEndValues(TransitionValues)","android.transition.Slide.captureValues(android.transition.TransitionValues)"
"android.transition.Slide.captureEndValues(TransitionValues)","android.transition.Visibility.captureEndValues(android.transition.TransitionValues)"
"android.transition.Slide.captureStartValues(TransitionValues)","android.transition.Slide.captureValues(android.transition.TransitionValues)"
"android.transition.Slide.captureStartValues(TransitionValues)","android.transition.Visibility.captureStartValues(android.transition.TransitionValues)"
"android.transition.Slide.captureValues(TransitionValues)","java.util.Map.put(java.lang.String, int[])"
"android.transition.Slide.captureValues(TransitionValues)","android.view.View.getLocationOnScreen(int[])"
"android.transition.Slide.onAppear(ViewGroup, View, TransitionValues, TransitionValues)","android.view.View.getTranslationY()"
"android.transition.Slide.onAppear(ViewGroup, View, TransitionValues, TransitionValues)","java.util.Map.get(java.lang.String)"
"android.transition.Slide.onAppear(ViewGroup, View, TransitionValues, TransitionValues)","android.transition.TranslationAnimationCreator.createAnimation(android.view.View, android.transition.TransitionValues, int, int, float, float, float, float, android.animation.TimeInterpolator)"
"android.transition.Slide.onAppear(ViewGroup, View, TransitionValues, TransitionValues)","android.transition.Slide.CalculateSlide.getGoneX(android.view.ViewGroup, android.view.View)"
"android.transition.Slide.onAppear(ViewGroup, View, TransitionValues, TransitionValues)","android.transition.Slide.CalculateSlide.getGoneY(android.view.ViewGroup, android.view.View)"
"android.transition.Slide.onAppear(ViewGroup, View, TransitionValues, TransitionValues)","android.view.View.getTranslationX()"
"android.transition.Slide.setSlideEdge(int)","android.transition.SidePropagation.setSide(int)"
"android.transition.Slide.setSlideEdge(int)","android.transition.Transition.setPropagation(android.transition.SidePropagation)"
"android.transition.Slide.getGoneX(ViewGroup, View)","android.view.View.getTranslationX()"
"android.transition.Slide.onDisappear(ViewGroup, View, TransitionValues, TransitionValues)","android.view.View.getTranslationY()"
"android.transition.Slide.onDisappear(ViewGroup, View, TransitionValues, TransitionValues)","java.util.Map.get(java.lang.String)"
"android.transition.Slide.onDisappear(ViewGroup, View, TransitionValues, TransitionValues)","android.transition.TranslationAnimationCreator.createAnimation(android.view.View, android.transition.TransitionValues, int, int, float, float, float, float, android.animation.TimeInterpolator)"
"android.transition.Slide.onDisappear(ViewGroup, View, TransitionValues, TransitionValues)","android.transition.Slide.CalculateSlide.getGoneX(android.view.ViewGroup, android.view.View)"
"android.transition.Slide.onDisappear(ViewGroup, View, TransitionValues, TransitionValues)","android.transition.Slide.CalculateSlide.getGoneY(android.view.ViewGroup, android.view.View)"
"android.transition.Slide.onDisappear(ViewGroup, View, TransitionValues, TransitionValues)","android.view.View.getTranslationX()"
"android.transition.Slide.getGoneY(ViewGroup, View)","android.view.View.getTranslationY()"
"android.net.dhcp.DhcpNakPacket.toString()","android.net.dhcp.DhcpPacket.toString()"
"android.net.dhcp.DhcpNakPacket.buildPacket(int, short, short)","java.nio.ByteBuffer.flip()"
"android.net.dhcp.DhcpNakPacket.buildPacket(int, short, short)","java.nio.ByteBuffer.allocate(int)"
"android.net.dhcp.DhcpNakPacket.buildPacket(int, short, short)","android.net.dhcp.DhcpPacket.fillInPacket(int, java.net.InetAddress, java.net.InetAddress, short, short, java.nio.ByteBuffer, byte, boolean)"
"android.net.dhcp.DhcpNakPacket.doNextOp(DhcpStateMachine)","android.net.dhcp.DhcpStateMachine.onNakReceived()"
"android.net.dhcp.DhcpNakPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlv(java.nio.ByteBuffer, byte, java.lang.String)"
"android.net.dhcp.DhcpNakPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlv(java.nio.ByteBuffer, byte, byte)"
"android.net.dhcp.DhcpNakPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlv(java.nio.ByteBuffer, byte, java.net.InetAddress)"
"android.net.dhcp.DhcpNakPacket.finishPacket(ByteBuffer)","android.net.dhcp.DhcpPacket.addTlvEnd(java.nio.ByteBuffer)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.text.method.BaseKeyListener.deleteSelection(android.view.View, android.text.Editable)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.view.KeyEvent.isShiftPressed()"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.text.TextUtils.getOffsetAfter(android.text.Editable, int)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.view.KeyEvent.metaStateHasNoModifiers(int)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.text.method.BaseKeyListener.deleteLine(android.view.View, android.text.Editable)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.view.KeyEvent.getMetaState()"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","java.lang.Math.min(int, int)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.text.TextUtils.getOffsetBefore(android.text.Editable, int)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.text.method.MetaKeyKeyListener.getMetaState(android.text.Editable, int, android.view.KeyEvent)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","java.lang.Math.max(int, int)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.text.method.MetaKeyKeyListener.getMetaState(android.text.Editable, int)"
"android.text.method.BaseKeyListener.backspaceOrForwardDelete(View, Editable, int, KeyEvent, boolean)","android.text.Editable.delete(int, int)"
"android.text.method.BaseKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.BaseKeyListener.forwardDelete(android.view.View, android.text.Editable, int, android.view.KeyEvent)"
"android.text.method.BaseKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.MetaKeyKeyListener.onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent)"
"android.text.method.BaseKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.MetaKeyKeyListener.adjustMetaAfterKeypress(android.text.Editable)"
"android.text.method.BaseKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.BaseKeyListener.backspace(android.view.View, android.text.Editable, int, android.view.KeyEvent)"
"android.text.method.BaseKeyListener.forwardDelete(View, Editable, int, KeyEvent)","android.text.method.BaseKeyListener.backspaceOrForwardDelete(android.view.View, android.text.Editable, int, android.view.KeyEvent, boolean)"
"android.text.method.BaseKeyListener.deleteLine(View, Editable)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.text.method.BaseKeyListener.deleteLine(View, Editable)","android.text.Layout.getLineStart(int)"
"android.text.method.BaseKeyListener.deleteLine(View, Editable)","android.text.Layout.getLineEnd(int)"
"android.text.method.BaseKeyListener.deleteLine(View, Editable)","android.text.Layout.getLineForOffset(int)"
"android.text.method.BaseKeyListener.deleteLine(View, Editable)","android.text.Editable.delete(int, int)"
"android.text.method.BaseKeyListener.onKeyOther(View, Editable, KeyEvent)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.text.method.BaseKeyListener.onKeyOther(View, Editable, KeyEvent)","android.view.KeyEvent.getCharacters()"
"android.text.method.BaseKeyListener.onKeyOther(View, Editable, KeyEvent)","android.text.Editable.replace(int, int, java.lang.CharSequence)"
"android.text.method.BaseKeyListener.onKeyOther(View, Editable, KeyEvent)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.text.method.BaseKeyListener.onKeyOther(View, Editable, KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.text.method.BaseKeyListener.onKeyOther(View, Editable, KeyEvent)","android.view.KeyEvent.getAction()"
"android.text.method.BaseKeyListener.deleteSelection(View, Editable)","android.text.Selection.getSelectionStart(android.text.Editable)"
"android.text.method.BaseKeyListener.deleteSelection(View, Editable)","android.text.Selection.getSelectionEnd(android.text.Editable)"
"android.text.method.BaseKeyListener.deleteSelection(View, Editable)","android.text.Editable.delete(int, int)"
"android.text.method.BaseKeyListener.backspace(View, Editable, int, KeyEvent)","android.text.method.BaseKeyListener.backspaceOrForwardDelete(android.view.View, android.text.Editable, int, android.view.KeyEvent, boolean)"
"android.text.style.CharacterStyle.updateDrawState(TextPaint)","android.text.style.CharacterStyle.updateDrawState(android.text.TextPaint)"
"android.text.style.CharacterStyle.getUnderlying()","android.text.style.CharacterStyle.getUnderlying()"
"android.net.IpPrefix.getRawAddress()","java.lang.Object.clone()"
"android.net.IpPrefix.equals(Object)","java.util.Arrays.equals(byte[], byte[])"
"android.net.IpPrefix.toString()","java.net.InetAddress.getByAddress(byte[])"
"android.net.IpPrefix.toString()","java.net.InetAddress.getHostAddress()"
"android.net.IpPrefix.checkAndMaskAddressAndPrefixLength()","android.net.NetworkUtils.maskRawAddress(byte[], int)"
"android.net.IpPrefix.createFromParcel(Parcel)","android.os.Parcel.createByteArray()"
"android.net.IpPrefix.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.net.IpPrefix.hashCode()","java.util.Arrays.hashCode(byte[])"
"android.net.IpPrefix.writeToParcel(Parcel, int)","android.os.Parcel.writeByteArray(byte[])"
"android.net.IpPrefix.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.IpPrefix.getAddress()","java.net.InetAddress.getByAddress(byte[])"
"android.transition.ArcMotion.getPath(float, float, float, float)","android.util.FloatMath.sqrt(float)"
"android.transition.ArcMotion.getPath(float, float, float, float)","java.lang.Math.abs(float)"
"android.transition.ArcMotion.setMinimumHorizontalAngle(float)","android.transition.ArcMotion.toTangent(float)"
"android.transition.ArcMotion.setMaximumAngle(float)","android.transition.ArcMotion.toTangent(float)"
"android.transition.ArcMotion.setMinimumVerticalAngle(float)","android.transition.ArcMotion.toTangent(float)"
"android.transition.ArcMotion.toTangent(float)","java.lang.Math.tan(double)"
"android.transition.ArcMotion.toTangent(float)","java.lang.Math.toRadians(float)"
"android.net.EthernetManager.addListener(Listener)","java.util.ArrayList.size()"
"android.net.EthernetManager.addListener(Listener)","java.util.ArrayList.add(android.net.EthernetManager.Listener)"
"android.net.EthernetManager.removeListener(Listener)","java.util.ArrayList.isEmpty()"
"android.net.EthernetManager.removeListener(Listener)","java.util.ArrayList.remove(android.net.EthernetManager.Listener)"
"android.net.EthernetManager.handleMessage(Message)","android.net.EthernetManager.Listener.onAvailabilityChanged(boolean)"
"android.app.DownloadManager.restartDownload(long[])","android.app.DownloadManager.query(android.app.DownloadManager.Query)"
"android.app.DownloadManager.restartDownload(long[])","android.app.DownloadManager.Query.setFilterById(long[])"
"android.app.DownloadManager.restartDownload(long[])","android.content.ContentValues.putNull(java.lang.String)"
"android.app.DownloadManager.restartDownload(long[])","android.database.Cursor.getInt(int)"
"android.app.DownloadManager.restartDownload(long[])","android.content.ContentValues.put(java.lang.String, int)"
"android.app.DownloadManager.restartDownload(long[])","android.database.Cursor.getColumnIndex(java.lang.String)"
"android.app.DownloadManager.restartDownload(long[])","android.database.Cursor.getLong(int)"
"android.app.DownloadManager.restartDownload(long[])","android.content.ContentResolver.update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])"
"android.app.DownloadManager.restartDownload(long[])","android.database.Cursor.moveToNext()"
"android.app.DownloadManager.restartDownload(long[])","android.app.DownloadManager.getWhereClauseForIds(long[])"
"android.app.DownloadManager.restartDownload(long[])","android.database.Cursor.moveToFirst()"
"android.app.DownloadManager.restartDownload(long[])","android.database.Cursor.isAfterLast()"
"android.app.DownloadManager.restartDownload(long[])","android.app.DownloadManager.getWhereArgsForIds(long[])"
"android.app.DownloadManager.restartDownload(long[])","android.database.Cursor.close()"
"android.app.DownloadManager.translateStatus(int)","android.provider.Downloads.Impl.isStatusError(int)"
"android.app.DownloadManager.getWhereClauseForIds(long[])","java.lang.StringBuilder.append(java.lang.String)"
"android.app.DownloadManager.getWhereClauseForIds(long[])","java.lang.StringBuilder.toString()"
"android.app.DownloadManager.setDestinationFromBase(File, String)","android.net.Uri.fromFile(java.io.File)"
"android.app.DownloadManager.setDestinationFromBase(File, String)","android.net.Uri.withAppendedPath(android.net.Uri, java.lang.String)"
"android.app.DownloadManager.getReason(int)","android.app.DownloadManager.CursorTranslator.translateStatus(int)"
"android.app.DownloadManager.getReason(int)","android.app.DownloadManager.CursorTranslator.getErrorCode(int)"
"android.app.DownloadManager.getReason(int)","android.app.DownloadManager.CursorTranslator.getPausedReason(int)"
"android.app.DownloadManager.joinStrings(String, Iterable)","java.lang.StringBuilder.append(java.lang.String)"
"android.app.DownloadManager.joinStrings(String, Iterable)","java.lang.StringBuilder.toString()"
"android.app.DownloadManager.runQuery(ContentResolver, String[], Uri)","android.app.DownloadManager.Query.statusClause(java.lang.String, int)"
"android.app.DownloadManager.runQuery(ContentResolver, String[], Uri)","android.app.DownloadManager.Query.joinStrings(java.lang.String, java.util.List<java.lang.String>)"
"android.app.DownloadManager.runQuery(ContentResolver, String[], Uri)","java.util.List.add(java.lang.String)"
"android.app.DownloadManager.runQuery(ContentResolver, String[], Uri)","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)"
"android.app.DownloadManager.runQuery(ContentResolver, String[], Uri)","android.app.DownloadManager.getWhereClauseForIds(long[])"
"android.app.DownloadManager.runQuery(ContentResolver, String[], Uri)","android.app.DownloadManager.getWhereArgsForIds(long[])"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.app.DownloadManager.Request.setTitle(java.lang.String)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.app.DownloadManager.Request.toContentValues(null)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.content.ContentValues.put(java.lang.String, long)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.net.Uri.getLastPathSegment()"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.content.ContentValues.put(java.lang.String, int)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.app.DownloadManager.validateArgumentIsNonEmpty(java.lang.String, java.lang.String)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","java.lang.Long.parseLong(java.lang.String)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.app.DownloadManager.Request.setDescription(java.lang.String)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.app.DownloadManager.Request.setMimeType(java.lang.String)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean, boolean)","android.content.ContentResolver.insert(android.net.Uri, android.content.ContentValues)"
"android.app.DownloadManager.getDownloadUri(long)","android.content.ContentUris.withAppendedId(android.net.Uri, long)"
"android.app.DownloadManager.getWhereArgsForIds(long[])","java.lang.Long.toString(long)"
"android.app.DownloadManager.toContentValues(String)","java.util.List.isEmpty()"
"android.app.DownloadManager.toContentValues(String)","android.content.ContentValues.put(java.lang.String, int)"
"android.app.DownloadManager.toContentValues(String)","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.app.DownloadManager.toContentValues(String)","android.app.DownloadManager.Request.putIfNonNull(android.content.ContentValues, java.lang.String, java.lang.String)"
"android.app.DownloadManager.toContentValues(String)","android.app.DownloadManager.Request.encodeHttpHeaders(android.content.ContentValues)"
"android.app.DownloadManager.toContentValues(String)","android.app.DownloadManager.Request.putIfNonNull(android.content.ContentValues, java.lang.String, java.lang.CharSequence)"
"android.app.DownloadManager.toContentValues(String)","android.net.Uri.toString()"
"android.app.DownloadManager.toContentValues(String)","android.content.ContentValues.put(java.lang.String, boolean)"
"android.app.DownloadManager.enqueue(Request)","android.app.DownloadManager.Request.toContentValues(java.lang.String)"
"android.app.DownloadManager.enqueue(Request)","android.net.Uri.getLastPathSegment()"
"android.app.DownloadManager.enqueue(Request)","java.lang.Long.parseLong(java.lang.String)"
"android.app.DownloadManager.enqueue(Request)","android.content.ContentResolver.insert(android.net.Uri, android.content.ContentValues)"
"android.app.DownloadManager.getLocalUri()","android.database.CursorWrapper.getColumnIndex(java.lang.String)"
"android.app.DownloadManager.getLocalUri()","android.content.ContentUris.withAppendedId(android.net.Uri, long)"
"android.app.DownloadManager.getLocalUri()","android.app.DownloadManager.CursorTranslator.getString(int)"
"android.app.DownloadManager.getLocalUri()","android.net.Uri.fromFile(java.io.File)"
"android.app.DownloadManager.getLocalUri()","android.app.DownloadManager.CursorTranslator.getLong(int)"
"android.app.DownloadManager.getLocalUri()","android.net.Uri.toString()"
"android.app.DownloadManager.getRecommendedMaxBytesOverMobile(Context)","android.content.Context.getContentResolver()"
"android.app.DownloadManager.getRecommendedMaxBytesOverMobile(Context)","android.provider.Settings.Global.getLong(android.content.ContentResolver, java.lang.String)"
"android.app.DownloadManager.getMimeTypeForDownloadedFile(long)","android.app.DownloadManager.query(android.app.DownloadManager.Query)"
"android.app.DownloadManager.getMimeTypeForDownloadedFile(long)","android.database.Cursor.getColumnIndexOrThrow(java.lang.String)"
"android.app.DownloadManager.getMimeTypeForDownloadedFile(long)","android.app.DownloadManager.Query.setFilterById(long)"
"android.app.DownloadManager.getMimeTypeForDownloadedFile(long)","android.database.Cursor.getString(int)"
"android.app.DownloadManager.getMimeTypeForDownloadedFile(long)","android.database.Cursor.moveToFirst()"
"android.app.DownloadManager.getMimeTypeForDownloadedFile(long)","android.database.Cursor.close()"
"android.app.DownloadManager.openDownloadedFile(long)","android.content.ContentResolver.openFileDescriptor(android.net.Uri, java.lang.String)"
"android.app.DownloadManager.openDownloadedFile(long)","android.app.DownloadManager.getDownloadUri(long)"
"android.app.DownloadManager.getLong(int)","android.database.CursorWrapper.getColumnIndex(java.lang.String)"
"android.app.DownloadManager.getLong(int)","android.app.DownloadManager.CursorTranslator.getReason(int)"
"android.app.DownloadManager.getLong(int)","android.app.DownloadManager.CursorTranslator.translateStatus(int)"
"android.app.DownloadManager.getLong(int)","android.database.CursorWrapper.getLong(int)"
"android.app.DownloadManager.getLong(int)","java.lang.String.equals(java.lang.String)"
"android.app.DownloadManager.getLong(int)","android.database.CursorWrapper.getInt(int)"
"android.app.DownloadManager.getLong(int)","android.database.CursorWrapper.getColumnName(int)"
"android.app.DownloadManager.orderBy(String, int)","java.lang.String.equals(java.lang.String)"
"android.app.DownloadManager.putIfNonNull(ContentValues, String, Object)","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.app.DownloadManager.putIfNonNull(ContentValues, String, Object)","java.lang.Object.toString()"
"android.app.DownloadManager.getMaxBytesOverMobile(Context)","android.content.Context.getContentResolver()"
"android.app.DownloadManager.getMaxBytesOverMobile(Context)","android.provider.Settings.Global.getLong(android.content.ContentResolver, java.lang.String)"
"android.app.DownloadManager.validateArgumentIsNonEmpty(String, String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.app.DownloadManager.encodeHttpHeaders(ContentValues)","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.app.DownloadManager.setDestinationInExternalFilesDir(Context, String, String)","java.io.File.getAbsolutePath()"
"android.app.DownloadManager.setDestinationInExternalFilesDir(Context, String, String)","java.io.File.mkdirs()"
"android.app.DownloadManager.setDestinationInExternalFilesDir(Context, String, String)","android.app.DownloadManager.Request.setDestinationFromBase(java.io.File, java.lang.String)"
"android.app.DownloadManager.setDestinationInExternalFilesDir(Context, String, String)","android.content.Context.getExternalFilesDir(java.lang.String)"
"android.app.DownloadManager.setDestinationInExternalFilesDir(Context, String, String)","java.io.File.exists()"
"android.app.DownloadManager.setDestinationInExternalFilesDir(Context, String, String)","java.io.File.isDirectory()"
"android.app.DownloadManager.getString(int)","android.app.DownloadManager.CursorTranslator.getLocalUri()"
"android.app.DownloadManager.getString(int)","android.database.CursorWrapper.getString(int)"
"android.app.DownloadManager.getString(int)","java.lang.String.equals(java.lang.String)"
"android.app.DownloadManager.getString(int)","android.database.CursorWrapper.getColumnName(int)"
"android.app.DownloadManager.addRequestHeader(String, String)","android.util.Pair.create(java.lang.String, java.lang.String)"
"android.app.DownloadManager.addRequestHeader(String, String)","java.util.List.add(android.util.Pair<java.lang.String, java.lang.String>)"
"android.app.DownloadManager.addRequestHeader(String, String)","java.lang.String.contains(java.lang.String)"
"android.app.DownloadManager.setDestinationInExternalPublicDir(String, String)","java.io.File.getAbsolutePath()"
"android.app.DownloadManager.setDestinationInExternalPublicDir(String, String)","android.os.Environment.getExternalStoragePublicDirectory(java.lang.String)"
"android.app.DownloadManager.setDestinationInExternalPublicDir(String, String)","java.io.File.mkdirs()"
"android.app.DownloadManager.setDestinationInExternalPublicDir(String, String)","android.app.DownloadManager.Request.setDestinationFromBase(java.io.File, java.lang.String)"
"android.app.DownloadManager.setDestinationInExternalPublicDir(String, String)","java.io.File.exists()"
"android.app.DownloadManager.setDestinationInExternalPublicDir(String, String)","java.io.File.isDirectory()"
"android.app.DownloadManager.setShowRunningNotification(boolean)","android.app.DownloadManager.Request.setNotificationVisibility(int)"
"android.app.DownloadManager.remove(long[])","android.app.DownloadManager.markRowDeleted(long[])"
"android.app.DownloadManager.query(Query)","android.app.DownloadManager.Query.runQuery(android.content.ContentResolver, java.lang.String[], android.net.Uri)"
"android.app.DownloadManager.markRowDeleted(long[])","android.content.ContentUris.withAppendedId(android.net.Uri, long)"
"android.app.DownloadManager.markRowDeleted(long[])","android.content.ContentValues.put(java.lang.String, int)"
"android.app.DownloadManager.markRowDeleted(long[])","android.content.ContentResolver.update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])"
"android.app.DownloadManager.markRowDeleted(long[])","android.app.DownloadManager.getWhereClauseForIds(long[])"
"android.app.DownloadManager.markRowDeleted(long[])","android.app.DownloadManager.getWhereArgsForIds(long[])"
"android.app.DownloadManager.markRowDeleted(long[])","android.content.ContentResolver.update(android.net.Uri, android.content.ContentValues, null, null)"
"android.app.DownloadManager.addCompletedDownload(String, String, boolean, String, String, long, boolean)","android.app.DownloadManager.addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean, boolean)"
"android.app.DownloadManager.getInt(int)","android.app.DownloadManager.CursorTranslator.getLong(int)"
"android.app.DownloadManager.getUriForDownloadedFile(long)","android.app.DownloadManager.query(android.app.DownloadManager.Query)"
"android.app.DownloadManager.getUriForDownloadedFile(long)","android.content.ContentUris.withAppendedId(android.net.Uri, long)"
"android.app.DownloadManager.getUriForDownloadedFile(long)","android.database.Cursor.getInt(int)"
"android.app.DownloadManager.getUriForDownloadedFile(long)","android.database.Cursor.getColumnIndexOrThrow(java.lang.String)"
"android.app.DownloadManager.getUriForDownloadedFile(long)","android.app.DownloadManager.Query.setFilterById(long)"
"android.app.DownloadManager.getUriForDownloadedFile(long)","android.database.Cursor.getString(int)"
"android.app.DownloadManager.getUriForDownloadedFile(long)","android.net.Uri.fromFile(java.io.File)"
"android.app.DownloadManager.getUriForDownloadedFile(long)","android.database.Cursor.moveToFirst()"
"android.app.DownloadManager.getUriForDownloadedFile(long)","android.database.Cursor.close()"
"com.android.internal.view.menu.SubMenuBuilder.dispatchMenuItemSelected(MenuBuilder, MenuItem)","com.android.internal.view.menu.MenuBuilder.dispatchMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem)"
"com.android.internal.view.menu.SubMenuBuilder.setHeaderTitle(CharSequence)","com.android.internal.view.menu.MenuBuilder.setHeaderTitleInt(java.lang.CharSequence)"
"com.android.internal.view.menu.SubMenuBuilder.setCallback(Callback)","com.android.internal.view.menu.MenuBuilder.setCallback(com.android.internal.view.menu.MenuBuilder.Callback)"
"com.android.internal.view.menu.SubMenuBuilder.setShortcutsVisible(boolean)","com.android.internal.view.menu.MenuBuilder.setShortcutsVisible(boolean)"
"com.android.internal.view.menu.SubMenuBuilder.setQwertyMode(boolean)","com.android.internal.view.menu.MenuBuilder.setQwertyMode(boolean)"
"com.android.internal.view.menu.SubMenuBuilder.isShortcutsVisible()","com.android.internal.view.menu.MenuBuilder.isShortcutsVisible()"
"com.android.internal.view.menu.SubMenuBuilder.expandItemActionView(MenuItemImpl)","com.android.internal.view.menu.MenuBuilder.expandItemActionView(com.android.internal.view.menu.MenuItemImpl)"
"com.android.internal.view.menu.SubMenuBuilder.isQwertyMode()","com.android.internal.view.menu.MenuBuilder.isQwertyMode()"
"com.android.internal.view.menu.SubMenuBuilder.getActionViewStatesKey()","com.android.internal.view.menu.MenuBuilder.getActionViewStatesKey()"
"com.android.internal.view.menu.SubMenuBuilder.getActionViewStatesKey()","com.android.internal.view.menu.MenuItemImpl.getItemId()"
"com.android.internal.view.menu.SubMenuBuilder.setHeaderView(View)","com.android.internal.view.menu.MenuBuilder.setHeaderViewInt(android.view.View)"
"com.android.internal.view.menu.SubMenuBuilder.setHeaderTitle(int)","com.android.internal.view.menu.MenuBuilder.setHeaderTitleInt(int)"
"com.android.internal.view.menu.SubMenuBuilder.collapseItemActionView(MenuItemImpl)","com.android.internal.view.menu.MenuBuilder.collapseItemActionView(com.android.internal.view.menu.MenuItemImpl)"
"android.view.animation.AccelerateInterpolator.getInterpolation(float)","java.lang.Math.pow(float, double)"
"android.view.animation.AccelerateInterpolator.createNativeInterpolator()","com.android.internal.view.animation.NativeInterpolatorFactoryHelper.createAccelerateInterpolator(float)"
"android.text.util.Rfc822Tokenizer.tokenize(CharSequence, Collection)","java.lang.CharSequence.charAt(int)"
"android.text.util.Rfc822Tokenizer.tokenize(CharSequence, Collection)","java.lang.StringBuilder.toString()"
"android.text.util.Rfc822Tokenizer.tokenize(CharSequence, Collection)","java.lang.StringBuilder.append(char)"
"android.text.util.Rfc822Tokenizer.tokenize(CharSequence, Collection)","java.lang.AbstractStringBuilder.setLength(int)"
"android.text.util.Rfc822Tokenizer.tokenize(CharSequence, Collection)","java.lang.AbstractStringBuilder.length()"
"android.text.util.Rfc822Tokenizer.tokenize(CharSequence, Collection)","java.lang.CharSequence.length()"
"android.text.util.Rfc822Tokenizer.tokenize(CharSequence, Collection)","java.util.Collection.add(android.text.util.Rfc822Token)"
"android.text.util.Rfc822Tokenizer.crunch(StringBuilder)","java.lang.AbstractStringBuilder.charAt(int)"
"android.text.util.Rfc822Tokenizer.crunch(StringBuilder)","java.lang.StringBuilder.deleteCharAt(int)"
"android.text.util.Rfc822Tokenizer.crunch(StringBuilder)","java.lang.AbstractStringBuilder.length()"
"android.text.util.Rfc822Tokenizer.crunch(StringBuilder)","java.lang.AbstractStringBuilder.setCharAt(int, char)"
"android.text.util.Rfc822Tokenizer.tokenize(CharSequence)","java.util.ArrayList.size()"
"android.text.util.Rfc822Tokenizer.tokenize(CharSequence)","java.util.ArrayList.toArray(android.text.util.Rfc822Token[])"
"android.text.util.Rfc822Tokenizer.findTokenEnd(CharSequence, int)","java.lang.CharSequence.charAt(int)"
"android.text.util.Rfc822Tokenizer.findTokenEnd(CharSequence, int)","java.lang.CharSequence.length()"
"android.text.util.Rfc822Tokenizer.findTokenStart(CharSequence, int)","android.text.util.Rfc822Tokenizer.findTokenEnd(java.lang.CharSequence, int)"
"android.text.util.Rfc822Tokenizer.findTokenStart(CharSequence, int)","java.lang.CharSequence.charAt(int)"
"android.bluetooth.BluetoothMasInstance.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.bluetooth.BluetoothMasInstance.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.bluetooth.BluetoothMasInstance.toString()","java.lang.Integer.toString(int)"
"android.bluetooth.BluetoothMasInstance.toString()","java.lang.Integer.toHexString(int)"
"android.bluetooth.BluetoothMasInstance.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.bluetooth.BluetoothMasInstance.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.view.ViewDebug.dumpViewHierarchy(Context, ViewGroup, BufferedWriter, int, boolean, boolean)","android.view.ViewDebug.dumpViewHierarchy(android.content.Context, android.view.ViewGroup, java.io.BufferedWriter, int, boolean, boolean)"
"android.view.ViewDebug.dumpViewHierarchy(Context, ViewGroup, BufferedWriter, int, boolean, boolean)","android.view.ViewDebug.dumpView(android.content.Context, android.view.View, java.io.BufferedWriter, int, boolean)"
"android.view.ViewDebug.dumpViewHierarchy(Context, ViewGroup, BufferedWriter, int, boolean, boolean)","android.view.ViewDebug.HierarchyHandler.dumpViewHierarchyWithProperties(java.io.BufferedWriter, int)"
"android.view.ViewDebug.dumpViewHierarchy(Context, ViewGroup, BufferedWriter, int, boolean, boolean)","android.view.View.getOverlay()"
"android.view.ViewDebug.isRequestedView(View, String, int)","java.lang.Object.getClass()"
"android.view.ViewDebug.isRequestedView(View, String, int)","java.lang.Object.hashCode()"
"android.view.ViewDebug.isRequestedView(View, String, int)","java.lang.Class.getName()"
"android.view.ViewDebug.isRequestedView(View, String, int)","java.lang.String.equals(java.lang.String)"
"android.view.ViewDebug.capture(View, OutputStream, View)","java.io.BufferedOutputStream.flush()"
"android.view.ViewDebug.capture(View, OutputStream, View)","java.io.FilterOutputStream.close()"
"android.view.ViewDebug.capture(View, OutputStream, View)","android.view.ViewDebug.performViewCapture(android.view.View, boolean)"
"android.view.ViewDebug.outputDisplayList(View, View)","android.view.ViewRootImpl.outputDisplayList(android.view.View)"
"android.view.ViewDebug.outputDisplayList(View, View)","android.view.View.getViewRootImpl()"
"android.view.ViewDebug.profile(View, OutputStream, String)","java.io.Writer.write(java.lang.String)"
"android.view.ViewDebug.profile(View, OutputStream, String)","android.view.ViewDebug.findView(android.view.View, java.lang.String)"
"android.view.ViewDebug.profile(View, OutputStream, String)","java.io.BufferedWriter.close()"
"android.view.ViewDebug.profile(View, OutputStream, String)","java.io.BufferedWriter.newLine()"
"android.view.ViewDebug.profile(View, OutputStream, String)","android.view.ViewDebug.profileViewAndChildren(android.view.View, java.io.BufferedWriter)"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.resolveId(android.content.Context, int)"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","java.util.HashMap.get(java.lang.reflect.Method)"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","java.lang.reflect.Method.getName()"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.getExportedPropertyMethods(java.lang.Class<?>)"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.exportUnrolledArray(android.content.Context, java.io.BufferedWriter, android.view.ViewDebug.ExportedProperty, int[], java.lang.String, java.lang.String)"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.callMethodOnAppropriateTheadBlocking(java.lang.reflect.Method, java.lang.Object)"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.writeEntry(java.io.BufferedWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.writeEntry(java.io.BufferedWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.exportUnrolledFlags(java.io.BufferedWriter, android.view.ViewDebug.FlagToString[], int, java.lang.String)"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","java.lang.Class.isPrimitive()"
"android.view.ViewDebug.exportMethods(Context, Object, BufferedWriter, Class, String)","java.lang.reflect.Method.getReturnType()"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","java.io.Writer.write(java.lang.String)"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","android.view.View.forceLayout()"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","android.view.View.willNotDraw()"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","android.view.View.measure(int, int)"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","android.view.View.getResources()"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","android.view.ViewDebug.profileViewOperation(android.view.View, android.view.ViewDebug.ViewOperation<java.lang.Void>)"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","java.io.BufferedWriter.newLine()"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","android.view.View.layout(int, int, int, int)"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","android.content.res.Resources.getDisplayMetrics()"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","java.lang.String.valueOf(long)"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","android.view.ViewDebug.Anonymous-d8383b5d-a5ae-43b7-928e-f2aa6c10d69b.forceLayout(android.view.View)"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","java.io.BufferedWriter.write(char)"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter, boolean)","android.view.ViewDebug.profileViewOperation(android.view.View, android.view.ViewDebug.ViewOperation<java.lang.Object>)"
"android.view.ViewDebug.profileViewAndChildren(View, BufferedWriter)","android.view.ViewDebug.profileViewAndChildren(android.view.View, java.io.BufferedWriter, boolean)"
"android.view.ViewDebug.capturedViewExportFields(Object, Class, String)","java.lang.reflect.Field.getName()"
"android.view.ViewDebug.capturedViewExportFields(Object, Class, String)","java.lang.String.replace(java.lang.String, java.lang.String)"
"android.view.ViewDebug.capturedViewExportFields(Object, Class, String)","android.view.ViewDebug.capturedViewGetPropertyFields(java.lang.Class<?>)"
"android.view.ViewDebug.capturedViewExportFields(Object, Class, String)","java.lang.StringBuilder.append(java.lang.String)"
"android.view.ViewDebug.capturedViewExportFields(Object, Class, String)","java.lang.reflect.Field.get(java.lang.Object)"
"android.view.ViewDebug.capturedViewExportFields(Object, Class, String)","java.lang.StringBuilder.toString()"
"android.view.ViewDebug.capturedViewExportFields(Object, Class, String)","java.lang.StringBuilder.append(char)"
"android.view.ViewDebug.capturedViewExportFields(Object, Class, String)","java.lang.Object.toString()"
"android.view.ViewDebug.invokeViewMethod(View, Method, Object[])","java.util.concurrent.CountDownLatch.countDown()"
"android.view.ViewDebug.invokeViewMethod(View, Method, Object[])","android.view.View.post(java.lang.Runnable)"
"android.view.ViewDebug.invokeViewMethod(View, Method, Object[])","java.lang.reflect.InvocationTargetException.getCause()"
"android.view.ViewDebug.invokeViewMethod(View, Method, Object[])","java.util.concurrent.atomic.AtomicReference.get()"
"android.view.ViewDebug.invokeViewMethod(View, Method, Object[])","java.util.concurrent.atomic.AtomicReference.set(java.lang.Exception)"
"android.view.ViewDebug.invokeViewMethod(View, Method, Object[])","java.util.concurrent.CountDownLatch.await()"
"android.view.ViewDebug.invokeViewMethod(View, Method, Object[])","java.util.concurrent.atomic.AtomicReference.set(java.lang.Throwable)"
"android.view.ViewDebug.invokeViewMethod(View, Method, Object[])","java.util.concurrent.atomic.AtomicReference.set(java.lang.Object)"
"android.view.ViewDebug.invokeViewMethod(View, Method, Object[])","java.lang.reflect.Method.invoke(android.view.View, java.lang.Object[])"
"android.view.ViewDebug.profileViewOperation(View, ViewOperation)","java.util.concurrent.CountDownLatch.countDown()"
"android.view.ViewDebug.profileViewOperation(View, ViewOperation)","java.lang.Thread.interrupt()"
"android.view.ViewDebug.profileViewOperation(View, ViewOperation)","android.view.ViewDebug.ViewOperation.pre()"
"android.view.ViewDebug.profileViewOperation(View, ViewOperation)","android.view.View.post(java.lang.Runnable)"
"android.view.ViewDebug.profileViewOperation(View, ViewOperation)","android.view.ViewDebug.ViewOperation.run(T[])"
"android.view.ViewDebug.profileViewOperation(View, ViewOperation)","android.view.ViewDebug.ViewOperation.post(T[])"
"android.view.ViewDebug.profileViewOperation(View, ViewOperation)","android.os.Debug.threadCpuTimeNanos()"
"android.view.ViewDebug.profileViewOperation(View, ViewOperation)","java.lang.Thread.currentThread()"
"android.view.ViewDebug.profileViewOperation(View, ViewOperation)","java.util.concurrent.CountDownLatch.await(int, java.util.concurrent.TimeUnit)"
"android.view.ViewDebug.performViewCapture(View, boolean)","java.util.concurrent.CountDownLatch.countDown()"
"android.view.ViewDebug.performViewCapture(View, boolean)","java.lang.Thread.interrupt()"
"android.view.ViewDebug.performViewCapture(View, boolean)","android.view.View.post(java.lang.Runnable)"
"android.view.ViewDebug.performViewCapture(View, boolean)","java.lang.Thread.currentThread()"
"android.view.ViewDebug.performViewCapture(View, boolean)","java.util.concurrent.CountDownLatch.await(int, java.util.concurrent.TimeUnit)"
"android.view.ViewDebug.getViewRootImplCount()","android.os.Debug.countInstancesOfClass(java.lang.Class<android.view.ViewRootImpl>)"
"android.view.ViewDebug.capture(View, OutputStream, String)","android.view.ViewDebug.findView(android.view.View, java.lang.String)"
"android.view.ViewDebug.exportUnrolledFlags(BufferedWriter, FlagToString[], int, String)","android.view.ViewDebug.formatIntToHexString(int)"
"android.view.ViewDebug.exportUnrolledFlags(BufferedWriter, FlagToString[], int, String)","android.view.ViewDebug.writeEntry(java.io.BufferedWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.view.ViewDebug.invalidate(View, String)","android.view.ViewDebug.findView(android.view.View, java.lang.String)"
"android.view.ViewDebug.invalidate(View, String)","android.view.View.postInvalidate()"
"android.view.ViewDebug.writeValue(BufferedWriter, Object)","java.io.Writer.write(java.lang.String)"
"android.view.ViewDebug.writeValue(BufferedWriter, Object)","java.lang.String.replace(java.lang.String, java.lang.String)"
"android.view.ViewDebug.writeValue(BufferedWriter, Object)","java.lang.String.valueOf(int)"
"android.view.ViewDebug.writeValue(BufferedWriter, Object)","java.lang.Object.toString()"
"android.view.ViewDebug.writeValue(BufferedWriter, Object)","java.lang.String.length()"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.util.HashMap.get(java.lang.Class<?>)"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.util.ArrayList.size()"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.util.ArrayList.toArray(java.lang.reflect.Method[])"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.util.HashMap.put(java.lang.Class<?>, java.lang.reflect.Method[])"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.lang.Class.getMethods()"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<android.view.ViewDebug.CapturedViewProperty>)"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.lang.reflect.Method.getReturnType()"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.lang.reflect.Method.setAccessible(boolean)"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.util.ArrayList.add(java.lang.reflect.Method)"
"android.view.ViewDebug.capturedViewGetPropertyMethods(Class)","java.lang.reflect.Method.getParameterTypes()"
"android.view.ViewDebug.getViewInstanceCount()","android.os.Debug.countInstancesOfClass(java.lang.Class<android.view.View>)"
"android.view.ViewDebug.getStyleAttributesDump(Resources, Resources.Theme)","android.content.res.Resources.Theme.getAllAttributes()"
"android.view.ViewDebug.getStyleAttributesDump(Resources, Resources.Theme)","java.lang.CharSequence.toString()"
"android.view.ViewDebug.getStyleAttributesDump(Resources, Resources.Theme)","android.util.TypedValue.coerceToString()"
"android.view.ViewDebug.getStyleAttributesDump(Resources, Resources.Theme)","android.content.res.Resources.getResourceName(int)"
"android.view.ViewDebug.getStyleAttributesDump(Resources, Resources.Theme)","android.content.res.Resources.Theme.resolveAttribute(int, android.util.TypedValue, boolean)"
"android.view.ViewDebug.captureLayers(View, DataOutputStream)","java.io.FilterOutputStream.close()"
"android.view.ViewDebug.captureLayers(View, DataOutputStream)","android.view.ViewDebug.captureViewLayer(android.view.View, java.io.DataOutputStream, boolean)"
"android.view.ViewDebug.captureLayers(View, DataOutputStream)","java.io.DataOutputStream.write(int)"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","java.lang.reflect.Method.getAnnotation(java.lang.Class<android.view.ViewDebug.CapturedViewProperty>)"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","android.view.ViewDebug.capturedViewGetPropertyMethods(java.lang.Class<?>)"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","java.lang.reflect.Method.getName()"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","java.lang.String.replace(java.lang.String, java.lang.String)"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","java.lang.StringBuilder.append(java.lang.String)"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","android.view.ViewDebug.capturedViewExportMethods(java.lang.Object, java.lang.Class<?>, java.lang.String)"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","java.lang.StringBuilder.toString()"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","java.lang.reflect.Method.getReturnType()"
"android.view.ViewDebug.capturedViewExportMethods(Object, Class, String)","java.lang.Object.toString()"
"android.view.ViewDebug.writeEntry(BufferedWriter, String, String, String, Object)","java.io.Writer.write(java.lang.String)"
"android.view.ViewDebug.writeEntry(BufferedWriter, String, String, String, Object)","android.view.ViewDebug.writeValue(java.io.BufferedWriter, java.lang.Object)"
"android.view.ViewDebug.writeEntry(BufferedWriter, String, String, String, Object)","java.io.BufferedWriter.write(char)"
"android.view.ViewDebug.setLayoutParameter(View, String, int)","java.lang.reflect.Field.getType()"
"android.view.ViewDebug.setLayoutParameter(View, String, int)","android.view.View.getLayoutParams()"
"android.view.ViewDebug.setLayoutParameter(View, String, int)","android.view.View.post(java.lang.Runnable)"
"android.view.ViewDebug.setLayoutParameter(View, String, int)","android.view.View.setLayoutParams(android.view.ViewGroup.LayoutParams)"
"android.view.ViewDebug.setLayoutParameter(View, String, int)","java.lang.reflect.Field.set(android.view.ViewGroup.LayoutParams, java.lang.Integer)"
"android.view.ViewDebug.setLayoutParameter(View, String, int)","java.lang.Object.getClass()"
"android.view.ViewDebug.setLayoutParameter(View, String, int)","java.lang.Class.getSimpleName()"
"android.view.ViewDebug.setLayoutParameter(View, String, int)","java.lang.Class.getField(java.lang.String)"
"android.view.ViewDebug.setLayoutParameter(View, String, int)","java.lang.Integer.valueOf(int)"
"android.view.ViewDebug.findView(ViewGroup, String, int)","android.view.ViewDebug.findView(android.view.ViewGroup, java.lang.String, int)"
"android.view.ViewDebug.findView(ViewGroup, String, int)","android.view.ViewDebug.HierarchyHandler.findHierarchyView(java.lang.String, int)"
"android.view.ViewDebug.findView(ViewGroup, String, int)","android.view.ViewDebug.isRequestedView(android.view.View, java.lang.String, int)"
"android.view.ViewDebug.requestLayout(View, String)","android.view.View.post(java.lang.Runnable)"
"android.view.ViewDebug.requestLayout(View, String)","android.view.ViewDebug.findView(android.view.View, java.lang.String)"
"android.view.ViewDebug.requestLayout(View, String)","android.view.View.requestLayout()"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","java.lang.reflect.Field.getType()"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","java.lang.reflect.Field.getName()"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.exportUnrolledArray(android.content.Context, java.io.BufferedWriter, android.view.ViewDebug.ExportedProperty, int[], java.lang.String, java.lang.String)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.writeEntry(java.io.BufferedWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","java.lang.reflect.Field.getInt(java.lang.Object)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","java.util.HashMap.get(java.lang.reflect.Field)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","java.lang.reflect.Field.get(java.lang.Object)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.formatIntToHexString(java.lang.Integer)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.getExportedPropertyFields(java.lang.Class<?>)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.resolveId(android.content.Context, int)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.writeEntry(java.io.BufferedWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","android.view.ViewDebug.exportUnrolledFlags(java.io.BufferedWriter, android.view.ViewDebug.FlagToString[], int, java.lang.String)"
"android.view.ViewDebug.exportFields(Context, Object, BufferedWriter, Class, String)","java.lang.Class.isPrimitive()"
"android.view.ViewDebug.capturedViewGetPropertyFields(Class)","java.util.HashMap.get(java.lang.Class<?>)"
"android.view.ViewDebug.capturedViewGetPropertyFields(Class)","java.util.ArrayList.size()"
"android.view.ViewDebug.capturedViewGetPropertyFields(Class)","java.lang.Class.getFields()"
"android.view.ViewDebug.capturedViewGetPropertyFields(Class)","java.util.HashMap.put(java.lang.Class<?>, java.lang.reflect.Field[])"
"android.view.ViewDebug.capturedViewGetPropertyFields(Class)","java.util.ArrayList.toArray(java.lang.reflect.Field[])"
"android.view.ViewDebug.capturedViewGetPropertyFields(Class)","java.util.ArrayList.add(java.lang.reflect.Field)"
"android.view.ViewDebug.capturedViewGetPropertyFields(Class)","java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<android.view.ViewDebug.CapturedViewProperty>)"
"android.view.ViewDebug.capturedViewGetPropertyFields(Class)","java.lang.reflect.Field.setAccessible(boolean)"
"android.view.ViewDebug.dumpCapturedView(String, Object)","java.lang.Object.getClass()"
"android.view.ViewDebug.dumpCapturedView(String, Object)","java.lang.StringBuilder.append(java.lang.String)"
"android.view.ViewDebug.dumpCapturedView(String, Object)","android.view.ViewDebug.capturedViewExportMethods(java.lang.Object, java.lang.Class<?>, java.lang.String)"
"android.view.ViewDebug.dumpCapturedView(String, Object)","android.view.ViewDebug.capturedViewExportFields(java.lang.Object, java.lang.Class<?>, java.lang.String)"
"android.view.ViewDebug.dumpCapturedView(String, Object)","java.lang.Class.getName()"
"android.view.ViewDebug.dump(View, boolean, boolean, OutputStream)","java.io.Writer.write(java.lang.String)"
"android.view.ViewDebug.dump(View, boolean, boolean, OutputStream)","android.view.View.getRootView()"
"android.view.ViewDebug.dump(View, boolean, boolean, OutputStream)","java.io.BufferedWriter.close()"
"android.view.ViewDebug.dump(View, boolean, boolean, OutputStream)","java.io.BufferedWriter.newLine()"
"android.view.ViewDebug.formatIntToHexString(int)","java.lang.String.toUpperCase()"
"android.view.ViewDebug.formatIntToHexString(int)","java.lang.Integer.toHexString(int)"
"android.view.ViewDebug.dumpView(Context, View, BufferedWriter, int, boolean)","java.io.Writer.write(java.lang.String)"
"android.view.ViewDebug.dumpView(Context, View, BufferedWriter, int, boolean)","android.view.ViewDebug.dumpViewProperties(android.content.Context, android.view.View, java.io.BufferedWriter)"
"android.view.ViewDebug.dumpView(Context, View, BufferedWriter, int, boolean)","java.lang.Object.getClass()"
"android.view.ViewDebug.dumpView(Context, View, BufferedWriter, int, boolean)","java.lang.Object.hashCode()"
"android.view.ViewDebug.dumpView(Context, View, BufferedWriter, int, boolean)","java.io.BufferedWriter.write(char)"
"android.view.ViewDebug.dumpView(Context, View, BufferedWriter, int, boolean)","java.io.BufferedWriter.newLine()"
"android.view.ViewDebug.dumpView(Context, View, BufferedWriter, int, boolean)","java.lang.Class.getName()"
"android.view.ViewDebug.dumpView(Context, View, BufferedWriter, int, boolean)","java.lang.String.equals(java.lang.String)"
"android.view.ViewDebug.dumpView(Context, View, BufferedWriter, int, boolean)","java.lang.Integer.toHexString(int)"
"android.view.ViewDebug.callMethodOnAppropriateTheadBlocking(Method, Object)","java.util.concurrent.FutureTask.get(int, java.util.concurrent.TimeUnit)"
"android.view.ViewDebug.callMethodOnAppropriateTheadBlocking(Method, Object)","android.os.Looper.getMainLooper()"
"android.view.ViewDebug.callMethodOnAppropriateTheadBlocking(Method, Object)","java.lang.Throwable.getCause()"
"android.view.ViewDebug.callMethodOnAppropriateTheadBlocking(Method, Object)","android.os.Handler.post(java.util.concurrent.FutureTask<java.lang.Object>)"
"android.view.ViewDebug.callMethodOnAppropriateTheadBlocking(Method, Object)","java.lang.reflect.Method.invoke(java.lang.Object, java.lang.Object[])"
"android.view.ViewDebug.callMethodOnAppropriateTheadBlocking(Method, Object)","android.view.View.getHandler()"
"android.view.ViewDebug.callMethodOnAppropriateTheadBlocking(Method, Object)","java.lang.reflect.Method.invoke(android.view.View, java.lang.Object[])"
"android.view.ViewDebug.dumpViewProperties(Context, Object, BufferedWriter)","android.view.ViewDebug.dumpViewProperties(android.content.Context, java.lang.Object, java.io.BufferedWriter, java.lang.String)"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.util.HashMap.get(java.lang.Class<?>)"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.util.ArrayList.size()"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.lang.reflect.Method.getAnnotation(java.lang.Class<android.view.ViewDebug.ExportedProperty>)"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.util.ArrayList.toArray(java.lang.reflect.Method[])"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.util.HashMap.put(java.lang.Class<?>, java.lang.reflect.Method[])"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<android.view.ViewDebug.ExportedProperty>)"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.lang.reflect.Method.getReturnType()"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.lang.reflect.Method.setAccessible(boolean)"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.util.ArrayList.add(java.lang.reflect.Method)"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.util.ArrayList.get(int)"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.lang.reflect.Method.getParameterTypes()"
"android.view.ViewDebug.getExportedPropertyMethods(Class)","java.util.HashMap.put(java.lang.reflect.Method, android.view.ViewDebug.ExportedProperty)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","java.lang.String.split(java.lang.String)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","android.view.ViewDebug.profile(android.view.View, java.io.OutputStream, java.lang.String)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","android.view.ViewDebug.dumpTheme(android.view.View, java.io.OutputStream)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","android.view.ViewDebug.captureLayers(android.view.View, java.io.DataOutputStream)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","android.view.View.getRootView()"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","android.view.ViewDebug.outputDisplayList(android.view.View, java.lang.String)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","android.view.ViewDebug.requestLayout(android.view.View, java.lang.String)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","android.view.ViewDebug.dump(android.view.View, boolean, boolean, java.io.OutputStream)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","android.view.ViewDebug.capture(android.view.View, java.io.OutputStream, java.lang.String)"
"android.view.ViewDebug.dispatchCommand(View, String, String, OutputStream)","android.view.ViewDebug.invalidate(android.view.View, java.lang.String)"
"android.view.ViewDebug.dumpTheme(View, OutputStream)","java.io.Writer.write(java.lang.String)"
"android.view.ViewDebug.dumpTheme(View, OutputStream)","android.view.ViewDebug.getStyleAttributesDump(android.content.res.Resources, android.content.res.Resources.Theme)"
"android.view.ViewDebug.dumpTheme(View, OutputStream)","android.content.Context.getTheme()"
"android.view.ViewDebug.dumpTheme(View, OutputStream)","android.view.View.getContext()"
"android.view.ViewDebug.dumpTheme(View, OutputStream)","android.content.Context.getResources()"
"android.view.ViewDebug.dumpTheme(View, OutputStream)","java.io.BufferedWriter.close()"
"android.view.ViewDebug.dumpTheme(View, OutputStream)","java.io.BufferedWriter.newLine()"
"android.view.ViewDebug.outputDisplayList(View, String)","android.view.ViewDebug.findView(android.view.View, java.lang.String)"
"android.view.ViewDebug.outputDisplayList(View, String)","android.view.ViewRootImpl.outputDisplayList(android.view.View)"
"android.view.ViewDebug.outputDisplayList(View, String)","android.view.View.getViewRootImpl()"
"android.view.ViewDebug.exportUnrolledArray(Context, BufferedWriter, ExportedProperty, int[], String, String)","android.view.ViewDebug.resolveId(android.content.Context, int)"
"android.view.ViewDebug.exportUnrolledArray(Context, BufferedWriter, ExportedProperty, int[], String, String)","android.view.ViewDebug.writeEntry(java.io.BufferedWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
"android.view.ViewDebug.exportUnrolledArray(Context, BufferedWriter, ExportedProperty, int[], String, String)","java.lang.String.valueOf(int)"
"android.view.ViewDebug.findView(View, String)","android.view.ViewDebug.findView(android.view.ViewGroup, java.lang.String, int)"
"android.view.ViewDebug.findView(View, String)","java.lang.String.split(java.lang.String)"
"android.view.ViewDebug.findView(View, String)","android.content.res.Resources.getIdentifier(java.lang.String, null, null)"
"android.view.ViewDebug.findView(View, String)","android.view.View.getResources()"
"android.view.ViewDebug.findView(View, String)","android.view.View.getRootView()"
"android.view.ViewDebug.findView(View, String)","java.lang.Long.parseLong(java.lang.String, int)"
"android.view.ViewDebug.findView(View, String)","java.lang.String.indexOf(char)"
"android.view.ViewDebug.findView(View, String)","android.view.View.findViewById(int)"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.util.HashMap.get(java.lang.Class<?>)"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.util.ArrayList.size()"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.lang.reflect.Field.getType()"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.lang.reflect.Field.getAnnotation(java.lang.Class<android.view.ViewDebug.ExportedProperty>)"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.util.HashMap.put(java.lang.Class<?>, java.lang.reflect.Field[])"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.util.ArrayList.toArray(java.lang.reflect.Field[])"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<android.view.ViewDebug.ExportedProperty>)"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.util.ArrayList.add(java.lang.reflect.Field)"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.util.HashMap.put(java.lang.reflect.Field, android.view.ViewDebug.ExportedProperty)"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.util.ArrayList.get(int)"
"android.view.ViewDebug.getExportedPropertyFields(Class)","java.lang.reflect.Field.setAccessible(boolean)"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","android.view.View.getContext()"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.io.DataOutputStream.writeUTF(java.lang.String)"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.io.ByteArrayOutputStream.writeTo(java.io.DataOutputStream)"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","android.view.ViewDebug.performViewCapture(android.view.View, boolean)"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","android.view.View.getOverlay()"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.lang.Object.toString()"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.io.DataOutputStream.write(int)"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","android.view.ViewDebug.resolveId(android.content.Context, int)"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.io.DataOutputStream.flush()"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","android.view.View.getVisibility()"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.io.DataOutputStream.writeByte(int)"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.io.ByteArrayOutputStream.size()"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.lang.Object.getClass()"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.io.DataOutputStream.writeInt(int)"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","java.lang.Class.getSimpleName()"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","android.view.View.getLocationInWindow(int[])"
"android.view.ViewDebug.captureViewLayer(View, DataOutputStream, boolean)","android.view.View.getId()"
"android.view.ViewDebug.dumpViewProperties(Context, Object, BufferedWriter, String)","java.io.Writer.write(java.lang.String)"
"android.view.ViewDebug.dumpViewProperties(Context, Object, BufferedWriter, String)","android.view.ViewDebug.exportMethods(android.content.Context, java.lang.Object, java.io.BufferedWriter, java.lang.Class<?>, java.lang.String)"
"android.view.ViewDebug.dumpViewProperties(Context, Object, BufferedWriter, String)","java.lang.Object.getClass()"
"android.view.ViewDebug.dumpViewProperties(Context, Object, BufferedWriter, String)","android.view.ViewDebug.exportFields(android.content.Context, java.lang.Object, java.io.BufferedWriter, java.lang.Class<?>, java.lang.String)"
"android.view.ViewDebug.dumpViewProperties(Context, Object, BufferedWriter, String)","java.lang.Class.getSuperclass()"
"android.view.ViewDebug.resolveId(Context, int)","android.content.res.Resources.getResourceTypeName(int)"
"android.view.ViewDebug.resolveId(Context, int)","android.content.Context.getResources()"
"android.view.ViewDebug.resolveId(Context, int)","android.view.ViewDebug.formatIntToHexString(int)"
"android.view.ViewDebug.resolveId(Context, int)","android.content.res.Resources.getResourceEntryName(int)"
"android.net.http.RequestQueue.startTiming()","android.net.http.RequestQueue.ActivePool.startTiming()"
"android.net.http.RequestQueue.queueSynchronousRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.WebAddress.getHost()"
"android.net.http.RequestQueue.queueSynchronousRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.WebAddress.getScheme()"
"android.net.http.RequestQueue.queueSynchronousRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.WebAddress.getPort()"
"android.net.http.RequestQueue.queueSynchronousRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.WebAddress.getPath()"
"android.net.http.RequestQueue.startup()","java.lang.Thread.start()"
"android.net.http.RequestQueue.queueRequest(String, String, Map, EventHandler, InputStream, int)","android.net.http.RequestQueue.queueRequest(java.lang.String, android.net.WebAddress, java.lang.String, java.util.Map<java.lang.String, java.lang.String>, android.net.http.EventHandler, java.io.InputStream, int)"
"android.net.http.RequestQueue.queueRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.WebAddress.getHost()"
"android.net.http.RequestQueue.queueRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.http.RequestQueue.queueRequest(android.net.http.Request, boolean)"
"android.net.http.RequestQueue.queueRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.WebAddress.getScheme()"
"android.net.http.RequestQueue.queueRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.http.RequestQueue.ActivePool.startConnectionThread()"
"android.net.http.RequestQueue.queueRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.WebAddress.getPort()"
"android.net.http.RequestQueue.queueRequest(String, WebAddress, String, Map, EventHandler, InputStream, int)","android.net.WebAddress.getPath()"
"android.net.http.RequestQueue.setProxyConfig()","android.net.Proxy.getHost(android.content.Context)"
"android.net.http.RequestQueue.setProxyConfig()","android.net.NetworkInfo.getType()"
"android.net.http.RequestQueue.setProxyConfig()","android.net.ConnectivityManager.getActiveNetworkInfo()"
"android.net.http.RequestQueue.setProxyConfig()","android.net.http.RequestQueue.ActivePool.disablePersistence()"
"android.net.http.RequestQueue.setProxyConfig()","android.net.Proxy.getPort(android.content.Context)"
"android.net.http.RequestQueue.dump()","java.lang.AbstractStringBuilder.append(java.lang.StringBuilder)"
"android.net.http.RequestQueue.dump()","java.lang.StringBuilder.append(java.lang.String)"
"android.net.http.RequestQueue.dump()","java.util.LinkedList.listIterator(int)"
"android.net.http.RequestQueue.startConnectionThread()","java.lang.Object.notify()"
"android.net.http.RequestQueue.disablePersistence()","android.net.http.IdleCache.clear()"
"android.net.http.RequestQueue.stopTiming()","android.net.http.RequestQueue.ActivePool.stopTiming()"
"android.net.http.RequestQueue.queueRequest(Request, boolean)","java.util.LinkedList.addFirst(android.net.http.Request)"
"android.net.http.RequestQueue.queueRequest(Request, boolean)","java.util.LinkedList.add(android.net.http.Request)"
"android.net.http.RequestQueue.removeFirst(LinkedHashMap)","java.util.AbstractCollection.isEmpty()"
"android.net.http.RequestQueue.removeFirst(LinkedHashMap)","java.util.LinkedList.removeFirst()"
"android.net.http.RequestQueue.shutdown()","android.net.http.RequestQueue.ActivePool.shutdown()"
"android.net.http.RequestQueue.enablePlatformNotifications()","android.net.http.RequestQueue.setProxyConfig()"
"android.net.http.RequestQueue.enablePlatformNotifications()","android.content.Context.registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"
"android.net.http.RequestQueue.logState()","java.lang.StringBuilder.append(java.lang.String)"
"android.net.http.RequestQueue.requeueRequest(Request)","android.net.http.RequestQueue.queueRequest(android.net.http.Request, boolean)"
"android.net.http.RequestQueue.getRequest(HttpHost)","java.util.AbstractCollection.isEmpty()"
"android.net.http.RequestQueue.getRequest(HttpHost)","java.util.LinkedList.removeFirst()"
"android.net.http.RequestQueue.disablePlatformNotifications()","android.content.Context.unregisterReceiver(android.content.BroadcastReceiver)"
"android.app.usage.UsageEvents.findStringIndex(String)","java.util.Arrays.binarySearch(java.lang.String[], java.lang.String)"
"android.app.usage.UsageEvents.getNextEvent(Event)","android.app.usage.UsageEvents.readEventFromParcel(android.os.Parcel, android.app.usage.UsageEvents.Event)"
"android.app.usage.UsageEvents.getNextEvent(Event)","android.os.Parcel.recycle()"
"android.app.usage.UsageEvents.readEventFromParcel(Parcel, Event)","android.os.Parcel.readLong()"
"android.app.usage.UsageEvents.readEventFromParcel(Parcel, Event)","android.os.Parcelable.Creator.createFromParcel(android.os.Parcel)"
"android.app.usage.UsageEvents.readEventFromParcel(Parcel, Event)","android.os.Parcel.readInt()"
"android.app.usage.UsageEvents.finalize()","java.lang.Object.finalize()"
"android.app.usage.UsageEvents.finalize()","android.os.Parcel.recycle()"
"android.app.usage.UsageEvents.writeEventToParcel(Event, Parcel, int)","android.os.Parcel.writeLong(long)"
"android.app.usage.UsageEvents.writeEventToParcel(Event, Parcel, int)","android.os.Parcel.writeInt(int)"
"android.app.usage.UsageEvents.writeEventToParcel(Event, Parcel, int)","android.app.usage.UsageEvents.findStringIndex(java.lang.String)"
"android.app.usage.UsageEvents.writeEventToParcel(Event, Parcel, int)","android.content.res.Configuration.writeToParcel(android.os.Parcel, int)"
"android.app.usage.UsageEvents.resetToStart()","android.os.Parcel.setDataPosition(int)"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","android.os.Parcel.writeStringArray(java.lang.String[])"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","android.os.Parcel.appendFrom(android.os.Parcel, int, int)"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","android.os.Parcel.setDataPosition(int)"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","android.os.Parcel.dataPosition()"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","android.os.Parcel.dataSize()"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","android.os.Parcel.recycle()"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","android.os.Parcel.obtain()"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","android.app.usage.UsageEvents.writeEventToParcel(android.app.usage.UsageEvents.Event, android.os.Parcel, int)"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.app.usage.UsageEvents.writeToParcel(Parcel, int)","java.util.List.get(int)"
"android.nfc.NdefRecord.writeToByteBuffer(ByteBuffer, boolean, boolean)","java.nio.ByteBuffer.put(byte)"
"android.nfc.NdefRecord.writeToByteBuffer(ByteBuffer, boolean, boolean)","java.nio.ByteBuffer.put(byte[])"
"android.nfc.NdefRecord.writeToByteBuffer(ByteBuffer, boolean, boolean)","java.nio.ByteBuffer.putInt(int)"
"android.nfc.NdefRecord.validateTnf(short, byte[], byte[], byte[])","java.lang.String.format(java.lang.String, short)"
"android.nfc.NdefRecord.createUri(String)","android.nfc.NdefRecord.createUri(android.net.Uri)"
"android.nfc.NdefRecord.createUri(String)","android.net.Uri.parse(java.lang.String)"
"android.nfc.NdefRecord.bytesToString(byte[])","java.lang.String.format(java.lang.String, byte)"
"android.nfc.NdefRecord.bytesToString(byte[])","java.lang.StringBuilder.append(java.lang.String)"
"android.nfc.NdefRecord.toUri()","android.nfc.NdefRecord.toUri(boolean)"
"android.nfc.NdefRecord.createUri(Uri)","android.net.Uri.normalizeScheme()"
"android.nfc.NdefRecord.createUri(Uri)","java.lang.String.substring(int)"
"android.nfc.NdefRecord.createUri(Uri)","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"android.nfc.NdefRecord.createUri(Uri)","java.lang.String.getBytes(java.nio.charset.Charset)"
"android.nfc.NdefRecord.createUri(Uri)","java.lang.String.startsWith(java.lang.String)"
"android.nfc.NdefRecord.createUri(Uri)","android.net.Uri.toString()"
"android.nfc.NdefRecord.createUri(Uri)","java.lang.String.length()"
"android.nfc.NdefRecord.equals(Object)","java.util.Arrays.equals(byte[], byte[])"
"android.nfc.NdefRecord.equals(Object)","java.lang.Object.getClass()"
"android.nfc.NdefRecord.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(short)"
"android.nfc.NdefRecord.writeToParcel(Parcel, int)","android.os.Parcel.writeByteArray(byte[])"
"android.nfc.NdefRecord.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","java.nio.ByteBuffer.getInt()"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","java.util.List.toArray(android.nfc.NdefRecord[])"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","java.util.List.add(android.nfc.NdefRecord)"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","java.util.ArrayList.add(byte[])"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","java.nio.ByteBuffer.get()"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","java.util.List.size()"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","android.nfc.NdefRecord.validateTnf(short, byte[], byte[], byte[])"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","android.nfc.NdefRecord.ensureSanePayloadSize(long)"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","java.nio.ByteBuffer.get(byte[])"
"android.nfc.NdefRecord.parse(ByteBuffer, boolean)","java.util.ArrayList.clear()"
"android.nfc.NdefRecord.getId()","java.lang.Object.clone()"
"android.nfc.NdefRecord.hashCode()","java.util.Arrays.hashCode(byte[])"
"android.nfc.NdefRecord.parseWktUri()","java.util.Arrays.copyOfRange(byte[], int, int)"
"android.nfc.NdefRecord.parseWktUri()","android.net.Uri.parse(java.lang.String)"
"android.nfc.NdefRecord.createMime(String, byte[])","android.content.Intent.normalizeMimeType(java.lang.String)"
"android.nfc.NdefRecord.createMime(String, byte[])","java.lang.String.getBytes(java.nio.charset.Charset)"
"android.nfc.NdefRecord.createMime(String, byte[])","java.lang.String.indexOf(char)"
"android.nfc.NdefRecord.createMime(String, byte[])","java.lang.String.length()"
"android.nfc.NdefRecord.getType()","java.lang.Object.clone()"
"android.nfc.NdefRecord.toByteArray()","android.nfc.NdefRecord.getByteLength()"
"android.nfc.NdefRecord.toByteArray()","java.nio.ByteBuffer.array()"
"android.nfc.NdefRecord.toByteArray()","java.nio.ByteBuffer.allocate(int)"
"android.nfc.NdefRecord.toByteArray()","android.nfc.NdefRecord.writeToByteBuffer(java.nio.ByteBuffer, boolean, boolean)"
"android.nfc.NdefRecord.createExternal(String, String, byte[])","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"android.nfc.NdefRecord.createExternal(String, String, byte[])","java.lang.String.getBytes(java.nio.charset.Charset)"
"android.nfc.NdefRecord.createExternal(String, String, byte[])","java.lang.String.trim()"
"android.nfc.NdefRecord.createExternal(String, String, byte[])","java.lang.String.toLowerCase(java.util.Locale)"
"android.nfc.NdefRecord.createExternal(String, String, byte[])","java.lang.String.length()"
"android.nfc.NdefRecord.createFromParcel(Parcel)","android.os.Parcel.readByteArray(byte[])"
"android.nfc.NdefRecord.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.nfc.NdefRecord.createTextRecord(String, String)","java.nio.ByteBuffer.put(byte)"
"android.nfc.NdefRecord.createTextRecord(String, String)","java.lang.String.getBytes(java.nio.charset.Charset)"
"android.nfc.NdefRecord.createTextRecord(String, String)","java.util.Locale.getLanguage()"
"android.nfc.NdefRecord.createTextRecord(String, String)","java.nio.ByteBuffer.put(byte[])"
"android.nfc.NdefRecord.createTextRecord(String, String)","java.nio.ByteBuffer.array()"
"android.nfc.NdefRecord.createTextRecord(String, String)","java.lang.String.isEmpty()"
"android.nfc.NdefRecord.createTextRecord(String, String)","java.nio.ByteBuffer.allocate(int)"
"android.nfc.NdefRecord.createTextRecord(String, String)","java.util.Locale.getDefault()"
"android.nfc.NdefRecord.createApplicationRecord(String)","java.lang.String.getBytes(java.nio.charset.Charset)"
"android.nfc.NdefRecord.createApplicationRecord(String)","java.lang.String.length()"
"android.nfc.NdefRecord.toUri(boolean)","android.nfc.NdefRecord.parseWktUri()"
"android.nfc.NdefRecord.toUri(boolean)","android.net.Uri.normalizeScheme()"
"android.nfc.NdefRecord.toUri(boolean)","java.util.Arrays.equals(byte[], byte[])"
"android.nfc.NdefRecord.toUri(boolean)","android.nfc.NdefRecord.toUri(boolean)"
"android.nfc.NdefRecord.toUri(boolean)","android.nfc.NdefMessage.getRecords()"
"android.nfc.NdefRecord.toUri(boolean)","android.net.Uri.parse(java.lang.String)"
"android.nfc.NdefRecord.getPayload()","java.lang.Object.clone()"
"android.nfc.NdefRecord.toMimeType()","java.util.Arrays.equals(byte[], byte[])"
"android.nfc.NdefRecord.toMimeType()","android.content.Intent.normalizeMimeType(java.lang.String)"
"android.nfc.NdefRecord.toString()","java.lang.String.format(java.lang.String, short)"
"android.nfc.NdefRecord.toString()","java.lang.AbstractStringBuilder.append(java.lang.StringBuilder)"
"android.nfc.NdefRecord.toString()","android.nfc.NdefRecord.bytesToString(byte[])"
"android.nfc.NdefRecord.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.nfc.NdefRecord.toString()","java.lang.StringBuilder.toString()"
"android.bluetooth.BluetoothUuid.parseUuidFrom(byte[])","java.util.UUID.getLeastSignificantBits()"
"android.bluetooth.BluetoothUuid.parseUuidFrom(byte[])","android.os.ParcelUuid.getUuid()"
"android.bluetooth.BluetoothUuid.parseUuidFrom(byte[])","java.util.UUID.getMostSignificantBits()"
"android.bluetooth.BluetoothUuid.parseUuidFrom(byte[])","java.nio.ByteBuffer.wrap(byte[])"
"android.bluetooth.BluetoothUuid.parseUuidFrom(byte[])","java.nio.ByteBuffer.getLong(int)"
"android.bluetooth.BluetoothUuid.parseUuidFrom(byte[])","java.nio.ByteBuffer.order(java.nio.ByteOrder)"
"android.bluetooth.BluetoothUuid.is16BitUuid(ParcelUuid)","java.util.UUID.getLeastSignificantBits()"
"android.bluetooth.BluetoothUuid.is16BitUuid(ParcelUuid)","android.os.ParcelUuid.getUuid()"
"android.bluetooth.BluetoothUuid.is16BitUuid(ParcelUuid)","java.util.UUID.getMostSignificantBits()"
"android.bluetooth.BluetoothUuid.isMns(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.containsAnyUuid(ParcelUuid[], ParcelUuid[])","java.util.HashSet.contains(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.containsAnyUuid(ParcelUuid[], ParcelUuid[])","java.util.Arrays.asList(android.os.ParcelUuid[])"
"android.bluetooth.BluetoothUuid.is32BitUuid(ParcelUuid)","java.util.UUID.getLeastSignificantBits()"
"android.bluetooth.BluetoothUuid.is32BitUuid(ParcelUuid)","android.os.ParcelUuid.getUuid()"
"android.bluetooth.BluetoothUuid.is32BitUuid(ParcelUuid)","java.util.UUID.getMostSignificantBits()"
"android.bluetooth.BluetoothUuid.is32BitUuid(ParcelUuid)","android.bluetooth.BluetoothUuid.is16BitUuid(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isBnep(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.containsAllUuids(ParcelUuid[], ParcelUuid[])","java.util.HashSet.contains(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.containsAllUuids(ParcelUuid[], ParcelUuid[])","java.util.Arrays.asList(android.os.ParcelUuid[])"
"android.bluetooth.BluetoothUuid.getServiceIdentifierFromParcelUuid(ParcelUuid)","android.os.ParcelUuid.getUuid()"
"android.bluetooth.BluetoothUuid.getServiceIdentifierFromParcelUuid(ParcelUuid)","java.util.UUID.getMostSignificantBits()"
"android.bluetooth.BluetoothUuid.isAvrcpController(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isUuidPresent(ParcelUuid[], ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isHandsfree(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isPanu(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isAudioSource(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isNap(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isAvrcpTarget(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isMas(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isAudioSink(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isMap(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isAdvAudioDist(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isHeadset(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.bluetooth.BluetoothUuid.isInputDevice(ParcelUuid)","android.os.ParcelUuid.equals(android.os.ParcelUuid)"
"android.hardware.camera2.legacy.BurstHolder.getNumberOfRequests()","java.util.ArrayList.size()"
"android.hardware.camera2.legacy.BurstHolder.produceRequestHolders(long)","android.hardware.camera2.legacy.RequestHolder.Builder.build(long)"
"android.hardware.camera2.legacy.BurstHolder.produceRequestHolders(long)","java.util.ArrayList.add(android.hardware.camera2.legacy.RequestHolder)"
"android.hardware.camera2.dispatch.MethodNameInvoker.invoke(String, Object[])","com.android.internal.util.Preconditions.checkNotNull(java.lang.String, java.lang.String)"
"android.hardware.camera2.dispatch.MethodNameInvoker.invoke(String, Object[])","java.lang.reflect.Method.getName()"
"android.hardware.camera2.dispatch.MethodNameInvoker.invoke(String, Object[])","java.util.concurrent.ConcurrentHashMap.put(java.lang.String, java.lang.reflect.Method)"
"android.hardware.camera2.dispatch.MethodNameInvoker.invoke(String, Object[])","java.util.concurrent.ConcurrentHashMap.get(java.lang.String)"
"android.hardware.camera2.dispatch.MethodNameInvoker.invoke(String, Object[])","java.lang.String.equals(java.lang.String)"
"android.hardware.camera2.dispatch.MethodNameInvoker.invoke(String, Object[])","java.lang.Class.getMethods()"
"android.hardware.camera2.dispatch.MethodNameInvoker.invoke(String, Object[])","android.hardware.camera2.utils.UncheckedThrow.throwAnyException(java.lang.Throwable)"
"android.hardware.camera2.dispatch.MethodNameInvoker.invoke(String, Object[])","android.hardware.camera2.dispatch.Dispatchable.dispatch(java.lang.reflect.Method, java.lang.Object[])"
"android.hardware.camera2.dispatch.MethodNameInvoker.invoke(String, Object[])","java.lang.reflect.Method.getParameterTypes()"
"android.accounts.ChooseTypeAndAccountActivity.onAccountSelected(Account)","android.accounts.ChooseTypeAndAccountActivity.setResultAndFinish(java.lang.String, java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","java.util.Iterator.next()"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.accounts.ChooseTypeAndAccountActivity.overrideDescriptionIfSupplied(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.app.Activity.onResume()"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","java.util.ArrayList.isEmpty()"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.accounts.ChooseTypeAndAccountActivity.getListOfDisplayableOptions(java.util.ArrayList<android.accounts.Account>)"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","java.util.Set.size()"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.accounts.ChooseTypeAndAccountActivity.getItemIndexToSelect(java.util.ArrayList<android.accounts.Account>, java.lang.String, boolean)"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.accounts.ChooseTypeAndAccountActivity.getAcceptableAccountChoices(android.accounts.AccountManager)"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.accounts.ChooseTypeAndAccountActivity.populateUIAccountList(java.lang.String[])"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","java.util.ArrayList.size()"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.accounts.ChooseTypeAndAccountActivity.setResultAndFinish(java.lang.String, java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.accounts.AccountManager.get(android.accounts.ChooseTypeAndAccountActivity)"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","java.util.Set.iterator()"
"android.accounts.ChooseTypeAndAccountActivity.onResume()","java.util.ArrayList.get(int)"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.content.Intent.putExtra(java.lang.String, java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.util.Log.isLoggable(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.content.Intent.getBundleExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.content.Intent.getStringArrayExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.content.Intent.putExtra(java.lang.String, android.os.Bundle)"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.content.Intent.getStringExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.app.Activity.startActivityForResult(android.content.Intent, int)"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.content.Intent.setFlags(int)"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.content.Intent.putExtra(java.lang.String, java.lang.String[])"
"android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()","android.app.Activity.getIntent()"
"android.accounts.ChooseTypeAndAccountActivity.getItemIndexToSelect(ArrayList, String, boolean)","java.util.ArrayList.size()"
"android.accounts.ChooseTypeAndAccountActivity.getItemIndexToSelect(ArrayList, String, boolean)","java.lang.String.equals(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.getItemIndexToSelect(ArrayList, String, boolean)","java.util.ArrayList.get(int)"
"android.accounts.ChooseTypeAndAccountActivity.setResultAndFinish(String, String)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.setResultAndFinish(String, String)","android.util.Log.isLoggable(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.setResultAndFinish(String, String)","android.app.Activity.finish()"
"android.accounts.ChooseTypeAndAccountActivity.setResultAndFinish(String, String)","android.content.Intent.putExtras(android.os.Bundle)"
"android.accounts.ChooseTypeAndAccountActivity.setResultAndFinish(String, String)","android.app.Activity.setResult(int, android.content.Intent)"
"android.accounts.ChooseTypeAndAccountActivity.onOkButtonClicked(View)","java.util.ArrayList.size()"
"android.accounts.ChooseTypeAndAccountActivity.onOkButtonClicked(View)","android.accounts.ChooseTypeAndAccountActivity.onAccountSelected(android.accounts.Account)"
"android.accounts.ChooseTypeAndAccountActivity.onOkButtonClicked(View)","android.accounts.ChooseTypeAndAccountActivity.startChooseAccountTypeActivity()"
"android.accounts.ChooseTypeAndAccountActivity.onOkButtonClicked(View)","java.util.ArrayList.get(int)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.os.UserHandle.getUserId(int)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.app.IActivityManager.getLaunchedFromPackage(android.os.IBinder)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.util.Log.isLoggable(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.accounts.ChooseTypeAndAccountActivity.getReleventAccountTypes(android.content.Intent)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.os.BaseBundle.getInt(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","java.util.ArrayList.isEmpty()"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.os.UserManager.getUserRestrictions(android.os.UserHandle)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.content.Intent.getBooleanExtra(java.lang.String, boolean)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.content.Intent.getParcelableExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.os.UserManager.get(android.accounts.ChooseTypeAndAccountActivity)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.accounts.ChooseTypeAndAccountActivity.getAllowableAccountSet(android.content.Intent)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.accounts.ChooseTypeAndAccountActivity.getAcceptableAccountChoices(android.accounts.AccountManager)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.app.Activity.requestWindowFeature(int)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.app.Activity.getActivityToken()"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.os.BaseBundle.getString(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.os.Bundle.getParcelableArrayList(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.app.ActivityManagerNative.getDefault()"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.content.Intent.getStringExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.os.Bundle.getParcelableArray(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.app.IActivityManager.getLaunchedFromUid(android.os.IBinder)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.os.BaseBundle.getBoolean(java.lang.String, boolean)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.accounts.AccountManager.get(android.accounts.ChooseTypeAndAccountActivity)"
"android.accounts.ChooseTypeAndAccountActivity.onCreate(Bundle)","android.app.Activity.getIntent()"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.util.Log.isLoggable(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.os.BaseBundle.keySet()"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","java.util.ArrayList.isEmpty()"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","java.util.Set.add(android.accounts.Account)"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.accounts.AccountManager.getAccountsForPackage(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","java.util.Set.contains(android.accounts.Account)"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.app.Activity.setResult(int)"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.app.Activity.finish()"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.accounts.ChooseTypeAndAccountActivity.setResultAndFinish(java.lang.String, java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.content.Intent.getExtras()"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.content.Intent.getStringExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onActivityResult(int, int, Intent)","android.accounts.AccountManager.get(android.accounts.ChooseTypeAndAccountActivity)"
"android.accounts.ChooseTypeAndAccountActivity.getReleventAccountTypes(Intent)","com.google.android.collect.Sets.newHashSet(java.lang.String[])"
"android.accounts.ChooseTypeAndAccountActivity.getReleventAccountTypes(Intent)","java.util.Set.add(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.getReleventAccountTypes(Intent)","android.content.Intent.getStringArrayExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.getReleventAccountTypes(Intent)","android.accounts.AccountManager.getAuthenticatorTypes()"
"android.accounts.ChooseTypeAndAccountActivity.getReleventAccountTypes(Intent)","android.accounts.AccountManager.get(android.accounts.ChooseTypeAndAccountActivity)"
"android.accounts.ChooseTypeAndAccountActivity.getReleventAccountTypes(Intent)","java.util.Set.retainAll(java.util.Set<java.lang.String>)"
"android.accounts.ChooseTypeAndAccountActivity.onCancelButtonClicked(View)","android.app.Activity.onBackPressed()"
"android.accounts.ChooseTypeAndAccountActivity.getAcceptableAccountChoices(AccountManager)","android.accounts.AccountManager.getAccountsForPackage(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.getAcceptableAccountChoices(AccountManager)","java.util.Set.contains(android.accounts.Account)"
"android.accounts.ChooseTypeAndAccountActivity.getAcceptableAccountChoices(AccountManager)","java.util.Set.contains(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.getAcceptableAccountChoices(AccountManager)","java.util.ArrayList.add(android.accounts.Account)"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.accounts.AccountManager.getAccountsForPackage(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.app.Activity.setResult(int)"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.app.Activity.finish()"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.content.Intent.putExtras(android.os.Bundle)"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.app.Activity.setResult(int, android.content.Intent)"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.app.Activity.startActivityForResult(android.content.Intent, int)"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.accounts.AccountManagerFuture.getResult()"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.accounts.AccountManager.get(android.accounts.ChooseTypeAndAccountActivity)"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.content.Intent.setFlags(int)"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.content.Intent.getFlags()"
"android.accounts.ChooseTypeAndAccountActivity.run(AccountManagerFuture)","android.os.Bundle.getParcelable(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.overrideDescriptionIfSupplied(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.getListOfDisplayableOptions(ArrayList)","java.util.ArrayList.size()"
"android.accounts.ChooseTypeAndAccountActivity.getListOfDisplayableOptions(ArrayList)","java.util.ArrayList.get(int)"
"android.accounts.ChooseTypeAndAccountActivity.getAllowableAccountSet(Intent)","android.content.Intent.getParcelableArrayListExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.getAllowableAccountSet(Intent)","java.util.ArrayList.size()"
"android.accounts.ChooseTypeAndAccountActivity.getAllowableAccountSet(Intent)","java.util.Set.add(android.accounts.Account)"
"android.accounts.ChooseTypeAndAccountActivity.onDestroy()","android.util.Log.isLoggable(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.onDestroy()","android.app.Activity.onDestroy()"
"android.accounts.ChooseTypeAndAccountActivity.onSaveInstanceState(Bundle)","android.app.Activity.onSaveInstanceState(android.os.Bundle)"
"android.accounts.ChooseTypeAndAccountActivity.onSaveInstanceState(Bundle)","java.util.ArrayList.size()"
"android.accounts.ChooseTypeAndAccountActivity.onSaveInstanceState(Bundle)","android.os.BaseBundle.putInt(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.onSaveInstanceState(Bundle)","android.os.BaseBundle.putString(java.lang.String, java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.onSaveInstanceState(Bundle)","android.os.Bundle.putParcelableArrayList(java.lang.String, java.util.ArrayList<android.accounts.Account>)"
"android.accounts.ChooseTypeAndAccountActivity.onSaveInstanceState(Bundle)","android.os.BaseBundle.putBoolean(java.lang.String, boolean)"
"android.accounts.ChooseTypeAndAccountActivity.onSaveInstanceState(Bundle)","android.os.Bundle.putParcelableArray(java.lang.String, android.os.Parcelable[])"
"android.accounts.ChooseTypeAndAccountActivity.onSaveInstanceState(Bundle)","java.util.ArrayList.get(int)"
"android.accounts.ChooseTypeAndAccountActivity.populateUIAccountList(String[])","android.util.Log.isLoggable(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(String)","android.accounts.AccountManager.addAccount(java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle, null, android.accounts.ChooseTypeAndAccountActivity, null)"
"android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(String)","android.util.Log.isLoggable(java.lang.String, int)"
"android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(String)","android.content.Intent.getBundleExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(String)","android.content.Intent.getStringArrayExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(String)","android.content.Intent.getStringExtra(java.lang.String)"
"android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(String)","android.accounts.AccountManager.get(android.accounts.ChooseTypeAndAccountActivity)"
"android.accounts.ChooseTypeAndAccountActivity.runAddAccountForAuthenticator(String)","android.app.Activity.getIntent()"
"android.util.TimingLogger.dumpToLog()","java.util.ArrayList.size()"
"android.util.TimingLogger.dumpToLog()","java.util.ArrayList.get(int)"
"android.util.TimingLogger.addSplit(String)","java.util.ArrayList.add(long)"
"android.util.TimingLogger.addSplit(String)","java.util.ArrayList.add(java.lang.String)"
"android.util.TimingLogger.addSplit(String)","android.os.SystemClock.elapsedRealtime()"
"android.util.TimingLogger.reset()","android.util.Log.isLoggable(java.lang.String, int)"
"android.util.TimingLogger.reset()","android.util.TimingLogger.addSplit(null)"
"android.util.TimingLogger.reset()","java.util.ArrayList.clear()"
"android.util.TimingLogger.reset(String, String)","android.util.TimingLogger.reset()"
"android.view.DragEvent.obtain(DragEvent)","android.view.DragEvent.obtain(int, float, float, java.lang.Object, android.content.ClipDescription, android.content.ClipData, boolean)"
"android.view.DragEvent.recycle()","android.view.DragEvent.toString()"
"android.view.DragEvent.toString()","java.lang.System.identityHashCode(android.view.DragEvent)"
"android.view.DragEvent.toString()","java.lang.Integer.toHexString(int)"
"android.view.DragEvent.obtain()","android.view.DragEvent.obtain(int, float, float, null, null, null, boolean)"
"android.view.DragEvent.createFromParcel(Parcel)","android.os.Parcel.readFloat()"
"android.view.DragEvent.createFromParcel(Parcel)","android.os.Parcelable.Creator.createFromParcel(android.os.Parcel)"
"android.view.DragEvent.createFromParcel(Parcel)","android.view.DragEvent.obtain()"
"android.view.DragEvent.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.view.DragEvent.writeToParcel(Parcel, int)","android.content.ClipData.writeToParcel(android.os.Parcel, int)"
"android.view.DragEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.view.DragEvent.writeToParcel(Parcel, int)","android.os.Parcel.writeFloat(float)"
"android.view.DragEvent.writeToParcel(Parcel, int)","android.content.ClipDescription.writeToParcel(android.os.Parcel, int)"
"android.view.DragEvent.obtain(int, float, float, Object, ClipDescription, ClipData, boolean)","android.view.DragEvent.init(int, float, float, android.content.ClipDescription, android.content.ClipData, java.lang.Object, boolean)"
"com.android.internal.view.menu.MenuPopupHelper.getView(int, View, ViewGroup)","com.android.internal.view.menu.MenuPopupHelper.MenuAdapter.getItem(int)"
"com.android.internal.view.menu.MenuPopupHelper.getView(int, View, ViewGroup)","com.android.internal.view.menu.MenuView.ItemView.initialize(com.android.internal.view.menu.MenuItemImpl, int)"
"com.android.internal.view.menu.MenuPopupHelper.isShowing()","android.widget.ListPopupWindow.isShowing()"
"com.android.internal.view.menu.MenuPopupHelper.getItem(int)","com.android.internal.view.menu.MenuBuilder.getVisibleItems()"
"com.android.internal.view.menu.MenuPopupHelper.getItem(int)","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.MenuPopupHelper.getItem(int)","com.android.internal.view.menu.MenuBuilder.getNonActionItems()"
"com.android.internal.view.menu.MenuPopupHelper.onKey(View, int, KeyEvent)","android.view.KeyEvent.getAction()"
"com.android.internal.view.menu.MenuPopupHelper.onGlobalLayout()","android.widget.ListPopupWindow.show()"
"com.android.internal.view.menu.MenuPopupHelper.onGlobalLayout()","android.view.View.isShown()"
"com.android.internal.view.menu.MenuPopupHelper.getCount()","java.util.ArrayList.size()"
"com.android.internal.view.menu.MenuPopupHelper.getCount()","com.android.internal.view.menu.MenuBuilder.getVisibleItems()"
"com.android.internal.view.menu.MenuPopupHelper.getCount()","com.android.internal.view.menu.MenuBuilder.getNonActionItems()"
"com.android.internal.view.menu.MenuPopupHelper.measureContentWidth()","android.widget.Adapter.getCount()"
"com.android.internal.view.menu.MenuPopupHelper.measureContentWidth()","android.widget.Adapter.getItemViewType(int)"
"com.android.internal.view.menu.MenuPopupHelper.measureContentWidth()","android.view.View.getMeasuredWidth()"
"com.android.internal.view.menu.MenuPopupHelper.measureContentWidth()","android.view.View.measure(int, int)"
"com.android.internal.view.menu.MenuPopupHelper.measureContentWidth()","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"com.android.internal.view.menu.MenuPopupHelper.measureContentWidth()","android.widget.Adapter.getView(int, android.view.View, android.view.ViewGroup)"
"com.android.internal.view.menu.MenuPopupHelper.notifyDataSetChanged()","android.widget.BaseAdapter.notifyDataSetChanged()"
"com.android.internal.view.menu.MenuPopupHelper.notifyDataSetChanged()","com.android.internal.view.menu.MenuPopupHelper.MenuAdapter.findExpandedIndex()"
"com.android.internal.view.menu.MenuPopupHelper.dismiss()","android.widget.ListPopupWindow.dismiss()"
"com.android.internal.view.menu.MenuPopupHelper.onItemClick(AdapterView, View, int, long)","com.android.internal.view.menu.MenuBuilder.performItemAction(com.android.internal.view.menu.MenuItemImpl, int)"
"com.android.internal.view.menu.MenuPopupHelper.onItemClick(AdapterView, View, int, long)","com.android.internal.view.menu.MenuPopupHelper.MenuAdapter.getItem(int)"
"com.android.internal.view.menu.MenuPopupHelper.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.MenuBuilder.size()"
"com.android.internal.view.menu.MenuPopupHelper.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.MenuPresenter.Callback.onOpenSubMenu(com.android.internal.view.menu.SubMenuBuilder)"
"com.android.internal.view.menu.MenuPopupHelper.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.MenuBuilder.hasVisibleItems()"
"com.android.internal.view.menu.MenuPopupHelper.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.MenuBuilder.getItem(int)"
"com.android.internal.view.menu.MenuPopupHelper.onSubMenuSelected(SubMenuBuilder)","android.view.MenuItem.getIcon()"
"com.android.internal.view.menu.MenuPopupHelper.onSubMenuSelected(SubMenuBuilder)","android.view.MenuItem.isVisible()"
"com.android.internal.view.menu.MenuPopupHelper.onCloseMenu(MenuBuilder, boolean)","com.android.internal.view.menu.MenuPresenter.Callback.onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.widget.ListPopupWindow.setOnItemClickListener(com.android.internal.view.menu.MenuPopupHelper)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.view.ViewTreeObserver.addOnGlobalLayoutListener(com.android.internal.view.menu.MenuPopupHelper)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.view.View.addOnAttachStateChangeListener(com.android.internal.view.menu.MenuPopupHelper)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.widget.ListPopupWindow.setInputMethodMode(int)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.widget.ListPopupWindow.setDropDownGravity(int)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.widget.ListPopupWindow.setOnDismissListener(com.android.internal.view.menu.MenuPopupHelper)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.widget.ListPopupWindow.setAdapter(com.android.internal.view.menu.MenuPopupHelper.MenuAdapter)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.view.View.getViewTreeObserver()"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.widget.ListPopupWindow.show()"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.widget.ListPopupWindow.setAnchorView(android.view.View)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.widget.ListPopupWindow.setModal(boolean)"
"com.android.internal.view.menu.MenuPopupHelper.tryShow()","android.widget.ListPopupWindow.setContentWidth(int)"
"com.android.internal.view.menu.MenuPopupHelper.updateMenuView(boolean)","com.android.internal.view.menu.MenuPopupHelper.MenuAdapter.notifyDataSetChanged()"
"com.android.internal.view.menu.MenuPopupHelper.onDismiss()","android.view.ViewTreeObserver.removeGlobalOnLayoutListener(com.android.internal.view.menu.MenuPopupHelper)"
"com.android.internal.view.menu.MenuPopupHelper.onDismiss()","com.android.internal.view.menu.MenuBuilder.close()"
"com.android.internal.view.menu.MenuPopupHelper.onDismiss()","android.view.View.getViewTreeObserver()"
"com.android.internal.view.menu.MenuPopupHelper.onDismiss()","android.view.ViewTreeObserver.isAlive()"
"com.android.internal.view.menu.MenuPopupHelper.onDismiss()","android.view.View.removeOnAttachStateChangeListener(com.android.internal.view.menu.MenuPopupHelper)"
"com.android.internal.view.menu.MenuPopupHelper.findExpandedIndex()","java.util.ArrayList.size()"
"com.android.internal.view.menu.MenuPopupHelper.findExpandedIndex()","com.android.internal.view.menu.MenuBuilder.getExpandedItem()"
"com.android.internal.view.menu.MenuPopupHelper.findExpandedIndex()","java.util.ArrayList.get(int)"
"com.android.internal.view.menu.MenuPopupHelper.findExpandedIndex()","com.android.internal.view.menu.MenuBuilder.getNonActionItems()"
"com.android.internal.view.menu.MenuPopupHelper.onViewDetachedFromWindow(View)","android.view.ViewTreeObserver.removeGlobalOnLayoutListener(com.android.internal.view.menu.MenuPopupHelper)"
"com.android.internal.view.menu.MenuPopupHelper.onViewDetachedFromWindow(View)","android.view.View.getViewTreeObserver()"
"com.android.internal.view.menu.MenuPopupHelper.onViewDetachedFromWindow(View)","android.view.ViewTreeObserver.isAlive()"
"com.android.internal.view.menu.MenuPopupHelper.onViewDetachedFromWindow(View)","android.view.View.removeOnAttachStateChangeListener(com.android.internal.view.menu.MenuPopupHelper)"
"android.text.PackedObjectVector.insertAt(int, E[])","android.text.PackedObjectVector.setValue(int, int, E)"
"android.text.PackedObjectVector.insertAt(int, E[])","android.text.PackedObjectVector.growBuffer()"
"android.text.PackedObjectVector.insertAt(int, E[])","android.text.PackedObjectVector.moveRowGapTo(int)"
"android.text.PackedObjectVector.insertAt(int, E[])","android.text.PackedObjectVector.setValue(int, int, null)"
"android.text.PackedObjectVector.growBuffer()","android.text.PackedObjectVector.size()"
"android.text.PackedObjectVector.growBuffer()","com.android.internal.util.GrowingArrayUtils.growSize(int)"
"android.text.PackedObjectVector.growBuffer()","java.lang.System.arraycopy(java.lang.Object[], int, java.lang.Object[], int, int)"
"android.text.PackedObjectVector.growBuffer()","com.android.internal.util.ArrayUtils.newUnpaddedObjectArray(int)"
"android.text.PackedObjectVector.deleteAt(int, int)","android.text.PackedObjectVector.size()"
"android.text.PackedObjectVector.deleteAt(int, int)","android.text.PackedObjectVector.moveRowGapTo(int)"
"android.text.PackedObjectVector.dump()","java.io.PrintStream.print(java.lang.String)"
"android.net.LinkQualityInfo.createFromParcel(Parcel)","android.net.MobileLinkQualityInfo.createFromParcelBody(android.os.Parcel)"
"android.net.LinkQualityInfo.createFromParcel(Parcel)","android.net.WifiLinkQualityInfo.createFromParcelBody(android.os.Parcel)"
"android.net.LinkQualityInfo.createFromParcel(Parcel)","android.net.LinkQualityInfo.initializeFromParcel(android.os.Parcel)"
"android.net.LinkQualityInfo.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.net.LinkQualityInfo.initializeFromParcel(Parcel)","android.os.Parcel.readLong()"
"android.net.LinkQualityInfo.initializeFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.net.LinkQualityInfo.writeToParcel(Parcel, int, int)","android.os.Parcel.writeLong(long)"
"android.net.LinkQualityInfo.writeToParcel(Parcel, int, int)","android.os.Parcel.writeInt(int)"
"android.net.LinkQualityInfo.writeToParcel(Parcel, int)","android.net.LinkQualityInfo.writeToParcel(android.os.Parcel, int, int)"
"android.net.BaseNetworkStateTracker.isDefaultRouteSet()","java.util.concurrent.atomic.AtomicBoolean.get()"
"android.net.BaseNetworkStateTracker.startMonitoring(Context, Handler)","android.net.BaseNetworkStateTracker.startMonitoringInternal()"
"android.net.BaseNetworkStateTracker.startMonitoring(Context, Handler)","com.android.internal.util.Preconditions.checkNotNull(android.os.Handler)"
"android.net.BaseNetworkStateTracker.startMonitoring(Context, Handler)","com.android.internal.util.Preconditions.checkNotNull(android.content.Context)"
"android.net.BaseNetworkStateTracker.dispatchConfigurationChanged()","android.os.Message.sendToTarget()"
"android.net.BaseNetworkStateTracker.dispatchConfigurationChanged()","android.os.Handler.obtainMessage(int, android.net.NetworkInfo)"
"android.net.BaseNetworkStateTracker.dispatchConfigurationChanged()","android.net.BaseNetworkStateTracker.getNetworkInfo()"
"android.net.BaseNetworkStateTracker.setTeardownRequested(boolean)","java.util.concurrent.atomic.AtomicBoolean.set(boolean)"
"android.net.BaseNetworkStateTracker.isTeardownRequested()","java.util.concurrent.atomic.AtomicBoolean.get()"
"android.net.BaseNetworkStateTracker.defaultRouteSet(boolean)","java.util.concurrent.atomic.AtomicBoolean.set(boolean)"
"android.net.BaseNetworkStateTracker.privateDnsRouteSet(boolean)","java.util.concurrent.atomic.AtomicBoolean.set(boolean)"
"android.net.BaseNetworkStateTracker.isAvailable()","android.net.NetworkInfo.isAvailable()"
"android.net.BaseNetworkStateTracker.dispatchStateChanged()","android.os.Message.sendToTarget()"
"android.net.BaseNetworkStateTracker.dispatchStateChanged()","android.os.Handler.obtainMessage(int, android.net.NetworkInfo)"
"android.net.BaseNetworkStateTracker.dispatchStateChanged()","android.net.BaseNetworkStateTracker.getNetworkInfo()"
"android.net.BaseNetworkStateTracker.getNetworkInterfaceName()","android.net.LinkProperties.getInterfaceName()"
"android.net.BaseNetworkStateTracker.isPrivateDnsRouteSet()","java.util.concurrent.atomic.AtomicBoolean.get()"
"android.hardware.camera2.params.StreamConfigurationDuration.hashCode()","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int, int, int, int, int)"
"android.database.BulkCursorNative.deactivate()","android.database.DatabaseUtils.readExceptionFromParcel(android.os.Parcel)"
"android.database.BulkCursorNative.deactivate()","android.os.Parcel.recycle()"
"android.database.BulkCursorNative.deactivate()","android.os.Parcel.obtain()"
"android.database.BulkCursorNative.deactivate()","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.database.BulkCursorNative.deactivate()","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.database.BulkCursorNative.close()","android.database.DatabaseUtils.readExceptionFromParcel(android.os.Parcel)"
"android.database.BulkCursorNative.close()","android.os.Parcel.recycle()"
"android.database.BulkCursorNative.close()","android.os.Parcel.obtain()"
"android.database.BulkCursorNative.close()","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.database.BulkCursorNative.close()","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.database.IBulkCursor.respond(android.os.Bundle)"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.database.IBulkCursor.getExtras()"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.database.IBulkCursor.getWindow(int)"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.database.CursorWindow.writeToParcel(android.os.Parcel, int)"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.database.DatabaseUtils.writeExceptionToParcel(android.os.Parcel, java.lang.Exception)"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.writeNoException()"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.enforceInterface(java.lang.String)"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.database.IBulkCursor.deactivate()"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.os.Binder.onTransact(int, android.os.Parcel, android.os.Parcel, int)"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.writeInt(int)"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.database.IBulkCursor.onMove(int)"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.readInt()"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.database.IBulkCursor.close()"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.readBundle()"
"android.database.BulkCursorNative.onTransact(int, Parcel, Parcel, int)","android.os.Parcel.writeBundle(android.os.Bundle)"
"android.database.BulkCursorNative.onMove(int)","android.database.DatabaseUtils.readExceptionFromParcel(android.os.Parcel)"
"android.database.BulkCursorNative.onMove(int)","android.os.Parcel.recycle()"
"android.database.BulkCursorNative.onMove(int)","android.os.Parcel.obtain()"
"android.database.BulkCursorNative.onMove(int)","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.database.BulkCursorNative.onMove(int)","android.os.Parcel.writeInt(int)"
"android.database.BulkCursorNative.onMove(int)","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.database.BulkCursorNative.requery(IContentObserver)","android.database.DatabaseUtils.readExceptionFromParcel(android.os.Parcel)"
"android.database.BulkCursorNative.requery(IContentObserver)","android.os.Parcel.recycle()"
"android.database.BulkCursorNative.requery(IContentObserver)","android.os.Parcel.obtain()"
"android.database.BulkCursorNative.requery(IContentObserver)","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.database.BulkCursorNative.requery(IContentObserver)","android.os.Parcel.readInt()"
"android.database.BulkCursorNative.requery(IContentObserver)","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.database.BulkCursorNative.requery(IContentObserver)","android.os.Parcel.readBundle()"
"android.database.BulkCursorNative.asInterface(IBinder)","android.os.IBinder.queryLocalInterface(java.lang.String)"
"android.database.BulkCursorNative.getWindow(int)","android.database.DatabaseUtils.readExceptionFromParcel(android.os.Parcel)"
"android.database.BulkCursorNative.getWindow(int)","android.os.Parcel.recycle()"
"android.database.BulkCursorNative.getWindow(int)","android.os.Parcel.obtain()"
"android.database.BulkCursorNative.getWindow(int)","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.database.BulkCursorNative.getWindow(int)","android.os.Parcel.writeInt(int)"
"android.database.BulkCursorNative.getWindow(int)","android.os.Parcel.readInt()"
"android.database.BulkCursorNative.getWindow(int)","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.database.BulkCursorNative.getWindow(int)","android.database.CursorWindow.newFromParcel(android.os.Parcel)"
"android.database.BulkCursorNative.getExtras()","android.database.DatabaseUtils.readExceptionFromParcel(android.os.Parcel)"
"android.database.BulkCursorNative.getExtras()","android.os.Parcel.recycle()"
"android.database.BulkCursorNative.getExtras()","android.os.Parcel.obtain()"
"android.database.BulkCursorNative.getExtras()","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.database.BulkCursorNative.getExtras()","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.database.BulkCursorNative.getExtras()","android.os.Parcel.readBundle()"
"android.database.BulkCursorNative.respond(Bundle)","android.database.DatabaseUtils.readExceptionFromParcel(android.os.Parcel)"
"android.database.BulkCursorNative.respond(Bundle)","android.os.Parcel.recycle()"
"android.database.BulkCursorNative.respond(Bundle)","android.os.Parcel.obtain()"
"android.database.BulkCursorNative.respond(Bundle)","android.os.IBinder.transact(int, android.os.Parcel, android.os.Parcel, int)"
"android.database.BulkCursorNative.respond(Bundle)","android.os.Parcel.writeInterfaceToken(java.lang.String)"
"android.database.BulkCursorNative.respond(Bundle)","android.os.Parcel.readBundle()"
"android.database.BulkCursorNative.respond(Bundle)","android.os.Parcel.writeBundle(android.os.Bundle)"
"android.provider.SearchIndexablesProvider.getType(Uri)","android.content.UriMatcher.match(android.net.Uri)"
"android.provider.SearchIndexablesProvider.query(Uri, String[], String, String[], String)","android.provider.SearchIndexablesProvider.queryRawData(null)"
"android.provider.SearchIndexablesProvider.query(Uri, String[], String, String[], String)","android.content.UriMatcher.match(android.net.Uri)"
"android.provider.SearchIndexablesProvider.query(Uri, String[], String, String[], String)","android.provider.SearchIndexablesProvider.queryNonIndexableKeys(null)"
"android.provider.SearchIndexablesProvider.query(Uri, String[], String, String[], String)","android.provider.SearchIndexablesProvider.queryXmlResources(null)"
"android.provider.SearchIndexablesProvider.attachInfo(Context, ProviderInfo)","android.content.ContentProvider.attachInfo(android.content.Context, android.content.pm.ProviderInfo)"
"android.provider.SearchIndexablesProvider.attachInfo(Context, ProviderInfo)","android.content.UriMatcher.addURI(java.lang.String, java.lang.String, int)"
"com.android.internal.content.ReferrerIntent.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"com.android.internal.content.ReferrerIntent.writeToParcel(Parcel, int)","android.content.Intent.writeToParcel(android.os.Parcel, int)"
"android.app.LauncherActivity.itemForPosition(int)","android.app.LauncherActivity.ActivityAdapter.itemForPosition(int)"
"android.app.LauncherActivity.createIconThumbnail(Drawable)","android.view.ContextThemeWrapper.getResources()"
"android.app.LauncherActivity.publishResults(CharSequence, FilterResults)","android.widget.BaseAdapter.notifyDataSetInvalidated()"
"android.app.LauncherActivity.publishResults(CharSequence, FilterResults)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.app.LauncherActivity.setTitle(int)","android.app.LauncherActivity.updateAlertTitle()"
"android.app.LauncherActivity.setTitle(int)","android.app.Activity.setTitle(int)"
"android.app.LauncherActivity.onSortResultList(List)","java.util.Collections.sort(java.util.List<android.content.pm.ResolveInfo>, android.content.pm.ResolveInfo.DisplayNameComparator)"
"android.app.LauncherActivity.setTitle(CharSequence)","android.app.LauncherActivity.updateAlertTitle()"
"android.app.LauncherActivity.setTitle(CharSequence)","android.app.Activity.setTitle(java.lang.CharSequence)"
"android.app.LauncherActivity.onListItemClick(ListView, View, int, long)","android.app.LauncherActivity.intentForPosition(int)"
"android.app.LauncherActivity.onListItemClick(ListView, View, int, long)","android.app.Activity.startActivity(android.content.Intent)"
"android.app.LauncherActivity.makeListItems()","java.util.ArrayList.add(android.app.LauncherActivity.ListItem)"
"android.app.LauncherActivity.makeListItems()","android.app.LauncherActivity.onQueryPackageManager(android.content.Intent)"
"android.app.LauncherActivity.makeListItems()","java.util.List.size()"
"android.app.LauncherActivity.makeListItems()","android.app.LauncherActivity.onSortResultList(java.util.List<android.content.pm.ResolveInfo>)"
"android.app.LauncherActivity.makeListItems()","java.util.List.get(int)"
"android.app.LauncherActivity.getCount()","java.util.List.size()"
"android.app.LauncherActivity.performFiltering(CharSequence)","java.lang.String.split(java.lang.String)"
"android.app.LauncherActivity.performFiltering(CharSequence)","java.util.ArrayList.size()"
"android.app.LauncherActivity.performFiltering(CharSequence)","java.util.ArrayList.add(android.app.LauncherActivity.ListItem)"
"android.app.LauncherActivity.performFiltering(CharSequence)","java.lang.String.startsWith(java.lang.String)"
"android.app.LauncherActivity.performFiltering(CharSequence)","java.lang.CharSequence.toString()"
"android.app.LauncherActivity.performFiltering(CharSequence)","java.lang.CharSequence.length()"
"android.app.LauncherActivity.performFiltering(CharSequence)","java.lang.String.toLowerCase()"
"android.app.LauncherActivity.performFiltering(CharSequence)","java.util.ArrayList.get(int)"
"android.app.LauncherActivity.intentForPosition(int)","android.app.LauncherActivity.ActivityAdapter.intentForPosition(int)"
"android.app.LauncherActivity.onQueryPackageManager(Intent)","android.content.pm.PackageManager.queryIntentActivities(android.content.Intent, int)"
"android.app.LauncherActivity.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"android.app.LauncherActivity.onCreate(Bundle)","android.app.LauncherActivity.updateAlertTitle()"
"android.app.LauncherActivity.onCreate(Bundle)","android.content.pm.PackageManager.hasSystemFeature(java.lang.String)"
"android.app.LauncherActivity.onCreate(Bundle)","android.content.Intent.setComponent(null)"
"android.app.LauncherActivity.onCreate(Bundle)","android.app.Activity.setProgressBarIndeterminateVisibility(boolean)"
"android.app.LauncherActivity.onCreate(Bundle)","android.content.ContextWrapper.getPackageManager()"
"android.app.LauncherActivity.onCreate(Bundle)","android.app.LauncherActivity.updateButtonText()"
"android.app.LauncherActivity.onCreate(Bundle)","android.app.LauncherActivity.getTargetIntent()"
"android.app.LauncherActivity.onCreate(Bundle)","android.app.Activity.requestWindowFeature(int)"
"android.app.LauncherActivity.onCreate(Bundle)","android.app.ListActivity.setListAdapter(android.widget.ListAdapter)"
"android.app.LauncherActivity.onCreate(Bundle)","android.app.LauncherActivity.onSetContentView()"
"android.app.LauncherActivity.getView(int, View, ViewGroup)","android.app.LauncherActivity.ActivityAdapter.bindView(android.view.View, android.app.LauncherActivity.ListItem)"
"android.app.LauncherActivity.getView(int, View, ViewGroup)","java.util.List.get(int)"
"com.android.internal.util.ProcFileReader.parseAndConsumeLong(int)","com.android.internal.util.ProcFileReader.invalidLong(int)"
"com.android.internal.util.ProcFileReader.parseAndConsumeLong(int)","com.android.internal.util.ProcFileReader.consumeBuf(int)"
"com.android.internal.util.ProcFileReader.nextTokenIndex()","com.android.internal.util.ProcFileReader.fillBuf()"
"com.android.internal.util.ProcFileReader.finishLine()","com.android.internal.util.ProcFileReader.fillBuf()"
"com.android.internal.util.ProcFileReader.finishLine()","com.android.internal.util.ProcFileReader.consumeBuf(int)"
"com.android.internal.util.ProcFileReader.fillBuf()","java.io.InputStream.read(byte[], int, int)"
"com.android.internal.util.ProcFileReader.close()","java.io.InputStream.close()"
"com.android.internal.util.ProcFileReader.consumeBuf(int)","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"com.android.internal.util.ProcFileReader.consumeBuf(int)","com.android.internal.util.ProcFileReader.fillBuf()"
"com.android.internal.util.ProcFileReader.nextLong()","com.android.internal.util.ProcFileReader.parseAndConsumeLong(int)"
"com.android.internal.util.ProcFileReader.nextLong()","com.android.internal.util.ProcFileReader.nextTokenIndex()"
"com.android.internal.util.ProcFileReader.nextOptionalLong(long)","com.android.internal.util.ProcFileReader.parseAndConsumeLong(int)"
"com.android.internal.util.ProcFileReader.nextOptionalLong(long)","com.android.internal.util.ProcFileReader.nextTokenIndex()"
"com.android.internal.util.ProcFileReader.nextString()","com.android.internal.util.ProcFileReader.parseAndConsumeString(int)"
"com.android.internal.util.ProcFileReader.nextString()","com.android.internal.util.ProcFileReader.nextTokenIndex()"
"com.android.internal.util.ProcFileReader.parseAndConsumeString(int)","com.android.internal.util.ProcFileReader.consumeBuf(int)"
"com.android.internal.util.ProcFileReader.nextInt()","com.android.internal.util.ProcFileReader.nextLong()"
"android.widget.GridView.adjustForTopFadingEdge(View, int, int)","android.view.View.getBottom()"
"android.widget.GridView.adjustForTopFadingEdge(View, int, int)","android.view.View.getTop()"
"android.widget.GridView.adjustForTopFadingEdge(View, int, int)","java.lang.Math.min(int, int)"
"android.widget.GridView.fillSpecific(int, int)","java.lang.Math.max(int, int)"
"android.widget.GridView.adjustForBottomFadingEdge(View, int, int)","android.view.View.getBottom()"
"android.widget.GridView.adjustForBottomFadingEdge(View, int, int)","android.view.View.getTop()"
"android.widget.GridView.adjustForBottomFadingEdge(View, int, int)","java.lang.Math.min(int, int)"
"android.widget.GridView.makeRow(int, int, boolean)","java.lang.Math.max(int, int)"
"android.widget.GridView.makeRow(int, int, boolean)","java.lang.Math.min(int, int)"
"android.widget.GridView.arrowScroll(int)","java.lang.Math.max(int, int)"
"android.widget.GridView.arrowScroll(int)","java.lang.Math.min(int, int)"
"android.widget.GridView.fillSelection(int, int)","android.view.View.getBottom()"
"android.widget.GridView.fillSelection(int, int)","java.lang.Math.max(int, int)"
"android.widget.GridView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.GridView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionInfo)"
"android.widget.GridView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.GridView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.CollectionInfo.obtain(int, int, boolean, int)"
"android.widget.GridView.fillDown(int, int)","android.view.View.getBottom()"
"android.widget.GridView.fillFromBottom(int, int)","java.lang.Math.max(int, int)"
"android.widget.GridView.fillFromBottom(int, int)","java.lang.Math.min(int, int)"
"android.widget.GridView.correctTooHigh(int, int, int)","android.view.View.getBottom()"
"android.widget.GridView.correctTooHigh(int, int, int)","android.view.View.getTop()"
"android.widget.GridView.computeVerticalScrollExtent()","android.view.View.getBottom()"
"android.widget.GridView.computeVerticalScrollExtent()","android.view.View.getHeight()"
"android.widget.GridView.computeVerticalScrollExtent()","android.view.View.getTop()"
"android.widget.GridView.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.GridView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.GridView.computeVerticalScrollOffset()","android.view.View.getHeight()"
"android.widget.GridView.computeVerticalScrollOffset()","android.view.View.getTop()"
"android.widget.GridView.computeVerticalScrollOffset()","java.lang.Math.max(int, int)"
"android.widget.GridView.adjustViewsUpOrDown()","android.view.View.getBottom()"
"android.widget.GridView.adjustViewsUpOrDown()","android.view.View.getTop()"
"android.widget.GridView.setAdapter(ListAdapter)","android.widget.Adapter.unregisterDataSetObserver(android.widget.AbsListView.AdapterDataSetObserver)"
"android.widget.GridView.setAdapter(ListAdapter)","android.widget.Adapter.getCount()"
"android.widget.GridView.setAdapter(ListAdapter)","android.widget.AbsListView.RecycleBin.clear()"
"android.widget.GridView.setAdapter(ListAdapter)","android.widget.Adapter.registerDataSetObserver(android.widget.AbsListView.AdapterDataSetObserver)"
"android.widget.GridView.setAdapter(ListAdapter)","android.widget.AbsListView.RecycleBin.setViewTypeCount(int)"
"android.widget.GridView.setAdapter(ListAdapter)","android.widget.Adapter.getViewTypeCount()"
"android.widget.GridView.setSelection(int)","android.widget.AbsListView.AbsPositionScroller.stop()"
"android.widget.GridView.makeAndAddView(int, int, boolean, int, boolean, int)","android.widget.AbsListView.RecycleBin.getActiveView(int)"
"android.widget.GridView.fillUp(int, int)","android.view.View.getTop()"
"android.widget.GridView.fillUp(int, int)","java.lang.Math.max(int, int)"
"android.widget.GridView.layoutChildren()","android.widget.AbsListView.RecycleBin.fillActiveViews(int, int)"
"android.widget.GridView.layoutChildren()","android.view.accessibility.AccessibilityNodeProvider.performAction(int, int, null)"
"android.widget.GridView.layoutChildren()","android.view.View.hasTransientState()"
"android.widget.GridView.layoutChildren()","android.view.ViewRootImpl.getAccessibilityFocusedVirtualView()"
"android.widget.GridView.layoutChildren()","android.view.accessibility.AccessibilityNodeInfo.getVirtualDescendantId(long)"
"android.widget.GridView.layoutChildren()","android.view.View.getAccessibilityNodeProvider()"
"android.widget.GridView.layoutChildren()","android.view.ViewRootImpl.getAccessibilityFocusedHost()"
"android.widget.GridView.layoutChildren()","android.view.View.requestAccessibilityFocus()"
"android.widget.GridView.layoutChildren()","android.view.View.getTop()"
"android.widget.GridView.layoutChildren()","android.view.View.isAttachedToWindow()"
"android.widget.GridView.layoutChildren()","android.widget.AbsListView.RecycleBin.removeSkippedScrap()"
"android.widget.GridView.layoutChildren()","android.view.accessibility.AccessibilityNodeInfo.getSourceNodeId()"
"android.widget.GridView.layoutChildren()","android.widget.AbsListView.RecycleBin.scrapActiveViews()"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.Gravity.getAbsoluteGravity(int, int)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.widget.Adapter.getItemViewType(int)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.getMeasuredHeight()"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.measure(int, int)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.isPressed()"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.isSelected()"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.layout(int, int, int, int)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.util.SparseBooleanArray.get(int)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.setDrawingCacheEnabled(boolean)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.setSelected(boolean)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.getLeft()"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.offsetLeftAndRight(int)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.os.Trace.traceBegin(long, java.lang.String)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.getLayoutParams()"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.getMeasuredWidth()"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.setActivated(boolean)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.setPressed(boolean)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.getTop()"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.os.Trace.traceEnd(long)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.isLayoutRequested()"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.widget.Checkable.setChecked(boolean)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.offsetTopAndBottom(int)"
"android.widget.GridView.setupChild(View, int, int, boolean, int, boolean, boolean, int)","android.view.View.jumpDrawablesToCurrentState()"
"android.widget.GridView.setSelectionInt(int)","android.widget.AbsListView.AbsPositionScroller.stop()"
"android.widget.GridView.commonKey(int, int, KeyEvent)","android.view.KeyEvent.getRepeatCount()"
"android.widget.GridView.commonKey(int, int, KeyEvent)","android.view.KeyEvent.hasModifiers(int)"
"android.widget.GridView.commonKey(int, int, KeyEvent)","android.view.KeyEvent.hasNoModifiers()"
"android.widget.GridView.commonKey(int, int, KeyEvent)","android.widget.PopupWindow.isShowing()"
"android.widget.GridView.commonKey(int, int, KeyEvent)","android.view.KeyEvent.getAction()"
"android.widget.GridView.onInitializeAccessibilityNodeInfoForItem(View, int, AccessibilityNodeInfo)","android.view.View.getLayoutParams()"
"android.widget.GridView.onInitializeAccessibilityNodeInfoForItem(View, int, AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo.obtain(int, int, int, int, boolean, boolean)"
"android.widget.GridView.onInitializeAccessibilityNodeInfoForItem(View, int, AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo)"
"android.widget.GridView.computeVerticalScrollRange()","java.lang.Math.abs(int)"
"android.widget.GridView.computeVerticalScrollRange()","java.lang.Math.max(int, int)"
"android.widget.GridView.isCandidateSelection(int, int)","java.lang.Math.max(int, int)"
"android.widget.GridView.sequenceScroll(int)","java.lang.Math.max(int, int)"
"android.widget.GridView.sequenceScroll(int)","java.lang.Math.min(int, int)"
"android.widget.GridView.fillFromTop(int)","java.lang.Math.min(int, int)"
"android.widget.GridView.moveSelection(int, int, int)","android.view.View.getBottom()"
"android.widget.GridView.moveSelection(int, int, int)","android.view.View.getTop()"
"android.widget.GridView.moveSelection(int, int, int)","java.lang.Math.max(int, int)"
"android.widget.GridView.correctTooLow(int, int, int)","android.view.View.getBottom()"
"android.widget.GridView.correctTooLow(int, int, int)","android.view.View.getTop()"
"android.widget.GridView.correctTooLow(int, int, int)","java.lang.Math.min(int, int)"
"android.widget.GridView.fillFromSelection(int, int, int)","java.lang.Math.max(int, int)"
"android.widget.GridView.onMeasure(int, int)","android.widget.Adapter.getCount()"
"android.widget.GridView.onMeasure(int, int)","android.widget.Adapter.getItemViewType(int)"
"android.widget.GridView.onMeasure(int, int)","android.view.View.getLayoutParams()"
"android.widget.GridView.onMeasure(int, int)","android.view.View.setLayoutParams(android.widget.AbsListView.LayoutParams)"
"android.widget.GridView.onMeasure(int, int)","android.widget.AbsListView.RecycleBin.addScrapView(android.view.View, int)"
"android.widget.GridView.onMeasure(int, int)","android.view.View.getMeasuredHeight()"
"android.widget.GridView.onMeasure(int, int)","android.view.View.measure(int, int)"
"android.widget.GridView.onMeasure(int, int)","android.widget.AbsListView.RecycleBin.shouldRecycleViewType(int)"
"android.widget.GridView.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.GridView.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.hardware.usb.UsbConfiguration.createFromParcel(Parcel)","android.os.Parcel.readParcelableArray(java.lang.ClassLoader)"
"android.hardware.usb.UsbConfiguration.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.hardware.usb.UsbConfiguration.createFromParcel(Parcel)","java.lang.Class.getClassLoader()"
"android.hardware.usb.UsbConfiguration.createFromParcel(Parcel)","android.hardware.usb.UsbConfiguration.setInterfaces(android.os.Parcelable[])"
"android.hardware.usb.UsbConfiguration.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.usb.UsbConfiguration.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.hardware.usb.UsbConfiguration.toString()","java.lang.StringBuilder.toString()"
"android.hardware.usb.UsbConfiguration.toString()","java.lang.Object.toString()"
"android.hardware.usb.UsbConfiguration.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.hardware.usb.UsbConfiguration.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.usb.UsbConfiguration.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelableArray(android.os.Parcelable[], int)"
"android.provider.SyncStateContract.newSetOperation(Uri, Account, byte[])","android.content.ContentValues.put(java.lang.String, byte[])"
"android.provider.SyncStateContract.newSetOperation(Uri, Account, byte[])","android.content.ContentProviderOperation.Builder.withValues(android.content.ContentValues)"
"android.provider.SyncStateContract.newSetOperation(Uri, Account, byte[])","android.content.ContentProviderOperation.newInsert(android.net.Uri)"
"android.provider.SyncStateContract.newSetOperation(Uri, Account, byte[])","android.content.ContentProviderOperation.Builder.build()"
"android.provider.SyncStateContract.newSetOperation(Uri, Account, byte[])","android.content.ContentProviderOperation.Builder.withValue(java.lang.String, java.lang.String)"
"android.provider.SyncStateContract.insert(ContentProviderClient, Uri, Account, byte[])","android.content.ContentValues.put(java.lang.String, byte[])"
"android.provider.SyncStateContract.insert(ContentProviderClient, Uri, Account, byte[])","android.content.ContentProviderClient.insert(android.net.Uri, android.content.ContentValues)"
"android.provider.SyncStateContract.insert(ContentProviderClient, Uri, Account, byte[])","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.provider.SyncStateContract.getWithUri(ContentProviderClient, Uri, Account)","android.content.ContentProviderClient.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], null)"
"android.provider.SyncStateContract.getWithUri(ContentProviderClient, Uri, Account)","android.database.Cursor.getBlob(int)"
"android.provider.SyncStateContract.getWithUri(ContentProviderClient, Uri, Account)","android.content.ContentUris.withAppendedId(android.net.Uri, long)"
"android.provider.SyncStateContract.getWithUri(ContentProviderClient, Uri, Account)","android.database.Cursor.getColumnIndexOrThrow(java.lang.String)"
"android.provider.SyncStateContract.getWithUri(ContentProviderClient, Uri, Account)","android.database.Cursor.getLong(int)"
"android.provider.SyncStateContract.getWithUri(ContentProviderClient, Uri, Account)","android.util.Pair.create(android.net.Uri, byte[])"
"android.provider.SyncStateContract.getWithUri(ContentProviderClient, Uri, Account)","android.database.Cursor.moveToNext()"
"android.provider.SyncStateContract.getWithUri(ContentProviderClient, Uri, Account)","android.database.Cursor.close()"
"android.provider.SyncStateContract.newUpdateOperation(Uri, byte[])","android.content.ContentValues.put(java.lang.String, byte[])"
"android.provider.SyncStateContract.newUpdateOperation(Uri, byte[])","android.content.ContentProviderOperation.newUpdate(android.net.Uri)"
"android.provider.SyncStateContract.newUpdateOperation(Uri, byte[])","android.content.ContentProviderOperation.Builder.withValues(android.content.ContentValues)"
"android.provider.SyncStateContract.newUpdateOperation(Uri, byte[])","android.content.ContentProviderOperation.Builder.build()"
"android.provider.SyncStateContract.get(ContentProviderClient, Uri, Account)","android.content.ContentProviderClient.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], null)"
"android.provider.SyncStateContract.get(ContentProviderClient, Uri, Account)","android.database.Cursor.getBlob(int)"
"android.provider.SyncStateContract.get(ContentProviderClient, Uri, Account)","android.database.Cursor.getColumnIndexOrThrow(java.lang.String)"
"android.provider.SyncStateContract.get(ContentProviderClient, Uri, Account)","android.database.Cursor.moveToNext()"
"android.provider.SyncStateContract.get(ContentProviderClient, Uri, Account)","android.database.Cursor.close()"
"android.provider.SyncStateContract.update(ContentProviderClient, Uri, byte[])","android.content.ContentValues.put(java.lang.String, byte[])"
"android.provider.SyncStateContract.update(ContentProviderClient, Uri, byte[])","android.content.ContentProviderClient.update(android.net.Uri, android.content.ContentValues, null, null)"
"android.provider.SyncStateContract.set(ContentProviderClient, Uri, Account, byte[])","android.content.ContentValues.put(java.lang.String, byte[])"
"android.provider.SyncStateContract.set(ContentProviderClient, Uri, Account, byte[])","android.content.ContentProviderClient.insert(android.net.Uri, android.content.ContentValues)"
"android.provider.SyncStateContract.set(ContentProviderClient, Uri, Account, byte[])","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.text.style.BulletSpan.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.text.style.BulletSpan.drawLeadingMargin(Canvas, Paint, int, int, int, int, int, CharSequence, int, int, boolean, Layout)","android.text.Spanned.getSpanStart(android.text.style.BulletSpan)"
"android.view.HardwareRenderer.setupDiskCache(File)","java.io.File.getAbsolutePath()"
"android.view.HardwareRenderer.setupDiskCache(File)","android.view.ThreadedRenderer.setupShadersDiskCache(java.lang.String)"
"android.view.HardwareRenderer.initializeIfNeeded(int, int, Surface, Rect)","android.view.HardwareRenderer.isRequested()"
"android.view.HardwareRenderer.initializeIfNeeded(int, int, Surface, Rect)","android.view.HardwareRenderer.initialize(android.view.Surface)"
"android.view.HardwareRenderer.initializeIfNeeded(int, int, Surface, Rect)","android.view.HardwareRenderer.isEnabled()"
"android.view.HardwareRenderer.trimMemory(int)","android.view.ThreadedRenderer.trimMemory(int)"
"android.net.http.ConnectionThread.toString()","android.net.http.Connection.toString()"
"android.net.http.ConnectionThread.run()","java.lang.Object.wait()"
"android.net.http.ConnectionThread.run()","android.os.SystemClock.currentThreadTimeMillis()"
"android.net.http.ConnectionThread.run()","android.net.http.RequestQueue.ConnectionManager.recycleConnection(android.net.http.Connection)"
"android.net.http.ConnectionThread.run()","android.net.http.Connection.processRequests(android.net.http.Request)"
"android.net.http.ConnectionThread.run()","android.os.Process.setThreadPriority(int)"
"android.net.http.ConnectionThread.run()","android.net.http.Connection.getCanPersist()"
"android.net.http.ConnectionThread.run()","android.net.http.Connection.closeConnection()"
"android.net.http.ConnectionThread.requestStop()","java.lang.Object.notify()"
"android.view.SurfaceSession.finalize()","java.lang.Object.finalize()"
"android.view.SurfaceSession.finalize()","android.view.SurfaceSession.nativeDestroy(long)"
"android.view.SurfaceSession.kill()","android.view.SurfaceSession.nativeKill(long)"
"com.android.internal.view.ActionBarPolicy.hasEmbeddedTabs()","android.content.Context.getApplicationInfo()"
"com.android.internal.view.ActionBarPolicy.getEmbeddedMenuWidthLimit()","android.content.Context.getResources()"
"com.android.internal.view.ActionBarPolicy.getEmbeddedMenuWidthLimit()","android.content.res.Resources.getDisplayMetrics()"
"com.android.internal.view.ActionBarPolicy.getTabContainerHeight()","com.android.internal.view.ActionBarPolicy.hasEmbeddedTabs()"
"com.android.internal.view.ActionBarPolicy.getTabContainerHeight()","android.content.Context.getResources()"
"com.android.internal.view.ActionBarPolicy.getTabContainerHeight()","android.content.res.TypedArray.recycle()"
"com.android.internal.view.ActionBarPolicy.enableHomeButtonByDefault()","android.content.Context.getApplicationInfo()"
"android.app.TimePickerDialog.onRestoreInstanceState(Bundle)","android.os.BaseBundle.getInt(java.lang.String)"
"android.app.TimePickerDialog.onRestoreInstanceState(Bundle)","android.app.Dialog.onRestoreInstanceState(android.os.Bundle)"
"android.app.TimePickerDialog.onSaveInstanceState()","android.app.Dialog.onSaveInstanceState()"
"com.android.internal.widget.TextProgressBar.addView(View, int, ViewGroup.LayoutParams)","android.view.View.getId()"
"com.android.internal.widget.TextProgressBar.onChronometerTick(Chronometer)","android.os.SystemClock.elapsedRealtime()"
"com.android.internal.app.WindowDecorActionBar.ensureTabsExist()","com.android.internal.widget.DecorToolbar.setEmbeddedTabView(com.android.internal.widget.ScrollingTabContainerView)"
"com.android.internal.app.WindowDecorActionBar.setSubtitle(int)","android.content.Context.getResources()"
"com.android.internal.app.WindowDecorActionBar.setSubtitle(int)","android.content.res.Resources.getString(int)"
"com.android.internal.app.WindowDecorActionBar.setSubtitle(int)","com.android.internal.app.WindowDecorActionBar.ActionModeImpl.setSubtitle(java.lang.String)"
"com.android.internal.app.WindowDecorActionBar.animateToMode(boolean)","com.android.internal.widget.DecorToolbar.animateToVisibility(int)"
"com.android.internal.app.WindowDecorActionBar.getTabAt(int)","java.util.ArrayList.get(int)"
"com.android.internal.app.WindowDecorActionBar.setTitleOptionalHint(boolean)","android.view.ActionMode.setTitleOptionalHint(boolean)"
"com.android.internal.app.WindowDecorActionBar.setShowHideAnimationEnabled(boolean)","android.animation.Animator.end()"
"com.android.internal.app.WindowDecorActionBar.removeTabAt(int)","java.util.ArrayList.size()"
"com.android.internal.app.WindowDecorActionBar.removeTabAt(int)","com.android.internal.app.WindowDecorActionBar.TabImpl.getPosition()"
"com.android.internal.app.WindowDecorActionBar.removeTabAt(int)","com.android.internal.app.WindowDecorActionBar.TabImpl.setPosition(int)"
"com.android.internal.app.WindowDecorActionBar.removeTabAt(int)","java.util.ArrayList.remove(int)"
"com.android.internal.app.WindowDecorActionBar.removeTabAt(int)","java.util.ArrayList.get(int)"
"com.android.internal.app.WindowDecorActionBar.isTitleTruncated()","com.android.internal.widget.DecorToolbar.isTitleTruncated()"
"com.android.internal.app.WindowDecorActionBar.getThemedContext()","android.content.Context.getTheme()"
"com.android.internal.app.WindowDecorActionBar.getThemedContext()","android.content.Context.getThemeResId()"
"com.android.internal.app.WindowDecorActionBar.setDisplayOptions(int)","com.android.internal.widget.DecorToolbar.setDisplayOptions(int)"
"com.android.internal.app.WindowDecorActionBar.setHomeActionContentDescription(int)","com.android.internal.widget.DecorToolbar.setNavigationContentDescription(int)"
"com.android.internal.app.WindowDecorActionBar.finish()","android.view.ActionMode.Callback.onDestroyActionMode(com.android.internal.app.WindowDecorActionBar.ActionModeImpl)"
"com.android.internal.app.WindowDecorActionBar.setHomeActionContentDescription(CharSequence)","com.android.internal.widget.DecorToolbar.setNavigationContentDescription(java.lang.CharSequence)"
"com.android.internal.app.WindowDecorActionBar.setText(int)","android.content.Context.getResources()"
"com.android.internal.app.WindowDecorActionBar.setText(int)","android.content.res.Resources.getText(int)"
"com.android.internal.app.WindowDecorActionBar.setText(int)","com.android.internal.app.WindowDecorActionBar.TabImpl.setText(java.lang.CharSequence)"
"com.android.internal.app.WindowDecorActionBar.getDecorToolbar(View)","java.lang.Object.getClass()"
"com.android.internal.app.WindowDecorActionBar.getDecorToolbar(View)","java.lang.Class.getSimpleName()"
"com.android.internal.app.WindowDecorActionBar.setHomeButtonEnabled(boolean)","com.android.internal.widget.DecorToolbar.setHomeButtonEnabled(boolean)"
"com.android.internal.app.WindowDecorActionBar.setNavigationMode(int)","com.android.internal.widget.DecorToolbar.setCollapsible(boolean)"
"com.android.internal.app.WindowDecorActionBar.setNavigationMode(int)","com.android.internal.widget.DecorToolbar.getNavigationMode()"
"com.android.internal.app.WindowDecorActionBar.setNavigationMode(int)","com.android.internal.widget.DecorToolbar.setNavigationMode(int)"
"com.android.internal.app.WindowDecorActionBar.setSelectedNavigationItem(int)","com.android.internal.widget.DecorToolbar.setDropdownSelectedPosition(int)"
"com.android.internal.app.WindowDecorActionBar.setSelectedNavigationItem(int)","com.android.internal.widget.DecorToolbar.getNavigationMode()"
"com.android.internal.app.WindowDecorActionBar.completeDeferredDestroyActionMode()","android.view.ActionMode.Callback.onDestroyActionMode(android.view.ActionMode)"
"com.android.internal.app.WindowDecorActionBar.getTabCount()","java.util.ArrayList.size()"
"com.android.internal.app.WindowDecorActionBar.setCustomView(View)","com.android.internal.widget.DecorToolbar.setCustomView(android.view.View)"
"com.android.internal.app.WindowDecorActionBar.onContentScrollStarted()","android.animation.Animator.cancel()"
"com.android.internal.app.WindowDecorActionBar.getDisplayOptions()","com.android.internal.widget.DecorToolbar.getDisplayOptions()"
"com.android.internal.app.WindowDecorActionBar.hasLogo()","com.android.internal.widget.DecorToolbar.hasLogo()"
"com.android.internal.app.WindowDecorActionBar.onMenuItemSelected(MenuBuilder, MenuItem)","android.view.ActionMode.Callback.onActionItemClicked(com.android.internal.app.WindowDecorActionBar.ActionModeImpl, android.view.MenuItem)"
"com.android.internal.app.WindowDecorActionBar.cleanupTabs()","java.util.ArrayList.clear()"
"com.android.internal.app.WindowDecorActionBar.select()","android.app.ActionBar.selectTab(com.android.internal.app.WindowDecorActionBar.TabImpl)"
"com.android.internal.app.WindowDecorActionBar.setContentDescription(int)","android.content.Context.getResources()"
"com.android.internal.app.WindowDecorActionBar.setContentDescription(int)","com.android.internal.app.WindowDecorActionBar.TabImpl.setContentDescription(java.lang.CharSequence)"
"com.android.internal.app.WindowDecorActionBar.setContentDescription(int)","android.content.res.Resources.getText(int)"
"com.android.internal.app.WindowDecorActionBar.addOnMenuVisibilityListener(OnMenuVisibilityListener)","java.util.ArrayList.add(android.app.ActionBar.OnMenuVisibilityListener)"
"com.android.internal.app.WindowDecorActionBar.getNavigationItemCount()","java.util.ArrayList.size()"
"com.android.internal.app.WindowDecorActionBar.getNavigationItemCount()","com.android.internal.widget.DecorToolbar.getDropdownItemCount()"
"com.android.internal.app.WindowDecorActionBar.getNavigationItemCount()","com.android.internal.widget.DecorToolbar.getNavigationMode()"
"com.android.internal.app.WindowDecorActionBar.onMenuModeChange(MenuBuilder)","com.android.internal.app.WindowDecorActionBar.ActionModeImpl.invalidate()"
"com.android.internal.app.WindowDecorActionBar.dispatchMenuVisibilityChanged(boolean)","java.util.ArrayList.size()"
"com.android.internal.app.WindowDecorActionBar.dispatchMenuVisibilityChanged(boolean)","android.app.ActionBar.OnMenuVisibilityListener.onMenuVisibilityChanged(boolean)"
"com.android.internal.app.WindowDecorActionBar.dispatchMenuVisibilityChanged(boolean)","java.util.ArrayList.get(int)"
"com.android.internal.app.WindowDecorActionBar.setListNavigationCallbacks(SpinnerAdapter, OnNavigationListener)","com.android.internal.widget.DecorToolbar.setDropdownParams(android.widget.SpinnerAdapter, com.android.internal.app.NavItemSelectedListener)"
"com.android.internal.app.WindowDecorActionBar.getSelectedNavigationIndex()","com.android.internal.widget.DecorToolbar.getDropdownSelectedPosition()"
"com.android.internal.app.WindowDecorActionBar.getSelectedNavigationIndex()","com.android.internal.app.WindowDecorActionBar.TabImpl.getPosition()"
"com.android.internal.app.WindowDecorActionBar.getSelectedNavigationIndex()","com.android.internal.widget.DecorToolbar.getNavigationMode()"
"com.android.internal.app.WindowDecorActionBar.invalidate()","com.android.internal.view.menu.MenuBuilder.startDispatchingItemsChanged()"
"com.android.internal.app.WindowDecorActionBar.invalidate()","com.android.internal.view.menu.MenuBuilder.stopDispatchingItemsChanged()"
"com.android.internal.app.WindowDecorActionBar.invalidate()","android.view.ActionMode.Callback.onPrepareActionMode(com.android.internal.app.WindowDecorActionBar.ActionModeImpl, com.android.internal.view.menu.MenuBuilder)"
"com.android.internal.app.WindowDecorActionBar.collapseActionView()","com.android.internal.widget.DecorToolbar.hasExpandedActionView()"
"com.android.internal.app.WindowDecorActionBar.collapseActionView()","com.android.internal.widget.DecorToolbar.collapseActionView()"
"com.android.internal.app.WindowDecorActionBar.init(View)","com.android.internal.widget.DecorToolbar.isSplit()"
"com.android.internal.app.WindowDecorActionBar.init(View)","android.content.res.TypedArray.recycle()"
"com.android.internal.app.WindowDecorActionBar.init(View)","com.android.internal.widget.DecorToolbar.getContext()"
"com.android.internal.app.WindowDecorActionBar.init(View)","com.android.internal.view.ActionBarPolicy.get(android.content.Context)"
"com.android.internal.app.WindowDecorActionBar.init(View)","com.android.internal.widget.DecorToolbar.getDisplayOptions()"
"com.android.internal.app.WindowDecorActionBar.setTitle(int)","android.content.Context.getResources()"
"com.android.internal.app.WindowDecorActionBar.setTitle(int)","com.android.internal.app.WindowDecorActionBar.ActionModeImpl.setTitle(java.lang.String)"
"com.android.internal.app.WindowDecorActionBar.setTitle(int)","android.content.res.Resources.getString(int)"
"com.android.internal.app.WindowDecorActionBar.doShow(boolean)","android.animation.Animator.AnimatorListener.onAnimationEnd(null)"
"com.android.internal.app.WindowDecorActionBar.doShow(boolean)","android.animation.Animator.addListener(android.animation.Animator.AnimatorListener)"
"com.android.internal.app.WindowDecorActionBar.doShow(boolean)","android.view.View.setTranslationY(int)"
"com.android.internal.app.WindowDecorActionBar.doShow(boolean)","android.animation.ValueAnimator.addUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)"
"com.android.internal.app.WindowDecorActionBar.doShow(boolean)","android.animation.AnimatorSet.setDuration(int)"
"com.android.internal.app.WindowDecorActionBar.doShow(boolean)","android.animation.Animator.end()"
"com.android.internal.app.WindowDecorActionBar.doShow(boolean)","android.animation.AnimatorSet.play(android.animation.ObjectAnimator)"
"com.android.internal.app.WindowDecorActionBar.doShow(boolean)","android.animation.AnimatorSet.start()"
"com.android.internal.app.WindowDecorActionBar.setCustomView(View, LayoutParams)","android.view.View.setLayoutParams(android.app.ActionBar.LayoutParams)"
"com.android.internal.app.WindowDecorActionBar.setCustomView(View, LayoutParams)","com.android.internal.widget.DecorToolbar.setCustomView(android.view.View)"
"com.android.internal.app.WindowDecorActionBar.setWindowTitle(CharSequence)","com.android.internal.widget.DecorToolbar.setWindowTitle(java.lang.CharSequence)"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","android.app.ActionBar.TabListener.onTabReselected(com.android.internal.app.WindowDecorActionBar.TabImpl, android.app.FragmentTransaction)"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","android.app.ActionBar.Tab.getPosition()"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","android.app.ActionBar.TabListener.onTabSelected(com.android.internal.app.WindowDecorActionBar.TabImpl, android.app.FragmentTransaction)"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","android.app.FragmentTransaction.commit()"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","com.android.internal.app.WindowDecorActionBar.TabImpl.getCallback()"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","android.app.FragmentTransaction.disallowAddToBackStack()"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","android.app.FragmentManager.beginTransaction()"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","android.app.Activity.getFragmentManager()"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","android.app.ActionBar.TabListener.onTabUnselected(com.android.internal.app.WindowDecorActionBar.TabImpl, android.app.FragmentTransaction)"
"com.android.internal.app.WindowDecorActionBar.selectTab(Tab)","android.app.FragmentTransaction.isEmpty()"
"com.android.internal.app.WindowDecorActionBar.removeOnMenuVisibilityListener(OnMenuVisibilityListener)","java.util.ArrayList.remove(android.app.ActionBar.OnMenuVisibilityListener)"
"com.android.internal.app.WindowDecorActionBar.configureTab(Tab, int)","java.util.ArrayList.size()"
"com.android.internal.app.WindowDecorActionBar.configureTab(Tab, int)","com.android.internal.app.WindowDecorActionBar.TabImpl.getCallback()"
"com.android.internal.app.WindowDecorActionBar.configureTab(Tab, int)","com.android.internal.app.WindowDecorActionBar.TabImpl.setPosition(int)"
"com.android.internal.app.WindowDecorActionBar.configureTab(Tab, int)","java.util.ArrayList.add(int, com.android.internal.app.WindowDecorActionBar.TabImpl)"
"com.android.internal.app.WindowDecorActionBar.configureTab(Tab, int)","java.util.ArrayList.get(int)"
"com.android.internal.app.WindowDecorActionBar.hasIcon()","com.android.internal.widget.DecorToolbar.hasIcon()"
"com.android.internal.app.WindowDecorActionBar.doHide(boolean)","android.animation.Animator.AnimatorListener.onAnimationEnd(null)"
"com.android.internal.app.WindowDecorActionBar.doHide(boolean)","android.animation.Animator.addListener(android.animation.Animator.AnimatorListener)"
"com.android.internal.app.WindowDecorActionBar.doHide(boolean)","android.animation.ValueAnimator.addUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)"
"com.android.internal.app.WindowDecorActionBar.doHide(boolean)","android.animation.AnimatorSet.setDuration(int)"
"com.android.internal.app.WindowDecorActionBar.doHide(boolean)","android.animation.Animator.end()"
"com.android.internal.app.WindowDecorActionBar.doHide(boolean)","android.animation.AnimatorSet.play(android.animation.ObjectAnimator)"
"com.android.internal.app.WindowDecorActionBar.doHide(boolean)","android.animation.AnimatorSet.start()"
"com.android.internal.app.WindowDecorActionBar.onSubMenuSelected(SubMenuBuilder)","com.android.internal.view.menu.MenuBuilder.hasVisibleItems()"
"com.android.internal.app.WindowDecorActionBar.setHasEmbeddedTabs(boolean)","com.android.internal.widget.DecorToolbar.setCollapsible(boolean)"
"com.android.internal.app.WindowDecorActionBar.setHasEmbeddedTabs(boolean)","com.android.internal.widget.DecorToolbar.setEmbeddedTabView(com.android.internal.widget.ScrollingTabContainerView)"
"com.android.internal.app.WindowDecorActionBar.setHasEmbeddedTabs(boolean)","com.android.internal.widget.DecorToolbar.setEmbeddedTabView(null)"
"com.android.internal.app.WindowDecorActionBar.startActionMode(ActionMode.Callback)","com.android.internal.app.WindowDecorActionBar.ActionModeImpl.finish()"
"com.android.internal.app.WindowDecorActionBar.startActionMode(ActionMode.Callback)","com.android.internal.app.WindowDecorActionBar.ActionModeImpl.invalidate()"
"com.android.internal.app.WindowDecorActionBar.startActionMode(ActionMode.Callback)","com.android.internal.app.WindowDecorActionBar.ActionModeImpl.dispatchOnCreate()"
"com.android.internal.app.WindowDecorActionBar.getNavigationMode()","com.android.internal.widget.DecorToolbar.getNavigationMode()"
"com.android.internal.app.WindowDecorActionBar.dispatchOnCreate()","com.android.internal.view.menu.MenuBuilder.startDispatchingItemsChanged()"
"com.android.internal.app.WindowDecorActionBar.dispatchOnCreate()","com.android.internal.view.menu.MenuBuilder.stopDispatchingItemsChanged()"
"com.android.internal.app.WindowDecorActionBar.dispatchOnCreate()","android.view.ActionMode.Callback.onCreateActionMode(com.android.internal.app.WindowDecorActionBar.ActionModeImpl, com.android.internal.view.menu.MenuBuilder)"
"com.android.internal.app.WindowDecorActionBar.setDisplayOptions(int, int)","com.android.internal.widget.DecorToolbar.setDisplayOptions(int)"
"com.android.internal.app.WindowDecorActionBar.setDisplayOptions(int, int)","com.android.internal.widget.DecorToolbar.getDisplayOptions()"
"android.app.AlertDialog.setButton(int, CharSequence, Message)","com.android.internal.app.AlertController.setButton(int, java.lang.CharSequence, null, android.os.Message)"
"android.app.AlertDialog.show()","android.app.Dialog.show()"
"android.app.AlertDialog.show()","android.app.AlertDialog.Builder.create()"
"android.app.AlertDialog.onKeyDown(int, KeyEvent)","com.android.internal.app.AlertController.onKeyDown(int, android.view.KeyEvent)"
"android.app.AlertDialog.onKeyDown(int, KeyEvent)","android.app.Dialog.onKeyDown(int, android.view.KeyEvent)"
"android.app.AlertDialog.setButtonPanelLayoutHint(int)","com.android.internal.app.AlertController.setButtonPanelLayoutHint(int)"
"android.app.AlertDialog.onCreate(Bundle)","android.app.Dialog.onCreate(android.os.Bundle)"
"android.app.AlertDialog.onCreate(Bundle)","com.android.internal.app.AlertController.installContent()"
"android.app.AlertDialog.setButton3(CharSequence, OnClickListener)","android.app.AlertDialog.setButton(int, java.lang.CharSequence, android.content.DialogInterface.OnClickListener)"
"android.app.AlertDialog.getListView()","com.android.internal.app.AlertController.getListView()"
"android.app.AlertDialog.setButton2(CharSequence, Message)","android.app.AlertDialog.setButton(int, java.lang.CharSequence, android.os.Message)"
"android.app.AlertDialog.setMultiChoiceItems(int, boolean[], OnMultiChoiceClickListener)","android.content.res.Resources.getTextArray(int)"
"android.app.AlertDialog.setMultiChoiceItems(int, boolean[], OnMultiChoiceClickListener)","android.content.Context.getResources()"
"android.app.AlertDialog.setButton(CharSequence, Message)","android.app.AlertDialog.setButton(int, java.lang.CharSequence, android.os.Message)"
"android.app.AlertDialog.setButton2(CharSequence, OnClickListener)","android.app.AlertDialog.setButton(int, java.lang.CharSequence, android.content.DialogInterface.OnClickListener)"
"android.app.AlertDialog.setItems(int, OnClickListener)","android.content.res.Resources.getTextArray(int)"
"android.app.AlertDialog.setItems(int, OnClickListener)","android.content.Context.getResources()"
"android.app.AlertDialog.setTitle(int)","android.content.Context.getText(int)"
"android.app.AlertDialog.setButton(int, CharSequence, OnClickListener)","com.android.internal.app.AlertController.setButton(int, java.lang.CharSequence, android.content.DialogInterface.OnClickListener, null)"
"android.app.AlertDialog.setSingleChoiceItems(int, int, OnClickListener)","android.content.res.Resources.getTextArray(int)"
"android.app.AlertDialog.setSingleChoiceItems(int, int, OnClickListener)","android.content.Context.getResources()"
"android.app.AlertDialog.setPositiveButton(int, OnClickListener)","android.content.Context.getText(int)"
"android.app.AlertDialog.setButton3(CharSequence, Message)","android.app.AlertDialog.setButton(int, java.lang.CharSequence, android.os.Message)"
"android.app.AlertDialog.setNeutralButton(int, OnClickListener)","android.content.Context.getText(int)"
"android.app.AlertDialog.setButton(CharSequence, OnClickListener)","android.app.AlertDialog.setButton(int, java.lang.CharSequence, android.content.DialogInterface.OnClickListener)"
"android.app.AlertDialog.setMessage(int)","android.content.Context.getText(int)"
"android.app.AlertDialog.onKeyUp(int, KeyEvent)","com.android.internal.app.AlertController.onKeyUp(int, android.view.KeyEvent)"
"android.app.AlertDialog.onKeyUp(int, KeyEvent)","android.app.Dialog.onKeyUp(int, android.view.KeyEvent)"
"android.app.AlertDialog.setNegativeButton(int, OnClickListener)","android.content.Context.getText(int)"
"android.app.AlertDialog.getButton(int)","com.android.internal.app.AlertController.getButton(int)"
"android.app.AlertDialog.setIconAttribute(int)","android.content.Context.getTheme()"
"android.app.AlertDialog.setIconAttribute(int)","android.content.res.Resources.Theme.resolveAttribute(int, android.util.TypedValue, boolean)"
"android.app.AlertDialog.create()","android.app.Dialog.setOnCancelListener(android.content.DialogInterface.OnCancelListener)"
"android.app.AlertDialog.create()","android.app.Dialog.setOnDismissListener(android.content.DialogInterface.OnDismissListener)"
"android.app.AlertDialog.create()","com.android.internal.app.AlertController.AlertParams.apply(com.android.internal.app.AlertController)"
"android.app.AlertDialog.create()","android.app.Dialog.setOnKeyListener(android.content.DialogInterface.OnKeyListener)"
"android.app.AlertDialog.create()","android.app.Dialog.setCanceledOnTouchOutside(boolean)"
"android.app.AlertDialog.create()","android.app.Dialog.setCancelable(boolean)"
"com.android.internal.net.LegacyVpnInfo.createFromParcel(Parcel)","android.os.Parcel.readParcelable(null)"
"com.android.internal.net.LegacyVpnInfo.createFromParcel(Parcel)","android.os.Parcel.readString()"
"com.android.internal.net.LegacyVpnInfo.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"com.android.internal.net.LegacyVpnInfo.stateFromNetworkInfo(NetworkInfo)","android.net.NetworkInfo.getDetailedState()"
"com.android.internal.net.LegacyVpnInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"com.android.internal.net.LegacyVpnInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.app.PendingIntent, int)"
"com.android.internal.net.LegacyVpnInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.transition.Rotate.createAnimator(ViewGroup, TransitionValues, TransitionValues)","java.util.Map.get(java.lang.String)"
"android.transition.Rotate.createAnimator(ViewGroup, TransitionValues, TransitionValues)","android.view.View.setRotation(float)"
"android.transition.Rotate.captureEndValues(TransitionValues)","android.view.View.getRotation()"
"android.transition.Rotate.captureEndValues(TransitionValues)","java.util.Map.put(java.lang.String, float)"
"android.transition.Rotate.captureStartValues(TransitionValues)","android.view.View.getRotation()"
"android.transition.Rotate.captureStartValues(TransitionValues)","java.util.Map.put(java.lang.String, float)"
"com.android.internal.app.NetInitiatedActivity.sendUserResponse(int)","android.app.Activity.getSystemService(java.lang.String)"
"com.android.internal.app.NetInitiatedActivity.onCreate(Bundle)","com.android.internal.app.AlertActivity.setupAlert()"
"com.android.internal.app.NetInitiatedActivity.onCreate(Bundle)","com.android.internal.app.AlertActivity.onCreate(android.os.Bundle)"
"com.android.internal.app.NetInitiatedActivity.onCreate(Bundle)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"com.android.internal.app.NetInitiatedActivity.onCreate(Bundle)","android.content.ContextWrapper.getApplicationContext()"
"com.android.internal.app.NetInitiatedActivity.onCreate(Bundle)","android.app.Activity.getIntent()"
"com.android.internal.app.NetInitiatedActivity.onCreate(Bundle)","android.os.Handler.obtainMessage(int)"
"com.android.internal.app.NetInitiatedActivity.handleMessage(Message)","com.android.internal.app.NetInitiatedActivity.sendUserResponse(int)"
"com.android.internal.app.NetInitiatedActivity.handleMessage(Message)","android.app.Activity.finish()"
"com.android.internal.app.NetInitiatedActivity.onReceive(Context, Intent)","android.content.Intent.getAction()"
"com.android.internal.app.NetInitiatedActivity.onReceive(Context, Intent)","com.android.internal.app.NetInitiatedActivity.handleNIVerify(android.content.Intent)"
"com.android.internal.app.NetInitiatedActivity.showNIError()","android.widget.Toast.show()"
"com.android.internal.app.NetInitiatedActivity.showNIError()","android.widget.Toast.makeText(com.android.internal.app.NetInitiatedActivity, java.lang.String, int)"
"com.android.internal.app.NetInitiatedActivity.onPause()","android.app.Activity.onPause()"
"com.android.internal.app.NetInitiatedActivity.onPause()","android.content.ContextWrapper.unregisterReceiver(android.content.BroadcastReceiver)"
"com.android.internal.app.NetInitiatedActivity.onResume()","android.app.Activity.onResume()"
"com.android.internal.app.NetInitiatedActivity.onResume()","android.content.ContextWrapper.registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)"
"com.android.internal.app.NetInitiatedActivity.onClick(DialogInterface, int)","android.app.Activity.finish()"
"android.app.LocalActivityManager.destroyActivity(String, boolean)","android.app.LocalActivityManager.performDestroy(android.app.LocalActivityManager.LocalActivityRecord, boolean)"
"android.app.LocalActivityManager.destroyActivity(String, boolean)","java.util.Map.get(java.lang.String)"
"android.app.LocalActivityManager.destroyActivity(String, boolean)","java.util.ArrayList.remove(android.app.LocalActivityManager.LocalActivityRecord)"
"android.app.LocalActivityManager.destroyActivity(String, boolean)","java.util.Map.remove(java.lang.String)"
"android.app.LocalActivityManager.moveToState(LocalActivityRecord, int)","android.app.ActivityThread.resolveActivityInfo(android.content.Intent)"
"android.app.LocalActivityManager.moveToState(LocalActivityRecord, int)","android.app.Activity.getWindow()"
"android.app.LocalActivityManager.moveToState(LocalActivityRecord, int)","java.util.HashMap.get(java.lang.String)"
"android.app.LocalActivityManager.moveToState(LocalActivityRecord, int)","android.app.ActivityThread.performRestartActivity(android.app.LocalActivityManager.LocalActivityRecord)"
"android.app.LocalActivityManager.moveToState(LocalActivityRecord, int)","android.app.LocalActivityManager.performPause(android.app.LocalActivityManager.LocalActivityRecord, boolean)"
"android.app.LocalActivityManager.moveToState(LocalActivityRecord, int)","android.app.ActivityThread.performStopActivity(android.app.LocalActivityManager.LocalActivityRecord, boolean)"
"android.app.LocalActivityManager.moveToState(LocalActivityRecord, int)","android.app.Activity.getLastNonConfigurationChildInstances()"
"android.app.LocalActivityManager.moveToState(LocalActivityRecord, int)","android.app.ActivityThread.startActivityNow(android.app.Activity, java.lang.String, android.content.Intent, android.content.pm.ActivityInfo, android.app.LocalActivityManager.LocalActivityRecord, android.os.Bundle, android.app.Activity.NonConfigurationInstances)"
"android.app.LocalActivityManager.moveToState(LocalActivityRecord, int)","android.app.ActivityThread.performResumeActivity(android.app.LocalActivityManager.LocalActivityRecord, boolean)"
"android.app.LocalActivityManager.dispatchRetainNonConfigurationInstance()","java.util.ArrayList.size()"
"android.app.LocalActivityManager.dispatchRetainNonConfigurationInstance()","android.app.Activity.onRetainNonConfigurationInstance()"
"android.app.LocalActivityManager.dispatchRetainNonConfigurationInstance()","java.util.HashMap.put(java.lang.String, java.lang.Object)"
"android.app.LocalActivityManager.dispatchRetainNonConfigurationInstance()","java.util.ArrayList.get(int)"
"android.app.LocalActivityManager.saveInstanceState()","java.util.ArrayList.size()"
"android.app.LocalActivityManager.saveInstanceState()","android.app.Activity.performSaveInstanceState(android.os.Bundle)"
"android.app.LocalActivityManager.saveInstanceState()","java.util.ArrayList.get(int)"
"android.app.LocalActivityManager.saveInstanceState()","android.os.Bundle.putBundle(java.lang.String, android.os.Bundle)"
"android.app.LocalActivityManager.performPause(LocalActivityRecord, boolean)","android.app.ActivityThread.performPauseActivity(android.app.LocalActivityManager.LocalActivityRecord, boolean, boolean)"
"android.app.LocalActivityManager.performDestroy(LocalActivityRecord, boolean)","android.app.LocalActivityManager.performPause(android.app.LocalActivityManager.LocalActivityRecord, boolean)"
"android.app.LocalActivityManager.performDestroy(LocalActivityRecord, boolean)","android.app.ActivityThread.performDestroyActivity(android.app.LocalActivityManager.LocalActivityRecord, boolean)"
"android.app.LocalActivityManager.removeAllActivities()","android.app.LocalActivityManager.dispatchDestroy(boolean)"
"android.app.LocalActivityManager.dispatchDestroy(boolean)","java.util.ArrayList.size()"
"android.app.LocalActivityManager.dispatchDestroy(boolean)","android.app.ActivityThread.performDestroyActivity(android.app.LocalActivityManager.LocalActivityRecord, boolean)"
"android.app.LocalActivityManager.dispatchDestroy(boolean)","java.util.ArrayList.get(int)"
"android.app.LocalActivityManager.dispatchDestroy(boolean)","java.util.Map.clear()"
"android.app.LocalActivityManager.dispatchDestroy(boolean)","java.util.ArrayList.clear()"
"android.app.LocalActivityManager.dispatchCreate(Bundle)","java.util.ArrayList.add(android.app.LocalActivityManager.LocalActivityRecord)"
"android.app.LocalActivityManager.dispatchCreate(Bundle)","android.os.BaseBundle.keySet()"
"android.app.LocalActivityManager.dispatchCreate(Bundle)","java.util.Map.get(java.lang.String)"
"android.app.LocalActivityManager.dispatchCreate(Bundle)","android.os.Bundle.getBundle(java.lang.String)"
"android.app.LocalActivityManager.dispatchCreate(Bundle)","java.util.Map.put(java.lang.String, android.app.LocalActivityManager.LocalActivityRecord)"
"android.app.LocalActivityManager.dispatchStop()","java.util.ArrayList.size()"
"android.app.LocalActivityManager.dispatchStop()","android.app.LocalActivityManager.moveToState(android.app.LocalActivityManager.LocalActivityRecord, int)"
"android.app.LocalActivityManager.dispatchStop()","java.util.ArrayList.get(int)"
"android.app.LocalActivityManager.dispatchPause(boolean)","java.util.ArrayList.size()"
"android.app.LocalActivityManager.dispatchPause(boolean)","android.app.LocalActivityManager.moveToState(android.app.LocalActivityManager.LocalActivityRecord, int)"
"android.app.LocalActivityManager.dispatchPause(boolean)","java.util.ArrayList.get(int)"
"android.app.LocalActivityManager.dispatchResume()","java.util.ArrayList.size()"
"android.app.LocalActivityManager.dispatchResume()","android.app.LocalActivityManager.moveToState(android.app.LocalActivityManager.LocalActivityRecord, int)"
"android.app.LocalActivityManager.dispatchResume()","java.util.ArrayList.get(int)"
"android.app.LocalActivityManager.getActivity(String)","java.util.Map.get(java.lang.String)"
"android.app.LocalActivityManager.startActivity(String, Intent)","java.util.ArrayList.add(android.app.LocalActivityManager.LocalActivityRecord)"
"android.app.LocalActivityManager.startActivity(String, Intent)","android.app.ActivityThread.resolveActivityInfo(android.content.Intent)"
"android.app.LocalActivityManager.startActivity(String, Intent)","android.app.LocalActivityManager.performDestroy(android.app.LocalActivityManager.LocalActivityRecord, boolean)"
"android.app.LocalActivityManager.startActivity(String, Intent)","java.util.Map.get(java.lang.String)"
"android.app.LocalActivityManager.startActivity(String, Intent)","android.content.ContextWrapper.getPackageName()"
"android.app.LocalActivityManager.startActivity(String, Intent)","android.app.ActivityThread.performNewIntents(android.app.LocalActivityManager.LocalActivityRecord, java.util.ArrayList<com.android.internal.content.ReferrerIntent>)"
"android.app.LocalActivityManager.startActivity(String, Intent)","java.util.Map.put(java.lang.String, android.app.LocalActivityManager.LocalActivityRecord)"
"android.app.LocalActivityManager.startActivity(String, Intent)","android.app.LocalActivityManager.moveToState(android.app.LocalActivityManager.LocalActivityRecord, int)"
"android.app.LocalActivityManager.startActivity(String, Intent)","java.lang.String.equals(java.lang.String)"
"android.app.LocalActivityManager.startActivity(String, Intent)","android.content.Intent.filterEquals(android.content.Intent)"
"android.app.LocalActivityManager.startActivity(String, Intent)","java.util.ArrayList.add(com.android.internal.content.ReferrerIntent)"
"android.app.LocalActivityManager.startActivity(String, Intent)","android.content.Intent.getFlags()"
"android.bluetooth.le.BluetoothLeScanner.startRegisteration()","java.util.UUID.randomUUID()"
"android.bluetooth.le.BluetoothLeScanner.startRegisteration()","java.util.Map.put(android.bluetooth.le.ScanCallback, android.bluetooth.le.BluetoothLeScanner.BleScanCallbackWrapper)"
"android.bluetooth.le.BluetoothLeScanner.stopScan(ScanCallback)","android.bluetooth.le.BluetoothLeUtils.checkAdapterStateOn(android.bluetooth.BluetoothAdapter)"
"android.bluetooth.le.BluetoothLeScanner.stopScan(ScanCallback)","java.util.Map.remove(android.bluetooth.le.ScanCallback)"
"android.bluetooth.le.BluetoothLeScanner.isSettingsConfigAllowedForScan(ScanSettings)","android.bluetooth.le.ScanSettings.getCallbackType()"
"android.bluetooth.le.BluetoothLeScanner.isSettingsConfigAllowedForScan(ScanSettings)","android.bluetooth.le.ScanSettings.getReportDelayMillis()"
"android.bluetooth.le.BluetoothLeScanner.isSettingsConfigAllowedForScan(ScanSettings)","android.bluetooth.BluetoothAdapter.isOffloadedFilteringSupported()"
"android.bluetooth.le.BluetoothLeScanner.onBatchScanResults(List)","android.os.Looper.getMainLooper()"
"android.bluetooth.le.BluetoothLeScanner.onBatchScanResults(List)","android.os.Handler.post(java.lang.Runnable)"
"android.bluetooth.le.BluetoothLeScanner.onBatchScanResults(List)","android.bluetooth.le.ScanCallback.onBatchScanResults(java.util.List<android.bluetooth.le.ScanResult>)"
"android.bluetooth.le.BluetoothLeScanner.cleanup()","java.util.Map.clear()"
"android.bluetooth.le.BluetoothLeScanner.flushPendingScanResults(ScanCallback)","android.bluetooth.le.BluetoothLeUtils.checkAdapterStateOn(android.bluetooth.BluetoothAdapter)"
"android.bluetooth.le.BluetoothLeScanner.flushPendingScanResults(ScanCallback)","java.util.Map.get(android.bluetooth.le.ScanCallback)"
"android.bluetooth.le.BluetoothLeScanner.startScan(ScanCallback)","android.bluetooth.le.BluetoothLeScanner.startScan(null, android.bluetooth.le.ScanSettings, android.bluetooth.le.ScanCallback)"
"android.bluetooth.le.BluetoothLeScanner.startScan(ScanCallback)","android.bluetooth.le.ScanSettings.Builder.build()"
"android.bluetooth.le.BluetoothLeScanner.startScan(List, ScanSettings, ScanCallback, List)","android.bluetooth.le.BluetoothLeScanner.postCallbackError(android.bluetooth.le.ScanCallback, int)"
"android.bluetooth.le.BluetoothLeScanner.startScan(List, ScanSettings, ScanCallback, List)","android.bluetooth.le.BluetoothLeUtils.checkAdapterStateOn(android.bluetooth.BluetoothAdapter)"
"android.bluetooth.le.BluetoothLeScanner.startScan(List, ScanSettings, ScanCallback, List)","android.bluetooth.le.BluetoothLeScanner.isSettingsConfigAllowedForScan(android.bluetooth.le.ScanSettings)"
"android.bluetooth.le.BluetoothLeScanner.startScan(List, ScanSettings, ScanCallback, List)","java.util.Map.containsKey(android.bluetooth.le.ScanCallback)"
"android.bluetooth.le.BluetoothLeScanner.onFoundOrLost(boolean, ScanResult)","android.os.Looper.getMainLooper()"
"android.bluetooth.le.BluetoothLeScanner.onFoundOrLost(boolean, ScanResult)","android.bluetooth.le.ScanCallback.onScanResult(int, android.bluetooth.le.ScanResult)"
"android.bluetooth.le.BluetoothLeScanner.onFoundOrLost(boolean, ScanResult)","android.os.Handler.post(java.lang.Runnable)"
"android.bluetooth.le.BluetoothLeScanner.postCallbackError(ScanCallback, int)","android.bluetooth.le.ScanCallback.onScanFailed(int)"
"android.bluetooth.le.BluetoothLeScanner.postCallbackError(ScanCallback, int)","android.os.Handler.post(java.lang.Runnable)"
"android.bluetooth.le.BluetoothLeScanner.startScan(List, ScanSettings, ScanCallback)","android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>, android.bluetooth.le.ScanSettings, android.bluetooth.le.ScanCallback, null)"
"android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(List, ScanSettings, ScanCallback)","java.util.List.add(android.bluetooth.le.ScanFilter)"
"android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(List, ScanSettings, ScanCallback)","android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List<android.bluetooth.le.ScanFilter>, android.bluetooth.le.ScanSettings, android.bluetooth.le.ScanCallback, java.util.List<java.util.List<android.bluetooth.le.ResultStorageDescriptor>>)"
"android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(List, ScanSettings, ScanCallback)","android.bluetooth.le.TruncatedFilter.getStorageDescriptors()"
"android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(List, ScanSettings, ScanCallback)","java.util.List.size()"
"android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(List, ScanSettings, ScanCallback)","android.bluetooth.le.TruncatedFilter.getFilter()"
"android.bluetooth.le.BluetoothLeScanner.startTruncatedScan(List, ScanSettings, ScanCallback)","java.util.List.add(java.util.List<android.bluetooth.le.ResultStorageDescriptor>)"
"android.bluetooth.le.BluetoothLeScanner.onScanResult(ScanResult)","android.os.Looper.getMainLooper()"
"android.bluetooth.le.BluetoothLeScanner.onScanResult(ScanResult)","android.bluetooth.le.ScanCallback.onScanResult(int, android.bluetooth.le.ScanResult)"
"android.bluetooth.le.BluetoothLeScanner.onScanResult(ScanResult)","android.os.Handler.post(java.lang.Runnable)"
"com.android.internal.os.AndroidPrintStream.log(String)","android.util.Log.println(int, java.lang.String, java.lang.String)"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.unmarshal(ByteBuffer)","android.hardware.camera2.marshal.Marshaler.unmarshal(java.nio.ByteBuffer)"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.unmarshal(ByteBuffer)","java.lang.reflect.Constructor.newInstance(T1, T2)"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.calculateMarshalSize(Pair)","android.hardware.camera2.marshal.Marshaler.calculateMarshalSize(T2)"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.calculateMarshalSize(Pair)","android.hardware.camera2.marshal.impl.MarshalQueryablePair.MarshalerPair.getNativeSize()"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.calculateMarshalSize(Pair)","android.hardware.camera2.marshal.Marshaler.calculateMarshalSize(T1)"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.marshal(Pair, ByteBuffer)","android.hardware.camera2.marshal.Marshaler.marshal(T1, java.nio.ByteBuffer)"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.marshal(Pair, ByteBuffer)","android.hardware.camera2.marshal.Marshaler.marshal(T2, java.nio.ByteBuffer)"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.getNativeSize()","android.hardware.camera2.marshal.Marshaler.getNativeSize()"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.isTypeMappingSupported(TypeReference, int)","java.lang.Object.equals(java.lang.Class<? super android.util.Pair<T1, T2>>)"
"android.hardware.camera2.marshal.impl.MarshalQueryablePair.isTypeMappingSupported(TypeReference, int)","android.hardware.camera2.utils.TypeReference.getRawType()"
"android.net.UidRange.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.UidRange.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.nfc.tech.BasicTagTechnology.checkConnected()","android.nfc.Tag.getConnectedTechnology()"
"android.nfc.tech.BasicTagTechnology.close()","android.nfc.Tag.setTechnologyDisconnected()"
"android.nfc.tech.BasicTagTechnology.transceive(byte[], boolean)","android.nfc.TransceiveResult.getResponseOrThrow()"
"android.nfc.tech.BasicTagTechnology.transceive(byte[], boolean)","android.nfc.tech.BasicTagTechnology.checkConnected()"
"android.nfc.tech.BasicTagTechnology.reconnect()","android.nfc.Tag.setTechnologyDisconnected()"
"android.nfc.tech.BasicTagTechnology.connect()","android.nfc.Tag.setConnectedTechnology(int)"
"com.android.internal.content.PackageMonitor.unregister()","android.content.Context.unregisterReceiver(com.android.internal.content.PackageMonitor)"
"com.android.internal.content.PackageMonitor.isPackageAppearing(String)","java.lang.String.equals(java.lang.String)"
"com.android.internal.content.PackageMonitor.isPackageModified(String)","java.lang.String.equals(java.lang.String)"
"com.android.internal.content.PackageMonitor.isPackageUpdating(String)","java.util.HashSet.contains(java.lang.String)"
"com.android.internal.content.PackageMonitor.onPackageChanged(String, int, String[])","java.lang.String.equals(java.lang.String)"
"com.android.internal.content.PackageMonitor.isPackageDisappearing(String)","java.lang.String.equals(java.lang.String)"
"com.android.internal.content.PackageMonitor.register(Context, Looper, boolean)","com.android.internal.content.PackageMonitor.register(android.content.Context, android.os.Looper, null, boolean)"
"com.android.internal.content.PackageMonitor.register(Context, Looper, UserHandle, boolean)","android.content.Context.registerReceiverAsUser(com.android.internal.content.PackageMonitor, android.os.UserHandle, android.content.IntentFilter, null, android.os.Handler)"
"com.android.internal.content.PackageMonitor.register(Context, Looper, UserHandle, boolean)","com.android.internal.os.BackgroundThread.getHandler()"
"com.android.internal.content.PackageMonitor.register(Context, Looper, UserHandle, boolean)","android.content.Context.registerReceiver(com.android.internal.content.PackageMonitor, android.content.IntentFilter, null, android.os.Handler)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onSomePackagesChanged()"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","android.content.Intent.getIntExtra(java.lang.String, int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackageDisappeared(java.lang.String, int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackagesAvailable(java.lang.String[])"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","android.content.Intent.getBooleanExtra(java.lang.String, boolean)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onHandleUserStop(android.content.Intent, int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackageUpdateStarted(java.lang.String, int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","android.content.Intent.getAction()"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","java.lang.String.equals(java.lang.String)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackageAdded(java.lang.String, int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackageChanged(java.lang.String, int, java.lang.String[])"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","android.content.BroadcastReceiver.setResultCode(int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onHandleForceStop(android.content.Intent, java.lang.String[], int, boolean)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackageRemovedAllUsers(java.lang.String, int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","java.util.HashSet.remove(java.lang.String)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackagesUnavailable(java.lang.String[])"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackageModified(java.lang.String)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","android.content.Intent.hasExtra(java.lang.String)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackageRemoved(java.lang.String, int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackageUpdateFinished(java.lang.String, int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onPackageAppeared(java.lang.String, int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onUidRemoved(int)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onFinishPackageChanges()"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","android.content.Intent.getStringArrayExtra(java.lang.String)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.getPackageName(android.content.Intent)"
"com.android.internal.content.PackageMonitor.onReceive(Context, Intent)","com.android.internal.content.PackageMonitor.onBeginPackageChanges()"
"com.android.internal.content.PackageMonitor.getPackageName(Intent)","android.net.Uri.getSchemeSpecificPart()"
"com.android.internal.content.PackageMonitor.getPackageName(Intent)","android.content.Intent.getData()"
"android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising()","java.util.Map.remove(android.bluetooth.le.AdvertiseCallback)"
"android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising()","java.util.Map.containsKey(android.bluetooth.le.AdvertiseCallback)"
"android.bluetooth.le.BluetoothLeAdvertiser.startRegisteration()","java.util.UUID.randomUUID()"
"android.bluetooth.le.BluetoothLeAdvertiser.startRegisteration()","java.util.Map.put(android.bluetooth.le.AdvertiseCallback, android.bluetooth.le.BluetoothLeAdvertiser.AdvertiseCallbackWrapper)"
"android.bluetooth.le.BluetoothLeAdvertiser.cleanup()","java.util.Map.clear()"
"android.bluetooth.le.BluetoothLeAdvertiser.onMultiAdvertiseCallback(int, boolean, AdvertiseSettings)","java.util.Map.remove(android.bluetooth.le.AdvertiseCallback)"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.bluetooth.BluetoothAdapter.getName()"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","java.util.Map.get(android.os.ParcelUuid)"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.bluetooth.le.AdvertiseData.getManufacturerSpecificData()"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.bluetooth.le.BluetoothLeAdvertiser.byteLength(byte[])"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.bluetooth.le.AdvertiseData.getServiceData()"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.util.SparseArray.size()"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.bluetooth.le.AdvertiseData.getServiceUuids()"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","java.util.Map.keySet()"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.util.SparseArray.valueAt(int)"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.bluetooth.BluetoothUuid.is32BitUuid(android.os.ParcelUuid)"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.bluetooth.le.AdvertiseData.getIncludeDeviceName()"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.bluetooth.BluetoothUuid.is16BitUuid(android.os.ParcelUuid)"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","android.bluetooth.le.AdvertiseData.getIncludeTxPowerLevel()"
"android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(AdvertiseData, boolean)","java.lang.String.length()"
"android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising(AdvertiseCallback)","android.bluetooth.le.BluetoothLeUtils.checkAdapterStateOn(android.bluetooth.BluetoothAdapter)"
"android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising(AdvertiseCallback)","java.util.Map.get(android.bluetooth.le.AdvertiseCallback)"
"android.bluetooth.le.BluetoothLeAdvertiser.postStartSuccess(AdvertiseCallback, AdvertiseSettings)","android.bluetooth.le.AdvertiseCallback.onStartSuccess(android.bluetooth.le.AdvertiseSettings)"
"android.bluetooth.le.BluetoothLeAdvertiser.postStartSuccess(AdvertiseCallback, AdvertiseSettings)","android.os.Handler.post(java.lang.Runnable)"
"android.bluetooth.le.BluetoothLeAdvertiser.postStartFailure(AdvertiseCallback, int)","android.bluetooth.le.AdvertiseCallback.onStartFailure(int)"
"android.bluetooth.le.BluetoothLeAdvertiser.postStartFailure(AdvertiseCallback, int)","android.os.Handler.post(java.lang.Runnable)"
"android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings, AdvertiseData, AdvertiseCallback)","android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(android.bluetooth.le.AdvertiseSettings, android.bluetooth.le.AdvertiseData, null, android.bluetooth.le.AdvertiseCallback)"
"android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings, AdvertiseData, AdvertiseData, AdvertiseCallback)","android.bluetooth.BluetoothAdapter.isMultipleAdvertisementSupported()"
"android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings, AdvertiseData, AdvertiseData, AdvertiseCallback)","android.bluetooth.le.BluetoothLeUtils.checkAdapterStateOn(android.bluetooth.BluetoothAdapter)"
"android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings, AdvertiseData, AdvertiseData, AdvertiseCallback)","android.bluetooth.le.BluetoothLeAdvertiser.totalBytes(android.bluetooth.le.AdvertiseData, boolean)"
"android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings, AdvertiseData, AdvertiseData, AdvertiseCallback)","java.util.Map.containsKey(android.bluetooth.le.AdvertiseCallback)"
"android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings, AdvertiseData, AdvertiseData, AdvertiseCallback)","android.bluetooth.BluetoothAdapter.isPeripheralModeSupported()"
"android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings, AdvertiseData, AdvertiseData, AdvertiseCallback)","android.bluetooth.le.BluetoothLeAdvertiser.postStartFailure(android.bluetooth.le.AdvertiseCallback, int)"
"android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(AdvertiseSettings, AdvertiseData, AdvertiseData, AdvertiseCallback)","android.bluetooth.le.AdvertiseSettings.isConnectable()"
"android.widget.CalendarView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.CalendarView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.CalendarView.parseDate(String, Calendar)","java.util.Calendar.setTime(java.util.Date)"
"android.widget.CalendarView.parseDate(String, Calendar)","java.text.DateFormat.parse(java.lang.String)"
"android.widget.CalendarView.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.CalendarView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.CalendarView.setCurrentLocale(Locale)","java.util.Locale.equals(java.util.Locale)"
"android.preference.PreferenceFragment.getPreferenceScreen()","android.preference.PreferenceManager.getPreferenceScreen()"
"android.preference.PreferenceFragment.onPreferenceTreeClick(PreferenceScreen, Preference)","android.preference.PreferenceFragment.OnPreferenceStartFragmentCallback.onPreferenceStartFragment(android.preference.PreferenceFragment, android.preference.Preference)"
"android.preference.PreferenceFragment.onPreferenceTreeClick(PreferenceScreen, Preference)","android.preference.Preference.getFragment()"
"android.preference.PreferenceFragment.onPreferenceTreeClick(PreferenceScreen, Preference)","android.app.Fragment.getActivity()"
"android.preference.PreferenceFragment.bindPreferences()","android.preference.PreferenceFragment.getPreferenceScreen()"
"android.preference.PreferenceFragment.bindPreferences()","android.preference.PreferenceFragment.onBindPreferences()"
"android.preference.PreferenceFragment.onStart()","android.app.Fragment.onStart()"
"android.preference.PreferenceFragment.onStart()","android.preference.PreferenceManager.setOnPreferenceTreeClickListener(android.preference.PreferenceFragment)"
"android.preference.PreferenceFragment.postBindPreferences()","android.os.Handler.hasMessages(int)"
"android.preference.PreferenceFragment.postBindPreferences()","android.os.Message.sendToTarget()"
"android.preference.PreferenceFragment.postBindPreferences()","android.os.Handler.obtainMessage(int)"
"android.preference.PreferenceFragment.onActivityCreated(Bundle)","android.preference.PreferenceFragment.bindPreferences()"
"android.preference.PreferenceFragment.onActivityCreated(Bundle)","android.os.Bundle.getBundle(java.lang.String)"
"android.preference.PreferenceFragment.onActivityCreated(Bundle)","android.preference.PreferenceFragment.getPreferenceScreen()"
"android.preference.PreferenceFragment.onActivityCreated(Bundle)","android.app.Fragment.onActivityCreated(android.os.Bundle)"
"android.preference.PreferenceFragment.addPreferencesFromIntent(Intent)","android.preference.PreferenceFragment.setPreferenceScreen(android.preference.PreferenceScreen)"
"android.preference.PreferenceFragment.addPreferencesFromIntent(Intent)","android.preference.PreferenceManager.inflateFromIntent(android.content.Intent, android.preference.PreferenceScreen)"
"android.preference.PreferenceFragment.addPreferencesFromIntent(Intent)","android.preference.PreferenceFragment.requirePreferenceManager()"
"android.preference.PreferenceFragment.addPreferencesFromIntent(Intent)","android.preference.PreferenceFragment.getPreferenceScreen()"
"android.preference.PreferenceFragment.addPreferencesFromResource(int)","android.preference.PreferenceFragment.setPreferenceScreen(android.preference.PreferenceScreen)"
"android.preference.PreferenceFragment.addPreferencesFromResource(int)","android.preference.PreferenceManager.inflateFromResource(android.app.Activity, int, android.preference.PreferenceScreen)"
"android.preference.PreferenceFragment.addPreferencesFromResource(int)","android.preference.PreferenceFragment.requirePreferenceManager()"
"android.preference.PreferenceFragment.addPreferencesFromResource(int)","android.preference.PreferenceFragment.getPreferenceScreen()"
"android.preference.PreferenceFragment.addPreferencesFromResource(int)","android.app.Fragment.getActivity()"
"android.preference.PreferenceFragment.onKey(View, int, KeyEvent)","android.preference.Preference.onKey(android.view.View, int, android.view.KeyEvent)"
"android.preference.PreferenceFragment.onDestroy()","android.app.Fragment.onDestroy()"
"android.preference.PreferenceFragment.onDestroy()","android.preference.PreferenceManager.dispatchActivityDestroy()"
"android.preference.PreferenceFragment.onSaveInstanceState(Bundle)","android.preference.PreferenceFragment.getPreferenceScreen()"
"android.preference.PreferenceFragment.onSaveInstanceState(Bundle)","android.app.Fragment.onSaveInstanceState(android.os.Bundle)"
"android.preference.PreferenceFragment.onSaveInstanceState(Bundle)","android.os.Bundle.putBundle(java.lang.String, android.os.Bundle)"
"android.preference.PreferenceFragment.getListView()","android.preference.PreferenceFragment.ensureList()"
"android.preference.PreferenceFragment.findPreference(CharSequence)","android.preference.PreferenceManager.findPreference(java.lang.CharSequence)"
"android.preference.PreferenceFragment.handleMessage(Message)","android.preference.PreferenceFragment.bindPreferences()"
"android.preference.PreferenceFragment.ensureList()","android.app.Fragment.getView()"
"android.preference.PreferenceFragment.ensureList()","android.os.Handler.post(java.lang.Runnable)"
"android.preference.PreferenceFragment.hasListView()","android.app.Fragment.getView()"
"android.preference.PreferenceFragment.onDestroyView()","android.os.Handler.removeCallbacks(java.lang.Runnable)"
"android.preference.PreferenceFragment.onDestroyView()","android.os.Handler.removeMessages(int)"
"android.preference.PreferenceFragment.onDestroyView()","android.app.Fragment.onDestroyView()"
"android.preference.PreferenceFragment.setPreferenceScreen(PreferenceScreen)","android.preference.PreferenceFragment.postBindPreferences()"
"android.preference.PreferenceFragment.setPreferenceScreen(PreferenceScreen)","android.preference.PreferenceManager.setPreferences(android.preference.PreferenceScreen)"
"android.preference.PreferenceFragment.setPreferenceScreen(PreferenceScreen)","android.preference.PreferenceFragment.onUnbindPreferences()"
"android.preference.PreferenceFragment.onActivityResult(int, int, Intent)","android.app.Fragment.onActivityResult(int, int, android.content.Intent)"
"android.preference.PreferenceFragment.onActivityResult(int, int, Intent)","android.preference.PreferenceManager.dispatchActivityResult(int, int, android.content.Intent)"
"android.preference.PreferenceFragment.onCreateView(LayoutInflater, ViewGroup, Bundle)","android.content.res.TypedArray.recycle()"
"android.preference.PreferenceFragment.onStop()","android.preference.PreferenceManager.dispatchActivityStop()"
"android.preference.PreferenceFragment.onStop()","android.app.Fragment.onStop()"
"android.preference.PreferenceFragment.onStop()","android.preference.PreferenceManager.setOnPreferenceTreeClickListener(null)"
"android.preference.PreferenceFragment.onCreate(Bundle)","android.preference.PreferenceManager.setFragment(android.preference.PreferenceFragment)"
"android.preference.PreferenceFragment.onCreate(Bundle)","android.app.Fragment.onCreate(android.os.Bundle)"
"android.preference.PreferenceFragment.onCreate(Bundle)","android.app.Fragment.getActivity()"
"com.android.internal.widget.AbsActionBarView.isOverflowReserved()","android.widget.ActionMenuPresenter.isOverflowReserved()"
"com.android.internal.widget.AbsActionBarView.animateToVisibility(int)","android.animation.ObjectAnimator.start()"
"com.android.internal.widget.AbsActionBarView.animateToVisibility(int)","android.animation.Animator.cancel()"
"com.android.internal.widget.AbsActionBarView.animateToVisibility(int)","android.animation.ValueAnimator.setInterpolator(android.animation.TimeInterpolator)"
"com.android.internal.widget.AbsActionBarView.animateToVisibility(int)","android.animation.AnimatorSet.Builder.with(android.animation.ObjectAnimator)"
"com.android.internal.widget.AbsActionBarView.animateToVisibility(int)","android.animation.Animator.addListener(com.android.internal.widget.AbsActionBarView.VisibilityAnimListener)"
"com.android.internal.widget.AbsActionBarView.animateToVisibility(int)","android.animation.ObjectAnimator.setDuration(int)"
"com.android.internal.widget.AbsActionBarView.animateToVisibility(int)","com.android.internal.widget.AbsActionBarView.VisibilityAnimListener.withFinalVisibility(int)"
"com.android.internal.widget.AbsActionBarView.animateToVisibility(int)","android.animation.AnimatorSet.play(android.animation.ObjectAnimator)"
"com.android.internal.widget.AbsActionBarView.animateToVisibility(int)","android.animation.AnimatorSet.start()"
"com.android.internal.widget.AbsActionBarView.positionChild(View, int, int, int, boolean)","android.view.View.getMeasuredWidth()"
"com.android.internal.widget.AbsActionBarView.positionChild(View, int, int, int, boolean)","android.view.View.getMeasuredHeight()"
"com.android.internal.widget.AbsActionBarView.positionChild(View, int, int, int, boolean)","android.view.View.layout(int, int, int, int)"
"com.android.internal.widget.AbsActionBarView.hideOverflowMenu()","android.widget.ActionMenuPresenter.hideOverflowMenu()"
"com.android.internal.widget.AbsActionBarView.setVisibility(int)","android.animation.Animator.end()"
"com.android.internal.widget.AbsActionBarView.measureChildView(View, int, int, int)","android.view.View.getMeasuredWidth()"
"com.android.internal.widget.AbsActionBarView.measureChildView(View, int, int, int)","android.view.View.measure(int, int)"
"com.android.internal.widget.AbsActionBarView.measureChildView(View, int, int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"com.android.internal.widget.AbsActionBarView.measureChildView(View, int, int, int)","java.lang.Math.max(int, int)"
"com.android.internal.widget.AbsActionBarView.showOverflowMenu()","android.widget.ActionMenuPresenter.showOverflowMenu()"
"com.android.internal.widget.AbsActionBarView.isOverflowMenuShowing()","android.widget.ActionMenuPresenter.isOverflowMenuShowing()"
"com.android.internal.widget.AbsActionBarView.dismissPopupMenus()","android.widget.ActionMenuPresenter.dismissPopupMenus()"
"com.android.internal.widget.AbsActionBarView.isOverflowMenuShowPending()","android.widget.ActionMenuPresenter.isOverflowMenuShowPending()"
"com.android.internal.widget.AbsActionBarView.onConfigurationChanged(Configuration)","android.widget.ActionMenuPresenter.onConfigurationChanged(android.content.res.Configuration)"
"com.android.internal.widget.AbsActionBarView.onConfigurationChanged(Configuration)","android.content.res.TypedArray.recycle()"
"com.android.internal.view.BaseSurfaceHolder.setType(int)","com.android.internal.view.BaseSurfaceHolder.onUpdateSurface()"
"com.android.internal.view.BaseSurfaceHolder.addCallback(Callback)","java.util.ArrayList.add(android.view.SurfaceHolder.Callback)"
"com.android.internal.view.BaseSurfaceHolder.addCallback(Callback)","java.util.ArrayList.contains(android.view.SurfaceHolder.Callback)"
"com.android.internal.view.BaseSurfaceHolder.getCallbacks()","java.util.ArrayList.size()"
"com.android.internal.view.BaseSurfaceHolder.getCallbacks()","java.util.ArrayList.toArray(android.view.SurfaceHolder.Callback[])"
"com.android.internal.view.BaseSurfaceHolder.unlockCanvasAndPost(Canvas)","java.util.concurrent.locks.ReentrantLock.unlock()"
"com.android.internal.view.BaseSurfaceHolder.setFormat(int)","com.android.internal.view.BaseSurfaceHolder.onUpdateSurface()"
"com.android.internal.view.BaseSurfaceHolder.setSizeFromLayout()","com.android.internal.view.BaseSurfaceHolder.onRelayoutContainer()"
"com.android.internal.view.BaseSurfaceHolder.setFixedSize(int, int)","com.android.internal.view.BaseSurfaceHolder.onRelayoutContainer()"
"com.android.internal.view.BaseSurfaceHolder.internalLockCanvas(Rect)","java.lang.Thread.sleep(long)"
"com.android.internal.view.BaseSurfaceHolder.internalLockCanvas(Rect)","java.util.concurrent.locks.ReentrantLock.lock()"
"com.android.internal.view.BaseSurfaceHolder.internalLockCanvas(Rect)","android.os.SystemClock.uptimeMillis()"
"com.android.internal.view.BaseSurfaceHolder.internalLockCanvas(Rect)","com.android.internal.view.BaseSurfaceHolder.onAllowLockCanvas()"
"com.android.internal.view.BaseSurfaceHolder.internalLockCanvas(Rect)","java.util.concurrent.locks.ReentrantLock.unlock()"
"com.android.internal.view.BaseSurfaceHolder.removeCallback(Callback)","java.util.ArrayList.remove(android.view.SurfaceHolder.Callback)"
"android.widget.CheckedTextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setChecked(boolean)"
"android.widget.CheckedTextView.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.CheckedTextView.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.CheckedTextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setCheckable(boolean)"
"android.widget.CheckedTextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setChecked(boolean)"
"android.widget.CheckedTextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.CheckedTextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.os.RemoteCallbackList.kill()","android.os.IInterface.asBinder()"
"android.os.RemoteCallbackList.kill()","android.util.ArrayMap.valueAt(int)"
"android.os.RemoteCallbackList.kill()","android.os.IBinder.unlinkToDeath(android.os.RemoteCallbackList.Callback, int)"
"android.os.RemoteCallbackList.kill()","android.util.ArrayMap.clear()"
"android.os.RemoteCallbackList.kill()","android.util.ArrayMap.size()"
"android.os.RemoteCallbackList.onCallbackDied(E, Object)","android.os.RemoteCallbackList.onCallbackDied(E)"
"android.os.RemoteCallbackList.getRegisteredCallbackCount()","android.util.ArrayMap.size()"
"android.os.RemoteCallbackList.register(E)","android.os.RemoteCallbackList.register(E, null)"
"android.os.RemoteCallbackList.register(E, Object)","android.os.IInterface.asBinder()"
"android.os.RemoteCallbackList.register(E, Object)","android.util.ArrayMap.put(android.os.IBinder, android.os.RemoteCallbackList.Callback)"
"android.os.RemoteCallbackList.register(E, Object)","android.os.IBinder.linkToDeath(android.os.RemoteCallbackList.Callback, int)"
"android.os.RemoteCallbackList.unregister(E)","android.os.IInterface.asBinder()"
"android.os.RemoteCallbackList.unregister(E)","android.util.ArrayMap.remove(android.os.IBinder)"
"android.os.RemoteCallbackList.unregister(E)","android.os.IBinder.unlinkToDeath(android.os.RemoteCallbackList.Callback, int)"
"android.os.RemoteCallbackList.beginBroadcast()","android.util.ArrayMap.valueAt(int)"
"android.os.RemoteCallbackList.beginBroadcast()","android.util.ArrayMap.size()"
"android.os.RemoteCallbackList.binderDied()","android.os.IInterface.asBinder()"
"android.os.RemoteCallbackList.binderDied()","android.util.ArrayMap.remove(android.os.IBinder)"
"android.os.RemoteCallbackList.binderDied()","android.os.RemoteCallbackList.onCallbackDied(E, java.lang.Object)"
"android.hardware.GeomagneticField.computeGeocentricCoordinates(float, float, float)","java.lang.Math.atan(float)"
"android.hardware.GeomagneticField.computeGeocentricCoordinates(float, float, float)","java.lang.Math.cos(double)"
"android.hardware.GeomagneticField.computeGeocentricCoordinates(float, float, float)","java.lang.Math.sin(double)"
"android.hardware.GeomagneticField.computeGeocentricCoordinates(float, float, float)","java.lang.Math.sqrt(float)"
"android.hardware.GeomagneticField.computeGeocentricCoordinates(float, float, float)","java.lang.Math.toRadians(float)"
"android.hardware.GeomagneticField.getInclination()","java.lang.Math.toDegrees(double)"
"android.hardware.GeomagneticField.getInclination()","android.hardware.GeomagneticField.getHorizontalStrength()"
"android.hardware.GeomagneticField.getInclination()","java.lang.Math.atan2(float, float)"
"android.hardware.GeomagneticField.computeSchmidtQuasiNormFactors(int)","java.lang.Math.sqrt(float)"
"android.hardware.GeomagneticField.getHorizontalStrength()","java.lang.Math.sqrt(float)"
"android.hardware.GeomagneticField.getFieldStrength()","java.lang.Math.sqrt(float)"
"android.hardware.GeomagneticField.getDeclination()","java.lang.Math.toDegrees(double)"
"android.hardware.GeomagneticField.getDeclination()","java.lang.Math.atan2(float, float)"
"android.widget.ActionMenuView.dismissPopupMenus()","android.widget.ActionMenuPresenter.dismissPopupMenus()"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","android.view.View.getVisibility()"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","android.view.View.getLayoutParams()"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","android.view.View.setPadding(int, int, int, int)"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","android.view.View.getMeasuredHeight()"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","android.view.View.measure(int, int)"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","java.lang.Long.bitCount(long)"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","java.lang.Math.max(int, int)"
"android.widget.ActionMenuView.onMeasureExactFormat(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.widget.ActionMenuView.onLayout(boolean, int, int, int, int)","android.view.View.getVisibility()"
"android.widget.ActionMenuView.onLayout(boolean, int, int, int, int)","android.view.View.getLayoutParams()"
"android.widget.ActionMenuView.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredWidth()"
"android.widget.ActionMenuView.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredHeight()"
"android.widget.ActionMenuView.onLayout(boolean, int, int, int, int)","java.lang.Math.max(int, int)"
"android.widget.ActionMenuView.onLayout(boolean, int, int, int, int)","android.view.View.layout(int, int, int, int)"
"android.widget.ActionMenuView.hasDividerBeforeChildAt(int)","android.widget.ActionMenuView.ActionMenuChildView.needsDividerAfter()"
"android.widget.ActionMenuView.hasDividerBeforeChildAt(int)","android.widget.ActionMenuView.ActionMenuChildView.needsDividerBefore()"
"android.widget.ActionMenuView.hideOverflowMenu()","android.widget.ActionMenuPresenter.hideOverflowMenu()"
"android.widget.ActionMenuView.onMenuModeChange(MenuBuilder)","com.android.internal.view.menu.MenuBuilder.Callback.onMenuModeChange(com.android.internal.view.menu.MenuBuilder)"
"android.widget.ActionMenuView.showOverflowMenu()","android.widget.ActionMenuPresenter.showOverflowMenu()"
"android.widget.ActionMenuView.invokeItem(MenuItemImpl)","com.android.internal.view.menu.MenuBuilder.performItemAction(com.android.internal.view.menu.MenuItemImpl, int)"
"android.widget.ActionMenuView.getMenu()","com.android.internal.view.menu.MenuBuilder.setCallback(android.widget.ActionMenuView.MenuBuilderCallback)"
"android.widget.ActionMenuView.getMenu()","com.android.internal.view.menu.MenuBuilder.addMenuPresenter(android.widget.ActionMenuPresenter, android.content.Context)"
"android.widget.ActionMenuView.getMenu()","android.widget.ActionMenuPresenter.setMenuView(android.widget.ActionMenuView)"
"android.widget.ActionMenuView.getMenu()","android.widget.ActionMenuPresenter.setReserveOverflow(boolean)"
"android.widget.ActionMenuView.measureChildForCells(View, int, int, int, int)","android.view.View.getLayoutParams()"
"android.widget.ActionMenuView.measureChildForCells(View, int, int, int, int)","android.view.View.getMeasuredWidth()"
"android.widget.ActionMenuView.measureChildForCells(View, int, int, int, int)","android.view.View.measure(int, int)"
"android.widget.ActionMenuView.measureChildForCells(View, int, int, int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.ActionMenuView.measureChildForCells(View, int, int, int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.ActionMenuView.measureChildForCells(View, int, int, int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.widget.ActionMenuView.setPresenter(ActionMenuPresenter)","android.widget.ActionMenuPresenter.setMenuView(android.widget.ActionMenuView)"
"android.widget.ActionMenuView.onConfigurationChanged(Configuration)","android.widget.ActionMenuPresenter.isOverflowMenuShowing()"
"android.widget.ActionMenuView.onConfigurationChanged(Configuration)","android.widget.ActionMenuPresenter.showOverflowMenu()"
"android.widget.ActionMenuView.onConfigurationChanged(Configuration)","android.widget.ActionMenuPresenter.hideOverflowMenu()"
"android.widget.ActionMenuView.onConfigurationChanged(Configuration)","android.widget.ActionMenuPresenter.updateMenuView(boolean)"
"android.widget.ActionMenuView.setExpandedActionViewsExclusive(boolean)","android.widget.ActionMenuPresenter.setExpandedActionViewsExclusive(boolean)"
"android.widget.ActionMenuView.onMenuItemSelected(MenuBuilder, MenuItem)","android.widget.ActionMenuView.OnMenuItemClickListener.onMenuItemClick(android.view.MenuItem)"
"android.widget.ActionMenuView.isOverflowMenuShowing()","android.widget.ActionMenuPresenter.isOverflowMenuShowing()"
"android.widget.ActionMenuView.onMeasure(int, int)","android.view.View.getLayoutParams()"
"android.widget.ActionMenuView.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.ActionMenuView.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.widget.ActionMenuView.onMeasure(int, int)","com.android.internal.view.menu.MenuBuilder.onItemsChanged(boolean)"
"android.widget.ActionMenuView.isOverflowMenuShowPending()","android.widget.ActionMenuPresenter.isOverflowMenuShowPending()"
"android.net.RssiCurve.writeToParcel(Parcel, int)","android.os.Parcel.writeByteArray(byte[])"
"android.net.RssiCurve.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.RssiCurve.equals(Object)","java.util.Arrays.equals(byte[], byte[])"
"android.net.RssiCurve.equals(Object)","java.lang.Object.getClass()"
"android.net.RssiCurve.lookupScore(int)","android.net.RssiCurve.lookupScore(int, boolean)"
"android.net.RssiCurve.hashCode()","java.util.Objects.hash(int, int, byte[], int)"
"android.net.RssiCurve.toString()","java.lang.StringBuilder.append(int)"
"android.net.RssiCurve.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.net.RssiCurve.toString()","java.lang.StringBuilder.toString()"
"android.net.RssiCurve.toString()","java.lang.StringBuilder.append(byte)"
"android.service.notification.StatusBarNotification.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.service.notification.StatusBarNotification.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.service.notification.StatusBarNotification.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.service.notification.StatusBarNotification.writeToParcel(Parcel, int)","android.app.Notification.writeToParcel(android.os.Parcel, int)"
"android.service.notification.StatusBarNotification.writeToParcel(Parcel, int)","android.os.UserHandle.writeToParcel(android.os.Parcel, int)"
"android.service.notification.StatusBarNotification.groupKey()","android.app.Notification.getGroup()"
"android.service.notification.StatusBarNotification.groupKey()","android.service.notification.StatusBarNotification.getNotification()"
"android.service.notification.StatusBarNotification.groupKey()","android.os.UserHandle.getIdentifier()"
"android.service.notification.StatusBarNotification.groupKey()","android.app.Notification.getSortKey()"
"android.service.notification.StatusBarNotification.getUserId()","android.os.UserHandle.getIdentifier()"
"android.service.notification.StatusBarNotification.clone()","android.app.Notification.clone()"
"android.service.notification.StatusBarNotification.cloneLight()","android.app.Notification.cloneInto(android.app.Notification, boolean)"
"android.service.notification.StatusBarNotification.toString()","java.lang.String.format(java.lang.String, java.lang.String, android.os.UserHandle, int, java.lang.String, int, java.lang.String, android.app.Notification)"
"android.service.notification.StatusBarNotification.key()","android.os.UserHandle.getIdentifier()"
"android.app.WallpaperManager.getCurrentWallpaperLocked(Context)","android.os.ParcelFileDescriptor.close()"
"android.app.WallpaperManager.getInstance(Context)","android.content.Context.getSystemService(java.lang.String)"
"android.app.WallpaperManager.setResource(int)","android.content.Context.getResources()"
"android.app.WallpaperManager.setResource(int)","android.app.WallpaperManager.setWallpaper(java.io.InputStream, java.io.FileOutputStream)"
"android.app.WallpaperManager.setResource(int)","android.content.res.Resources.openRawResource(int)"
"android.app.WallpaperManager.setResource(int)","java.io.FileOutputStream.close()"
"android.app.WallpaperManager.peekFastDrawable()","android.app.WallpaperManager.Globals.peekWallpaperBitmap(android.content.Context, boolean)"
"android.app.WallpaperManager.setStream(InputStream)","android.app.WallpaperManager.setWallpaper(java.io.InputStream, java.io.FileOutputStream)"
"android.app.WallpaperManager.setStream(InputStream)","java.io.FileOutputStream.close()"
"android.app.WallpaperManager.clear()","android.app.WallpaperManager.openDefaultWallpaper(android.content.Context)"
"android.app.WallpaperManager.clear()","android.app.WallpaperManager.setStream(java.io.InputStream)"
"android.app.WallpaperManager.suggestDesiredDimensions(int, int)","android.os.SystemProperties.getInt(java.lang.String, int)"
"android.app.WallpaperManager.setBitmap(Bitmap)","java.io.FileOutputStream.close()"
"android.app.WallpaperManager.setWallpaper(InputStream, FileOutputStream)","java.io.InputStream.read(byte[])"
"android.app.WallpaperManager.setWallpaper(InputStream, FileOutputStream)","java.io.FileOutputStream.write(byte[], int, int)"
"android.app.WallpaperManager.peekWallpaperBitmap(Context, boolean)","android.app.WallpaperManager.Globals.getDefaultWallpaperLocked(android.content.Context)"
"android.app.WallpaperManager.peekWallpaperBitmap(Context, boolean)","android.app.WallpaperManager.Globals.getCurrentWallpaperLocked(android.content.Context)"
"android.app.WallpaperManager.getDefaultWallpaperComponent(Context)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.app.WallpaperManager.getDefaultWallpaperComponent(Context)","android.content.ComponentName.unflattenFromString(java.lang.String)"
"android.app.WallpaperManager.getDefaultWallpaperComponent(Context)","android.os.SystemProperties.get(java.lang.String)"
"android.app.WallpaperManager.getBuiltInDrawable(int, int, boolean, float, float)","android.app.WallpaperManager.openDefaultWallpaper(android.content.Context)"
"android.app.WallpaperManager.getBuiltInDrawable(int, int, boolean, float, float)","android.app.WallpaperManager.getMaxCropRect(int, int, int, int, float, float)"
"android.app.WallpaperManager.getBuiltInDrawable(int, int, boolean, float, float)","android.content.Context.getResources()"
"android.app.WallpaperManager.getBuiltInDrawable(int, int, boolean, float, float)","java.lang.Math.max(int, float)"
"android.app.WallpaperManager.getBuiltInDrawable(int, int, boolean, float, float)","java.lang.Math.min(int, float)"
"android.app.WallpaperManager.getBuiltInDrawable(int, int, boolean, float, float)","java.lang.Math.min(int, int)"
"android.app.WallpaperManager.getBuiltInDrawable()","android.app.WallpaperManager.getBuiltInDrawable(int, int, boolean, int, int)"
"android.app.WallpaperManager.hasResourceWallpaper(int)","android.content.Context.getResources()"
"android.app.WallpaperManager.hasResourceWallpaper(int)","android.content.res.Resources.getResourceName(int)"
"android.app.WallpaperManager.getDefaultWallpaperLocked(Context)","java.io.InputStream.close()"
"android.app.WallpaperManager.getDefaultWallpaperLocked(Context)","android.app.WallpaperManager.openDefaultWallpaper(android.content.Context)"
"android.app.WallpaperManager.getCropAndSetWallpaperIntent(Uri)","android.content.Context.getPackageManager()"
"android.app.WallpaperManager.getCropAndSetWallpaperIntent(Uri)","android.content.pm.PackageManager.resolveActivity(android.content.Intent, int)"
"android.app.WallpaperManager.getCropAndSetWallpaperIntent(Uri)","java.util.List.size()"
"android.app.WallpaperManager.getCropAndSetWallpaperIntent(Uri)","java.lang.String.equals(java.lang.String)"
"android.app.WallpaperManager.getCropAndSetWallpaperIntent(Uri)","android.content.Intent.setPackage(java.lang.String)"
"android.app.WallpaperManager.getCropAndSetWallpaperIntent(Uri)","android.net.Uri.getScheme()"
"android.app.WallpaperManager.getCropAndSetWallpaperIntent(Uri)","android.content.Intent.addCategory(java.lang.String)"
"android.app.WallpaperManager.getCropAndSetWallpaperIntent(Uri)","android.content.Intent.addFlags(int)"
"android.app.WallpaperManager.getCropAndSetWallpaperIntent(Uri)","android.content.pm.PackageManager.queryIntentActivities(android.content.Intent, int)"
"android.app.WallpaperManager.openDefaultWallpaper(Context)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.app.WallpaperManager.openDefaultWallpaper(Context)","android.os.SystemProperties.get(java.lang.String)"
"android.app.WallpaperManager.openDefaultWallpaper(Context)","java.io.File.exists()"
"android.app.WallpaperManager.peekDrawable()","android.app.WallpaperManager.Globals.peekWallpaperBitmap(android.content.Context, boolean)"
"android.app.WallpaperManager.peekDrawable()","android.content.Context.getResources()"
"android.app.WallpaperManager.forgetLoadedWallpaper()","android.app.WallpaperManager.Globals.forgetLoadedWallpaper()"
"android.app.WallpaperManager.getDrawable()","android.app.WallpaperManager.Globals.peekWallpaperBitmap(android.content.Context, boolean)"
"android.app.WallpaperManager.getDrawable()","android.content.Context.getResources()"
"android.app.WallpaperManager.getBitmap()","android.app.WallpaperManager.Globals.peekWallpaperBitmap(android.content.Context, boolean)"
"android.app.WallpaperManager.getFastDrawable()","android.app.WallpaperManager.Globals.peekWallpaperBitmap(android.content.Context, boolean)"
"android.database.sqlite.SQLiteOpenHelper.setWriteAheadLoggingEnabled(boolean)","android.database.sqlite.SQLiteDatabase.isOpen()"
"android.database.sqlite.SQLiteOpenHelper.setWriteAheadLoggingEnabled(boolean)","android.database.sqlite.SQLiteDatabase.isReadOnly()"
"android.database.sqlite.SQLiteOpenHelper.setWriteAheadLoggingEnabled(boolean)","android.database.sqlite.SQLiteDatabase.disableWriteAheadLogging()"
"android.database.sqlite.SQLiteOpenHelper.setWriteAheadLoggingEnabled(boolean)","android.database.sqlite.SQLiteDatabase.enableWriteAheadLogging()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.isOpen()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteOpenHelper.onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.content.Context.getDatabasePath(java.lang.String)"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.setTransactionSuccessful()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.getVersion()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","java.io.File.getPath()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.content.Context.openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase.CursorFactory, android.database.DatabaseErrorHandler)"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.endTransaction()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteOpenHelper.onOpen(android.database.sqlite.SQLiteDatabase)"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.beginTransaction()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.isReadOnly()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.reopenReadWrite()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.create(null)"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.setVersion(int)"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteOpenHelper.onCreate(android.database.sqlite.SQLiteDatabase)"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteOpenHelper.onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteClosable.close()"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteOpenHelper.onConfigure(android.database.sqlite.SQLiteDatabase)"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)","android.database.sqlite.SQLiteDatabase.openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase.CursorFactory, int, android.database.DatabaseErrorHandler)"
"android.database.sqlite.SQLiteOpenHelper.getReadableDatabase()","android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)"
"android.database.sqlite.SQLiteOpenHelper.close()","android.database.sqlite.SQLiteDatabase.isOpen()"
"android.database.sqlite.SQLiteOpenHelper.close()","android.database.sqlite.SQLiteClosable.close()"
"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase()","android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean)"
"android.speech.tts.SynthesisRequest.getText()","java.lang.CharSequence.toString()"
"com.android.internal.widget.ActionBarContainer.isCollapsed(View)","android.view.View.getVisibility()"
"com.android.internal.widget.ActionBarContainer.isCollapsed(View)","android.view.View.getMeasuredHeight()"
"com.android.internal.widget.ActionBarContainer.onLayout(boolean, int, int, int, int)","android.view.View.getVisibility()"
"com.android.internal.widget.ActionBarContainer.onLayout(boolean, int, int, int, int)","android.view.View.getLayoutParams()"
"com.android.internal.widget.ActionBarContainer.onLayout(boolean, int, int, int, int)","android.view.View.getMeasuredHeight()"
"com.android.internal.widget.ActionBarContainer.onLayout(boolean, int, int, int, int)","android.view.View.layout(int, int, int, int)"
"com.android.internal.widget.ActionBarContainer.onMeasure(int, int)","android.view.View.getVisibility()"
"com.android.internal.widget.ActionBarContainer.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"com.android.internal.widget.ActionBarContainer.onMeasure(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"com.android.internal.widget.ActionBarContainer.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"com.android.internal.widget.ActionBarContainer.onMeasure(int, int)","java.lang.Math.min(int, int)"
"com.android.internal.widget.ActionBarContainer.getMeasuredHeightWithMargins(View)","android.view.View.getLayoutParams()"
"com.android.internal.widget.ActionBarContainer.getMeasuredHeightWithMargins(View)","android.view.View.getMeasuredHeight()"
"android.widget.ViewFlipper.onReceive(Context, Intent)","android.content.Intent.getAction()"
"android.widget.ViewFlipper.onReceive(Context, Intent)","java.lang.String.equals(java.lang.String)"
"android.widget.ViewFlipper.updateRunning(boolean)","android.os.Handler.removeMessages(int)"
"android.widget.ViewFlipper.updateRunning(boolean)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.widget.ViewFlipper.updateRunning(boolean)","android.os.Handler.obtainMessage(int)"
"android.widget.ViewFlipper.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.ViewFlipper.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.ViewFlipper.onAttachedToWindow()","android.content.IntentFilter.addAction(java.lang.String)"
"android.widget.ViewFlipper.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.ViewFlipper.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.ViewFlipper.handleMessage(Message)","android.os.Handler.sendMessageDelayed(android.os.Message, int)"
"android.widget.ViewFlipper.handleMessage(Message)","android.os.Handler.obtainMessage(int)"
"android.util.MathUtils.pow(float, float)","java.lang.Math.pow(float, float)"
"android.util.MathUtils.asin(float)","java.lang.Math.asin(float)"
"android.util.MathUtils.randomSeed(long)","java.util.Random.setSeed(long)"
"android.util.MathUtils.random(float, float)","java.util.Random.nextFloat()"
"android.util.MathUtils.random(int, int)","java.util.Random.nextFloat()"
"android.util.MathUtils.acos(float)","java.lang.Math.acos(float)"
"android.util.MathUtils.random(int)","java.util.Random.nextFloat()"
"android.util.MathUtils.exp(float)","java.lang.Math.exp(float)"
"android.util.MathUtils.atan2(float, float)","java.lang.Math.atan2(float, float)"
"android.util.MathUtils.random(float)","java.util.Random.nextFloat()"
"android.util.MathUtils.tan(float)","java.lang.Math.tan(float)"
"android.util.MathUtils.mag(float, float, float)","java.lang.Math.sqrt(float)"
"android.util.MathUtils.dist(float, float, float, float, float, float)","java.lang.Math.sqrt(float)"
"android.util.MathUtils.log(float)","java.lang.Math.log(float)"
"android.util.MathUtils.mag(float, float)","java.lang.Math.sqrt(float)"
"android.util.MathUtils.atan(float)","java.lang.Math.atan(float)"
"android.util.MathUtils.dist(float, float, float, float)","java.lang.Math.sqrt(float)"
"com.android.internal.app.IntentForwarderActivity.getManagedProfile()","android.content.pm.UserInfo.isManagedProfile()"
"com.android.internal.app.IntentForwarderActivity.getManagedProfile()","android.app.Activity.getSystemService(java.lang.String)"
"com.android.internal.app.IntentForwarderActivity.getManagedProfile()","android.os.UserManager.getProfiles(int)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","java.lang.String.equals(java.lang.String)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.Intent.getAction()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.Intent.setContentUserHint(int)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.app.Activity.getActivityToken()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.app.Activity.finish()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.app.Activity.startActivityAsCaller(android.content.Intent, null, int)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.widget.Toast.makeText(com.android.internal.app.IntentForwarderActivity, java.lang.String, int)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.ComponentName.getClassName()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","java.lang.Class.getName()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.pm.PackageManager.resolveActivityAsUser(android.content.Intent, int, int)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.app.Activity.getIntent()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.Context.getString(int)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.Intent.setComponent(null)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.app.IActivityManager.getLaunchedFromPackage(android.os.IBinder)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.ContextWrapper.getUserId()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.Intent.getParcelableExtra(java.lang.String)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.Intent.getComponent()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.Intent.setPackage(null)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.widget.Toast.show()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.ContextWrapper.getPackageManager()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.app.ActivityManagerNative.getDefault()"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","com.android.internal.app.IntentForwarderActivity.canForward(android.content.Intent, int)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.app.IActivityManager.getLaunchedFromUid(android.os.IBinder)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","android.content.Intent.addFlags(int)"
"com.android.internal.app.IntentForwarderActivity.onCreate(Bundle)","com.android.internal.app.IntentForwarderActivity.getManagedProfile()"
"com.android.internal.app.IntentForwarderActivity.canForward(Intent, int)","android.content.Intent.hasExtra(java.lang.String)"
"com.android.internal.app.IntentForwarderActivity.canForward(Intent, int)","android.content.Intent.getSelector()"
"com.android.internal.app.IntentForwarderActivity.canForward(Intent, int)","android.content.Intent.getParcelableExtra(java.lang.String)"
"com.android.internal.app.IntentForwarderActivity.canForward(Intent, int)","android.content.ContextWrapper.getContentResolver()"
"com.android.internal.app.IntentForwarderActivity.canForward(Intent, int)","android.app.AppGlobals.getPackageManager()"
"com.android.internal.app.IntentForwarderActivity.canForward(Intent, int)","java.lang.String.equals(java.lang.String)"
"com.android.internal.app.IntentForwarderActivity.canForward(Intent, int)","android.content.Intent.getAction()"
"com.android.internal.app.IntentForwarderActivity.canForward(Intent, int)","android.content.Intent.resolveTypeIfNeeded(android.content.ContentResolver)"
"android.hardware.camera2.marshal.impl.MarshalQueryableSize.unmarshal(ByteBuffer)","java.nio.ByteBuffer.getInt()"
"android.hardware.camera2.marshal.impl.MarshalQueryableSize.marshal(Size, ByteBuffer)","java.nio.ByteBuffer.putInt(int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableSize.marshal(Size, ByteBuffer)","android.util.Size.getWidth()"
"android.hardware.camera2.marshal.impl.MarshalQueryableSize.marshal(Size, ByteBuffer)","android.util.Size.getHeight()"
"android.hardware.camera2.marshal.impl.MarshalQueryableSize.isTypeMappingSupported(TypeReference, int)","java.lang.Object.equals(java.lang.reflect.Type)"
"android.hardware.camera2.marshal.impl.MarshalQueryableSize.isTypeMappingSupported(TypeReference, int)","android.hardware.camera2.utils.TypeReference.getType()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAf(CameraMetadataNative, Rect, ZoomData, Camera.Parameters)","android.hardware.camera2.legacy.LegacyResultMapper.convertLegacyAfMode(java.lang.String)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAf(CameraMetadataNative, Rect, ZoomData, Camera.Parameters)","android.hardware.Camera.Parameters.getMaxNumFocusAreas()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAf(CameraMetadataNative, Rect, ZoomData, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAf(CameraMetadataNative, Rect, ZoomData, Camera.Parameters)","android.hardware.Camera.Parameters.getFocusMode()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAf(CameraMetadataNative, Rect, ZoomData, Camera.Parameters)","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAf(CameraMetadataNative, Rect, ZoomData, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<android.hardware.camera2.params.MeteringRectangle[]>, android.hardware.camera2.params.MeteringRectangle[])"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.legacy.LegacyResultMapper.convertLegacyAwbMode(java.lang.String)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.isAutoWhiteBalanceLockSupported()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Boolean>, boolean)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getWhiteBalance()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAwb(CameraMetadataNative, Camera.Parameters)","android.hardware.Camera.Parameters.getAutoWhiteBalanceLock()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","java.lang.String.equals(java.lang.String)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyResultMapper.mapScaler(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.legacy.ParameterUtils.ZoomData, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Integer>, java.lang.Integer)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getColorEffect()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getJpegQuality()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyMetadataMapper.convertEffectModeFromLegacy(java.lang.String)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.Camera.Parameters.isVideoStabilizationSupported()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getSceneMode()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getJpegThumbnailQuality()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.CaptureRequest.get(android.hardware.camera2.CaptureRequest.Key<java.lang.Integer>)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getVideoStabilization()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getFocalLength()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyMetadataMapper.convertSceneModeFromLegacy(java.lang.String)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Byte>, java.lang.Byte)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getFocusMode()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.utils.ParamsUtils.getOrDefault(android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureRequest.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.legacy.ParameterUtils.convertSize(android.hardware.Camera.Size)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Byte>, byte)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.CameraCharacteristics.get(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Byte>)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.Camera.Parameters.getJpegThumbnailSize()"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<android.util.Size>, android.util.Size)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyResultMapper.mapAwb(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Float>, float)"
"android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(LegacyRequest)","android.hardware.camera2.legacy.LegacyRequestMapper.filterSupportedCaptureIntent(int)"
"android.hardware.camera2.legacy.LegacyResultMapper.getMeteringRectangles(Rect, ZoomData, List, String)","java.util.List.toArray(android.hardware.camera2.params.MeteringRectangle[])"
"android.hardware.camera2.legacy.LegacyResultMapper.getMeteringRectangles(Rect, ZoomData, List, String)","java.util.List.add(android.hardware.camera2.params.MeteringRectangle)"
"android.hardware.camera2.legacy.LegacyResultMapper.getMeteringRectangles(Rect, ZoomData, List, String)","android.hardware.camera2.legacy.ParameterUtils.WeightedRectangle.toMetering()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.Camera.Parameters.getAutoExposureLock()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Boolean>, boolean)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.camera2.CaptureRequest.get(android.hardware.camera2.CaptureRequest.Key<java.lang.Boolean>)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.camera2.legacy.LegacyResultMapper.mapAeAndFlashMode(android.hardware.camera2.impl.CameraMetadataNative, android.hardware.camera2.CameraCharacteristics, android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.Camera.Parameters.getExposureCompensation()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.Camera.Parameters.isAutoExposureLockSupported()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.Camera.Parameters.getMaxNumMeteringAreas()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.Camera.Parameters.get(java.lang.String)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<android.hardware.camera2.params.MeteringRectangle[]>, android.hardware.camera2.params.MeteringRectangle[])"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.camera2.legacy.LegacyMetadataMapper.convertAntiBandingModeOrDefault(java.lang.String)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAe(CameraMetadataNative, CameraCharacteristics, CaptureRequest, Rect, ZoomData, Parameters)","android.hardware.Camera.Parameters.getAntibanding()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAeAndFlashMode(CameraMetadataNative, CameraCharacteristics, Parameters)","android.hardware.Camera.Parameters.getFlashMode()"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAeAndFlashMode(CameraMetadataNative, CameraCharacteristics, Parameters)","android.hardware.camera2.CameraCharacteristics.get(android.hardware.camera2.CameraCharacteristics.Key<java.lang.Boolean>)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAeAndFlashMode(CameraMetadataNative, CameraCharacteristics, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Integer>, int)"
"android.hardware.camera2.legacy.LegacyResultMapper.mapAeAndFlashMode(CameraMetadataNative, CameraCharacteristics, Parameters)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Integer>, java.lang.Integer)"
"android.hardware.camera2.legacy.LegacyResultMapper.cachedConvertResultMetadata(LegacyRequest, long)","android.hardware.Camera.Parameters.same(android.hardware.Camera.Parameters)"
"android.hardware.camera2.legacy.LegacyResultMapper.cachedConvertResultMetadata(LegacyRequest, long)","android.hardware.camera2.legacy.LegacyResultMapper.convertResultMetadata(android.hardware.camera2.legacy.LegacyRequest)"
"android.hardware.camera2.legacy.LegacyResultMapper.cachedConvertResultMetadata(LegacyRequest, long)","android.hardware.camera2.impl.CameraMetadataNative.set(android.hardware.camera2.CaptureResult.Key<java.lang.Long>, long)"
"android.hardware.camera2.legacy.LegacyResultMapper.cachedConvertResultMetadata(LegacyRequest, long)","android.hardware.camera2.impl.CameraMetadataNative.dumpToLog()"
"android.widget.TextSwitcher.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.TextSwitcher.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.TextSwitcher.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.TextSwitcher.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"com.android.internal.util.LocalLog.dump(PrintWriter, String, String)","java.util.ArrayList.size()"
"com.android.internal.util.LocalLog.dump(PrintWriter, String, String)","java.io.PrintWriter.println(java.lang.String)"
"com.android.internal.util.LocalLog.dump(PrintWriter, String, String)","java.util.ArrayList.get(int)"
"com.android.internal.util.LocalLog.dump(PrintWriter, String, String)","java.io.PrintWriter.print(java.lang.String)"
"com.android.internal.util.LocalLog.w(String)","java.util.ArrayList.size()"
"com.android.internal.util.LocalLog.w(String)","java.util.ArrayList.add(java.lang.String)"
"com.android.internal.util.LocalLog.w(String)","java.util.ArrayList.remove(int)"
"com.android.internal.app.AlertActivity.cancel()","android.app.Activity.finish()"
"com.android.internal.app.AlertActivity.dismiss()","android.app.Activity.finish()"
"com.android.internal.app.AlertActivity.dismiss()","android.app.Activity.isFinishing()"
"com.android.internal.app.AlertActivity.setupAlert()","com.android.internal.app.AlertController.AlertParams.apply(com.android.internal.app.AlertController)"
"com.android.internal.app.AlertActivity.setupAlert()","com.android.internal.app.AlertController.installContent()"
"com.android.internal.app.AlertActivity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityEvent.setPackageName(java.lang.String)"
"com.android.internal.app.AlertActivity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.app.Activity.getWindow()"
"com.android.internal.app.AlertActivity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setFullScreen(boolean)"
"com.android.internal.app.AlertActivity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.content.ContextWrapper.getPackageName()"
"com.android.internal.app.AlertActivity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.Window.getAttributes()"
"com.android.internal.app.AlertActivity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"com.android.internal.app.AlertActivity.dispatchPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"com.android.internal.app.AlertActivity.onCreate(Bundle)","android.app.Activity.onCreate(android.os.Bundle)"
"com.android.internal.app.AlertActivity.onCreate(Bundle)","android.app.Activity.getWindow()"
"com.android.internal.app.AlertActivity.onKeyDown(int, KeyEvent)","android.app.Activity.onKeyDown(int, android.view.KeyEvent)"
"com.android.internal.app.AlertActivity.onKeyDown(int, KeyEvent)","com.android.internal.app.AlertController.onKeyDown(int, android.view.KeyEvent)"
"com.android.internal.app.AlertActivity.onKeyUp(int, KeyEvent)","com.android.internal.app.AlertController.onKeyUp(int, android.view.KeyEvent)"
"com.android.internal.app.AlertActivity.onKeyUp(int, KeyEvent)","android.app.Activity.onKeyUp(int, android.view.KeyEvent)"
"android.content.SyncAdapterType.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.content.SyncAdapterType.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.SyncAdapterType.equals(Object)","java.lang.String.equals(java.lang.String)"
"android.content.SyncAdapterType.hashCode()","java.lang.String.hashCode()"
"android.content.pm.KeySet.hashCode()","java.lang.Object.hashCode()"
"android.content.pm.KeySet.createFromParcel(Parcel)","android.content.pm.KeySet.readFromParcel(android.os.Parcel)"
"android.content.pm.KeySet.writeToParcel(Parcel, int)","android.os.Parcel.writeStrongBinder(android.os.IBinder)"
"android.content.pm.KeySet.readFromParcel(Parcel)","android.os.Parcel.readStrongBinder()"
"android.util.LongSparseLongArray.removeAt(int)","java.lang.System.arraycopy(long[], int, long[], int, int)"
"android.util.LongSparseLongArray.append(long, long)","android.util.LongSparseLongArray.put(long, long)"
"android.util.LongSparseLongArray.append(long, long)","com.android.internal.util.GrowingArrayUtils.append(long[], int, long)"
"android.util.LongSparseLongArray.put(long, long)","com.android.internal.util.GrowingArrayUtils.insert(long[], int, int, long)"
"android.util.LongSparseLongArray.put(long, long)","android.util.ContainerHelpers.binarySearch(long[], int, long)"
"android.util.LongSparseLongArray.indexOfKey(long)","android.util.ContainerHelpers.binarySearch(long[], int, long)"
"android.util.LongSparseLongArray.delete(long)","android.util.LongSparseLongArray.removeAt(int)"
"android.util.LongSparseLongArray.delete(long)","android.util.ContainerHelpers.binarySearch(long[], int, long)"
"android.util.LongSparseLongArray.get(long, long)","android.util.ContainerHelpers.binarySearch(long[], int, long)"
"android.util.LongSparseLongArray.get(long)","android.util.LongSparseLongArray.get(long, int)"
"android.util.LongSparseLongArray.clone()","java.lang.Object.clone()"
"android.util.LongSparseLongArray.toString()","android.util.LongSparseLongArray.size()"
"android.util.LongSparseLongArray.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.util.LongSparseLongArray.toString()","android.util.LongSparseLongArray.keyAt(int)"
"android.util.LongSparseLongArray.toString()","java.lang.StringBuilder.toString()"
"android.util.LongSparseLongArray.toString()","java.lang.StringBuilder.append(char)"
"android.util.LongSparseLongArray.toString()","android.util.LongSparseLongArray.valueAt(int)"
"android.util.LongSparseLongArray.toString()","java.lang.StringBuilder.append(long)"
"android.widget.CheckBox.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.CheckBox.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.CheckBox.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.CheckBox.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.AbsSpinner.put(int, View)","android.util.SparseArray.put(int, android.view.View)"
"android.widget.AbsSpinner.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.widget.AbsSpinner.writeToParcel(Parcel, int)","android.view.AbsSavedState.writeToParcel(android.os.Parcel, int)"
"android.widget.AbsSpinner.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.widget.AbsSpinner.get(int)","android.util.SparseArray.get(int)"
"android.widget.AbsSpinner.get(int)","android.util.SparseArray.delete(int)"
"android.widget.AbsSpinner.getChildHeight(View)","android.view.View.getMeasuredHeight()"
"android.widget.AbsSpinner.clear()","android.util.SparseArray.valueAt(int)"
"android.widget.AbsSpinner.clear()","android.util.SparseArray.clear()"
"android.widget.AbsSpinner.clear()","android.util.SparseArray.size()"
"android.widget.AbsSpinner.toString()","java.lang.System.identityHashCode(android.widget.AbsSpinner.SavedState)"
"android.widget.AbsSpinner.toString()","java.lang.Integer.toHexString(int)"
"android.widget.AbsSpinner.pointToPosition(int, int)","android.view.View.getVisibility()"
"android.widget.AbsSpinner.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.AbsSpinner.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.AbsSpinner.onMeasure(int, int)","android.widget.Adapter.getCount()"
"android.widget.AbsSpinner.onMeasure(int, int)","android.view.View.getLayoutParams()"
"android.widget.AbsSpinner.onMeasure(int, int)","android.widget.AbsSpinner.RecycleBin.get(int)"
"android.widget.AbsSpinner.onMeasure(int, int)","android.view.View.setImportantForAccessibility(int)"
"android.widget.AbsSpinner.onMeasure(int, int)","android.view.View.getImportantForAccessibility()"
"android.widget.AbsSpinner.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.AbsSpinner.onMeasure(int, int)","android.widget.AbsSpinner.RecycleBin.put(int, android.view.View)"
"android.widget.AbsSpinner.setAdapter(SpinnerAdapter)","android.widget.Adapter.getCount()"
"android.widget.AbsSpinner.setAdapter(SpinnerAdapter)","android.widget.Adapter.registerDataSetObserver(android.database.DataSetObserver)"
"android.widget.AbsSpinner.setAdapter(SpinnerAdapter)","android.widget.Adapter.unregisterDataSetObserver(android.database.DataSetObserver)"
"android.widget.AbsSpinner.recycleAllViews()","android.widget.AbsSpinner.RecycleBin.put(int, android.view.View)"
"android.widget.AbsSpinner.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.AbsSpinner.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.AbsSpinner.getChildWidth(View)","android.view.View.getMeasuredWidth()"
"android.transition.CircularPropagation.distance(float, float, float, float)","android.util.FloatMath.sqrt(float)"
"android.transition.CircularPropagation.getStartDelay(ViewGroup, Transition, TransitionValues, TransitionValues)","java.lang.Math.round(float)"
"android.transition.CircularPropagation.getStartDelay(ViewGroup, Transition, TransitionValues, TransitionValues)","android.transition.Transition.getDuration()"
"android.transition.CircularPropagation.getStartDelay(ViewGroup, Transition, TransitionValues, TransitionValues)","android.transition.CircularPropagation.distance(int, int, int, int)"
"android.transition.CircularPropagation.getStartDelay(ViewGroup, Transition, TransitionValues, TransitionValues)","android.transition.Transition.getEpicenter()"
"android.transition.CircularPropagation.getStartDelay(ViewGroup, Transition, TransitionValues, TransitionValues)","android.transition.VisibilityPropagation.getViewVisibility(android.transition.TransitionValues)"
"android.transition.CircularPropagation.getStartDelay(ViewGroup, Transition, TransitionValues, TransitionValues)","android.transition.VisibilityPropagation.getViewX(android.transition.TransitionValues)"
"android.transition.CircularPropagation.getStartDelay(ViewGroup, Transition, TransitionValues, TransitionValues)","android.transition.VisibilityPropagation.getViewY(android.transition.TransitionValues)"
"android.text.style.DynamicDrawableSpan.getSize(Paint, CharSequence, int, int, Paint.FontMetricsInt)","android.text.style.DynamicDrawableSpan.getCachedDrawable()"
"android.text.style.DynamicDrawableSpan.getCachedDrawable()","android.text.style.DynamicDrawableSpan.getDrawable()"
"android.text.style.DynamicDrawableSpan.draw(Canvas, CharSequence, int, int, float, int, int, int, Paint)","android.text.style.DynamicDrawableSpan.getCachedDrawable()"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.app.Dialog.takeCancelAndDismissListeners(java.lang.String, android.app.DialogFragment, android.app.DialogFragment)"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.app.Dialog.onRestoreInstanceState(android.os.Bundle)"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.app.Fragment.getView()"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.app.Dialog.setOwnerActivity(android.app.Activity)"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.os.Bundle.getBundle(java.lang.String)"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.view.View.getParent()"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.app.Dialog.setContentView(android.view.View)"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.app.Dialog.setCancelable(boolean)"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.app.Fragment.onActivityCreated(android.os.Bundle)"
"android.app.DialogFragment.onActivityCreated(Bundle)","android.app.Fragment.getActivity()"
"android.app.DialogFragment.onCreate(Bundle)","android.os.BaseBundle.getInt(java.lang.String, int)"
"android.app.DialogFragment.onCreate(Bundle)","android.os.BaseBundle.getBoolean(java.lang.String, boolean)"
"android.app.DialogFragment.onCreate(Bundle)","android.app.Fragment.onCreate(android.os.Bundle)"
"android.app.DialogFragment.dismissInternal(boolean)","android.app.FragmentTransaction.commit()"
"android.app.DialogFragment.dismissInternal(boolean)","android.app.FragmentManager.beginTransaction()"
"android.app.DialogFragment.dismissInternal(boolean)","android.app.FragmentTransaction.remove(android.app.DialogFragment)"
"android.app.DialogFragment.dismissInternal(boolean)","android.app.FragmentTransaction.commitAllowingStateLoss()"
"android.app.DialogFragment.dismissInternal(boolean)","android.app.FragmentManager.popBackStack(int, int)"
"android.app.DialogFragment.dismissInternal(boolean)","android.app.Dialog.dismiss()"
"android.app.DialogFragment.dismissInternal(boolean)","android.app.Fragment.getFragmentManager()"
"android.app.DialogFragment.onStop()","android.app.Fragment.onStop()"
"android.app.DialogFragment.onStop()","android.app.Dialog.hide()"
"android.app.DialogFragment.show(FragmentManager, String)","android.app.FragmentTransaction.commit()"
"android.app.DialogFragment.show(FragmentManager, String)","android.app.FragmentManager.beginTransaction()"
"android.app.DialogFragment.show(FragmentManager, String)","android.app.FragmentTransaction.add(android.app.DialogFragment, java.lang.String)"
"android.app.DialogFragment.dismiss()","android.app.DialogFragment.dismissInternal(boolean)"
"android.app.DialogFragment.onSaveInstanceState(Bundle)","android.os.BaseBundle.putInt(java.lang.String, int)"
"android.app.DialogFragment.onSaveInstanceState(Bundle)","android.os.BaseBundle.putBoolean(java.lang.String, boolean)"
"android.app.DialogFragment.onSaveInstanceState(Bundle)","android.app.Fragment.onSaveInstanceState(android.os.Bundle)"
"android.app.DialogFragment.onSaveInstanceState(Bundle)","android.app.Dialog.onSaveInstanceState()"
"android.app.DialogFragment.onSaveInstanceState(Bundle)","android.os.Bundle.putBundle(java.lang.String, android.os.Bundle)"
"android.app.DialogFragment.setCancelable(boolean)","android.app.Dialog.setCancelable(boolean)"
"android.app.DialogFragment.onAttach(Activity)","android.app.Fragment.onAttach(android.app.Activity)"
"android.app.DialogFragment.onCreateDialog(Bundle)","android.app.DialogFragment.getTheme()"
"android.app.DialogFragment.onCreateDialog(Bundle)","android.app.Fragment.getActivity()"
"android.app.DialogFragment.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(int)"
"android.app.DialogFragment.dump(String, FileDescriptor, PrintWriter, String[])","android.app.Fragment.dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.app.DialogFragment.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(java.lang.String)"
"android.app.DialogFragment.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(int)"
"android.app.DialogFragment.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(android.app.Dialog)"
"android.app.DialogFragment.dump(String, FileDescriptor, PrintWriter, String[])","java.lang.Integer.toHexString(int)"
"android.app.DialogFragment.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(boolean)"
"android.app.DialogFragment.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(boolean)"
"android.app.DialogFragment.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.app.DialogFragment.onDetach()","android.app.Fragment.onDetach()"
"android.app.DialogFragment.onStart()","android.app.Fragment.onStart()"
"android.app.DialogFragment.onStart()","android.app.Dialog.show()"
"android.app.DialogFragment.getLayoutInflater(Bundle)","android.app.DialogFragment.onCreateDialog(android.os.Bundle)"
"android.app.DialogFragment.getLayoutInflater(Bundle)","android.app.Dialog.requestWindowFeature(int)"
"android.app.DialogFragment.getLayoutInflater(Bundle)","android.app.Fragment.getLayoutInflater(android.os.Bundle)"
"android.app.DialogFragment.getLayoutInflater(Bundle)","android.app.Dialog.getContext()"
"android.app.DialogFragment.getLayoutInflater(Bundle)","android.view.Window.addFlags(int)"
"android.app.DialogFragment.getLayoutInflater(Bundle)","android.app.Activity.getSystemService(java.lang.String)"
"android.app.DialogFragment.getLayoutInflater(Bundle)","android.content.Context.getSystemService(java.lang.String)"
"android.app.DialogFragment.getLayoutInflater(Bundle)","android.app.Dialog.getWindow()"
"android.app.DialogFragment.show(FragmentTransaction, String)","android.app.FragmentTransaction.commit()"
"android.app.DialogFragment.show(FragmentTransaction, String)","android.app.FragmentTransaction.add(android.app.DialogFragment, java.lang.String)"
"android.app.DialogFragment.dismissAllowingStateLoss()","android.app.DialogFragment.dismissInternal(boolean)"
"android.app.DialogFragment.onDestroyView()","android.app.Fragment.onDestroyView()"
"android.app.DialogFragment.onDestroyView()","android.app.Dialog.dismiss()"
"android.app.DialogFragment.onDismiss(DialogInterface)","android.app.DialogFragment.dismissInternal(boolean)"
"android.bluetooth.BluetoothOutputStream.write(int)","android.bluetooth.BluetoothSocket.write(byte[], int, int)"
"android.bluetooth.BluetoothOutputStream.write(byte[], int, int)","android.bluetooth.BluetoothSocket.write(byte[], int, int)"
"android.bluetooth.BluetoothOutputStream.flush()","android.bluetooth.BluetoothSocket.flush()"
"android.bluetooth.BluetoothOutputStream.close()","android.bluetooth.BluetoothSocket.close()"
"android.nfc.tech.NdefFormatable.format(NdefMessage)","android.nfc.tech.NdefFormatable.format(android.nfc.NdefMessage, boolean)"
"android.nfc.tech.NdefFormatable.format(NdefMessage, boolean)","android.nfc.Tag.getServiceHandle()"
"android.nfc.tech.NdefFormatable.format(NdefMessage, boolean)","android.nfc.tech.BasicTagTechnology.checkConnected()"
"android.nfc.tech.NdefFormatable.format(NdefMessage, boolean)","android.nfc.Tag.getTagService()"
"android.nfc.tech.NdefFormatable.get(Tag)","android.nfc.Tag.hasTech(int)"
"android.nfc.tech.NdefFormatable.formatReadOnly(NdefMessage)","android.nfc.tech.NdefFormatable.format(android.nfc.NdefMessage, boolean)"
"android.view.WindowManagerImpl.removeView(View)","android.view.WindowManagerGlobal.removeView(android.view.View, boolean)"
"android.view.WindowManagerImpl.addView(View, ViewGroup.LayoutParams)","android.view.WindowManagerGlobal.addView(android.view.View, android.view.ViewGroup.LayoutParams, android.view.Display, android.view.Window)"
"android.view.WindowManagerImpl.addView(View, ViewGroup.LayoutParams)","android.view.WindowManagerImpl.applyDefaultToken(android.view.ViewGroup.LayoutParams)"
"android.view.WindowManagerImpl.removeViewImmediate(View)","android.view.WindowManagerGlobal.removeView(android.view.View, boolean)"
"android.view.WindowManagerImpl.updateViewLayout(View, ViewGroup.LayoutParams)","android.view.WindowManagerImpl.applyDefaultToken(android.view.ViewGroup.LayoutParams)"
"android.view.WindowManagerImpl.updateViewLayout(View, ViewGroup.LayoutParams)","android.view.WindowManagerGlobal.updateViewLayout(android.view.View, android.view.ViewGroup.LayoutParams)"
"android.hardware.camera2.params.HighSpeedVideoConfiguration.hashCode()","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int, int, int, int)"
"android.webkit.WebStorage.getInstance()","android.webkit.WebViewFactory.getProvider()"
"android.webkit.WebStorage.getInstance()","android.webkit.WebViewFactoryProvider.getWebStorage()"
"android.provider.MediaStore.getContentUri(String, long)","android.net.Uri.parse(java.lang.String)"
"android.provider.MediaStore.StoreThumbnail(ContentResolver, Bitmap, long, float, float, int)","java.io.OutputStream.close()"
"android.provider.MediaStore.StoreThumbnail(ContentResolver, Bitmap, long, float, float, int)","android.content.ContentResolver.openOutputStream(android.net.Uri)"
"android.provider.MediaStore.StoreThumbnail(ContentResolver, Bitmap, long, float, float, int)","android.content.ContentValues.put(java.lang.String, int)"
"android.provider.MediaStore.StoreThumbnail(ContentResolver, Bitmap, long, float, float, int)","android.content.ContentResolver.insert(android.net.Uri, android.content.ContentValues)"
"android.provider.MediaStore.getMediaScannerUri()","android.net.Uri.parse(java.lang.String)"
"android.provider.MediaStore.queryMiniThumbnails(ContentResolver, Uri, int, String[])","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, null, java.lang.String)"
"android.provider.MediaStore.getContentUriForPath(String)","java.lang.String.startsWith(java.lang.String)"
"android.provider.MediaStore.getContentUriForPath(String)","android.os.Environment.getExternalStorageDirectory()"
"android.provider.MediaStore.getContentUriForPath(String)","java.io.File.getPath()"
"android.provider.MediaStore.getVersion(Context)","android.content.Context.getContentResolver()"
"android.provider.MediaStore.getVersion(Context)","android.database.Cursor.getString(int)"
"android.provider.MediaStore.getVersion(Context)","android.content.ContentResolver.query(android.net.Uri, null, null, null, null)"
"android.provider.MediaStore.getVersion(Context)","android.database.Cursor.moveToFirst()"
"android.provider.MediaStore.getVersion(Context)","android.database.Cursor.close()"
"android.provider.MediaStore.getVersion(Context)","android.net.Uri.parse(java.lang.String)"
"android.provider.MediaStore.getMtpObjectsUri(String, long)","android.net.Uri.parse(java.lang.String)"
"android.provider.MediaStore.keyFor(String)","java.lang.String.substring(int)"
"android.provider.MediaStore.keyFor(String)","java.lang.String.startsWith(java.lang.String)"
"android.provider.MediaStore.keyFor(String)","java.lang.String.endsWith(java.lang.String)"
"android.provider.MediaStore.keyFor(String)","java.lang.StringBuilder.toString()"
"android.provider.MediaStore.keyFor(String)","android.database.DatabaseUtils.getCollationKey(java.lang.String)"
"android.provider.MediaStore.keyFor(String)","java.lang.String.equals(java.lang.String)"
"android.provider.MediaStore.keyFor(String)","java.lang.String.lastIndexOf(char)"
"android.provider.MediaStore.keyFor(String)","java.lang.String.toLowerCase()"
"android.provider.MediaStore.keyFor(String)","java.lang.String.charAt(int)"
"android.provider.MediaStore.keyFor(String)","java.lang.String.trim()"
"android.provider.MediaStore.keyFor(String)","java.lang.String.replaceAll(java.lang.String, java.lang.String)"
"android.provider.MediaStore.keyFor(String)","java.lang.String.substring(int, int)"
"android.provider.MediaStore.keyFor(String)","java.lang.StringBuilder.append(char)"
"android.provider.MediaStore.keyFor(String)","java.lang.String.length()"
"android.provider.MediaStore.query(ContentResolver, Uri, String[], String, String[], String)","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)"
"android.provider.MediaStore.getMtpReferencesUri(String, long)","android.net.Uri.parse(java.lang.String)"
"android.provider.MediaStore.queryMiniThumbnail(ContentResolver, long, int, String[])","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, null, null)"
"android.provider.MediaStore.insertImage(ContentResolver, String, String, String)","java.io.FileInputStream.close()"
"android.provider.MediaStore.cancelThumbnailRequest(ContentResolver, long, Uri, long)","java.lang.String.valueOf(long)"
"android.provider.MediaStore.cancelThumbnailRequest(ContentResolver, long, Uri, long)","android.net.Uri.Builder.build()"
"android.provider.MediaStore.cancelThumbnailRequest(ContentResolver, long, Uri, long)","android.net.Uri.Builder.appendQueryParameter(java.lang.String, java.lang.String)"
"android.provider.MediaStore.cancelThumbnailRequest(ContentResolver, long, Uri, long)","android.database.Cursor.close()"
"android.provider.MediaStore.cancelThumbnailRequest(ContentResolver, long, Uri, long)","android.net.Uri.buildUpon()"
"android.provider.MediaStore.cancelThumbnailRequest(ContentResolver, long, Uri, long)","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], null, null, null)"
"android.provider.MediaStore.moveItem(ContentResolver, long, int, int)","android.provider.MediaStore.Audio.Playlists.Members.getContentUri(java.lang.String, long)"
"android.provider.MediaStore.moveItem(ContentResolver, long, int, int)","android.content.ContentValues.put(java.lang.String, int)"
"android.provider.MediaStore.moveItem(ContentResolver, long, int, int)","android.net.Uri.Builder.build()"
"android.provider.MediaStore.moveItem(ContentResolver, long, int, int)","java.lang.String.valueOf(int)"
"android.provider.MediaStore.moveItem(ContentResolver, long, int, int)","android.net.Uri.Builder.appendQueryParameter(java.lang.String, java.lang.String)"
"android.provider.MediaStore.moveItem(ContentResolver, long, int, int)","android.net.Uri.buildUpon()"
"android.provider.MediaStore.moveItem(ContentResolver, long, int, int)","android.content.ContentResolver.update(android.net.Uri, android.content.ContentValues, null, null)"
"android.provider.MediaStore.moveItem(ContentResolver, long, int, int)","android.net.Uri.Builder.appendEncodedPath(java.lang.String)"
"android.provider.MediaStore.query(ContentResolver, Uri, String[])","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], null, null, java.lang.String)"
"android.provider.MediaStore.insertImage(ContentResolver, Bitmap, String, String)","java.io.OutputStream.close()"
"android.provider.MediaStore.insertImage(ContentResolver, Bitmap, String, String)","android.content.ContentUris.parseId(android.net.Uri)"
"android.provider.MediaStore.insertImage(ContentResolver, Bitmap, String, String)","android.content.ContentResolver.openOutputStream(android.net.Uri)"
"android.provider.MediaStore.insertImage(ContentResolver, Bitmap, String, String)","android.content.ContentValues.put(java.lang.String, java.lang.String)"
"android.provider.MediaStore.insertImage(ContentResolver, Bitmap, String, String)","android.content.ContentResolver.delete(android.net.Uri, null, null)"
"android.provider.MediaStore.insertImage(ContentResolver, Bitmap, String, String)","android.content.ContentResolver.insert(android.net.Uri, android.content.ContentValues)"
"android.provider.MediaStore.insertImage(ContentResolver, Bitmap, String, String)","android.net.Uri.toString()"
"android.provider.MediaStore.cancelThumbnailRequest(ContentResolver, long, long)","android.provider.MediaStore.InternalThumbnails.cancelThumbnailRequest(android.content.ContentResolver, long, android.net.Uri, long)"
"android.provider.MediaStore.getContentUri(String)","android.net.Uri.parse(java.lang.String)"
"android.provider.MediaStore.getContentUriForAudioId(String, int)","android.net.Uri.parse(java.lang.String)"
"android.provider.MediaStore.getMtpObjectsUri(String)","android.net.Uri.parse(java.lang.String)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","java.util.Arrays.fill(byte[], byte)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.database.Cursor.getString(int)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, null, null)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.database.Cursor.moveToFirst()"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.net.Uri.Builder.build()"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.net.Uri.Builder.appendQueryParameter(java.lang.String, java.lang.String)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.net.Uri.buildUpon()"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], null, null, null)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.net.Uri.parse(java.lang.String)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.net.Uri.Builder.toString()"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.net.Uri.Builder.appendPath(java.lang.String)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","java.lang.String.replaceFirst(java.lang.String, java.lang.String)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","java.lang.String.valueOf(long)"
"android.provider.MediaStore.getThumbnail(ContentResolver, long, long, int, BitmapFactory.Options, Uri, boolean)","android.database.Cursor.close()"
"android.provider.MediaStore.getBitmap(ContentResolver, Uri)","java.io.InputStream.close()"
"android.provider.MediaStore.getBitmap(ContentResolver, Uri)","android.content.ContentResolver.openInputStream(android.net.Uri)"
"android.provider.MediaStore.cancelThumbnailRequest(ContentResolver, long)","android.provider.MediaStore.InternalThumbnails.cancelThumbnailRequest(android.content.ContentResolver, long, android.net.Uri, int)"
"android.provider.MediaStore.query(ContentResolver, Uri, String[], String, String)","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, null, java.lang.String)"
"android.provider.MediaStore.getMiniThumbFromFile(Cursor, Uri, ContentResolver, BitmapFactory.Options)","android.content.ContentUris.withAppendedId(android.net.Uri, long)"
"android.provider.MediaStore.getMiniThumbFromFile(Cursor, Uri, ContentResolver, BitmapFactory.Options)","android.database.Cursor.getLong(int)"
"android.provider.MediaStore.getMiniThumbFromFile(Cursor, Uri, ContentResolver, BitmapFactory.Options)","android.database.Cursor.getString(int)"
"android.provider.MediaStore.getMiniThumbFromFile(Cursor, Uri, ContentResolver, BitmapFactory.Options)","android.content.ContentResolver.openFileDescriptor(android.net.Uri, java.lang.String)"
"android.provider.MediaStore.getMiniThumbFromFile(Cursor, Uri, ContentResolver, BitmapFactory.Options)","android.os.ParcelFileDescriptor.close()"
"android.alsa.LineTokenizer.nextToken(String, int)","java.lang.String.charAt(int)"
"android.alsa.LineTokenizer.nextToken(String, int)","java.lang.String.indexOf(char)"
"android.alsa.LineTokenizer.nextToken(String, int)","java.lang.String.length()"
"android.alsa.LineTokenizer.nextDelimiter(String, int)","java.lang.String.charAt(int)"
"android.alsa.LineTokenizer.nextDelimiter(String, int)","java.lang.String.indexOf(char)"
"android.alsa.LineTokenizer.nextDelimiter(String, int)","java.lang.String.length()"
"android.util.PrintWriterPrinter.println(String)","java.io.PrintWriter.println(java.lang.String)"
"android.content.SyncAdaptersCache.parseServiceAttributes(Resources, String, AttributeSet)","android.content.res.TypedArray.recycle()"
"android.content.SyncAdaptersCache.createFromXml(XmlPullParser)","android.content.SyncAdapterType.newKey(java.lang.String, java.lang.String)"
"android.hardware.hdmi.HdmiRecordSources.toByteArray(byte[], int)","android.hardware.hdmi.HdmiRecordSources.ChannelIdentifier.toByteArray(byte[], int)"
"android.hardware.hdmi.HdmiRecordSources.threeFieldsToSixBytes(int, int, int, byte[], int)","android.hardware.hdmi.HdmiRecordSources.shortToByteArray(short, byte[], int)"
"android.hardware.hdmi.HdmiRecordSources.extraParamToByteArray(byte[], int)","android.hardware.hdmi.HdmiRecordSources.shortToByteArray(short, byte[], int)"
"android.hardware.hdmi.HdmiRecordSources.toByteArray(boolean, byte[], int)","android.hardware.hdmi.HdmiRecordSources.RecordSource.extraParamToByteArray(byte[], int)"
"android.hardware.hdmi.HdmiRecordSources.toByteArray(boolean, byte[], int)","android.hardware.hdmi.HdmiRecordSources.RecordSource.getDataSize(boolean)"
"android.hardware.location.ActivityRecognitionHardware.fetchSupportedActivities()","android.hardware.location.ActivityRecognitionHardware.nativeGetSupportedActivities()"
"android.hardware.location.ActivityRecognitionHardware.isActivitySupported(String)","android.hardware.location.ActivityRecognitionHardware.checkPermissions()"
"android.hardware.location.ActivityRecognitionHardware.isActivitySupported(String)","android.hardware.location.ActivityRecognitionHardware.getActivityType(java.lang.String)"
"android.hardware.location.ActivityRecognitionHardware.enableActivityEvent(String, int, long)","android.hardware.location.ActivityRecognitionHardware.checkPermissions()"
"android.hardware.location.ActivityRecognitionHardware.enableActivityEvent(String, int, long)","android.hardware.location.ActivityRecognitionHardware.getActivityType(java.lang.String)"
"android.hardware.location.ActivityRecognitionHardware.enableActivityEvent(String, int, long)","android.hardware.location.ActivityRecognitionHardware.nativeEnableActivityEvent(int, int, long)"
"android.hardware.location.ActivityRecognitionHardware.getActivityType(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.hardware.location.ActivityRecognitionHardware.getActivityType(String)","java.lang.String.equals(java.lang.String)"
"android.hardware.location.ActivityRecognitionHardware.onActivityChanged(Event[])","android.hardware.location.ActivityRecognitionHardware.getActivityName(int)"
"android.hardware.location.ActivityRecognitionHardware.disableActivityEvent(String, int)","android.hardware.location.ActivityRecognitionHardware.checkPermissions()"
"android.hardware.location.ActivityRecognitionHardware.disableActivityEvent(String, int)","android.hardware.location.ActivityRecognitionHardware.nativeDisableActivityEvent(int, int)"
"android.hardware.location.ActivityRecognitionHardware.disableActivityEvent(String, int)","android.hardware.location.ActivityRecognitionHardware.getActivityType(java.lang.String)"
"android.hardware.location.ActivityRecognitionHardware.getSupportedActivities()","android.hardware.location.ActivityRecognitionHardware.checkPermissions()"
"android.hardware.location.ActivityRecognitionHardware.flush()","android.hardware.location.ActivityRecognitionHardware.checkPermissions()"
"android.hardware.location.ActivityRecognitionHardware.flush()","android.hardware.location.ActivityRecognitionHardware.nativeFlush()"
"android.hardware.location.ActivityRecognitionHardware.checkPermissions()","java.lang.String.format(java.lang.String, java.lang.String)"
"android.hardware.location.ActivityRecognitionHardware.checkPermissions()","android.content.Context.enforceCallingPermission(java.lang.String, java.lang.String)"
"android.hardware.location.ActivityRecognitionHardware.isSupported()","android.hardware.location.ActivityRecognitionHardware.nativeIsSupported()"
"android.hardware.location.ActivityRecognitionHardware.unregisterSink(IActivityRecognitionHardwareSink)","android.hardware.location.ActivityRecognitionHardware.checkPermissions()"
"android.hardware.location.ActivityRecognitionHardware.registerSink(IActivityRecognitionHardwareSink)","android.hardware.location.ActivityRecognitionHardware.checkPermissions()"
"android.hardware.location.ActivityRecognitionHardware.getActivityName(int)","java.lang.String.format(java.lang.String, int, int)"
"android.view.InputDevice.writeToParcel(Parcel, int)","java.util.ArrayList.size()"
"android.view.InputDevice.writeToParcel(Parcel, int)","android.view.KeyCharacterMap.writeToParcel(android.os.Parcel, int)"
"android.view.InputDevice.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.view.InputDevice.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.view.InputDevice.writeToParcel(Parcel, int)","android.os.Parcel.writeFloat(float)"
"android.view.InputDevice.writeToParcel(Parcel, int)","java.util.ArrayList.get(int)"
"android.view.InputDevice.isFromSource(int)","android.view.InputDevice.MotionRange.getSource()"
"android.view.InputDevice.getMotionRange(int)","java.util.ArrayList.size()"
"android.view.InputDevice.getMotionRange(int)","java.util.ArrayList.get(int)"
"android.view.InputDevice.getMotionRange(int, int)","java.util.ArrayList.size()"
"android.view.InputDevice.getMotionRange(int, int)","java.util.ArrayList.get(int)"
"android.view.InputDevice.getDeviceIds()","android.hardware.input.InputManager.getInstance()"
"android.view.InputDevice.getDeviceIds()","android.hardware.input.InputManager.getInputDeviceIds()"
"android.view.InputDevice.hasKeys(int[])","android.hardware.input.InputManager.deviceHasKeys(int, int[])"
"android.view.InputDevice.hasKeys(int[])","android.hardware.input.InputManager.getInstance()"
"android.view.InputDevice.appendSourceDescriptionIfApplicable(StringBuilder, int, String)","java.lang.StringBuilder.append(java.lang.String)"
"android.view.InputDevice.addMotionRange(int, int, float, float, float, float, float)","java.util.ArrayList.add(android.view.InputDevice.MotionRange)"
"android.view.InputDevice.getDevice(int)","android.hardware.input.InputManager.getInstance()"
"android.view.InputDevice.getDevice(int)","android.hardware.input.InputManager.getInputDevice(int)"
"android.view.InputDevice.toString()","java.util.ArrayList.size()"
"android.view.InputDevice.toString()","android.view.InputDevice.appendSourceDescriptionIfApplicable(java.lang.StringBuilder, int, java.lang.String)"
"android.view.InputDevice.toString()","java.lang.StringBuilder.append(int)"
"android.view.InputDevice.toString()","java.lang.StringBuilder.append(boolean)"
"android.view.InputDevice.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.view.InputDevice.toString()","java.lang.StringBuilder.toString()"
"android.view.InputDevice.toString()","java.lang.Integer.toHexString(int)"
"android.view.InputDevice.toString()","android.view.MotionEvent.axisToString(int)"
"android.view.InputDevice.toString()","java.util.ArrayList.get(int)"
"android.view.InputDevice.toString()","java.lang.StringBuilder.append(float)"
"android.view.InputDevice.getVibrator()","android.hardware.input.InputManager.getInputDeviceVibrator(int)"
"android.view.InputDevice.getVibrator()","android.hardware.input.InputManager.getInstance()"
"android.view.InputDevice.getVibrator()","android.os.NullVibrator.getInstance()"
"android.content.CursorLoader.onCanceled(Cursor)","android.database.Cursor.isClosed()"
"android.content.CursorLoader.onCanceled(Cursor)","android.database.Cursor.close()"
"android.content.CursorLoader.loadInBackground()","android.content.Loader.getContext()"
"android.content.CursorLoader.loadInBackground()","android.database.Cursor.registerContentObserver(android.content.Loader.ForceLoadContentObserver)"
"android.content.CursorLoader.loadInBackground()","android.content.Context.getContentResolver()"
"android.content.CursorLoader.loadInBackground()","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)"
"android.content.CursorLoader.loadInBackground()","android.database.Cursor.getCount()"
"android.content.CursorLoader.loadInBackground()","android.database.Cursor.close()"
"android.content.CursorLoader.loadInBackground()","android.content.AsyncTaskLoader.isLoadInBackgroundCanceled()"
"android.content.CursorLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(android.database.Cursor)"
"android.content.CursorLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.util.Arrays.toString(java.lang.String[])"
"android.content.CursorLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(java.lang.String)"
"android.content.CursorLoader.dump(String, FileDescriptor, PrintWriter, String[])","android.content.AsyncTaskLoader.dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.content.CursorLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(android.net.Uri)"
"android.content.CursorLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(boolean)"
"android.content.CursorLoader.dump(String, FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.content.CursorLoader.cancelLoadInBackground()","android.os.CancellationSignal.cancel()"
"android.content.CursorLoader.cancelLoadInBackground()","android.content.AsyncTaskLoader.cancelLoadInBackground()"
"android.content.CursorLoader.onStartLoading()","android.content.Loader.takeContentChanged()"
"android.content.CursorLoader.onStartLoading()","android.content.CursorLoader.deliverResult(android.database.Cursor)"
"android.content.CursorLoader.onStartLoading()","android.content.Loader.forceLoad()"
"android.content.CursorLoader.onStopLoading()","android.content.Loader.cancelLoad()"
"android.content.CursorLoader.onReset()","android.content.CursorLoader.onStopLoading()"
"android.content.CursorLoader.onReset()","android.database.Cursor.isClosed()"
"android.content.CursorLoader.onReset()","android.content.Loader.onReset()"
"android.content.CursorLoader.onReset()","android.database.Cursor.close()"
"android.content.CursorLoader.deliverResult(Cursor)","android.database.Cursor.isClosed()"
"android.content.CursorLoader.deliverResult(Cursor)","android.content.Loader.isReset()"
"android.content.CursorLoader.deliverResult(Cursor)","android.content.Loader.isStarted()"
"android.content.CursorLoader.deliverResult(Cursor)","android.database.Cursor.close()"
"android.content.CursorLoader.deliverResult(Cursor)","android.content.Loader.deliverResult(android.database.Cursor)"
"android.animation.ObjectAnimator.ofFloat(T, Property, float[])","android.animation.ObjectAnimator.setFloatValues(float[])"
"android.animation.ObjectAnimator.ofFloat(T, Property, Property, Path)","android.animation.PathKeyframes.createXFloatKeyframes()"
"android.animation.ObjectAnimator.ofFloat(T, Property, Property, Path)","android.animation.ObjectAnimator.ofPropertyValuesHolder(T, android.animation.PropertyValuesHolder, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.ofFloat(T, Property, Property, Path)","android.animation.PathKeyframes.createYFloatKeyframes()"
"android.animation.ObjectAnimator.ofFloat(T, Property, Property, Path)","android.animation.PropertyValuesHolder.ofKeyframes(android.util.Property<T, java.lang.Float>, android.animation.Keyframes.FloatKeyframes)"
"android.animation.ObjectAnimator.ofInt(T, Property, Property, Path)","android.animation.PathKeyframes.createYIntKeyframes()"
"android.animation.ObjectAnimator.ofInt(T, Property, Property, Path)","android.animation.ObjectAnimator.ofPropertyValuesHolder(T, android.animation.PropertyValuesHolder, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.ofInt(T, Property, Property, Path)","android.animation.PropertyValuesHolder.ofKeyframes(android.util.Property<T, java.lang.Integer>, android.animation.Keyframes.IntKeyframes)"
"android.animation.ObjectAnimator.ofInt(T, Property, Property, Path)","android.animation.PathKeyframes.createXIntKeyframes()"
"android.animation.ObjectAnimator.ofObject(Object, String, TypeConverter, Path)","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.ofMultiInt(Object, String, int[][])","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.getNameForTrace()","android.animation.ObjectAnimator.getPropertyName()"
"android.animation.ObjectAnimator.ofInt(T, Property, int[])","android.animation.ObjectAnimator.setIntValues(int[])"
"android.animation.ObjectAnimator.ofInt(Object, String, String, Path)","android.animation.PathKeyframes.createYIntKeyframes()"
"android.animation.ObjectAnimator.ofInt(Object, String, String, Path)","android.animation.PropertyValuesHolder.ofKeyframes(java.lang.String, android.animation.Keyframes.IntKeyframes)"
"android.animation.ObjectAnimator.ofInt(Object, String, String, Path)","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.ofInt(Object, String, String, Path)","android.animation.PathKeyframes.createXIntKeyframes()"
"android.animation.ObjectAnimator.setIntValues(int[])","android.animation.PropertyValuesHolder.ofInt(java.lang.String, int[])"
"android.animation.ObjectAnimator.setIntValues(int[])","android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.setIntValues(int[])","android.animation.ValueAnimator.setIntValues(int[])"
"android.animation.ObjectAnimator.setIntValues(int[])","android.animation.PropertyValuesHolder.ofInt(android.util.Property, int[])"
"android.animation.ObjectAnimator.clone()","android.animation.ValueAnimator.clone()"
"android.animation.ObjectAnimator.ofFloat(Object, String, float[])","android.animation.ObjectAnimator.setFloatValues(float[])"
"android.animation.ObjectAnimator.ofObject(T, Property, TypeEvaluator, V[])","android.animation.ObjectAnimator.setObjectValues(V[])"
"android.animation.ObjectAnimator.ofObject(T, Property, TypeEvaluator, V[])","android.animation.ValueAnimator.setEvaluator(android.animation.TypeEvaluator<V>)"
"android.animation.ObjectAnimator.ofObject(Object, String, TypeEvaluator, Object[])","android.animation.ObjectAnimator.setObjectValues(java.lang.Object[])"
"android.animation.ObjectAnimator.ofObject(Object, String, TypeEvaluator, Object[])","android.animation.ValueAnimator.setEvaluator(android.animation.TypeEvaluator)"
"android.animation.ObjectAnimator.initAnimation()","android.animation.PropertyValuesHolder.setupSetterAndGetter(java.lang.Object)"
"android.animation.ObjectAnimator.initAnimation()","android.animation.ValueAnimator.initAnimation()"
"android.animation.ObjectAnimator.initAnimation()","android.animation.ObjectAnimator.getTarget()"
"android.animation.ObjectAnimator.getPropertyName()","android.util.Property.getName()"
"android.animation.ObjectAnimator.getPropertyName()","android.animation.PropertyValuesHolder.getPropertyName()"
"android.animation.ObjectAnimator.setTarget(Object)","android.animation.ValueAnimator.isStarted()"
"android.animation.ObjectAnimator.setTarget(Object)","android.animation.ObjectAnimator.getTarget()"
"android.animation.ObjectAnimator.setTarget(Object)","android.animation.ValueAnimator.cancel()"
"android.animation.ObjectAnimator.ofObject(T, Property, TypeConverter, TypeEvaluator, V[])","android.animation.ObjectAnimator.ofPropertyValuesHolder(T, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, T[])","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.setupEndValues()","android.animation.ObjectAnimator.initAnimation()"
"android.animation.ObjectAnimator.setupEndValues()","android.animation.PropertyValuesHolder.setupEndValue(java.lang.Object)"
"android.animation.ObjectAnimator.setupEndValues()","android.animation.ObjectAnimator.getTarget()"
"android.animation.ObjectAnimator.ofArgb(Object, String, int[])","android.animation.ArgbEvaluator.getInstance()"
"android.animation.ObjectAnimator.ofArgb(Object, String, int[])","android.animation.ValueAnimator.setEvaluator(android.animation.ArgbEvaluator)"
"android.animation.ObjectAnimator.getTarget()","java.lang.ref.Reference.get()"
"android.animation.ObjectAnimator.setFloatValues(float[])","android.animation.ValueAnimator.setFloatValues(float[])"
"android.animation.ObjectAnimator.setFloatValues(float[])","android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.setFloatValues(float[])","android.animation.PropertyValuesHolder.ofFloat(android.util.Property, float[])"
"android.animation.ObjectAnimator.setFloatValues(float[])","android.animation.PropertyValuesHolder.ofFloat(java.lang.String, float[])"
"android.animation.ObjectAnimator.setObjectValues(Object[])","android.animation.ValueAnimator.setObjectValues(java.lang.Object[])"
"android.animation.ObjectAnimator.setDuration(long)","android.animation.ValueAnimator.setDuration(long)"
"android.animation.ObjectAnimator.ofMultiInt(Object, String, Path)","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.ofMultiFloat(Object, String, float[][])","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.animateValue(float)","android.animation.PropertyValuesHolder.setAnimatedValue(java.lang.Object)"
"android.animation.ObjectAnimator.animateValue(float)","android.animation.ValueAnimator.animateValue(float)"
"android.animation.ObjectAnimator.animateValue(float)","android.animation.ObjectAnimator.getTarget()"
"android.animation.ObjectAnimator.animateValue(float)","android.animation.ValueAnimator.cancel()"
"android.animation.ObjectAnimator.ofObject(T, Property, TypeConverter, Path)","android.animation.ObjectAnimator.ofPropertyValuesHolder(T, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.ofPropertyValuesHolder(Object, PropertyValuesHolder[])","android.animation.ObjectAnimator.setTarget(java.lang.Object)"
"android.animation.ObjectAnimator.ofPropertyValuesHolder(Object, PropertyValuesHolder[])","android.animation.ValueAnimator.setValues(android.animation.PropertyValuesHolder[])"
"android.animation.ObjectAnimator.toString()","java.lang.Object.hashCode()"
"android.animation.ObjectAnimator.toString()","android.animation.PropertyValuesHolder.toString()"
"android.animation.ObjectAnimator.toString()","java.lang.Integer.toHexString(int)"
"android.animation.ObjectAnimator.toString()","android.animation.ObjectAnimator.getTarget()"
"android.animation.ObjectAnimator.start()","android.animation.ObjectAnimator.hasSameTargetAndProperties(android.animation.ObjectAnimator)"
"android.animation.ObjectAnimator.start()","java.util.ArrayList.size()"
"android.animation.ObjectAnimator.start()","android.animation.ValueAnimator.start()"
"android.animation.ObjectAnimator.start()","java.lang.ThreadLocal.get()"
"android.animation.ObjectAnimator.start()","java.util.ArrayList.get(int)"
"android.animation.ObjectAnimator.start()","android.animation.ValueAnimator.cancel()"
"android.animation.ObjectAnimator.hasSameTargetAndProperties(Animator)","java.lang.String.equals(java.lang.String)"
"android.animation.ObjectAnimator.hasSameTargetAndProperties(Animator)","android.animation.ValueAnimator.getValues()"
"android.animation.ObjectAnimator.hasSameTargetAndProperties(Animator)","android.animation.ObjectAnimator.getTarget()"
"android.animation.ObjectAnimator.hasSameTargetAndProperties(Animator)","android.animation.PropertyValuesHolder.getPropertyName()"
"android.animation.ObjectAnimator.ofFloat(Object, String, String, Path)","android.animation.PropertyValuesHolder.ofKeyframes(java.lang.String, android.animation.Keyframes.FloatKeyframes)"
"android.animation.ObjectAnimator.ofFloat(Object, String, String, Path)","android.animation.PathKeyframes.createXFloatKeyframes()"
"android.animation.ObjectAnimator.ofFloat(Object, String, String, Path)","android.animation.PathKeyframes.createYFloatKeyframes()"
"android.animation.ObjectAnimator.ofFloat(Object, String, String, Path)","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.setPropertyName(String)","java.util.HashMap.put(java.lang.String, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.setPropertyName(String)","java.util.HashMap.remove(java.lang.String)"
"android.animation.ObjectAnimator.setPropertyName(String)","android.animation.PropertyValuesHolder.setPropertyName(java.lang.String)"
"android.animation.ObjectAnimator.setPropertyName(String)","android.animation.PropertyValuesHolder.getPropertyName()"
"android.animation.ObjectAnimator.ofMultiInt(Object, String, TypeConverter, TypeEvaluator, T[])","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.ofMultiFloat(Object, String, Path)","android.animation.ObjectAnimator.ofPropertyValuesHolder(java.lang.Object, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.ofInt(Object, String, int[])","android.animation.ObjectAnimator.setIntValues(int[])"
"android.animation.ObjectAnimator.setupStartValues()","android.animation.ObjectAnimator.initAnimation()"
"android.animation.ObjectAnimator.setupStartValues()","android.animation.PropertyValuesHolder.setupStartValue(java.lang.Object)"
"android.animation.ObjectAnimator.setupStartValues()","android.animation.ObjectAnimator.getTarget()"
"android.animation.ObjectAnimator.ofArgb(T, Property, int[])","android.animation.ArgbEvaluator.getInstance()"
"android.animation.ObjectAnimator.ofArgb(T, Property, int[])","android.animation.ValueAnimator.setEvaluator(android.animation.ArgbEvaluator)"
"android.animation.ObjectAnimator.setProperty(Property)","android.util.Property.getName()"
"android.animation.ObjectAnimator.setProperty(Property)","java.util.HashMap.put(java.lang.String, android.animation.PropertyValuesHolder)"
"android.animation.ObjectAnimator.setProperty(Property)","android.animation.PropertyValuesHolder.setProperty(android.util.Property)"
"android.animation.ObjectAnimator.setProperty(Property)","java.util.HashMap.remove(java.lang.String)"
"android.animation.ObjectAnimator.setProperty(Property)","android.animation.PropertyValuesHolder.getPropertyName()"
"android.view.animation.PathInterpolator.parseInterpolatorFromTypeArray(TypedArray)","android.util.PathParser.createPathFromPathData(java.lang.String)"
"android.view.animation.PathInterpolator.parseInterpolatorFromTypeArray(TypedArray)","android.view.animation.PathInterpolator.initQuad(float, float)"
"android.view.animation.PathInterpolator.parseInterpolatorFromTypeArray(TypedArray)","android.view.animation.PathInterpolator.initCubic(float, float, float, float)"
"android.content.pm.ContainerEncryptionParams.isSecretKeyEqual(SecretKey, SecretKey)","java.security.Key.getFormat()"
"android.content.pm.ContainerEncryptionParams.isSecretKeyEqual(SecretKey, SecretKey)","java.util.Arrays.equals(byte[], byte[])"
"android.content.pm.ContainerEncryptionParams.isSecretKeyEqual(SecretKey, SecretKey)","java.security.Key.getEncoded()"
"android.content.pm.ContainerEncryptionParams.isSecretKeyEqual(SecretKey, SecretKey)","java.lang.String.equals(java.lang.String)"
"android.content.pm.ContainerEncryptionParams.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.content.pm.ContainerEncryptionParams.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.content.pm.ContainerEncryptionParams.writeToParcel(Parcel, int)","android.os.Parcel.writeByteArray(byte[])"
"android.content.pm.ContainerEncryptionParams.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.content.pm.ContainerEncryptionParams.writeToParcel(Parcel, int)","javax.crypto.spec.IvParameterSpec.getIV()"
"android.content.pm.ContainerEncryptionParams.writeToParcel(Parcel, int)","android.os.Parcel.writeSerializable(javax.crypto.SecretKey)"
"android.content.pm.ContainerEncryptionParams.equals(Object)","java.util.Arrays.equals(byte[], byte[])"
"android.content.pm.ContainerEncryptionParams.equals(Object)","java.lang.String.equals(java.lang.String)"
"android.content.pm.ContainerEncryptionParams.equals(Object)","android.content.pm.ContainerEncryptionParams.isSecretKeyEqual(javax.crypto.SecretKey, javax.crypto.SecretKey)"
"android.content.pm.ContainerEncryptionParams.equals(Object)","javax.crypto.spec.IvParameterSpec.getIV()"
"android.content.pm.ContainerEncryptionParams.hashCode()","java.lang.String.hashCode()"
"android.content.pm.ContainerEncryptionParams.hashCode()","java.util.Arrays.hashCode(byte[])"
"android.content.pm.ContainerEncryptionParams.hashCode()","java.lang.Object.hashCode()"
"android.content.pm.ContainerEncryptionParams.hashCode()","javax.crypto.spec.IvParameterSpec.getIV()"
"android.content.pm.ContainerEncryptionParams.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.content.pm.ContainerEncryptionParams.toString()","java.lang.StringBuilder.toString()"
"android.content.pm.ContainerEncryptionParams.toString()","java.lang.StringBuilder.append(char)"
"android.content.pm.ContainerEncryptionParams.toString()","java.lang.Object.toString()"
"android.content.pm.ContainerEncryptionParams.toString()","java.lang.StringBuilder.append(long)"
"android.database.ContentObserver.dispatchChange(boolean, Uri, int)","android.os.Handler.post(android.database.ContentObserver.NotificationRunnable)"
"android.database.ContentObserver.dispatchChange(boolean, Uri, int)","android.database.ContentObserver.onChange(boolean, android.net.Uri, int)"
"android.database.ContentObserver.dispatchChange(boolean, Uri)","android.os.UserHandle.getCallingUserId()"
"android.database.ContentObserver.dispatchChange(boolean, Uri)","android.database.ContentObserver.dispatchChange(boolean, android.net.Uri, int)"
"android.database.ContentObserver.run()","android.database.ContentObserver.onChange(boolean, android.net.Uri, int)"
"android.database.ContentObserver.dispatchChange(boolean)","android.database.ContentObserver.dispatchChange(boolean, null)"
"android.database.ContentObserver.onChange(boolean, Uri, int)","android.database.ContentObserver.dispatchChange(boolean, android.net.Uri, int)"
"android.database.ContentObserver.onChange(boolean, Uri)","android.database.ContentObserver.onChange(boolean)"
"android.database.AbstractCursor.moveToLast()","android.database.AbstractCursor.moveToPosition(int)"
"android.database.AbstractCursor.moveToLast()","android.database.AbstractCursor.getCount()"
"android.database.AbstractCursor.getColumnIndexOrThrow(String)","android.database.AbstractCursor.getColumnIndex(java.lang.String)"
"android.database.AbstractCursor.moveToPrevious()","android.database.AbstractCursor.moveToPosition(int)"
"android.database.AbstractCursor.setNotificationUri(ContentResolver, Uri, int)","android.content.ContentResolver.registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver, int)"
"android.database.AbstractCursor.setNotificationUri(ContentResolver, Uri, int)","android.content.ContentResolver.unregisterContentObserver(android.database.ContentObserver)"
"android.database.AbstractCursor.setNotificationUri(ContentResolver, Uri)","android.database.AbstractCursor.setNotificationUri(android.content.ContentResolver, android.net.Uri, int)"
"android.database.AbstractCursor.setNotificationUri(ContentResolver, Uri)","android.os.UserHandle.myUserId()"
"android.database.AbstractCursor.isAfterLast()","android.database.AbstractCursor.getCount()"
"android.database.AbstractCursor.registerDataSetObserver(DataSetObserver)","android.database.Observable.registerObserver(android.database.DataSetObserver)"
"android.database.AbstractCursor.checkPosition()","android.database.AbstractCursor.getCount()"
"android.database.AbstractCursor.isLast()","android.database.AbstractCursor.getCount()"
"android.database.AbstractCursor.getColumnCount()","android.database.AbstractCursor.getColumnNames()"
"android.database.AbstractCursor.deactivate()","android.database.AbstractCursor.onDeactivateOrClose()"
"android.database.AbstractCursor.moveToPosition(int)","java.lang.Long.valueOf(long)"
"android.database.AbstractCursor.moveToPosition(int)","android.database.AbstractCursor.getLong(int)"
"android.database.AbstractCursor.moveToPosition(int)","android.database.AbstractCursor.getCount()"
"android.database.AbstractCursor.moveToPosition(int)","android.database.AbstractCursor.onMove(int, int)"
"android.database.AbstractCursor.copyStringToBuffer(int, CharArrayBuffer)","java.lang.String.getChars(int, int, char[], int)"
"android.database.AbstractCursor.copyStringToBuffer(int, CharArrayBuffer)","android.database.AbstractCursor.getString(int)"
"android.database.AbstractCursor.copyStringToBuffer(int, CharArrayBuffer)","java.lang.String.length()"
"android.database.AbstractCursor.copyStringToBuffer(int, CharArrayBuffer)","java.lang.String.toCharArray()"
"android.database.AbstractCursor.isBeforeFirst()","android.database.AbstractCursor.getCount()"
"android.database.AbstractCursor.moveToFirst()","android.database.AbstractCursor.moveToPosition(int)"
"android.database.AbstractCursor.onChange(boolean)","java.lang.ref.Reference.get()"
"android.database.AbstractCursor.onChange(boolean)","android.database.AbstractCursor.onChange(boolean)"
"android.database.AbstractCursor.close()","android.database.Observable.unregisterAll()"
"android.database.AbstractCursor.close()","android.database.AbstractCursor.onDeactivateOrClose()"
"android.database.AbstractCursor.registerContentObserver(ContentObserver)","android.database.ContentObservable.registerObserver(android.database.ContentObserver)"
"android.database.AbstractCursor.unregisterContentObserver(ContentObserver)","android.database.Observable.unregisterObserver(android.database.ContentObserver)"
"android.database.AbstractCursor.move(int)","android.database.AbstractCursor.moveToPosition(int)"
"android.database.AbstractCursor.requery()","android.database.DataSetObservable.notifyChanged()"
"android.database.AbstractCursor.requery()","android.content.ContentResolver.registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver)"
"android.database.AbstractCursor.getColumnName(int)","android.database.AbstractCursor.getColumnNames()"
"android.database.AbstractCursor.unregisterDataSetObserver(DataSetObserver)","android.database.Observable.unregisterObserver(android.database.DataSetObserver)"
"android.database.AbstractCursor.isFirst()","android.database.AbstractCursor.getCount()"
"android.database.AbstractCursor.getColumnIndex(String)","java.lang.String.substring(int)"
"android.database.AbstractCursor.getColumnIndex(String)","android.database.AbstractCursor.getColumnNames()"
"android.database.AbstractCursor.getColumnIndex(String)","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.database.AbstractCursor.getColumnIndex(String)","android.database.AbstractCursor.getCount()"
"android.database.AbstractCursor.getColumnIndex(String)","java.lang.String.lastIndexOf(char)"
"android.database.AbstractCursor.finalize()","android.content.ContentResolver.unregisterContentObserver(android.database.ContentObserver)"
"android.database.AbstractCursor.finalize()","android.database.AbstractCursor.close()"
"android.database.AbstractCursor.fillWindow(int, CursorWindow)","android.database.DatabaseUtils.cursorFillWindow(android.database.AbstractCursor, int, android.database.CursorWindow)"
"android.database.AbstractCursor.moveToNext()","android.database.AbstractCursor.moveToPosition(int)"
"android.database.AbstractCursor.onDeactivateOrClose()","android.database.DataSetObservable.notifyInvalidated()"
"android.database.AbstractCursor.onDeactivateOrClose()","android.content.ContentResolver.unregisterContentObserver(android.database.ContentObserver)"
"android.app.Presentation.onDisplayRemoved(int)","android.app.Presentation.handleDisplayRemoved()"
"android.app.Presentation.onDisplayRemoved(int)","android.view.Display.getDisplayId()"
"android.app.Presentation.handleDisplayRemoved()","android.app.Dialog.cancel()"
"android.app.Presentation.handleDisplayRemoved()","android.app.Presentation.onDisplayRemoved()"
"android.app.Presentation.createPresentationContext(Context, Display, int)","android.view.ContextThemeWrapper.getSystemService(java.lang.String)"
"android.app.Presentation.createPresentationContext(Context, Display, int)","java.lang.String.equals(java.lang.String)"
"android.app.Presentation.createPresentationContext(Context, Display, int)","android.content.Context.createDisplayContext(android.view.Display)"
"android.app.Presentation.createPresentationContext(Context, Display, int)","android.view.WindowManagerImpl.createPresentationWindowManager(android.view.Display)"
"android.app.Presentation.createPresentationContext(Context, Display, int)","android.content.Context.getSystemService(java.lang.String)"
"android.app.Presentation.getResources()","android.content.Context.getResources()"
"android.app.Presentation.getResources()","android.app.Dialog.getContext()"
"android.app.Presentation.onDisplayChanged(int)","android.view.Display.getDisplayId()"
"android.app.Presentation.onDisplayChanged(int)","android.app.Presentation.handleDisplayChanged()"
"android.app.Presentation.onStart()","android.hardware.display.DisplayManager.registerDisplayListener(android.hardware.display.DisplayManager.DisplayListener, android.os.Handler)"
"android.app.Presentation.onStart()","android.app.Dialog.onStart()"
"android.app.Presentation.onStart()","android.app.Presentation.isConfigurationStillValid()"
"android.app.Presentation.onStart()","android.os.Handler.sendEmptyMessage(int)"
"android.app.Presentation.show()","android.app.Dialog.show()"
"android.app.Presentation.handleMessage(Message)","android.app.Dialog.cancel()"
"android.app.Presentation.isConfigurationStillValid()","android.view.Display.getMetrics(android.util.DisplayMetrics)"
"android.app.Presentation.isConfigurationStillValid()","android.util.DisplayMetrics.equalsPhysical(android.util.DisplayMetrics)"
"android.app.Presentation.isConfigurationStillValid()","android.content.res.Resources.getDisplayMetrics()"
"android.app.Presentation.isConfigurationStillValid()","android.app.Presentation.getResources()"
"android.app.Presentation.onStop()","android.hardware.display.DisplayManager.unregisterDisplayListener(android.hardware.display.DisplayManager.DisplayListener)"
"android.app.Presentation.onStop()","android.app.Dialog.onStop()"
"android.app.Presentation.handleDisplayChanged()","android.app.Presentation.onDisplayChanged()"
"android.app.Presentation.handleDisplayChanged()","android.app.Dialog.cancel()"
"android.app.Presentation.handleDisplayChanged()","android.app.Presentation.isConfigurationStillValid()"
"android.hardware.camera2.marshal.impl.MarshalQueryableColorSpaceTransform.marshal(ColorSpaceTransform, ByteBuffer)","android.hardware.camera2.params.ColorSpaceTransform.copyElements(int[], int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableColorSpaceTransform.marshal(ColorSpaceTransform, ByteBuffer)","java.nio.ByteBuffer.putInt(int)"
"android.hardware.camera2.marshal.impl.MarshalQueryableColorSpaceTransform.unmarshal(ByteBuffer)","java.nio.ByteBuffer.getInt()"
"android.hardware.camera2.marshal.impl.MarshalQueryableColorSpaceTransform.isTypeMappingSupported(TypeReference, int)","java.lang.Object.equals(java.lang.reflect.Type)"
"android.hardware.camera2.marshal.impl.MarshalQueryableColorSpaceTransform.isTypeMappingSupported(TypeReference, int)","android.hardware.camera2.utils.TypeReference.getType()"
"android.hardware.location.GeofenceHardwareRequestParcelable.getSourceTechnologies()","android.hardware.location.GeofenceHardwareRequest.getSourceTechnologies()"
"android.hardware.location.GeofenceHardwareRequestParcelable.getLongitude()","android.hardware.location.GeofenceHardwareRequest.getLongitude()"
"android.hardware.location.GeofenceHardwareRequestParcelable.getMonitorTransitions()","android.hardware.location.GeofenceHardwareRequest.getMonitorTransitions()"
"android.hardware.location.GeofenceHardwareRequestParcelable.getLastTransition()","android.hardware.location.GeofenceHardwareRequest.getLastTransition()"
"android.hardware.location.GeofenceHardwareRequestParcelable.createFromParcel(Parcel)","android.hardware.location.GeofenceHardwareRequest.createCircularGeofence(double, double, double)"
"android.hardware.location.GeofenceHardwareRequestParcelable.createFromParcel(Parcel)","android.hardware.location.GeofenceHardwareRequest.setMonitorTransitions(int)"
"android.hardware.location.GeofenceHardwareRequestParcelable.createFromParcel(Parcel)","android.hardware.location.GeofenceHardwareRequest.setNotificationResponsiveness(int)"
"android.hardware.location.GeofenceHardwareRequestParcelable.createFromParcel(Parcel)","android.hardware.location.GeofenceHardwareRequest.setLastTransition(int)"
"android.hardware.location.GeofenceHardwareRequestParcelable.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.hardware.location.GeofenceHardwareRequestParcelable.createFromParcel(Parcel)","android.os.Parcel.readDouble()"
"android.hardware.location.GeofenceHardwareRequestParcelable.createFromParcel(Parcel)","android.hardware.location.GeofenceHardwareRequest.setSourceTechnologies(int)"
"android.hardware.location.GeofenceHardwareRequestParcelable.createFromParcel(Parcel)","android.hardware.location.GeofenceHardwareRequest.setUnknownTimer(int)"
"android.hardware.location.GeofenceHardwareRequestParcelable.getType()","android.hardware.location.GeofenceHardwareRequest.getType()"
"android.hardware.location.GeofenceHardwareRequestParcelable.getRadius()","android.hardware.location.GeofenceHardwareRequest.getRadius()"
"android.hardware.location.GeofenceHardwareRequestParcelable.getLatitude()","android.hardware.location.GeofenceHardwareRequest.getLatitude()"
"android.hardware.location.GeofenceHardwareRequestParcelable.getNotificationResponsiveness()","android.hardware.location.GeofenceHardwareRequest.getNotificationResponsiveness()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","android.hardware.location.GeofenceHardwareRequest.getRadius()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","android.hardware.location.GeofenceHardwareRequest.getUnknownTimer()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","java.lang.StringBuilder.append(double)"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","java.lang.StringBuilder.toString()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","android.hardware.location.GeofenceHardwareRequest.getSourceTechnologies()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","java.lang.StringBuilder.append(int)"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","android.hardware.location.GeofenceHardwareRequest.getNotificationResponsiveness()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","android.hardware.location.GeofenceHardwareRequest.getLatitude()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","android.hardware.location.GeofenceHardwareRequest.getMonitorTransitions()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","android.hardware.location.GeofenceHardwareRequest.getLongitude()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","android.hardware.location.GeofenceHardwareRequest.getType()"
"android.hardware.location.GeofenceHardwareRequestParcelable.toString()","android.hardware.location.GeofenceHardwareRequest.getLastTransition()"
"android.hardware.location.GeofenceHardwareRequestParcelable.getUnknownTimer()","android.hardware.location.GeofenceHardwareRequest.getUnknownTimer()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getSourceTechnologies()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getType()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.os.Parcel.writeDouble(double)"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getLastTransition()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getUnknownTimer()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getLongitude()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getRadius()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getNotificationResponsiveness()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getLatitude()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getId()"
"android.hardware.location.GeofenceHardwareRequestParcelable.writeToParcel(Parcel, int)","android.hardware.location.GeofenceHardwareRequestParcelable.getMonitorTransitions()"
"android.os.Message.obtain(Handler, int, int, int)","android.os.Message.obtain()"
"android.os.Message.obtain(Handler)","android.os.Message.obtain()"
"android.os.Message.recycle()","android.os.Message.recycleUnchecked()"
"android.os.Message.recycle()","android.os.Message.isInUse()"
"android.os.Message.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.os.Message.writeToParcel(Parcel, int)","android.os.Parcel.writeParcelable(android.os.Parcelable, int)"
"android.os.Message.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.os.Message.writeToParcel(Parcel, int)","android.os.Messenger.writeMessengerOrNullToParcel(android.os.Messenger, android.os.Parcel)"
"android.os.Message.writeToParcel(Parcel, int)","android.os.Parcel.writeBundle(android.os.Bundle)"
"android.os.Message.obtain(Handler, int, Object)","android.os.Message.obtain()"
"android.os.Message.obtain(Handler, Runnable)","android.os.Message.obtain()"
"android.os.Message.toString(long)","java.lang.StringBuilder.append(java.lang.Object)"
"android.os.Message.toString(long)","java.lang.StringBuilder.append(int)"
"android.os.Message.toString(long)","java.lang.Object.getClass()"
"android.os.Message.toString(long)","java.lang.StringBuilder.append(java.lang.String)"
"android.os.Message.toString(long)","java.lang.StringBuilder.toString()"
"android.os.Message.toString(long)","java.lang.Class.getName()"
"android.os.Message.toString(long)","android.util.TimeUtils.formatDuration(long, java.lang.StringBuilder)"
"android.os.Message.sendToTarget()","android.os.Handler.sendMessage(android.os.Message)"
"android.os.Message.obtain(Handler, int)","android.os.Message.obtain()"
"android.os.Message.obtain(Handler, int, int, int, Object)","android.os.Message.obtain()"
"android.os.Message.createFromParcel(Parcel)","android.os.Message.obtain()"
"android.os.Message.createFromParcel(Parcel)","android.os.Message.readFromParcel(android.os.Parcel)"
"android.os.Message.toString()","android.os.Message.toString(long)"
"android.os.Message.toString()","android.os.SystemClock.uptimeMillis()"
"android.os.Message.readFromParcel(Parcel)","android.os.Messenger.readMessengerOrNullFromParcel(android.os.Parcel)"
"android.os.Message.readFromParcel(Parcel)","android.os.Parcel.readLong()"
"android.os.Message.readFromParcel(Parcel)","android.os.Parcel.readParcelable(java.lang.ClassLoader)"
"android.os.Message.readFromParcel(Parcel)","java.lang.Class.getClassLoader()"
"android.os.Message.readFromParcel(Parcel)","java.lang.Object.getClass()"
"android.os.Message.readFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.os.Message.readFromParcel(Parcel)","android.os.Parcel.readBundle()"
"android.os.Message.copyFrom(Message)","android.os.Bundle.clone()"
"android.os.Message.obtain(Message)","android.os.Message.obtain()"
"android.animation.KeyframeSet.toString()","android.animation.Keyframe.getValue()"
"android.animation.KeyframeSet.toString()","java.util.List.get(int)"
"android.animation.KeyframeSet.ofFloat(float[])","android.animation.Keyframe.ofFloat(float)"
"android.animation.KeyframeSet.ofFloat(float[])","java.lang.Float.isNaN(float)"
"android.animation.KeyframeSet.ofFloat(float[])","java.lang.Math.max(int, int)"
"android.animation.KeyframeSet.ofFloat(float[])","android.animation.Keyframe.ofFloat(float, float)"
"android.animation.KeyframeSet.getType()","android.animation.Keyframe.getType()"
"android.animation.KeyframeSet.getValue(float)","android.animation.Keyframe.getValue()"
"android.animation.KeyframeSet.getValue(float)","android.animation.Keyframe.getFraction()"
"android.animation.KeyframeSet.getValue(float)","android.animation.Keyframe.getInterpolator()"
"android.animation.KeyframeSet.getValue(float)","android.animation.TimeInterpolator.getInterpolation(float)"
"android.animation.KeyframeSet.getValue(float)","android.animation.TypeEvaluator.evaluate(float, java.lang.Object, java.lang.Object)"
"android.animation.KeyframeSet.getValue(float)","java.util.List.get(int)"
"android.animation.KeyframeSet.ofInt(int[])","android.animation.Keyframe.ofInt(float)"
"android.animation.KeyframeSet.ofInt(int[])","java.lang.Math.max(int, int)"
"android.animation.KeyframeSet.ofInt(int[])","android.animation.Keyframe.ofInt(float, int)"
"android.animation.KeyframeSet.ofObject(Object[])","android.animation.Keyframe.ofObject(float, java.lang.Object)"
"android.animation.KeyframeSet.ofObject(Object[])","android.animation.Keyframe.ofObject(float)"
"android.animation.KeyframeSet.ofObject(Object[])","java.lang.Math.max(int, int)"
"android.animation.KeyframeSet.clone()","java.util.List.size()"
"android.animation.KeyframeSet.clone()","android.animation.Keyframe.clone()"
"android.animation.KeyframeSet.clone()","java.util.List.get(int)"
"android.content.ContentResolver.takePersistableUriPermission(Uri, int)","android.app.IActivityManager.takePersistableUriPermission(android.net.Uri, int, int)"
"android.content.ContentResolver.takePersistableUriPermission(Uri, int)","android.content.ContentProvider.getUriWithoutUserId(android.net.Uri)"
"android.content.ContentResolver.takePersistableUriPermission(Uri, int)","android.app.ActivityManagerNative.getDefault()"
"android.content.ContentResolver.takePersistableUriPermission(Uri, int)","android.content.ContentResolver.resolveUserId(android.net.Uri)"
"android.content.ContentResolver.openFileDescriptor(Uri, String, CancellationSignal)","android.content.res.AssetFileDescriptor.getDeclaredLength()"
"android.content.ContentResolver.openFileDescriptor(Uri, String, CancellationSignal)","android.content.res.AssetFileDescriptor.getParcelFileDescriptor()"
"android.content.ContentResolver.openFileDescriptor(Uri, String, CancellationSignal)","android.content.res.AssetFileDescriptor.close()"
"android.content.ContentResolver.openFileDescriptor(Uri, String, CancellationSignal)","android.content.ContentResolver.openAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.CancellationSignal)"
"android.content.ContentResolver.close()","android.database.CursorWrapper.close()"
"android.content.ContentResolver.close()","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.requestSyncAsUser(Account, String, int, Bundle)","android.content.SyncRequest.Builder.// Immediate sync.
syncOnce()"
"android.content.ContentResolver.requestSyncAsUser(Account, String, int, Bundle)","android.content.SyncRequest.Builder.setSyncAdapter(android.accounts.Account, java.lang.String)"
"android.content.ContentResolver.requestSyncAsUser(Account, String, int, Bundle)","android.content.SyncRequest.Builder.build()"
"android.content.ContentResolver.requestSyncAsUser(Account, String, int, Bundle)","android.content.SyncRequest.Builder.setExtras(android.os.Bundle)"
"android.content.ContentResolver.getOutgoingPersistedUriPermissions()","android.app.IActivityManager.getPersistedUriPermissions(java.lang.String, boolean)"
"android.content.ContentResolver.getOutgoingPersistedUriPermissions()","android.app.ActivityManagerNative.getDefault()"
"android.content.ContentResolver.getOutgoingPersistedUriPermissions()","android.content.pm.ParceledListSlice.getList()"
"android.content.ContentResolver.registerContentObserver(Uri, boolean, ContentObserver)","android.content.ContentResolver.registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver, int)"
"android.content.ContentResolver.registerContentObserver(Uri, boolean, ContentObserver)","android.os.UserHandle.myUserId()"
"android.content.ContentResolver.acquireContentProviderClient(Uri)","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.setSyncAutomatically(Account, String, boolean)","android.content.ContentResolver.setSyncAutomaticallyAsUser(android.accounts.Account, java.lang.String, boolean, int)"
"android.content.ContentResolver.setSyncAutomatically(Account, String, boolean)","android.os.UserHandle.myUserId()"
"android.content.ContentResolver.bulkInsert(Uri, ContentValues[])","android.content.IContentProvider.bulkInsert(java.lang.String, android.net.Uri, android.content.ContentValues[])"
"android.content.ContentResolver.bulkInsert(Uri, ContentValues[])","android.content.ContentResolver.maybeLogUpdateToEventLog(long, android.net.Uri, java.lang.String, null)"
"android.content.ContentResolver.bulkInsert(Uri, ContentValues[])","android.os.SystemClock.uptimeMillis()"
"android.content.ContentResolver.bulkInsert(Uri, ContentValues[])","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.bulkInsert(Uri, ContentValues[])","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String)","android.content.ContentResolver.openAssetFileDescriptor(android.net.Uri, java.lang.String, null)"
"android.content.ContentResolver.acquireExistingProvider(Uri)","android.content.ContentResolver.acquireExistingProvider(android.content.Context, java.lang.String)"
"android.content.ContentResolver.acquireExistingProvider(Uri)","java.lang.String.equals(java.lang.String)"
"android.content.ContentResolver.acquireExistingProvider(Uri)","android.net.Uri.getScheme()"
"android.content.ContentResolver.acquireExistingProvider(Uri)","android.net.Uri.getAuthority()"
"android.content.ContentResolver.releaseResources()","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.maybeLogQueryToEventLog(long, Uri, String[], String, String)","android.content.ContentResolver.samplePercentForDuration(long)"
"android.content.ContentResolver.maybeLogQueryToEventLog(long, Uri, String[], String, String)","java.lang.StringBuilder.append(java.lang.String)"
"android.content.ContentResolver.maybeLogQueryToEventLog(long, Uri, String[], String, String)","java.lang.StringBuilder.append(char)"
"android.content.ContentResolver.maybeLogQueryToEventLog(long, Uri, String[], String, String)","java.util.Random.nextInt(int)"
"android.content.ContentResolver.maybeLogQueryToEventLog(long, Uri, String[], String, String)","android.app.AppGlobals.getInitialPackage()"
"android.content.ContentResolver.finalize()","java.lang.Object.finalize()"
"android.content.ContentResolver.finalize()","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.openOutputStream(Uri)","android.content.ContentResolver.openOutputStream(android.net.Uri, java.lang.String)"
"android.content.ContentResolver.resolveUserId(Uri)","android.content.ContentProvider.getUserIdFromUri(android.net.Uri, int)"
"android.content.ContentResolver.resolveUserId(Uri)","android.content.Context.getUserId()"
"android.content.ContentResolver.acquireProvider(Uri)","android.content.ContentResolver.acquireProvider(android.content.Context, java.lang.String)"
"android.content.ContentResolver.acquireProvider(Uri)","java.lang.String.equals(java.lang.String)"
"android.content.ContentResolver.acquireProvider(Uri)","android.net.Uri.getScheme()"
"android.content.ContentResolver.acquireProvider(Uri)","android.net.Uri.getAuthority()"
"android.content.ContentResolver.getStreamTypes(Uri, String)","android.content.IContentProvider.getStreamTypes(android.net.Uri, java.lang.String)"
"android.content.ContentResolver.getStreamTypes(Uri, String)","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.getStreamTypes(Uri, String)","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.openInputStream(Uri)","android.content.ContentResolver.openAssetFileDescriptor(android.net.Uri, java.lang.String, null)"
"android.content.ContentResolver.openInputStream(Uri)","android.content.res.AssetFileDescriptor.createInputStream()"
"android.content.ContentResolver.openInputStream(Uri)","android.net.Uri.getPath()"
"android.content.ContentResolver.openInputStream(Uri)","android.content.ContentResolver.getResourceId(android.net.Uri)"
"android.content.ContentResolver.openInputStream(Uri)","android.content.res.Resources.openRawResource(int)"
"android.content.ContentResolver.openInputStream(Uri)","java.lang.String.equals(java.lang.String)"
"android.content.ContentResolver.openInputStream(Uri)","android.net.Uri.getScheme()"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.content.ContentResolver.maybeLogQueryToEventLog(long, android.net.Uri, java.lang.String[], java.lang.String, java.lang.String)"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.content.ContentResolver.acquireUnstableProvider(android.net.Uri)"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.content.ContentResolver.releaseUnstableProvider(android.content.IContentProvider)"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.os.SystemClock.uptimeMillis()"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.os.CancellationSignal.throwIfCanceled()"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.content.IContentProvider.createCancellationSignal()"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.database.Cursor.getCount()"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.database.Cursor.close()"
"android.content.ContentResolver.query(Uri, String[], String, String[], String, CancellationSignal)","android.content.ContentResolver.unstableProviderDied(android.content.IContentProvider)"
"android.content.ContentResolver.getContentService()","android.os.ServiceManager.getService(java.lang.String)"
"android.content.ContentResolver.uncanonicalize(Uri)","android.content.IContentProvider.uncanonicalize(java.lang.String, android.net.Uri)"
"android.content.ContentResolver.uncanonicalize(Uri)","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.uncanonicalize(Uri)","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.getType(Uri)","android.content.ContentResolver.acquireExistingProvider(android.net.Uri)"
"android.content.ContentResolver.getType(Uri)","android.content.ContentProvider.getUriWithoutUserId(android.net.Uri)"
"android.content.ContentResolver.getType(Uri)","android.content.IContentProvider.getType(android.net.Uri)"
"android.content.ContentResolver.getType(Uri)","android.app.ActivityManagerNative.getDefault()"
"android.content.ContentResolver.getType(Uri)","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.getType(Uri)","java.lang.String.equals(java.lang.String)"
"android.content.ContentResolver.getType(Uri)","android.net.Uri.getScheme()"
"android.content.ContentResolver.getType(Uri)","android.app.IActivityManager.getProviderMimeType(android.net.Uri, int)"
"android.content.ContentResolver.getType(Uri)","android.content.ContentResolver.resolveUserId(android.net.Uri)"
"android.content.ContentResolver.delete(Uri, String, String[])","android.content.ContentResolver.maybeLogUpdateToEventLog(long, android.net.Uri, java.lang.String, java.lang.String)"
"android.content.ContentResolver.delete(Uri, String, String[])","android.content.IContentProvider.delete(java.lang.String, android.net.Uri, java.lang.String, java.lang.String[])"
"android.content.ContentResolver.delete(Uri, String, String[])","android.os.SystemClock.uptimeMillis()"
"android.content.ContentResolver.delete(Uri, String, String[])","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.delete(Uri, String, String[])","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.requestSync(Account, String, Bundle)","android.content.ContentResolver.requestSyncAsUser(android.accounts.Account, java.lang.String, int, android.os.Bundle)"
"android.content.ContentResolver.requestSync(Account, String, Bundle)","android.os.UserHandle.myUserId()"
"android.content.ContentResolver.notifyChange(Uri, ContentObserver, boolean)","android.content.ContentResolver.notifyChange(android.net.Uri, android.database.ContentObserver, boolean, int)"
"android.content.ContentResolver.notifyChange(Uri, ContentObserver, boolean)","android.os.UserHandle.myUserId()"
"android.content.ContentResolver.canonicalize(Uri)","android.content.IContentProvider.canonicalize(java.lang.String, android.net.Uri)"
"android.content.ContentResolver.canonicalize(Uri)","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.canonicalize(Uri)","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.isSyncPending(Account, String)","android.content.ContentResolver.isSyncPendingAsUser(android.accounts.Account, java.lang.String, int)"
"android.content.ContentResolver.isSyncPending(Account, String)","android.os.UserHandle.myUserId()"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.content.res.AssetFileDescriptor.getParcelFileDescriptor()"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.content.res.AssetFileDescriptor.getDeclaredLength()"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.content.ContentResolver.acquireUnstableProvider(android.net.Uri)"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.content.ContentResolver.releaseUnstableProvider(android.content.IContentProvider)"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.os.CancellationSignal.throwIfCanceled()"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.content.IContentProvider.createCancellationSignal()"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.content.res.AssetFileDescriptor.getStartOffset()"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle, CancellationSignal)","android.content.ContentResolver.unstableProviderDied(android.content.IContentProvider)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.ContentResolver.releaseUnstableProvider(android.content.IContentProvider)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.net.Uri.getPath()"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.os.CancellationSignal.throwIfCanceled()"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.IContentProvider.createCancellationSignal()"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","java.lang.String.equals(java.lang.String)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.ContentResolver.openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, null, android.os.CancellationSignal)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.ContentResolver.unstableProviderDied(android.content.IContentProvider)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.res.AssetFileDescriptor.getParcelFileDescriptor()"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.res.AssetFileDescriptor.getDeclaredLength()"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.res.Resources.openRawResourceFd(int)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.ContentResolver.acquireUnstableProvider(android.net.Uri)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.res.AssetFileDescriptor.getStartOffset()"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.ContentResolver.getResourceId(android.net.Uri)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.net.Uri.getScheme()"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.os.ParcelFileDescriptor.open(java.io.File, int)"
"android.content.ContentResolver.openAssetFileDescriptor(Uri, String, CancellationSignal)","android.os.ParcelFileDescriptor.parseMode(java.lang.String)"
"android.content.ContentResolver.query(Uri, String[], String, String[], String)","android.content.ContentResolver.query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, null)"
"android.content.ContentResolver.acquireUnstableProvider(String)","android.content.ContentResolver.acquireUnstableProvider(android.content.Context, java.lang.String)"
"android.content.ContentResolver.setMasterSyncAutomatically(boolean)","android.content.ContentResolver.setMasterSyncAutomaticallyAsUser(boolean, int)"
"android.content.ContentResolver.setMasterSyncAutomatically(boolean)","android.os.UserHandle.myUserId()"
"android.content.ContentResolver.notifyChange(Uri, ContentObserver)","android.content.ContentResolver.notifyChange(android.net.Uri, android.database.ContentObserver, boolean)"
"android.content.ContentResolver.openOutputStream(Uri, String)","android.content.ContentResolver.openAssetFileDescriptor(android.net.Uri, java.lang.String, null)"
"android.content.ContentResolver.openOutputStream(Uri, String)","android.content.res.AssetFileDescriptor.createOutputStream()"
"android.content.ContentResolver.openFileDescriptor(Uri, String)","android.content.ContentResolver.openFileDescriptor(android.net.Uri, java.lang.String, null)"
"android.content.ContentResolver.getPersistedUriPermissions()","android.app.IActivityManager.getPersistedUriPermissions(java.lang.String, boolean)"
"android.content.ContentResolver.getPersistedUriPermissions()","android.app.ActivityManagerNative.getDefault()"
"android.content.ContentResolver.getPersistedUriPermissions()","android.content.pm.ParceledListSlice.getList()"
"android.content.ContentResolver.getCurrentSync()","java.util.List.isEmpty()"
"android.content.ContentResolver.getCurrentSync()","java.util.List.get(int)"
"android.content.ContentResolver.acquireUnstableContentProviderClient(String)","android.content.ContentResolver.acquireUnstableProvider(java.lang.String)"
"android.content.ContentResolver.acquireUnstableProvider(Uri)","android.content.ContentResolver.acquireUnstableProvider(android.content.Context, java.lang.String)"
"android.content.ContentResolver.acquireUnstableProvider(Uri)","java.lang.String.equals(java.lang.String)"
"android.content.ContentResolver.acquireUnstableProvider(Uri)","android.net.Uri.getScheme()"
"android.content.ContentResolver.acquireUnstableProvider(Uri)","android.net.Uri.getAuthority()"
"android.content.ContentResolver.addPeriodicSync(Account, String, Bundle, long)","android.content.ContentResolver.validateSyncExtrasBundle(android.os.Bundle)"
"android.content.ContentResolver.addPeriodicSync(Account, String, Bundle, long)","android.os.BaseBundle.getBoolean(java.lang.String, boolean)"
"android.content.ContentResolver.validateSyncExtrasBundle(Bundle)","android.os.BaseBundle.get(java.lang.String)"
"android.content.ContentResolver.validateSyncExtrasBundle(Bundle)","android.os.BaseBundle.keySet()"
"android.content.ContentResolver.validateSyncExtrasBundle(Bundle)","java.lang.Object.getClass()"
"android.content.ContentResolver.validateSyncExtrasBundle(Bundle)","java.lang.Class.getName()"
"android.content.ContentResolver.openTypedAssetFileDescriptor(Uri, String, Bundle)","android.content.ContentResolver.openTypedAssetFileDescriptor(android.net.Uri, java.lang.String, android.os.Bundle, null)"
"android.content.ContentResolver.call(Uri, String, String, Bundle)","android.content.IContentProvider.call(java.lang.String, java.lang.String, java.lang.String, android.os.Bundle)"
"android.content.ContentResolver.call(Uri, String, String, Bundle)","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.call(Uri, String, String, Bundle)","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.applyBatch(String, ArrayList)","android.content.ContentProviderClient.release()"
"android.content.ContentResolver.applyBatch(String, ArrayList)","android.content.ContentProviderClient.applyBatch(java.util.ArrayList<android.content.ContentProviderOperation>)"
"android.content.ContentResolver.applyBatch(String, ArrayList)","android.content.ContentResolver.acquireContentProviderClient(java.lang.String)"
"android.content.ContentResolver.acquireContentProviderClient(String)","android.content.ContentResolver.acquireProvider(java.lang.String)"
"android.content.ContentResolver.acquireProvider(String)","android.content.ContentResolver.acquireProvider(android.content.Context, java.lang.String)"
"android.content.ContentResolver.syncErrorToString(int)","java.lang.String.valueOf(int)"
"android.content.ContentResolver.unregisterContentObserver(ContentObserver)","android.database.ContentObserver.releaseContentObserver()"
"android.content.ContentResolver.releasePersistableUriPermission(Uri, int)","android.content.ContentProvider.getUriWithoutUserId(android.net.Uri)"
"android.content.ContentResolver.releasePersistableUriPermission(Uri, int)","android.app.IActivityManager.releasePersistableUriPermission(android.net.Uri, int, int)"
"android.content.ContentResolver.releasePersistableUriPermission(Uri, int)","android.app.ActivityManagerNative.getDefault()"
"android.content.ContentResolver.releasePersistableUriPermission(Uri, int)","android.content.ContentResolver.resolveUserId(android.net.Uri)"
"android.content.ContentResolver.acquireExistingProvider(Context, String)","android.content.ContentResolver.acquireProvider(android.content.Context, java.lang.String)"
"android.content.ContentResolver.syncErrorStringToInt(String)","java.lang.String.equals(java.lang.String)"
"android.content.ContentResolver.syncErrorStringToInt(String)","java.lang.Integer.parseInt(java.lang.String)"
"android.content.ContentResolver.insert(Uri, ContentValues)","android.content.ContentResolver.maybeLogUpdateToEventLog(long, android.net.Uri, java.lang.String, null)"
"android.content.ContentResolver.insert(Uri, ContentValues)","android.os.SystemClock.uptimeMillis()"
"android.content.ContentResolver.insert(Uri, ContentValues)","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.insert(Uri, ContentValues)","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.insert(Uri, ContentValues)","android.content.IContentProvider.insert(java.lang.String, android.net.Uri, android.content.ContentValues)"
"android.content.ContentResolver.startSync(Uri, Bundle)","android.content.ContentResolver.requestSync(android.accounts.Account, java.lang.String, android.os.Bundle)"
"android.content.ContentResolver.startSync(Uri, Bundle)","android.os.BaseBundle.remove(java.lang.String)"
"android.content.ContentResolver.startSync(Uri, Bundle)","android.os.BaseBundle.getString(java.lang.String)"
"android.content.ContentResolver.startSync(Uri, Bundle)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.content.ContentResolver.startSync(Uri, Bundle)","android.net.Uri.getAuthority()"
"android.content.ContentResolver.acquireUnstableContentProviderClient(Uri)","android.content.ContentResolver.acquireUnstableProvider(android.net.Uri)"
"android.content.ContentResolver.cancelSync(Uri)","android.content.ContentResolver.cancelSync(null, java.lang.String)"
"android.content.ContentResolver.cancelSync(Uri)","android.net.Uri.getAuthority()"
"android.content.ContentResolver.removePeriodicSync(Account, String, Bundle)","android.content.ContentResolver.validateSyncExtrasBundle(android.os.Bundle)"
"android.content.ContentResolver.maybeLogUpdateToEventLog(long, Uri, String, String)","android.content.ContentResolver.samplePercentForDuration(long)"
"android.content.ContentResolver.maybeLogUpdateToEventLog(long, Uri, String, String)","java.util.Random.nextInt(int)"
"android.content.ContentResolver.maybeLogUpdateToEventLog(long, Uri, String, String)","android.app.AppGlobals.getInitialPackage()"
"android.content.ContentResolver.update(Uri, ContentValues, String, String[])","android.content.ContentResolver.maybeLogUpdateToEventLog(long, android.net.Uri, java.lang.String, java.lang.String)"
"android.content.ContentResolver.update(Uri, ContentValues, String, String[])","android.os.SystemClock.uptimeMillis()"
"android.content.ContentResolver.update(Uri, ContentValues, String, String[])","android.content.ContentResolver.releaseProvider(android.content.IContentProvider)"
"android.content.ContentResolver.update(Uri, ContentValues, String, String[])","android.content.IContentProvider.update(java.lang.String, android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])"
"android.content.ContentResolver.update(Uri, ContentValues, String, String[])","android.content.ContentResolver.acquireProvider(android.net.Uri)"
"android.content.ContentResolver.invalidPeriodicExtras(Bundle)","android.os.BaseBundle.getBoolean(java.lang.String, boolean)"
"android.content.ContentResolver.getResourceId(Uri)","android.content.pm.PackageManager.getResourcesForApplication(java.lang.String)"
"android.content.ContentResolver.getResourceId(Uri)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.content.ContentResolver.getResourceId(Uri)","android.content.Context.getPackageManager()"
"android.content.ContentResolver.getResourceId(Uri)","java.util.List.size()"
"android.content.ContentResolver.getResourceId(Uri)","android.net.Uri.getPathSegments()"
"android.content.ContentResolver.getResourceId(Uri)","android.content.res.Resources.getIdentifier(java.lang.String, java.lang.String, java.lang.String)"
"android.content.ContentResolver.getResourceId(Uri)","android.net.Uri.getAuthority()"
"android.content.ContentResolver.getResourceId(Uri)","java.util.List.get(int)"
"android.content.ContentResolver.getResourceId(Uri)","java.lang.Integer.parseInt(java.lang.String)"
"android.net.Proxy.validate(String, String, String)","java.util.regex.Matcher.matches()"
"android.net.Proxy.validate(String, String, String)","java.util.regex.Pattern.matcher(java.lang.String)"
"android.net.Proxy.validate(String, String, String)","java.lang.String.length()"
"android.net.Proxy.validate(String, String, String)","java.lang.Integer.parseInt(java.lang.String)"
"android.net.Proxy.setHttpProxySystemProperty(ProxyInfo)","android.net.ProxyInfo.getExclusionListAsString()"
"android.net.Proxy.setHttpProxySystemProperty(ProxyInfo)","android.net.ProxyInfo.getHost()"
"android.net.Proxy.setHttpProxySystemProperty(ProxyInfo)","java.lang.Integer.toString(int)"
"android.net.Proxy.setHttpProxySystemProperty(ProxyInfo)","android.net.ProxyInfo.getPort()"
"android.net.Proxy.setHttpProxySystemProperty(ProxyInfo)","android.net.Proxy.setHttpProxySystemProperty(java.lang.String, java.lang.String, java.lang.String, android.net.Uri)"
"android.net.Proxy.setHttpProxySystemProperty(ProxyInfo)","android.net.ProxyInfo.getPacFileUrl()"
"android.net.Proxy.getHost(Context)","android.net.Proxy.getProxy(android.content.Context, null)"
"android.net.Proxy.getHost(Context)","java.net.InetSocketAddress.getHostName()"
"android.net.Proxy.getHost(Context)","java.net.Proxy.address()"
"android.net.Proxy.getPort(Context)","android.net.Proxy.getProxy(android.content.Context, null)"
"android.net.Proxy.getPort(Context)","java.net.InetSocketAddress.getPort()"
"android.net.Proxy.getPort(Context)","java.net.Proxy.address()"
"android.net.Proxy.getProxy(Context, String)","java.net.URI.create(java.lang.String)"
"android.net.Proxy.getProxy(Context, String)","android.net.Proxy.isLocalHost(java.lang.String)"
"android.net.Proxy.getProxy(Context, String)","java.util.List.size()"
"android.net.Proxy.getProxy(Context, String)","java.net.ProxySelector.getDefault()"
"android.net.Proxy.getProxy(Context, String)","java.net.ProxySelector.select(java.net.URI)"
"android.net.Proxy.getProxy(Context, String)","java.util.List.get(int)"
"android.net.Proxy.getDefaultHost()","android.text.TextUtils.isEmpty(java.lang.String)"
"android.net.Proxy.getDefaultHost()","java.lang.System.getProperty(java.lang.String)"
"android.net.Proxy.getPreferredHttpHost(Context, String)","android.net.Proxy.getProxy(android.content.Context, java.lang.String)"
"android.net.Proxy.getPreferredHttpHost(Context, String)","java.net.InetSocketAddress.getHostName()"
"android.net.Proxy.getPreferredHttpHost(Context, String)","java.net.Proxy.equals(java.net.Proxy)"
"android.net.Proxy.getPreferredHttpHost(Context, String)","java.net.InetSocketAddress.getPort()"
"android.net.Proxy.getPreferredHttpHost(Context, String)","java.net.Proxy.address()"
"android.net.Proxy.getDefaultPort()","android.net.Proxy.getDefaultHost()"
"android.net.Proxy.getDefaultPort()","java.lang.System.getProperty(java.lang.String)"
"android.net.Proxy.getDefaultPort()","java.lang.Integer.parseInt(java.lang.String)"
"android.net.Proxy.isLocalHost(String)","android.net.NetworkUtils.numericToInetAddress(java.lang.String)"
"android.net.Proxy.isLocalHost(String)","java.lang.String.equalsIgnoreCase(java.lang.String)"
"android.net.Proxy.isLocalHost(String)","java.net.InetAddress.isLoopbackAddress()"
"android.net.Proxy.setHttpProxySystemProperty(String, String, String, Uri)","java.lang.System.clearProperty(java.lang.String)"
"android.net.Proxy.setHttpProxySystemProperty(String, String, String, Uri)","java.net.ProxySelector.setDefault(java.net.ProxySelector)"
"android.net.Proxy.setHttpProxySystemProperty(String, String, String, Uri)","java.net.ProxySelector.setDefault(android.net.PacProxySelector)"
"android.net.Proxy.setHttpProxySystemProperty(String, String, String, Uri)","java.lang.String.replace(java.lang.String, java.lang.String)"
"android.net.Proxy.setHttpProxySystemProperty(String, String, String, Uri)","android.net.Uri.equals(android.net.Uri)"
"android.net.Proxy.setHttpProxySystemProperty(String, String, String, Uri)","java.lang.System.setProperty(java.lang.String, java.lang.String)"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(int, int, int, int)","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int[])"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(T, T, T, T)","java.lang.Object.hashCode()"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(T, T, T, T)","android.hardware.camera2.utils.HashCodeHelpers.hashCode(T, T, T)"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(T)","java.lang.Object.hashCode()"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(int)","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int[])"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(T, T, T)","android.hardware.camera2.utils.HashCodeHelpers.hashCode(T, T)"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(T, T, T)","java.lang.Object.hashCode()"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(int, int, int)","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int[])"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(T, T)","java.lang.Object.hashCode()"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(T, T)","android.hardware.camera2.utils.HashCodeHelpers.hashCode(T)"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(float[])","java.lang.Float.floatToIntBits(float)"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(int, int)","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int[])"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(int, int, int, int, int)","android.hardware.camera2.utils.HashCodeHelpers.hashCode(int[])"
"android.hardware.camera2.utils.HashCodeHelpers.hashCode(T[])","java.lang.Object.hashCode()"
"android.util.IntArray.addAll(IntArray)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.util.IntArray.addAll(IntArray)","android.util.IntArray.ensureCapacity(int)"
"android.util.IntArray.remove(int)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.util.IntArray.add(int)","android.util.IntArray.add(int, int)"
"android.util.IntArray.clone()","java.lang.Object.clone()"
"android.util.IntArray.ensureCapacity(int)","com.android.internal.util.ArrayUtils.newUnpaddedIntArray(int)"
"android.util.IntArray.ensureCapacity(int)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.util.IntArray.add(int, int)","java.lang.System.arraycopy(int[], int, int[], int, int)"
"android.util.IntArray.add(int, int)","android.util.IntArray.ensureCapacity(int)"
"android.net.LinkAddress.init(InetAddress, int, int, int)","java.net.InetAddress.isMulticastAddress()"
"android.net.LinkAddress.hashCode()","java.net.InetAddress.hashCode()"
"android.net.LinkAddress.toString()","java.net.InetAddress.getHostAddress()"
"android.net.LinkAddress.isIPv6ULA()","java.net.InetAddress.getAddress()"
"android.net.LinkAddress.createFromParcel(Parcel)","android.os.Parcel.createByteArray()"
"android.net.LinkAddress.createFromParcel(Parcel)","java.net.InetAddress.getByAddress(byte[])"
"android.net.LinkAddress.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.net.LinkAddress.equals(Object)","java.net.InetAddress.equals(java.net.InetAddress)"
"android.net.LinkAddress.isGlobalPreferred()","android.net.LinkAddress.isIPv6ULA()"
"android.net.LinkAddress.getNetworkPrefixLength()","android.net.LinkAddress.getPrefixLength()"
"android.net.LinkAddress.isSameAddressAs(LinkAddress)","java.net.InetAddress.equals(java.net.InetAddress)"
"android.net.LinkAddress.writeToParcel(Parcel, int)","android.os.Parcel.writeByteArray(byte[])"
"android.net.LinkAddress.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.LinkAddress.writeToParcel(Parcel, int)","java.net.InetAddress.getAddress()"
"android.net.LinkAddress.scopeForUnicastAddress(InetAddress)","java.net.InetAddress.isAnyLocalAddress()"
"android.net.LinkAddress.scopeForUnicastAddress(InetAddress)","java.net.InetAddress.isLinkLocalAddress()"
"android.net.LinkAddress.scopeForUnicastAddress(InetAddress)","java.net.InetAddress.isLoopbackAddress()"
"android.net.LinkAddress.scopeForUnicastAddress(InetAddress)","java.net.InetAddress.isSiteLocalAddress()"
"android.text.LoginFilter.filter(CharSequence, int, int, Spanned, int, int)","android.text.LoginFilter.onStart()"
"android.text.LoginFilter.filter(CharSequence, int, int, Spanned, int, int)","java.lang.CharSequence.charAt(int)"
"android.text.LoginFilter.filter(CharSequence, int, int, Spanned, int, int)","android.text.LoginFilter.onStop()"
"android.text.LoginFilter.filter(CharSequence, int, int, Spanned, int, int)","android.text.LoginFilter.isAllowed(char)"
"android.text.LoginFilter.filter(CharSequence, int, int, Spanned, int, int)","android.text.SpannableStringBuilder.delete(int, int)"
"android.text.LoginFilter.filter(CharSequence, int, int, Spanned, int, int)","java.lang.CharSequence.length()"
"android.text.LoginFilter.filter(CharSequence, int, int, Spanned, int, int)","android.text.LoginFilter.onInvalidCharacter(char)"
"android.view.inputmethod.ExtractedText.writeToParcel(Parcel, int)","android.text.TextUtils.writeToParcel(java.lang.CharSequence, android.os.Parcel, int)"
"android.view.inputmethod.ExtractedText.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.view.inputmethod.ExtractedText.createFromParcel(Parcel)","android.os.Parcelable.Creator.createFromParcel(android.os.Parcel)"
"android.view.inputmethod.ExtractedText.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.util.SparseArray.clear()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","com.android.internal.os.BatteryStatsHelper.addEntryNoTotal(com.android.internal.os.BatterySipper.DrainType, int, double)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","com.android.internal.os.BatteryStatsHelper.processAppUsage(android.util.SparseArray<android.os.UserHandle>)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","java.util.Collections.sort(java.util.List<com.android.internal.os.BatterySipper>)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","java.util.List.clear()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","com.android.internal.os.PowerProfile.getBatteryCapacity()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.os.BatteryStats.getLowDischargeAmountSinceCharge()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","java.util.List.add(com.android.internal.os.BatterySipper)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.os.BatteryStats.computeBatteryUptime(long, int)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.util.SparseArray.size()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.os.BatteryStats.computeBatteryTimeRemaining(long)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.os.BatteryStats.computeBatteryRealtime(long, int)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.os.BatteryStats.computeChargeTimeRemaining(long)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.os.BatteryStats.getBatteryUptime(long)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.util.SparseArray.valueAt(int)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","java.util.Collections.sort(java.util.List<com.android.internal.os.BatterySipper>, java.util.Comparator<com.android.internal.os.BatterySipper>)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","com.android.internal.os.BatteryStatsHelper.processMiscUsage()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.os.BatteryStats.getHighDischargeAmountSinceCharge()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","java.util.List.size()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","com.android.internal.os.BatterySipper.computeMobilemspp()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","android.os.BatteryStats.getBatteryRealtime(long)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray, long, long)","java.util.List.get(int)"
"com.android.internal.os.BatteryStatsHelper.makemAh(double)","java.lang.String.format(java.lang.String, double)"
"com.android.internal.os.BatteryStatsHelper.processMiscUsage()","com.android.internal.os.BatteryStatsHelper.addScreenUsage()"
"com.android.internal.os.BatteryStatsHelper.processMiscUsage()","com.android.internal.os.BatteryStatsHelper.addWiFiUsage()"
"com.android.internal.os.BatteryStatsHelper.processMiscUsage()","com.android.internal.os.BatteryStatsHelper.addUserUsage()"
"com.android.internal.os.BatteryStatsHelper.processMiscUsage()","com.android.internal.os.BatteryStatsHelper.addRadioUsage()"
"com.android.internal.os.BatteryStatsHelper.processMiscUsage()","com.android.internal.os.BatteryStatsHelper.addPhoneUsage()"
"com.android.internal.os.BatteryStatsHelper.processMiscUsage()","com.android.internal.os.BatteryStatsHelper.addBluetoothUsage()"
"com.android.internal.os.BatteryStatsHelper.processMiscUsage()","com.android.internal.os.BatteryStatsHelper.addFlashlightUsage()"
"com.android.internal.os.BatteryStatsHelper.processMiscUsage()","com.android.internal.os.BatteryStatsHelper.addIdleUsage()"
"com.android.internal.os.BatteryStatsHelper.load()","android.content.Context.registerReceiver(null, android.content.IntentFilter)"
"com.android.internal.os.BatteryStatsHelper.addWiFiUsage()","com.android.internal.os.BatteryStatsHelper.aggregateSippers(com.android.internal.os.BatterySipper, java.util.List<com.android.internal.os.BatterySipper>, java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addWiFiUsage()","com.android.internal.os.BatteryStatsHelper.addEntry(com.android.internal.os.BatterySipper.DrainType, long, double)"
"com.android.internal.os.BatteryStatsHelper.addWiFiUsage()","android.os.BatteryStats.getWifiOnTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.addWiFiUsage()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addWiFiUsage()","android.os.BatteryStats.getGlobalWifiRunningTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.checkWifiOnly(Context)","android.content.Context.getSystemService(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.checkWifiOnly(Context)","android.net.ConnectivityManager.isNetworkSupported(int)"
"com.android.internal.os.BatteryStatsHelper.readFully(FileInputStream)","com.android.internal.os.BatteryStatsHelper.readFully(java.io.FileInputStream, int)"
"com.android.internal.os.BatteryStatsHelper.readFully(FileInputStream)","java.io.FileInputStream.available()"
"com.android.internal.os.BatteryStatsHelper.addScreenUsage()","android.os.BatteryStats.getScreenBrightnessTime(int, long, int)"
"com.android.internal.os.BatteryStatsHelper.addScreenUsage()","com.android.internal.os.BatteryStatsHelper.addEntry(com.android.internal.os.BatterySipper.DrainType, long, double)"
"com.android.internal.os.BatteryStatsHelper.addScreenUsage()","android.os.BatteryStats.getScreenOnTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.addScreenUsage()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.readFully(FileInputStream, int)","java.lang.System.arraycopy(byte[], int, byte[], int, int)"
"com.android.internal.os.BatteryStatsHelper.readFully(FileInputStream, int)","java.io.FileInputStream.available()"
"com.android.internal.os.BatteryStatsHelper.readFully(FileInputStream, int)","java.io.FileInputStream.read(byte[], int, int)"
"com.android.internal.os.BatteryStatsHelper.getMobilePowerPerPacket()","android.os.BatteryStats.getMobileRadioActiveTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.getMobilePowerPerPacket()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.getMobilePowerPerPacket()","android.os.BatteryStats.getNetworkActivityPackets(int, int)"
"com.android.internal.os.BatteryStatsHelper.addPhoneUsage()","android.os.BatteryStats.getPhoneOnTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.addPhoneUsage()","com.android.internal.os.BatteryStatsHelper.addEntry(com.android.internal.os.BatterySipper.DrainType, long, double)"
"com.android.internal.os.BatteryStatsHelper.addPhoneUsage()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addUserUsage()","com.android.internal.os.BatteryStatsHelper.aggregateSippers(com.android.internal.os.BatterySipper, java.util.List<com.android.internal.os.BatterySipper>, java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addUserUsage()","android.util.SparseArray.valueAt(int)"
"com.android.internal.os.BatteryStatsHelper.addUserUsage()","android.util.SparseArray.size()"
"com.android.internal.os.BatteryStatsHelper.addUserUsage()","android.util.SparseArray.get(int)"
"com.android.internal.os.BatteryStatsHelper.addUserUsage()","com.android.internal.os.BatteryStatsHelper.addEntry(com.android.internal.os.BatterySipper.DrainType, int, double)"
"com.android.internal.os.BatteryStatsHelper.addUserUsage()","android.util.SparseArray.keyAt(int)"
"com.android.internal.os.BatteryStatsHelper.storeStatsHistoryInFile(String)","com.android.internal.os.BatteryStatsHelper.makeFilePath(android.content.Context, java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.storeStatsHistoryInFile(String)","android.os.Parcel.obtain()"
"com.android.internal.os.BatteryStatsHelper.storeStatsHistoryInFile(String)","android.os.Parcel.marshall()"
"com.android.internal.os.BatteryStatsHelper.storeStatsHistoryInFile(String)","java.io.FileOutputStream.close()"
"com.android.internal.os.BatteryStatsHelper.storeStatsHistoryInFile(String)","java.io.FileOutputStream.write(byte[])"
"com.android.internal.os.BatteryStatsHelper.getMobilePowerPerMs()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addEntryNoTotal(DrainType, long, double)","java.util.List.add(com.android.internal.os.BatterySipper)"
"com.android.internal.os.BatteryStatsHelper.statsFromFile(Context, String)","android.util.ArrayMap.get(java.io.File)"
"com.android.internal.os.BatteryStatsHelper.statsFromFile(Context, String)","java.io.FileInputStream.close()"
"com.android.internal.os.BatteryStatsHelper.statsFromFile(Context, String)","android.os.Parcelable.Creator.createFromParcel(android.os.Parcel)"
"com.android.internal.os.BatteryStatsHelper.statsFromFile(Context, String)","android.os.Parcel.setDataPosition(int)"
"com.android.internal.os.BatteryStatsHelper.statsFromFile(Context, String)","com.android.internal.os.BatteryStatsHelper.makeFilePath(android.content.Context, java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.statsFromFile(Context, String)","android.os.Parcel.obtain()"
"com.android.internal.os.BatteryStatsHelper.statsFromFile(Context, String)","android.os.Parcel.unmarshall(byte[], int, int)"
"com.android.internal.os.BatteryStatsHelper.statsFromFile(Context, String)","com.android.internal.os.BatteryStatsHelper.readFully(java.io.FileInputStream)"
"com.android.internal.os.BatteryStatsHelper.getWifiPowerPerPacket()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addIdleUsage()","com.android.internal.os.BatteryStatsHelper.addEntry(com.android.internal.os.BatterySipper.DrainType, long, double)"
"com.android.internal.os.BatteryStatsHelper.addIdleUsage()","android.os.BatteryStats.getScreenOnTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.addIdleUsage()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addRadioUsage()","android.os.BatteryStats.getMobileRadioActiveTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.addRadioUsage()","android.os.BatteryStats.getPhoneSignalStrengthTime(int, long, int)"
"com.android.internal.os.BatteryStatsHelper.addRadioUsage()","com.android.internal.os.BatteryStatsHelper.getMobilePowerPerMs()"
"com.android.internal.os.BatteryStatsHelper.addRadioUsage()","com.android.internal.os.BatteryStatsHelper.addEntry(com.android.internal.os.BatterySipper.DrainType, long, double)"
"com.android.internal.os.BatteryStatsHelper.addRadioUsage()","android.os.BatteryStats.getMobileRadioActiveUnknownCount(int)"
"com.android.internal.os.BatteryStatsHelper.addRadioUsage()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addRadioUsage()","android.os.BatteryStats.getPhoneSignalScanningTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.addRadioUsage()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String, int)"
"com.android.internal.os.BatteryStatsHelper.getStats(IBatteryStats)","android.os.MemoryFile.getSize(java.io.FileDescriptor)"
"com.android.internal.os.BatteryStatsHelper.getStats(IBatteryStats)","android.os.Parcelable.Creator.createFromParcel(android.os.Parcel)"
"com.android.internal.os.BatteryStatsHelper.getStats(IBatteryStats)","android.os.Parcel.setDataPosition(int)"
"com.android.internal.os.BatteryStatsHelper.getStats(IBatteryStats)","com.android.internal.os.BatteryStatsImpl.distributeWorkLocked(int)"
"com.android.internal.os.BatteryStatsHelper.getStats(IBatteryStats)","com.android.internal.os.BatteryStatsHelper.readFully(java.io.FileInputStream, int)"
"com.android.internal.os.BatteryStatsHelper.getStats(IBatteryStats)","android.os.ParcelFileDescriptor.getFileDescriptor()"
"com.android.internal.os.BatteryStatsHelper.getStats(IBatteryStats)","android.os.Parcel.obtain()"
"com.android.internal.os.BatteryStatsHelper.getStats(IBatteryStats)","android.os.Parcel.unmarshall(byte[], int, int)"
"com.android.internal.os.BatteryStatsHelper.addFlashlightUsage()","com.android.internal.os.BatteryStatsHelper.addEntry(com.android.internal.os.BatterySipper.DrainType, long, double)"
"com.android.internal.os.BatteryStatsHelper.addFlashlightUsage()","android.os.BatteryStats.getFlashlightOnTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.addFlashlightUsage()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addEntry(DrainType, long, double)","com.android.internal.os.BatteryStatsHelper.addEntryNoTotal(com.android.internal.os.BatterySipper.DrainType, long, double)"
"com.android.internal.os.BatteryStatsHelper.addBluetoothUsage()","com.android.internal.os.BatteryStatsHelper.aggregateSippers(com.android.internal.os.BatterySipper, java.util.List<com.android.internal.os.BatterySipper>, java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.addBluetoothUsage()","android.os.BatteryStats.getBluetoothPingCount()"
"com.android.internal.os.BatteryStatsHelper.addBluetoothUsage()","com.android.internal.os.BatteryStatsHelper.addEntry(com.android.internal.os.BatterySipper.DrainType, long, double)"
"com.android.internal.os.BatteryStatsHelper.addBluetoothUsage()","android.os.BatteryStats.getBluetoothOnTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.addBluetoothUsage()","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, int)","com.android.internal.os.BatteryStatsHelper.refreshStats(int, android.util.SparseArray<android.os.UserHandle>)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, int)","android.util.SparseArray.put(int, android.os.UserHandle)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, List)","java.util.List.size()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, List)","android.os.UserHandle.getIdentifier()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, List)","com.android.internal.os.BatteryStatsHelper.refreshStats(int, android.util.SparseArray<android.os.UserHandle>)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, List)","java.util.List.get(int)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, List)","android.util.SparseArray.put(int, android.os.UserHandle)"
"com.android.internal.os.BatteryStatsHelper.getStats()","com.android.internal.os.BatteryStatsHelper.load()"
"com.android.internal.os.BatteryStatsHelper.getBatteryBroadcast()","com.android.internal.os.BatteryStatsHelper.load()"
"com.android.internal.os.BatteryStatsHelper.makeFilePath(Context, String)","android.content.Context.getFilesDir()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.UserHandle.getUserId(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","java.util.Map.size()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","java.util.List.add(com.android.internal.os.BatterySipper)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.util.SparseArray.size()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.util.SparseArray.get(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.Wakelock.getWakeTime(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.util.SparseArray.put(int, java.lang.Double)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.util.SparseArray.keyAt(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","com.android.internal.os.PowerProfile.getAveragePower(java.lang.String, int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.Proc.getSystemTime(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getNetworkActivityPackets(int, int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.Proc.getForegroundTime(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","com.android.internal.os.BatteryStatsHelper.getMobilePowerPerPacket()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.Proc.getUserTime(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","com.android.internal.os.BatteryStatsHelper.getMobilePowerPerMs()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getProcessStats()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.UserHandle.getAppId(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","com.android.internal.os.PowerProfile.getNumSpeedSteps()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getWifiScanTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getWifiBatchedScanTime(int, long, int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","java.util.Map.Entry.getKey()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getWifiRunningTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.Sensor.getSensorTime()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getWakelockStats()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getMobileRadioActiveCount(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","com.android.internal.os.BatteryStatsHelper.getWifiPowerPerPacket()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","java.lang.String.startsWith(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.hardware.Sensor.getPower()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.hardware.Sensor.getHandle()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Timer.getTotalTimeLocked(long, int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.util.SparseArray.put(int, java.util.List<com.android.internal.os.BatterySipper>)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.content.Context.getSystemService(java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getMobileRadioActiveTime(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.hardware.SensorManager.getSensorList(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.util.SparseArray.valueAt(int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","java.util.Map.Entry.getValue()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","java.util.Map.entrySet()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.getScreenOnTime(long, int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.getUidStats()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getSensorStats()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getUid()"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.getNetworkActivityBytes(int, int)"
"com.android.internal.os.BatteryStatsHelper.processAppUsage(SparseArray)","android.os.BatteryStats.Uid.Proc.getTimeAtCpuSpeedStep(int, int)"
"com.android.internal.os.BatteryStatsHelper.aggregateSippers(BatterySipper, List, String)","java.util.List.size()"
"com.android.internal.os.BatteryStatsHelper.aggregateSippers(BatterySipper, List, String)","com.android.internal.os.BatterySipper.computeMobilemspp()"
"com.android.internal.os.BatteryStatsHelper.aggregateSippers(BatterySipper, List, String)","java.util.List.get(int)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray)","com.android.internal.os.BatteryStatsHelper.refreshStats(int, android.util.SparseArray<android.os.UserHandle>, long, long)"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray)","android.os.SystemClock.uptimeMillis()"
"com.android.internal.os.BatteryStatsHelper.refreshStats(int, SparseArray)","android.os.SystemClock.elapsedRealtime()"
"com.android.internal.os.BatteryStatsHelper.dropFile(Context, String)","com.android.internal.os.BatteryStatsHelper.makeFilePath(android.content.Context, java.lang.String)"
"com.android.internal.os.BatteryStatsHelper.dropFile(Context, String)","java.io.File.delete()"
"com.android.internal.os.RuntimeInit.parseArgs(String[])","java.lang.String.startsWith(java.lang.String)"
"com.android.internal.os.RuntimeInit.parseArgs(String[])","java.lang.String.equals(java.lang.String)"
"com.android.internal.os.RuntimeInit.parseArgs(String[])","java.lang.System.arraycopy(java.lang.String[], int, java.lang.String[], int, int)"
"com.android.internal.os.RuntimeInit.main(String[])","com.android.internal.os.RuntimeInit.nativeFinishInit()"
"com.android.internal.os.RuntimeInit.main(String[])","java.lang.String.equals(java.lang.String)"
"com.android.internal.os.RuntimeInit.main(String[])","com.android.internal.os.RuntimeInit.redirectLogStreams()"
"com.android.internal.os.RuntimeInit.main(String[])","com.android.internal.os.RuntimeInit.commonInit()"
"com.android.internal.os.RuntimeInit.wtf(String, Throwable, boolean)","android.os.Process.killProcess(int)"
"com.android.internal.os.RuntimeInit.wtf(String, Throwable, boolean)","android.app.ActivityManagerNative.getDefault()"
"com.android.internal.os.RuntimeInit.wtf(String, Throwable, boolean)","android.os.Process.myPid()"
"com.android.internal.os.RuntimeInit.wtf(String, Throwable, boolean)","android.app.IActivityManager.handleApplicationWtf(android.os.IBinder, java.lang.String, boolean, android.app.ApplicationErrorReport.CrashInfo)"
"com.android.internal.os.RuntimeInit.wtf(String, Throwable, boolean)","java.lang.System.exit(int)"
"com.android.internal.os.RuntimeInit.applicationInit(int, String[], ClassLoader)","com.android.internal.os.RuntimeInit.invokeStaticMain(java.lang.String, java.lang.String[], java.lang.ClassLoader)"
"com.android.internal.os.RuntimeInit.applicationInit(int, String[], ClassLoader)","com.android.internal.os.RuntimeInit.nativeSetExitWithoutCleanup(boolean)"
"com.android.internal.os.RuntimeInit.wrapperInit(int, String[])","com.android.internal.os.RuntimeInit.applicationInit(int, java.lang.String[], null)"
"com.android.internal.os.RuntimeInit.getDefaultUserAgent()","java.lang.StringBuilder.append(java.lang.String)"
"com.android.internal.os.RuntimeInit.getDefaultUserAgent()","java.lang.StringBuilder.toString()"
"com.android.internal.os.RuntimeInit.getDefaultUserAgent()","java.lang.String.equals(java.lang.String)"
"com.android.internal.os.RuntimeInit.getDefaultUserAgent()","java.lang.System.getProperty(java.lang.String)"
"com.android.internal.os.RuntimeInit.getDefaultUserAgent()","java.lang.String.length()"
"com.android.internal.os.RuntimeInit.redirectLogStreams()","java.io.PrintStream.close()"
"com.android.internal.os.RuntimeInit.redirectLogStreams()","java.lang.System.setOut(com.android.internal.os.AndroidPrintStream)"
"com.android.internal.os.RuntimeInit.redirectLogStreams()","java.lang.System.setErr(com.android.internal.os.AndroidPrintStream)"
"com.android.internal.os.RuntimeInit.commonInit()","android.os.SystemProperties.get(java.lang.String)"
"com.android.internal.os.RuntimeInit.commonInit()","java.util.logging.LogManager.getLogManager()"
"com.android.internal.os.RuntimeInit.commonInit()","com.android.internal.os.RuntimeInit.getDefaultUserAgent()"
"com.android.internal.os.RuntimeInit.commonInit()","java.util.TimeZone.setDefault(null)"
"com.android.internal.os.RuntimeInit.commonInit()","java.util.logging.LogManager.reset()"
"com.android.internal.os.RuntimeInit.commonInit()","java.lang.System.setProperty(java.lang.String, java.lang.String)"
"com.android.internal.os.RuntimeInit.commonInit()","com.android.server.NetworkManagementSocketTagger.install()"
"com.android.internal.os.RuntimeInit.commonInit()","java.lang.String.equals(java.lang.String)"
"com.android.internal.os.RuntimeInit.commonInit()","java.lang.Thread.setDefaultUncaughtExceptionHandler(com.android.internal.os.RuntimeInit.UncaughtHandler)"
"com.android.internal.os.RuntimeInit.commonInit()","android.os.Debug.enableEmulatorTraceOutput()"
"com.android.internal.os.RuntimeInit.Clog_e(String, String, Throwable)","android.util.Log.getStackTraceString(java.lang.Throwable)"
"com.android.internal.os.RuntimeInit.Clog_e(String, String, Throwable)","android.util.Log.println_native(int, int, java.lang.String, java.lang.String)"
"com.android.internal.os.RuntimeInit.invokeStaticMain(String, String[], ClassLoader)","java.lang.Class.getMethod(java.lang.String, java.lang.Class[])"
"com.android.internal.os.RuntimeInit.invokeStaticMain(String, String[], ClassLoader)","java.lang.reflect.Method.getModifiers()"
"com.android.internal.os.RuntimeInit.invokeStaticMain(String, String[], ClassLoader)","java.lang.reflect.Modifier.isPublic(int)"
"com.android.internal.os.RuntimeInit.invokeStaticMain(String, String[], ClassLoader)","java.lang.reflect.Modifier.isStatic(int)"
"com.android.internal.os.RuntimeInit.invokeStaticMain(String, String[], ClassLoader)","java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader)"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","android.os.Process.killProcess(int)"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","java.lang.StringBuilder.append(int)"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","java.lang.StringBuilder.append(java.lang.String)"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","com.android.internal.os.RuntimeInit.Clog_e(java.lang.String, java.lang.String, java.lang.Throwable)"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","java.lang.StringBuilder.toString()"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","android.app.ActivityManagerNative.getDefault()"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","android.os.Process.myPid()"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","java.lang.Thread.getName()"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","java.lang.System.exit(int)"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","android.app.ActivityThread.currentProcessName()"
"com.android.internal.os.RuntimeInit.uncaughtException(Thread, Throwable)","android.app.IActivityManager.handleApplicationCrash(android.os.IBinder, android.app.ApplicationErrorReport.CrashInfo)"
"com.android.internal.os.RuntimeInit.zygoteInit(int, String[], ClassLoader)","com.android.internal.os.RuntimeInit.redirectLogStreams()"
"com.android.internal.os.RuntimeInit.zygoteInit(int, String[], ClassLoader)","com.android.internal.os.RuntimeInit.commonInit()"
"com.android.internal.os.RuntimeInit.zygoteInit(int, String[], ClassLoader)","com.android.internal.os.RuntimeInit.nativeZygoteInit()"
"com.android.internal.os.RuntimeInit.zygoteInit(int, String[], ClassLoader)","com.android.internal.os.RuntimeInit.applicationInit(int, java.lang.String[], java.lang.ClassLoader)"
"com.android.internal.util.WithFramework.printUsage()","java.io.PrintStream.println(java.lang.String)"
"com.android.internal.util.WithFramework.printUsage()","java.lang.Class.getName()"
"com.android.internal.util.WithFramework.main(String[])","java.lang.System.loadLibrary(java.lang.String)"
"com.android.internal.util.WithFramework.main(String[])","java.lang.Class.getMethod(java.lang.String, java.lang.Class<java.lang.String[]>)"
"com.android.internal.util.WithFramework.main(String[])","java.lang.Class.forName(java.lang.String)"
"com.android.internal.util.WithFramework.main(String[])","com.android.internal.util.WithFramework.registerNatives()"
"com.android.internal.util.WithFramework.main(String[])","java.lang.reflect.Method.invoke(null, java.lang.Object[])"
"com.android.internal.util.WithFramework.main(String[])","com.android.internal.util.WithFramework.printUsage()"
"com.android.internal.util.WithFramework.main(String[])","java.lang.System.arraycopy(java.lang.String[], int, java.lang.String[], int, int)"
"android.speech.RecognizerIntent.getVoiceDetailsIntent(Context)","android.os.BaseBundle.getString(java.lang.String)"
"android.speech.RecognizerIntent.getVoiceDetailsIntent(Context)","android.content.pm.PackageManager.resolveActivity(android.content.Intent, int)"
"android.speech.RecognizerIntent.getVoiceDetailsIntent(Context)","android.content.Context.getPackageManager()"
"android.speech.RecognizerIntent.getVoiceDetailsIntent(Context)","android.content.Intent.setComponent(android.content.ComponentName)"
"android.net.SamplingDataTracker.stopSampling(SamplingSnapshot)","android.net.SamplingDataTracker.getSampledPacketCount(android.net.SamplingDataTracker.SamplingSnapshot, android.net.SamplingDataTracker.SamplingSnapshot)"
"android.net.SamplingDataTracker.setCommonLinkQualityInfoFields(LinkQualityInfo)","android.net.LinkQualityInfo.setPacketErrorCount(long)"
"android.net.SamplingDataTracker.setCommonLinkQualityInfoFields(LinkQualityInfo)","android.net.SamplingDataTracker.getSampledPacketCount()"
"android.net.SamplingDataTracker.setCommonLinkQualityInfoFields(LinkQualityInfo)","android.net.SamplingDataTracker.getSampledPacketErrorCount()"
"android.net.SamplingDataTracker.setCommonLinkQualityInfoFields(LinkQualityInfo)","android.net.LinkQualityInfo.setDataSampleDuration(int)"
"android.net.SamplingDataTracker.setCommonLinkQualityInfoFields(LinkQualityInfo)","android.net.LinkQualityInfo.setPacketCount(long)"
"android.net.SamplingDataTracker.setCommonLinkQualityInfoFields(LinkQualityInfo)","android.net.SamplingDataTracker.getSampleDuration()"
"android.net.SamplingDataTracker.setCommonLinkQualityInfoFields(LinkQualityInfo)","android.net.LinkQualityInfo.setLastDataSampleTime(long)"
"android.net.SamplingDataTracker.setCommonLinkQualityInfoFields(LinkQualityInfo)","android.net.SamplingDataTracker.getSampleTimestamp()"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.lang.String.split(java.lang.String)"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.util.Iterator.next()"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.io.BufferedReader.close()"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.util.Iterator.hasNext()"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.io.BufferedReader.readLine()"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.util.Map.containsKey(java.lang.String)"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.util.Map.entrySet()"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.util.Map.Entry.getValue()"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.lang.String.trim()"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","android.os.SystemClock.elapsedRealtime()"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.lang.Long.parseLong(java.lang.String)"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.util.Map.put(java.lang.String, android.net.SamplingDataTracker.SamplingSnapshot)"
"android.net.SamplingDataTracker.getSamplingSnapshots(Map)","java.util.Set.iterator()"
"android.net.SamplingDataTracker.getSampledPacketCount()","android.net.SamplingDataTracker.getSampledPacketCount(android.net.SamplingDataTracker.SamplingSnapshot, android.net.SamplingDataTracker.SamplingSnapshot)"
"android.net.SamplingDataTracker.getSampledPacketErrorCount()","android.net.SamplingDataTracker.getSampledTxPacketErrorCount()"
"android.net.SamplingDataTracker.getSampledPacketErrorCount()","android.net.SamplingDataTracker.getSampledRxPacketErrorCount()"
"android.widget.NumberPicker.computeScroll()","android.widget.Scroller.getStartY()"
"android.widget.NumberPicker.computeScroll()","android.widget.Scroller.isFinished()"
"android.widget.NumberPicker.computeScroll()","android.widget.Scroller.computeScrollOffset()"
"android.widget.NumberPicker.computeScroll()","android.widget.Scroller.getCurrY()"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.view.MotionEvent.getY()"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","java.lang.Math.abs(float)"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.view.MotionEvent.getEventTime()"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.widget.NumberPicker.PressedStateHelper.buttonTapped(int)"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.view.VelocityTracker.obtain()"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.view.VelocityTracker.recycle()"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","java.lang.Math.abs(int)"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.widget.NumberPicker.PressedStateHelper.cancel()"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.view.ViewConfiguration.getTapTimeout()"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.view.VelocityTracker.computeCurrentVelocity(int, int)"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"android.widget.NumberPicker.onTouchEvent(MotionEvent)","android.view.VelocityTracker.getYVelocity()"
"android.widget.NumberPicker.onScrollStateChange(int)","android.widget.NumberPicker.OnScrollListener.onScrollStateChange(android.widget.NumberPicker, int)"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualText(int)","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualText(int)","android.view.accessibility.AccessibilityManager.getInstance(android.content.Context)"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualText(int)","android.view.accessibility.AccessibilityEvent.obtain(int)"
"android.widget.NumberPicker.formatNumber(int)","android.widget.NumberPicker.Formatter.format(int)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.String.startsWith(java.lang.String)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.CharSequence.subSequence(int, int)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","android.text.method.NumberKeyListener.filter(java.lang.CharSequence, int, int, android.text.Spanned, int, int)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.String.valueOf(java.lang.CharSequence)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.String.equals(java.lang.String)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.String.valueOf(int)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.CharSequence.length()"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.String.toLowerCase()"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.String.subSequence(int, int)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.String.valueOf(java.lang.String)"
"android.widget.NumberPicker.filter(CharSequence, int, int, Spanned, int, int)","java.lang.String.length()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualButton(int, int, String)","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualButton(int, int, String)","android.view.accessibility.AccessibilityEvent.setPackageName(java.lang.String)"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualButton(int, int, String)","android.content.Context.getPackageName()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualButton(int, int, String)","java.util.List.add(java.lang.String)"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualButton(int, int, String)","android.view.accessibility.AccessibilityManager.getInstance(android.content.Context)"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualButton(int, int, String)","android.view.accessibility.AccessibilityEvent.obtain(int)"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualButton(int, int, String)","java.lang.Class.getName()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualButton(int, int, String)","android.view.accessibility.AccessibilityRecord.getText()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualButton(int, int, String)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.NumberPicker.performAction(int, int, Bundle)","android.view.accessibility.AccessibilityNodeProvider.performAction(int, int, android.os.Bundle)"
"android.widget.NumberPicker.performAction(int, int, Bundle)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.sendAccessibilityEventForVirtualView(int, int)"
"android.widget.NumberPicker.dispatchKeyEvent(KeyEvent)","android.widget.Scroller.isFinished()"
"android.widget.NumberPicker.dispatchKeyEvent(KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.widget.NumberPicker.dispatchKeyEvent(KeyEvent)","android.view.KeyEvent.getAction()"
"android.widget.NumberPicker.showSoftInput()","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualView(int, int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.sendAccessibilityEventForVirtualButton(int, int, java.lang.String)"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualView(int, int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.sendAccessibilityEventForVirtualText(int)"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualView(int, int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.getVirtualIncrementButtonText()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualView(int, int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.hasVirtualDecrementButton()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualView(int, int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.getVirtualDecrementButtonText()"
"android.widget.NumberPicker.sendAccessibilityEventForVirtualView(int, int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.hasVirtualIncrementButton()"
"android.widget.NumberPicker.dispatchTouchEvent(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.widget.NumberPicker.postChangeCurrentByOneFromLongPress(boolean, long)","android.widget.NumberPicker.ChangeCurrentByOneFromLongPressCommand.setStep(boolean)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForVirtualButton(int, String, int, int, int, int)","android.content.Context.getPackageName()"
"android.widget.NumberPicker.createAccessibilityNodeInfoForVirtualButton(int, String, int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.setClickable(boolean)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForVirtualButton(int, String, int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForVirtualButton(int, String, int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.obtain()"
"android.widget.NumberPicker.createAccessibilityNodeInfoForVirtualButton(int, String, int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.setText(java.lang.String)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForVirtualButton(int, String, int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.setPackageName(java.lang.String)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForVirtualButton(int, String, int, int, int, int)","java.lang.Class.getName()"
"android.widget.NumberPicker.createAccessibilityNodeInfoForVirtualButton(int, String, int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.setLongClickable(boolean)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForVirtualButton(int, String, int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.addAction(int)"
"android.widget.NumberPicker.ensureCachedScrollSelectorValue(int)","android.util.SparseArray.put(int, java.lang.String)"
"android.widget.NumberPicker.ensureCachedScrollSelectorValue(int)","android.util.SparseArray.get(int)"
"android.widget.NumberPicker.ensureScrollWheelAdjusted()","java.lang.Math.abs(int)"
"android.widget.NumberPicker.ensureScrollWheelAdjusted()","android.widget.Scroller.startScroll(int, int, int, int, int)"
"android.widget.NumberPicker.moveToFinalScrollerPosition(Scroller)","java.lang.Math.abs(int)"
"android.widget.NumberPicker.moveToFinalScrollerPosition(Scroller)","android.widget.Scroller.forceFinished(boolean)"
"android.widget.NumberPicker.moveToFinalScrollerPosition(Scroller)","android.widget.Scroller.getCurrY()"
"android.widget.NumberPicker.moveToFinalScrollerPosition(Scroller)","android.widget.Scroller.getFinalY()"
"android.widget.NumberPicker.onClick(View)","android.view.View.getId()"
"android.widget.NumberPicker.createAccessibilityNodeInfo(int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.createAccessibiltyNodeInfoForInputText(int, int, int, int)"
"android.widget.NumberPicker.createAccessibilityNodeInfo(int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)"
"android.widget.NumberPicker.createAccessibilityNodeInfo(int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.createAccessibilityNodeInfoForVirtualButton(int, java.lang.String, int, int, int, int)"
"android.widget.NumberPicker.createAccessibilityNodeInfo(int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.getVirtualIncrementButtonText()"
"android.widget.NumberPicker.createAccessibilityNodeInfo(int)","android.view.accessibility.AccessibilityNodeProvider.createAccessibilityNodeInfo(int)"
"android.widget.NumberPicker.createAccessibilityNodeInfo(int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.getVirtualDecrementButtonText()"
"android.widget.NumberPicker.dispatchTrackballEvent(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.widget.NumberPicker.formatNumberWithLocale(int)","java.lang.String.format(java.util.Locale, java.lang.String, int)"
"android.widget.NumberPicker.formatNumberWithLocale(int)","java.util.Locale.getDefault()"
"android.widget.NumberPicker.onInterceptTouchEvent(MotionEvent)","android.widget.NumberPicker.PressedStateHelper.buttonPressDelayed(int)"
"android.widget.NumberPicker.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getY()"
"android.widget.NumberPicker.onInterceptTouchEvent(MotionEvent)","android.widget.Scroller.isFinished()"
"android.widget.NumberPicker.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getEventTime()"
"android.widget.NumberPicker.onInterceptTouchEvent(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.widget.NumberPicker.onInterceptTouchEvent(MotionEvent)","android.widget.Scroller.forceFinished(boolean)"
"android.widget.NumberPicker.getSelectedPos(String)","java.lang.String.startsWith(java.lang.String)"
"android.widget.NumberPicker.getSelectedPos(String)","java.lang.String.toLowerCase()"
"android.widget.NumberPicker.getSelectedPos(String)","java.lang.Integer.parseInt(java.lang.String)"
"android.widget.NumberPicker.fling(int)","android.widget.Scroller.fling(int, int, int, int, int, int, int, int)"
"android.widget.NumberPicker.findAccessibilityNodeInfosByText(String, int)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.widget.NumberPicker.findAccessibilityNodeInfosByText(String, int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.findAccessibilityNodeInfosByTextInChild(java.lang.String, int, java.util.List<android.view.accessibility.AccessibilityNodeInfo>)"
"android.widget.NumberPicker.findAccessibilityNodeInfosByText(String, int)","android.view.accessibility.AccessibilityNodeProvider.findAccessibilityNodeInfosByText(java.lang.String, int)"
"android.widget.NumberPicker.findAccessibilityNodeInfosByText(String, int)","java.util.Collections.emptyList()"
"android.widget.NumberPicker.findAccessibilityNodeInfosByText(String, int)","java.lang.String.toLowerCase()"
"android.widget.NumberPicker.buttonPressDelayed(int)","android.widget.NumberPicker.PressedStateHelper.cancel()"
"android.widget.NumberPicker.resolveSizeAndStateRespectingMinSize(int, int, int)","java.lang.Math.max(int, int)"
"android.widget.NumberPicker.dispatchHoverEvent(MotionEvent)","android.view.accessibility.AccessibilityManager.isEnabled()"
"android.widget.NumberPicker.dispatchHoverEvent(MotionEvent)","android.view.MotionEvent.getY()"
"android.widget.NumberPicker.dispatchHoverEvent(MotionEvent)","android.view.accessibility.AccessibilityManager.getInstance(android.content.Context)"
"android.widget.NumberPicker.dispatchHoverEvent(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.widget.NumberPicker.dispatchHoverEvent(MotionEvent)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.performAction(int, int, null)"
"android.widget.NumberPicker.dispatchHoverEvent(MotionEvent)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.sendAccessibilityEventForVirtualView(int, int)"
"android.widget.NumberPicker.onDraw(Canvas)","android.util.SparseArray.get(int)"
"android.widget.NumberPicker.changeValueByOne(boolean)","android.widget.Scroller.startScroll(int, int, int, int, int)"
"android.widget.NumberPicker.notifyChange(int, int)","android.widget.NumberPicker.OnValueChangeListener.onValueChange(android.widget.NumberPicker, int, int)"
"android.widget.NumberPicker.setValueInternal(int, boolean)","java.lang.Math.max(int, int)"
"android.widget.NumberPicker.setValueInternal(int, boolean)","java.lang.Math.min(int, int)"
"android.widget.NumberPicker.hideSoftInput()","android.view.inputmethod.InputMethodManager.peekInstance()"
"android.widget.NumberPicker.validateInputTextView(View)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.widget.NumberPicker.removeAllCallbacks()","android.widget.NumberPicker.PressedStateHelper.cancel()"
"android.widget.NumberPicker.makeMeasureSpec(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.widget.NumberPicker.makeMeasureSpec(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.NumberPicker.makeMeasureSpec(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.widget.NumberPicker.makeMeasureSpec(int, int)","java.lang.Math.min(int, int)"
"android.widget.NumberPicker.createAccessibiltyNodeInfoForInputText(int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.addAction(int)"
"android.widget.NumberPicker.buttonTapped(int)","android.widget.NumberPicker.PressedStateHelper.cancel()"
"android.widget.NumberPicker.updateInputTextView()","android.text.TextUtils.isEmpty(java.lang.String)"
"android.widget.NumberPicker.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setScrollY(int)"
"android.widget.NumberPicker.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.NumberPicker.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setMaxScrollY(int)"
"android.widget.NumberPicker.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.NumberPicker.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setScrollable(boolean)"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.createAccessibilityNodeInfo(int)"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.getVirtualIncrementButtonText()"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","java.lang.CharSequence.toString()"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","java.lang.String.toString()"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.getVirtualDecrementButtonText()"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","java.lang.String.toLowerCase()"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","java.lang.String.contains(java.lang.String)"
"android.widget.NumberPicker.findAccessibilityNodeInfosByTextInChild(String, int, List)","java.util.List.add(android.view.accessibility.AccessibilityNodeInfo)"
"android.widget.NumberPicker.initializeSelectorWheelIndices()","android.util.SparseArray.clear()"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","android.content.Context.getPackageName()"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.setParent(android.view.View)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.obtain()"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.setScrollable(boolean)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.hasVirtualDecrementButton()"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.setPackageName(java.lang.String)"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","java.lang.Class.getName()"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","android.widget.NumberPicker.AccessibilityNodeProviderImpl.hasVirtualIncrementButton()"
"android.widget.NumberPicker.createAccessibilityNodeInfoForNumberPicker(int, int, int, int)","android.view.accessibility.AccessibilityNodeInfo.addAction(int)"
"android.widget.NumberPicker.onLongClick(View)","android.view.View.getId()"
"com.android.internal.util.FastPrintWriter.append(CharSequence, int, int)","com.android.internal.util.FastPrintWriter.write(java.lang.String, int, int)"
"com.android.internal.util.FastPrintWriter.append(CharSequence, int, int)","java.lang.CharSequence.toString()"
"com.android.internal.util.FastPrintWriter.append(CharSequence, int, int)","java.lang.CharSequence.subSequence(int, int)"
"com.android.internal.util.FastPrintWriter.append(CharSequence, int, int)","java.lang.String.length()"
"com.android.internal.util.FastPrintWriter.flushBytesLocked()","java.nio.ByteBuffer.flip()"
"com.android.internal.util.FastPrintWriter.flushBytesLocked()","java.io.OutputStream.write(byte[], int, int)"
"com.android.internal.util.FastPrintWriter.flushBytesLocked()","java.nio.ByteBuffer.clear()"
"com.android.internal.util.FastPrintWriter.flushBytesLocked()","java.nio.ByteBuffer.array()"
"com.android.internal.util.FastPrintWriter.flushBytesLocked()","java.nio.Buffer.position()"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.lang.String.charAt(int)"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.nio.charset.CoderResult.isError()"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.nio.charset.CoderResult.toString()"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.nio.charset.CharsetEncoder.encode(java.nio.CharBuffer, java.nio.ByteBuffer, boolean)"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.nio.charset.CoderResult.isOverflow()"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.nio.CharBuffer.wrap(char[], int, int)"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.io.OutputStream.flush()"
"com.android.internal.util.FastPrintWriter.flushLocked()","android.util.Printer.println(java.lang.String)"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.io.Writer.flush()"
"com.android.internal.util.FastPrintWriter.flushLocked()","com.android.internal.util.FastPrintWriter.flushBytesLocked()"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.lang.String.length()"
"com.android.internal.util.FastPrintWriter.flushLocked()","java.io.Writer.write(char[], int, int)"
"com.android.internal.util.FastPrintWriter.println(int)","java.io.PrintWriter.println(java.lang.String)"
"com.android.internal.util.FastPrintWriter.println(int)","java.io.PrintWriter.println(int)"
"com.android.internal.util.FastPrintWriter.print(char)","com.android.internal.util.FastPrintWriter.appendLocked(char)"
"com.android.internal.util.FastPrintWriter.print(long)","java.io.PrintWriter.print(long)"
"com.android.internal.util.FastPrintWriter.print(long)","com.android.internal.util.FastPrintWriter.print(java.lang.String)"
"com.android.internal.util.FastPrintWriter.checkError()","com.android.internal.util.FastPrintWriter.flush()"
"com.android.internal.util.FastPrintWriter.println()","com.android.internal.util.FastPrintWriter.setError()"
"com.android.internal.util.FastPrintWriter.println()","com.android.internal.util.FastPrintWriter.flushLocked()"
"com.android.internal.util.FastPrintWriter.println()","com.android.internal.util.FastPrintWriter.appendLocked(java.lang.String, int, int)"
"com.android.internal.util.FastPrintWriter.println()","java.lang.String.length()"
"com.android.internal.util.FastPrintWriter.write(int)","com.android.internal.util.FastPrintWriter.appendLocked(char)"
"com.android.internal.util.FastPrintWriter.print(int)","java.io.PrintWriter.print(int)"
"com.android.internal.util.FastPrintWriter.print(int)","com.android.internal.util.FastPrintWriter.print(java.lang.String)"
"com.android.internal.util.FastPrintWriter.print(String)","com.android.internal.util.FastPrintWriter.setError()"
"com.android.internal.util.FastPrintWriter.print(String)","com.android.internal.util.FastPrintWriter.appendLocked(java.lang.String, int, int)"
"com.android.internal.util.FastPrintWriter.print(String)","java.lang.String.valueOf(java.lang.Object)"
"com.android.internal.util.FastPrintWriter.print(String)","java.lang.String.length()"
"com.android.internal.util.FastPrintWriter.initEncoder(String)","java.nio.charset.CharsetEncoder.onMalformedInput(java.nio.charset.CodingErrorAction)"
"com.android.internal.util.FastPrintWriter.initEncoder(String)","java.nio.charset.Charset.forName(java.lang.String)"
"com.android.internal.util.FastPrintWriter.initEncoder(String)","java.nio.charset.CharsetEncoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)"
"com.android.internal.util.FastPrintWriter.initEncoder(String)","java.nio.charset.Charset.newEncoder()"
"com.android.internal.util.FastPrintWriter.initDefaultEncoder()","java.nio.charset.CharsetEncoder.onMalformedInput(java.nio.charset.CodingErrorAction)"
"com.android.internal.util.FastPrintWriter.initDefaultEncoder()","java.nio.charset.Charset.defaultCharset()"
"com.android.internal.util.FastPrintWriter.initDefaultEncoder()","java.nio.charset.CharsetEncoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)"
"com.android.internal.util.FastPrintWriter.initDefaultEncoder()","java.nio.charset.Charset.newEncoder()"
"com.android.internal.util.FastPrintWriter.print(char[])","com.android.internal.util.FastPrintWriter.appendLocked(char[], int, int)"
"com.android.internal.util.FastPrintWriter.close()","java.io.OutputStream.close()"
"com.android.internal.util.FastPrintWriter.close()","com.android.internal.util.FastPrintWriter.setError()"
"com.android.internal.util.FastPrintWriter.close()","com.android.internal.util.FastPrintWriter.flushLocked()"
"com.android.internal.util.FastPrintWriter.close()","java.io.Writer.close()"
"com.android.internal.util.FastPrintWriter.println(long)","java.io.PrintWriter.println(java.lang.String)"
"com.android.internal.util.FastPrintWriter.println(long)","java.io.PrintWriter.println(long)"
"com.android.internal.util.FastPrintWriter.write(char[], int, int)","com.android.internal.util.FastPrintWriter.appendLocked(char[], int, int)"
"com.android.internal.util.FastPrintWriter.println(char)","com.android.internal.util.FastPrintWriter.print(char)"
"com.android.internal.util.FastPrintWriter.println(char)","com.android.internal.util.FastPrintWriter.println()"
"com.android.internal.util.FastPrintWriter.appendLocked(String, int, int)","java.lang.String.getChars(int, int, char[], int)"
"com.android.internal.util.FastPrintWriter.appendLocked(String, int, int)","com.android.internal.util.FastPrintWriter.flushLocked()"
"com.android.internal.util.FastPrintWriter.appendLocked(String, int, int)","com.android.internal.util.FastPrintWriter.appendLocked(java.lang.String, int, int)"
"com.android.internal.util.FastPrintWriter.println(char[])","com.android.internal.util.FastPrintWriter.print(char[])"
"com.android.internal.util.FastPrintWriter.println(char[])","com.android.internal.util.FastPrintWriter.println()"
"com.android.internal.util.FastPrintWriter.appendLocked(char)","com.android.internal.util.FastPrintWriter.flushLocked()"
"com.android.internal.util.FastPrintWriter.flush()","com.android.internal.util.FastPrintWriter.setError()"
"com.android.internal.util.FastPrintWriter.flush()","com.android.internal.util.FastPrintWriter.flushLocked()"
"com.android.internal.util.FastPrintWriter.flush()","java.io.OutputStream.flush()"
"com.android.internal.util.FastPrintWriter.flush()","java.io.Writer.flush()"
"com.android.internal.util.FastPrintWriter.write(String, int, int)","com.android.internal.util.FastPrintWriter.appendLocked(java.lang.String, int, int)"
"com.android.internal.util.FastPrintWriter.write(String)","com.android.internal.util.FastPrintWriter.appendLocked(java.lang.String, int, int)"
"com.android.internal.util.FastPrintWriter.write(String)","java.lang.String.length()"
"com.android.internal.util.FastPrintWriter.appendLocked(char[], int, int)","com.android.internal.util.FastPrintWriter.flushLocked()"
"com.android.internal.util.FastPrintWriter.appendLocked(char[], int, int)","java.lang.System.arraycopy(char[], int, char[], int, int)"
"com.android.internal.util.FastPrintWriter.appendLocked(char[], int, int)","com.android.internal.util.FastPrintWriter.appendLocked(char[], int, int)"
"android.hardware.camera2.utils.CloseableLock.close()","android.hardware.camera2.utils.CloseableLock.acquireExclusiveLock()"
"android.hardware.camera2.utils.CloseableLock.close()","java.lang.ThreadLocal.remove()"
"android.hardware.camera2.utils.CloseableLock.close()","java.util.concurrent.locks.ReentrantLock.lock()"
"android.hardware.camera2.utils.CloseableLock.close()","android.hardware.camera2.utils.CloseableLock.log(java.lang.String)"
"android.hardware.camera2.utils.CloseableLock.close()","java.lang.ThreadLocal.get()"
"android.hardware.camera2.utils.CloseableLock.close()","java.util.concurrent.locks.Condition.signalAll()"
"android.hardware.camera2.utils.CloseableLock.close()","java.util.concurrent.locks.ReentrantLock.unlock()"
"android.hardware.camera2.utils.CloseableLock.acquireLock()","java.util.concurrent.locks.ReentrantLock.lock()"
"android.hardware.camera2.utils.CloseableLock.acquireLock()","java.util.concurrent.locks.Condition.awaitUninterruptibly()"
"android.hardware.camera2.utils.CloseableLock.acquireLock()","java.lang.ThreadLocal.set(int)"
"android.hardware.camera2.utils.CloseableLock.acquireLock()","android.hardware.camera2.utils.CloseableLock.log(java.lang.String)"
"android.hardware.camera2.utils.CloseableLock.acquireLock()","java.lang.ThreadLocal.get()"
"android.hardware.camera2.utils.CloseableLock.acquireLock()","java.util.concurrent.locks.ReentrantLock.unlock()"
"android.hardware.camera2.utils.CloseableLock.acquireExclusiveLock()","java.util.concurrent.locks.ReentrantLock.lock()"
"android.hardware.camera2.utils.CloseableLock.acquireExclusiveLock()","java.util.concurrent.locks.Condition.awaitUninterruptibly()"
"android.hardware.camera2.utils.CloseableLock.acquireExclusiveLock()","java.lang.ThreadLocal.set(int)"
"android.hardware.camera2.utils.CloseableLock.acquireExclusiveLock()","android.hardware.camera2.utils.CloseableLock.log(java.lang.String)"
"android.hardware.camera2.utils.CloseableLock.acquireExclusiveLock()","java.lang.ThreadLocal.get()"
"android.hardware.camera2.utils.CloseableLock.acquireExclusiveLock()","java.util.concurrent.locks.ReentrantLock.unlock()"
"android.hardware.camera2.utils.CloseableLock.releaseLock()","java.util.concurrent.locks.ReentrantLock.lock()"
"android.hardware.camera2.utils.CloseableLock.releaseLock()","java.lang.ThreadLocal.set(int)"
"android.hardware.camera2.utils.CloseableLock.releaseLock()","android.hardware.camera2.utils.CloseableLock.log(java.lang.String)"
"android.hardware.camera2.utils.CloseableLock.releaseLock()","java.lang.ThreadLocal.get()"
"android.hardware.camera2.utils.CloseableLock.releaseLock()","java.util.concurrent.locks.Condition.signalAll()"
"android.hardware.camera2.utils.CloseableLock.releaseLock()","java.util.concurrent.locks.ReentrantLock.unlock()"
"android.content.Entity.toString()","android.content.Entity.getEntityValues()"
"android.content.Entity.toString()","android.content.Entity.getSubValues()"
"android.content.Entity.toString()","java.lang.StringBuilder.append(android.content.ContentValues)"
"android.content.Entity.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.content.Entity.toString()","java.lang.StringBuilder.toString()"
"android.content.Entity.toString()","java.lang.StringBuilder.append(android.net.Uri)"
"android.content.Entity.addSubValue(Uri, ContentValues)","java.util.ArrayList.add(android.content.Entity.NamedContentValues)"
"android.ddm.DdmHandleProfiling.handleMPSEOrSPSE(Chunk, String)","android.os.Debug.stopMethodTracing()"
"android.ddm.DdmHandleProfiling.handleMPRS(Chunk)","android.os.Debug.startMethodTracing(java.lang.String, int, int)"
"android.ddm.DdmHandleProfiling.handleMPRS(Chunk)","java.nio.ByteBuffer.getInt()"
"android.ddm.DdmHandleProfiling.handleMPSS(Chunk)","java.nio.ByteBuffer.getInt()"
"android.ddm.DdmHandleProfiling.handleMPSS(Chunk)","android.os.Debug.startMethodTracingDdms(int, int, boolean, int)"
"android.ddm.DdmHandleProfiling.handleMPRQ(Chunk)","android.os.Debug.getMethodTracingMode()"
"android.ddm.DdmHandleProfiling.handleMPRE(Chunk)","android.os.Debug.stopMethodTracing()"
"android.ddm.DdmHandleProfiling.handleSPSS(Chunk)","java.nio.ByteBuffer.getInt()"
"android.ddm.DdmHandleProfiling.handleSPSS(Chunk)","android.os.Debug.startMethodTracingDdms(int, int, boolean, int)"
"android.widget.Switch.jumpDrawablesToCurrentState()","android.animation.ValueAnimator.end()"
"android.widget.Switch.jumpDrawablesToCurrentState()","android.animation.ValueAnimator.isRunning()"
"android.widget.Switch.animateThumbToCheckedState(boolean)","android.animation.ObjectAnimator.start()"
"android.widget.Switch.animateThumbToCheckedState(boolean)","android.animation.ObjectAnimator.setAutoCancel(boolean)"
"android.widget.Switch.animateThumbToCheckedState(boolean)","android.animation.ObjectAnimator.setDuration(int)"
"android.widget.Switch.onPopulateAccessibilityEvent(AccessibilityEvent)","java.util.List.add(java.lang.CharSequence)"
"android.widget.Switch.onPopulateAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.getText()"
"android.widget.Switch.makeLayout(CharSequence)","android.text.Layout.getDesiredWidth(java.lang.CharSequence, android.text.TextPaint)"
"android.widget.Switch.makeLayout(CharSequence)","java.lang.Math.ceil(float)"
"android.widget.Switch.onDraw(Canvas)","android.text.Layout.getHeight()"
"android.widget.Switch.onDraw(Canvas)","android.text.Layout.getWidth()"
"android.widget.Switch.onTouchEvent(MotionEvent)","android.view.MotionEvent.getY()"
"android.widget.Switch.onTouchEvent(MotionEvent)","java.lang.Math.abs(float)"
"android.widget.Switch.onTouchEvent(MotionEvent)","android.view.VelocityTracker.clear()"
"android.widget.Switch.onTouchEvent(MotionEvent)","android.view.MotionEvent.getActionMasked()"
"android.widget.Switch.onTouchEvent(MotionEvent)","android.util.MathUtils.constrain(float, int, int)"
"android.widget.Switch.onTouchEvent(MotionEvent)","android.view.VelocityTracker.addMovement(android.view.MotionEvent)"
"android.widget.Switch.onTouchEvent(MotionEvent)","android.view.MotionEvent.getX()"
"android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setText(java.lang.CharSequence)"
"android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.StringBuilder.append(java.lang.CharSequence)"
"android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setClassName(java.lang.String)"
"android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.getText()"
"android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.StringBuilder.append(char)"
"android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","java.lang.Class.getName()"
"android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setText(java.lang.StringBuilder)"
"android.widget.Switch.cancelPositionAnimator()","android.animation.ValueAnimator.cancel()"
"android.widget.Switch.cancelSuperTouch(MotionEvent)","android.view.MotionEvent.recycle()"
"android.widget.Switch.cancelSuperTouch(MotionEvent)","android.view.MotionEvent.obtain(android.view.MotionEvent)"
"android.widget.Switch.cancelSuperTouch(MotionEvent)","android.view.MotionEvent.setAction(int)"
"android.widget.Switch.stopDrag(MotionEvent)","android.view.VelocityTracker.computeCurrentVelocity(int)"
"android.widget.Switch.stopDrag(MotionEvent)","android.view.VelocityTracker.getXVelocity()"
"android.widget.Switch.stopDrag(MotionEvent)","java.lang.Math.abs(float)"
"android.widget.Switch.stopDrag(MotionEvent)","android.view.MotionEvent.getAction()"
"android.widget.Switch.onMeasure(int, int)","java.lang.Math.max(int, int)"
"android.widget.Switch.onMeasure(int, int)","android.text.Layout.getWidth()"
"android.widget.Switch.onInitializeAccessibilityEvent(AccessibilityEvent)","java.lang.Class.getName()"
"android.widget.Switch.onInitializeAccessibilityEvent(AccessibilityEvent)","android.view.accessibility.AccessibilityRecord.setClassName(java.lang.String)"
"android.widget.Switch.setSwitchTextAppearance(Context, int)","android.content.res.TypedArray.recycle()"
"android.widget.Switch.setSwitchTextAppearance(Context, int)","android.text.method.TransformationMethod2.setLengthChangesAllowed(boolean)"
"android.service.dreams.DreamService.detach()","android.service.dreams.DreamService.detach()"
"android.service.dreams.DreamService.detach()","android.os.Handler.post(java.lang.Runnable)"
"android.service.dreams.DreamService.getWindowManager()","android.view.Window.getWindowManager()"
"android.service.dreams.DreamService.onWakeUp()","android.service.dreams.DreamService.finish()"
"android.service.dreams.DreamService.setContentView(View)","android.view.Window.setContentView(android.view.View)"
"android.service.dreams.DreamService.setContentView(View)","android.service.dreams.DreamService.getWindow()"
"android.service.dreams.DreamService.setDozeScreenState(int)","android.service.dreams.DreamService.updateDoze()"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","android.service.dreams.DreamService.isLowProfile()"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println(java.lang.String)"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","android.service.dreams.DreamService.isInteractive()"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","android.service.dreams.DreamService.isDozing()"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.println()"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","android.service.dreams.DreamService.isScreenBright()"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","android.view.Display.stateToString(int)"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","android.service.dreams.DreamService.isFullscreen()"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","android.service.dreams.DreamService.canDoze()"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","java.io.PrintWriter.print(java.lang.String)"
"android.service.dreams.DreamService.dumpOnHandler(FileDescriptor, PrintWriter, String[])","android.service.dreams.DreamService.isWindowless()"
"android.service.dreams.DreamService.applySystemUiVisibilityFlags(int, int)","android.view.View.getSystemUiVisibility()"
"android.service.dreams.DreamService.applySystemUiVisibilityFlags(int, int)","android.view.View.setSystemUiVisibility(int)"
"android.service.dreams.DreamService.applySystemUiVisibilityFlags(int, int)","android.service.dreams.DreamService.applyFlags(int, int, int)"
"android.service.dreams.DreamService.applySystemUiVisibilityFlags(int, int)","android.view.Window.getDecorView()"
"android.service.dreams.DreamService.finish()","android.app.Service.stopSelf()"
"android.service.dreams.DreamService.setContentView(View, ViewGroup.LayoutParams)","android.service.dreams.DreamService.getWindow()"
"android.service.dreams.DreamService.setContentView(View, ViewGroup.LayoutParams)","android.view.Window.setContentView(android.view.View, android.view.ViewGroup.LayoutParams)"
"android.service.dreams.DreamService.getSystemUiVisibilityFlagValue(int, boolean)","android.view.View.getSystemUiVisibility()"
"android.service.dreams.DreamService.getSystemUiVisibilityFlagValue(int, boolean)","android.view.Window.getDecorView()"
"android.service.dreams.DreamService.getWindowFlagValue(int, boolean)","android.view.Window.getAttributes()"
"android.service.dreams.DreamService.attach(IBinder, boolean)","android.service.dreams.DreamService.attach(android.os.IBinder, boolean)"
"android.service.dreams.DreamService.attach(IBinder, boolean)","android.os.Handler.post(java.lang.Runnable)"
"android.service.dreams.DreamService.isLowProfile()","android.service.dreams.DreamService.getSystemUiVisibilityFlagValue(int, boolean)"
"android.service.dreams.DreamService.isScreenBright()","android.service.dreams.DreamService.getWindowFlagValue(int, boolean)"
"android.service.dreams.DreamService.wakeUp()","android.os.Handler.post(java.lang.Runnable)"
"android.service.dreams.DreamService.wakeUp()","android.service.dreams.DreamService.wakeUp(boolean)"
"android.service.dreams.DreamService.clampAbsoluteBrightness(int)","android.util.MathUtils.constrain(int, int, int)"
"android.service.dreams.DreamService.setContentView(int)","android.service.dreams.DreamService.getWindow()"
"android.service.dreams.DreamService.setContentView(int)","android.view.Window.setContentView(int)"
"android.service.dreams.DreamService.setFullscreen(boolean)","android.service.dreams.DreamService.applyWindowFlags(int, int)"
"android.service.dreams.DreamService.setDozeScreenBrightness(int)","android.service.dreams.DreamService.updateDoze()"
"android.service.dreams.DreamService.setDozeScreenBrightness(int)","android.service.dreams.DreamService.clampAbsoluteBrightness(int)"
"android.service.dreams.DreamService.setScreenBright(boolean)","android.service.dreams.DreamService.applyWindowFlags(int, int)"
"android.service.dreams.DreamService.dump(FileDescriptor, PrintWriter, String[])","android.service.dreams.DreamService.dumpOnHandler(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])"
"android.service.dreams.DreamService.dump(FileDescriptor, PrintWriter, String[])","com.android.internal.util.DumpUtils.dumpAsync(android.os.Handler, com.android.internal.util.DumpUtils.Dump, java.io.PrintWriter, int)"
"android.service.dreams.DreamService.dispatchKeyShortcutEvent(KeyEvent)","android.service.dreams.DreamService.wakeUp()"
"android.service.dreams.DreamService.dispatchKeyShortcutEvent(KeyEvent)","android.view.Window.superDispatchKeyShortcutEvent(android.view.KeyEvent)"
"android.service.dreams.DreamService.dispatchTouchEvent(MotionEvent)","android.view.Window.superDispatchTouchEvent(android.view.MotionEvent)"
"android.service.dreams.DreamService.dispatchTouchEvent(MotionEvent)","android.service.dreams.DreamService.wakeUp()"
"android.service.dreams.DreamService.onDestroy()","android.service.dreams.DreamService.detach()"
"android.service.dreams.DreamService.onDestroy()","android.app.Service.onDestroy()"
"android.service.dreams.DreamService.onCreate()","android.app.Service.onCreate()"
"android.service.dreams.DreamService.findViewById(int)","android.service.dreams.DreamService.getWindow()"
"android.service.dreams.DreamService.findViewById(int)","android.view.Window.findViewById(int)"
"android.service.dreams.DreamService.addContentView(View, ViewGroup.LayoutParams)","android.view.Window.addContentView(android.view.View, android.view.ViewGroup.LayoutParams)"
"android.service.dreams.DreamService.addContentView(View, ViewGroup.LayoutParams)","android.service.dreams.DreamService.getWindow()"
"android.service.dreams.DreamService.applyWindowFlags(int, int)","android.view.ViewManager.updateViewLayout(android.view.View, android.view.WindowManager.LayoutParams)"
"android.service.dreams.DreamService.applyWindowFlags(int, int)","android.view.Window.setAttributes(android.view.WindowManager.LayoutParams)"
"android.service.dreams.DreamService.applyWindowFlags(int, int)","android.view.Window.getAttributes()"
"android.service.dreams.DreamService.applyWindowFlags(int, int)","android.service.dreams.DreamService.applyFlags(int, int, int)"
"android.service.dreams.DreamService.applyWindowFlags(int, int)","android.view.Window.getWindowManager()"
"android.service.dreams.DreamService.applyWindowFlags(int, int)","android.view.Window.getDecorView()"
"android.service.dreams.DreamService.setLowProfile(boolean)","android.service.dreams.DreamService.applySystemUiVisibilityFlags(int, int)"
"android.service.dreams.DreamService.startDozing()","android.service.dreams.DreamService.updateDoze()"
"android.service.dreams.DreamService.dispatchKeyEvent(KeyEvent)","android.view.Window.superDispatchKeyEvent(android.view.KeyEvent)"
"android.service.dreams.DreamService.dispatchKeyEvent(KeyEvent)","android.view.KeyEvent.getKeyCode()"
"android.service.dreams.DreamService.dispatchKeyEvent(KeyEvent)","android.service.dreams.DreamService.wakeUp()"
"android.service.dreams.DreamService.dispatchGenericMotionEvent(MotionEvent)","android.view.Window.superDispatchGenericMotionEvent(android.view.MotionEvent)"
"android.service.dreams.DreamService.dispatchGenericMotionEvent(MotionEvent)","android.service.dreams.DreamService.wakeUp()"
"android.service.dreams.DreamService.wakeUp(boolean)","android.service.dreams.DreamService.onWakeUp()"
"android.service.dreams.DreamService.dispatchTrackballEvent(MotionEvent)","android.view.Window.superDispatchTrackballEvent(android.view.MotionEvent)"
"android.service.dreams.DreamService.dispatchTrackballEvent(MotionEvent)","android.service.dreams.DreamService.wakeUp()"
"android.app.MediaRouteButton.onCreateDrawableState(int)","android.view.View.onCreateDrawableState(int)"
"android.app.MediaRouteButton.setVisibility(int)","android.view.View.setVisibility(int)"
"android.app.MediaRouteButton.getActivity()","android.content.ContextWrapper.getBaseContext()"
"android.app.MediaRouteButton.performClick()","android.view.View.performClick()"
"android.app.MediaRouteButton.drawableStateChanged()","android.view.View.drawableStateChanged()"
"android.app.MediaRouteButton.jumpDrawablesToCurrentState()","android.view.View.jumpDrawablesToCurrentState()"
"android.app.MediaRouteButton.performLongClick()","android.content.Context.getResources()"
"android.app.MediaRouteButton.performLongClick()","android.view.View.performLongClick()"
"android.app.MediaRouteButton.performLongClick()","android.widget.Toast.setGravity(int, int, int)"
"android.app.MediaRouteButton.performLongClick()","android.text.TextUtils.isEmpty(java.lang.CharSequence)"
"android.app.MediaRouteButton.performLongClick()","android.widget.Toast.makeText(android.content.Context, java.lang.CharSequence, int)"
"android.app.MediaRouteButton.performLongClick()","android.content.res.Resources.getDisplayMetrics()"
"android.app.MediaRouteButton.performLongClick()","android.widget.Toast.show()"
"android.app.MediaRouteButton.onAttachedToWindow()","android.view.View.onAttachedToWindow()"
"android.app.MediaRouteButton.onMeasure(int, int)","android.view.View.MeasureSpec.getMode(int)"
"android.app.MediaRouteButton.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.app.MediaRouteButton.onDetachedFromWindow()","android.view.View.onDetachedFromWindow()"
"android.view.accessibility.CaptioningManager.isEnabled()","android.provider.Settings.Secure.getInt(android.content.ContentResolver, java.lang.String, int)"
"android.view.accessibility.CaptioningManager.run()","android.view.accessibility.CaptioningManager.notifyUserStyleChanged()"
"android.view.accessibility.CaptioningManager.registerObserver(String)","android.content.ContentResolver.registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver)"
"android.view.accessibility.CaptioningManager.registerObserver(String)","android.provider.Settings.Secure.getUriFor(java.lang.String)"
"android.view.accessibility.CaptioningManager.getTypeface()","android.text.TextUtils.isEmpty(java.lang.String)"
"android.view.accessibility.CaptioningManager.applyStyle(CaptionStyle)","android.view.accessibility.CaptioningManager.CaptionStyle.hasBackgroundColor()"
"android.view.accessibility.CaptioningManager.applyStyle(CaptionStyle)","android.view.accessibility.CaptioningManager.CaptionStyle.hasWindowColor()"
"android.view.accessibility.CaptioningManager.applyStyle(CaptionStyle)","android.view.accessibility.CaptioningManager.CaptionStyle.hasEdgeColor()"
"android.view.accessibility.CaptioningManager.applyStyle(CaptionStyle)","android.view.accessibility.CaptioningManager.CaptionStyle.hasEdgeType()"
"android.view.accessibility.CaptioningManager.applyStyle(CaptionStyle)","android.view.accessibility.CaptioningManager.CaptionStyle.hasForegroundColor()"
"android.view.accessibility.CaptioningManager.notifyUserStyleChanged()","android.view.accessibility.CaptioningManager.CaptioningChangeListener.onUserStyleChanged(android.view.accessibility.CaptioningManager.CaptionStyle)"
"android.view.accessibility.CaptioningManager.notifyUserStyleChanged()","android.view.accessibility.CaptioningManager.getUserStyle()"
"android.view.accessibility.CaptioningManager.getRawUserStyle()","android.provider.Settings.Secure.getInt(android.content.ContentResolver, java.lang.String, int)"
"android.view.accessibility.CaptioningManager.getLocale()","java.lang.String.split(java.lang.String)"
"android.view.accessibility.CaptioningManager.getLocale()","android.text.TextUtils.isEmpty(java.lang.String)"
"android.view.accessibility.CaptioningManager.getLocale()","android.view.accessibility.CaptioningManager.getRawLocale()"
"android.view.accessibility.CaptioningManager.addCaptioningChangeListener(CaptioningChangeListener)","java.util.ArrayList.isEmpty()"
"android.view.accessibility.CaptioningManager.addCaptioningChangeListener(CaptioningChangeListener)","android.view.accessibility.CaptioningManager.registerObserver(java.lang.String)"
"android.view.accessibility.CaptioningManager.addCaptioningChangeListener(CaptioningChangeListener)","java.util.ArrayList.add(android.view.accessibility.CaptioningManager.CaptioningChangeListener)"
"android.view.accessibility.CaptioningManager.getUserStyle()","android.view.accessibility.CaptioningManager.CaptionStyle.getCustomStyle(android.content.ContentResolver)"
"android.view.accessibility.CaptioningManager.getUserStyle()","android.view.accessibility.CaptioningManager.getRawUserStyle()"
"android.view.accessibility.CaptioningManager.notifyEnabledChanged()","android.view.accessibility.CaptioningManager.isEnabled()"
"android.view.accessibility.CaptioningManager.notifyEnabledChanged()","android.view.accessibility.CaptioningManager.CaptioningChangeListener.onEnabledChanged(boolean)"
"android.view.accessibility.CaptioningManager.removeCaptioningChangeListener(CaptioningChangeListener)","java.util.ArrayList.isEmpty()"
"android.view.accessibility.CaptioningManager.removeCaptioningChangeListener(CaptioningChangeListener)","java.util.ArrayList.remove(android.view.accessibility.CaptioningManager.CaptioningChangeListener)"
"android.view.accessibility.CaptioningManager.removeCaptioningChangeListener(CaptioningChangeListener)","android.content.ContentResolver.unregisterContentObserver(android.database.ContentObserver)"
"android.view.accessibility.CaptioningManager.getRawLocale()","android.provider.Settings.Secure.getString(android.content.ContentResolver, java.lang.String)"
"android.view.accessibility.CaptioningManager.getFontScale()","android.provider.Settings.Secure.getFloat(android.content.ContentResolver, java.lang.String, float)"
"android.view.accessibility.CaptioningManager.notifyLocaleChanged()","android.view.accessibility.CaptioningManager.getLocale()"
"android.view.accessibility.CaptioningManager.notifyLocaleChanged()","android.view.accessibility.CaptioningManager.CaptioningChangeListener.onLocaleChanged(java.util.Locale)"
"android.view.accessibility.CaptioningManager.onChange(boolean, Uri)","java.lang.String.substring(int)"
"android.view.accessibility.CaptioningManager.onChange(boolean, Uri)","android.os.Handler.removeCallbacks(java.lang.Runnable)"
"android.view.accessibility.CaptioningManager.onChange(boolean, Uri)","android.view.accessibility.CaptioningManager.notifyEnabledChanged()"
"android.view.accessibility.CaptioningManager.onChange(boolean, Uri)","android.view.accessibility.CaptioningManager.notifyFontScaleChanged()"
"android.view.accessibility.CaptioningManager.onChange(boolean, Uri)","android.net.Uri.getPath()"
"android.view.accessibility.CaptioningManager.onChange(boolean, Uri)","java.lang.String.lastIndexOf(char)"
"android.view.accessibility.CaptioningManager.onChange(boolean, Uri)","java.lang.String.equals(java.lang.String)"
"android.view.accessibility.CaptioningManager.onChange(boolean, Uri)","android.view.accessibility.CaptioningManager.notifyLocaleChanged()"
"android.view.accessibility.CaptioningManager.onChange(boolean, Uri)","android.os.Handler.post(java.lang.Runnable)"
"android.view.accessibility.CaptioningManager.notifyFontScaleChanged()","android.view.accessibility.CaptioningManager.getFontScale()"
"android.view.accessibility.CaptioningManager.notifyFontScaleChanged()","android.view.accessibility.CaptioningManager.CaptioningChangeListener.onFontScaleChanged(float)"
"android.view.accessibility.CaptioningManager.getCustomStyle(ContentResolver)","android.provider.Settings.Secure.getInt(android.content.ContentResolver, java.lang.String, int)"
"android.view.accessibility.CaptioningManager.getCustomStyle(ContentResolver)","android.provider.Settings.Secure.getString(android.content.ContentResolver, java.lang.String)"
"android.transition.TransitionSet.setPropagation(TransitionPropagation)","java.util.ArrayList.size()"
"android.transition.TransitionSet.setPropagation(TransitionPropagation)","android.transition.Transition.setPropagation(android.transition.TransitionPropagation)"
"android.transition.TransitionSet.setPropagation(TransitionPropagation)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.getTransitionCount()","java.util.ArrayList.size()"
"android.transition.TransitionSet.removeListener(TransitionListener)","android.transition.Transition.removeListener(android.transition.Transition.TransitionListener)"
"android.transition.TransitionSet.onTransitionStart(Transition)","android.transition.Transition.start()"
"android.transition.TransitionSet.removeTarget(View)","java.util.ArrayList.size()"
"android.transition.TransitionSet.addTransition(Transition)","android.transition.Transition.setDuration(long)"
"android.transition.TransitionSet.addTransition(Transition)","java.util.ArrayList.add(android.transition.Transition)"
"android.transition.TransitionSet.setCanRemoveViews(boolean)","java.util.ArrayList.size()"
"android.transition.TransitionSet.setCanRemoveViews(boolean)","android.transition.Transition.setCanRemoveViews(boolean)"
"android.transition.TransitionSet.setCanRemoveViews(boolean)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.cancel()","android.transition.Transition.cancel()"
"android.transition.TransitionSet.cancel()","java.util.ArrayList.size()"
"android.transition.TransitionSet.cancel()","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.setPathMotion(PathMotion)","java.util.ArrayList.size()"
"android.transition.TransitionSet.setPathMotion(PathMotion)","android.transition.Transition.setPathMotion(android.transition.PathMotion)"
"android.transition.TransitionSet.setPathMotion(PathMotion)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.captureEndValues(TransitionValues)","android.transition.Transition.isValidTarget(android.view.View)"
"android.transition.TransitionSet.captureEndValues(TransitionValues)","android.transition.Transition.captureEndValues(android.transition.TransitionValues)"
"android.transition.TransitionSet.captureEndValues(TransitionValues)","java.util.ArrayList.add(android.transition.Transition)"
"android.transition.TransitionSet.addTarget(String)","java.util.ArrayList.size()"
"android.transition.TransitionSet.addTarget(String)","android.transition.Transition.addTarget(java.lang.String)"
"android.transition.TransitionSet.addTarget(String)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.excludeTarget(View, boolean)","java.util.ArrayList.size()"
"android.transition.TransitionSet.resume(View)","java.util.ArrayList.size()"
"android.transition.TransitionSet.resume(View)","android.transition.Transition.resume(android.view.View)"
"android.transition.TransitionSet.resume(View)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.addListener(TransitionListener)","android.transition.Transition.addListener(android.transition.Transition.TransitionListener)"
"android.transition.TransitionSet.setEpicenterCallback(EpicenterCallback)","java.util.ArrayList.size()"
"android.transition.TransitionSet.setEpicenterCallback(EpicenterCallback)","android.transition.Transition.setEpicenterCallback(android.transition.Transition.EpicenterCallback)"
"android.transition.TransitionSet.setEpicenterCallback(EpicenterCallback)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.createAnimators(ViewGroup, TransitionValuesMaps, TransitionValuesMaps, ArrayList, ArrayList)","java.util.ArrayList.size()"
"android.transition.TransitionSet.createAnimators(ViewGroup, TransitionValuesMaps, TransitionValuesMaps, ArrayList, ArrayList)","android.transition.Transition.setStartDelay(long)"
"android.transition.TransitionSet.createAnimators(ViewGroup, TransitionValuesMaps, TransitionValuesMaps, ArrayList, ArrayList)","android.transition.Transition.getStartDelay()"
"android.transition.TransitionSet.createAnimators(ViewGroup, TransitionValuesMaps, TransitionValuesMaps, ArrayList, ArrayList)","android.transition.Transition.createAnimators(android.view.ViewGroup, android.transition.TransitionValuesMaps, android.transition.TransitionValuesMaps, java.util.ArrayList<android.transition.TransitionValues>, java.util.ArrayList<android.transition.TransitionValues>)"
"android.transition.TransitionSet.createAnimators(ViewGroup, TransitionValuesMaps, TransitionValuesMaps, ArrayList, ArrayList)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.removeTarget(String)","java.util.ArrayList.size()"
"android.transition.TransitionSet.removeTarget(String)","android.transition.Transition.removeTarget(java.lang.String)"
"android.transition.TransitionSet.removeTarget(String)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.setupStartEndListeners()","android.transition.Transition.addListener(android.transition.TransitionSet.TransitionSetListener)"
"android.transition.TransitionSet.setupStartEndListeners()","java.util.ArrayList.size()"
"android.transition.TransitionSet.capturePropagationValues(TransitionValues)","java.util.ArrayList.size()"
"android.transition.TransitionSet.capturePropagationValues(TransitionValues)","android.transition.Transition.capturePropagationValues(android.transition.TransitionValues)"
"android.transition.TransitionSet.capturePropagationValues(TransitionValues)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.forceVisibility(int, boolean)","java.util.ArrayList.size()"
"android.transition.TransitionSet.forceVisibility(int, boolean)","android.transition.Transition.forceVisibility(int, boolean)"
"android.transition.TransitionSet.forceVisibility(int, boolean)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.removeTarget(int)","java.util.ArrayList.size()"
"android.transition.TransitionSet.removeTarget(int)","android.transition.Transition.removeTarget(int)"
"android.transition.TransitionSet.removeTarget(int)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.setStartDelay(long)","android.transition.Transition.setStartDelay(long)"
"android.transition.TransitionSet.excludeTarget(Class, boolean)","java.util.ArrayList.size()"
"android.transition.TransitionSet.excludeTarget(Class, boolean)","android.transition.Transition.excludeTarget(java.lang.Class, boolean)"
"android.transition.TransitionSet.excludeTarget(Class, boolean)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.removeTransition(Transition)","java.util.ArrayList.remove(android.transition.Transition)"
"android.transition.TransitionSet.excludeTarget(int, boolean)","java.util.ArrayList.size()"
"android.transition.TransitionSet.excludeTarget(int, boolean)","android.transition.Transition.excludeTarget(int, boolean)"
"android.transition.TransitionSet.excludeTarget(int, boolean)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.addTarget(Class)","java.util.ArrayList.size()"
"android.transition.TransitionSet.addTarget(Class)","android.transition.Transition.addTarget(java.lang.Class)"
"android.transition.TransitionSet.addTarget(Class)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.setSceneRoot(ViewGroup)","java.util.ArrayList.size()"
"android.transition.TransitionSet.setSceneRoot(ViewGroup)","android.transition.Transition.setSceneRoot(android.view.ViewGroup)"
"android.transition.TransitionSet.setSceneRoot(ViewGroup)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.pause(View)","java.util.ArrayList.size()"
"android.transition.TransitionSet.pause(View)","android.transition.Transition.pause(android.view.View)"
"android.transition.TransitionSet.pause(View)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.setDuration(long)","java.util.ArrayList.size()"
"android.transition.TransitionSet.setDuration(long)","android.transition.Transition.setDuration(long)"
"android.transition.TransitionSet.setDuration(long)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.getTransitionAt(int)","java.util.ArrayList.size()"
"android.transition.TransitionSet.getTransitionAt(int)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.addTarget(View)","java.util.ArrayList.size()"
"android.transition.TransitionSet.onTransitionEnd(Transition)","android.transition.Transition.end()"
"android.transition.TransitionSet.onTransitionEnd(Transition)","android.transition.Transition.removeListener(android.transition.TransitionSet.TransitionSetListener)"
"android.transition.TransitionSet.removeTarget(Class)","java.util.ArrayList.size()"
"android.transition.TransitionSet.removeTarget(Class)","android.transition.Transition.removeTarget(java.lang.Class)"
"android.transition.TransitionSet.removeTarget(Class)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.captureStartValues(TransitionValues)","android.transition.Transition.isValidTarget(android.view.View)"
"android.transition.TransitionSet.captureStartValues(TransitionValues)","java.util.ArrayList.add(android.transition.Transition)"
"android.transition.TransitionSet.captureStartValues(TransitionValues)","android.transition.Transition.captureStartValues(android.transition.TransitionValues)"
"android.transition.TransitionSet.clone()","java.util.ArrayList.size()"
"android.transition.TransitionSet.clone()","android.transition.TransitionSet.addTransition(android.transition.Transition)"
"android.transition.TransitionSet.clone()","android.transition.Transition.clone()"
"android.transition.TransitionSet.clone()","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.setInterpolator(TimeInterpolator)","android.transition.Transition.setInterpolator(android.animation.TimeInterpolator)"
"android.transition.TransitionSet.excludeTarget(String, boolean)","java.util.ArrayList.size()"
"android.transition.TransitionSet.excludeTarget(String, boolean)","android.transition.Transition.excludeTarget(java.lang.String, boolean)"
"android.transition.TransitionSet.excludeTarget(String, boolean)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.addTarget(int)","java.util.ArrayList.size()"
"android.transition.TransitionSet.addTarget(int)","android.transition.Transition.addTarget(int)"
"android.transition.TransitionSet.addTarget(int)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.runAnimators()","java.util.ArrayList.size()"
"android.transition.TransitionSet.runAnimators()","android.transition.Transition.end()"
"android.transition.TransitionSet.runAnimators()","java.util.ArrayList.isEmpty()"
"android.transition.TransitionSet.runAnimators()","android.transition.Transition.removeListener(android.transition.TransitionSet.Anonymous-d5e9d4e0-230e-459e-9f7d-bacb94c56592)"
"android.transition.TransitionSet.runAnimators()","android.transition.Transition.start()"
"android.transition.TransitionSet.runAnimators()","android.transition.Transition.runAnimators()"
"android.transition.TransitionSet.runAnimators()","android.transition.Transition.addListener(android.transition.Transition.TransitionListenerAdapter)"
"android.transition.TransitionSet.runAnimators()","android.transition.TransitionSet.setupStartEndListeners()"
"android.transition.TransitionSet.runAnimators()","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.toString(String)","java.util.ArrayList.size()"
"android.transition.TransitionSet.toString(String)","java.util.ArrayList.get(int)"
"android.transition.TransitionSet.toString(String)","android.transition.Transition.toString(java.lang.String)"
"android.net.dhcp.DhcpDeclinePacket.toString()","android.net.dhcp.DhcpPacket.toString()"
"android.net.dhcp.DhcpDeclinePacket.doNextOp(DhcpStateMachine)","android.net.dhcp.DhcpStateMachine.onDeclineReceived(byte[], java.net.InetAddress)"
"android.net.dhcp.DhcpDeclinePacket.buildPacket(int, short, short)","java.nio.ByteBuffer.flip()"
"android.net.dhcp.DhcpDeclinePacket.buildPacket(int, short, short)","java.nio.ByteBuffer.allocate(int)"
"android.net.dhcp.DhcpDeclinePacket.buildPacket(int, short, short)","android.net.dhcp.DhcpPacket.fillInPacket(int, java.net.InetAddress, java.net.InetAddress, short, short, java.nio.ByteBuffer, byte, boolean)"
"android.app.usage.TimeSparseArray.closestIndexOnOrAfter(long)","android.util.LongSparseArray.keyAt(int)"
"android.app.usage.TimeSparseArray.closestIndexOnOrAfter(long)","android.util.LongSparseArray.size()"
"android.app.usage.TimeSparseArray.closestIndexOnOrBefore(long)","android.util.LongSparseArray.keyAt(int)"
"android.app.usage.TimeSparseArray.closestIndexOnOrBefore(long)","android.app.usage.TimeSparseArray.closestIndexOnOrAfter(long)"
"android.app.usage.TimeSparseArray.closestIndexOnOrBefore(long)","android.util.LongSparseArray.size()"
"android.database.BulkCursorToCursorAdaptor.respond(Bundle)","android.database.IBulkCursor.respond(android.os.Bundle)"
"android.database.BulkCursorToCursorAdaptor.respond(Bundle)","android.database.BulkCursorToCursorAdaptor.throwIfCursorIsClosed()"
"android.database.BulkCursorToCursorAdaptor.getExtras()","android.database.BulkCursorToCursorAdaptor.throwIfCursorIsClosed()"
"android.database.BulkCursorToCursorAdaptor.getExtras()","android.database.IBulkCursor.getExtras()"
"android.database.BulkCursorToCursorAdaptor.deactivate()","android.database.IBulkCursor.deactivate()"
"android.database.BulkCursorToCursorAdaptor.deactivate()","android.database.AbstractCursor.deactivate()"
"android.database.BulkCursorToCursorAdaptor.getObserver()","android.database.ContentObserver.getContentObserver()"
"android.database.BulkCursorToCursorAdaptor.getCount()","android.database.BulkCursorToCursorAdaptor.throwIfCursorIsClosed()"
"android.database.BulkCursorToCursorAdaptor.requery()","android.database.BulkCursorToCursorAdaptor.throwIfCursorIsClosed()"
"android.database.BulkCursorToCursorAdaptor.requery()","android.database.AbstractWindowedCursor.closeWindow()"
"android.database.BulkCursorToCursorAdaptor.requery()","android.database.BulkCursorToCursorAdaptor.deactivate()"
"android.database.BulkCursorToCursorAdaptor.requery()","android.database.AbstractCursor.requery()"
"android.database.BulkCursorToCursorAdaptor.onMove(int, int)","android.database.CursorWindow.getStartPosition()"
"android.database.BulkCursorToCursorAdaptor.onMove(int, int)","android.database.AbstractWindowedCursor.setWindow(android.database.CursorWindow)"
"android.database.BulkCursorToCursorAdaptor.onMove(int, int)","android.database.BulkCursorToCursorAdaptor.throwIfCursorIsClosed()"
"android.database.BulkCursorToCursorAdaptor.onMove(int, int)","android.database.CursorWindow.getNumRows()"
"android.database.BulkCursorToCursorAdaptor.onMove(int, int)","android.database.IBulkCursor.getWindow(int)"
"android.database.BulkCursorToCursorAdaptor.onMove(int, int)","android.database.IBulkCursor.onMove(int)"
"android.database.BulkCursorToCursorAdaptor.close()","android.database.IBulkCursor.close()"
"android.database.BulkCursorToCursorAdaptor.close()","android.database.AbstractCursor.close()"
"android.database.BulkCursorToCursorAdaptor.getColumnNames()","android.database.BulkCursorToCursorAdaptor.throwIfCursorIsClosed()"
"android.database.BulkCursorToCursorAdaptor.initialize(BulkCursorDescriptor)","android.database.AbstractWindowedCursor.setWindow(android.database.CursorWindow)"
"android.database.BulkCursorToCursorAdaptor.initialize(BulkCursorDescriptor)","android.database.DatabaseUtils.findRowIdColumnIndex(java.lang.String[])"
"android.net.NetworkCapabilities.enumerateBits(long)","java.lang.Long.bitCount(long)"
"android.net.NetworkCapabilities.writeToParcel(Parcel, int)","android.os.Parcel.writeLong(long)"
"android.net.NetworkCapabilities.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.net.NetworkCapabilities.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.NetworkCapabilities.combineLinkBandwidths(NetworkCapabilities)","java.lang.Math.max(int, int)"
"android.net.NetworkCapabilities.satisfiedBySpecifier(NetworkCapabilities)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.net.NetworkCapabilities.satisfiedBySpecifier(NetworkCapabilities)","java.lang.String.equals(java.lang.String)"
"android.net.NetworkCapabilities.combineCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.combineSpecifiers(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.combineCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.combineTransportTypes(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.combineCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.combineNetCapabilities(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.combineCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.combineLinkBandwidths(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.toString()","android.net.NetworkCapabilities.getCapabilities()"
"android.net.NetworkCapabilities.toString()","android.net.NetworkCapabilities.getTransportTypes()"
"android.net.NetworkCapabilities.createFromParcel(Parcel)","android.os.Parcel.readLong()"
"android.net.NetworkCapabilities.createFromParcel(Parcel)","android.os.Parcel.readString()"
"android.net.NetworkCapabilities.createFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.net.NetworkCapabilities.combineSpecifiers(NetworkCapabilities)","android.net.NetworkCapabilities.getNetworkSpecifier()"
"android.net.NetworkCapabilities.combineSpecifiers(NetworkCapabilities)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.net.NetworkCapabilities.combineSpecifiers(NetworkCapabilities)","android.net.NetworkCapabilities.setNetworkSpecifier(java.lang.String)"
"android.net.NetworkCapabilities.getTransportTypes()","android.net.NetworkCapabilities.enumerateBits(long)"
"android.net.NetworkCapabilities.equals(Object)","android.net.NetworkCapabilities.equalsTransportTypes(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.equals(Object)","android.net.NetworkCapabilities.equalsLinkBandwidths(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.equals(Object)","android.net.NetworkCapabilities.equalsSpecifier(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.equals(Object)","android.net.NetworkCapabilities.equalsNetCapabilities(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.hashCode()","java.lang.String.hashCode()"
"android.net.NetworkCapabilities.hashCode()","android.text.TextUtils.isEmpty(java.lang.String)"
"android.net.NetworkCapabilities.getCapabilities()","android.net.NetworkCapabilities.enumerateBits(long)"
"android.net.NetworkCapabilities.setNetworkSpecifier(String)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.net.NetworkCapabilities.setNetworkSpecifier(String)","java.lang.Long.bitCount(long)"
"android.net.NetworkCapabilities.satisfiedByNetworkCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.satisfiedByNetCapabilities(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.satisfiedByNetworkCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.satisfiedByTransportTypes(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.satisfiedByNetworkCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.satisfiedByLinkBandwidths(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.satisfiedByNetworkCapabilities(NetworkCapabilities)","android.net.NetworkCapabilities.satisfiedBySpecifier(android.net.NetworkCapabilities)"
"android.net.NetworkCapabilities.removeTransportType(int)","android.net.NetworkCapabilities.setNetworkSpecifier(java.lang.String)"
"android.net.NetworkCapabilities.addTransportType(int)","android.net.NetworkCapabilities.setNetworkSpecifier(java.lang.String)"
"android.net.NetworkCapabilities.equalsSpecifier(NetworkCapabilities)","android.text.TextUtils.isEmpty(java.lang.String)"
"android.net.NetworkCapabilities.equalsSpecifier(NetworkCapabilities)","java.lang.String.equals(java.lang.String)"
"android.hardware.hdmi.HdmiTimerRecordSources.extraParamToByteArray(byte[], int)","android.hardware.hdmi.HdmiRecordSources.RecordSource.toByteArray(boolean, byte[], int)"
"android.hardware.hdmi.HdmiTimerRecordSources.extraParamToByteArray(byte[], int)","android.hardware.hdmi.HdmiRecordSources.RecordSource.getDataSize(boolean)"
"android.hardware.hdmi.HdmiTimerRecordSources.timerInfoOf(int, int, Time, Duration, int)","android.hardware.hdmi.HdmiTimerRecordSources.checkTimeValue(int, int)"
"android.hardware.hdmi.HdmiTimerRecordSources.timerInfoOf(int, int, Time, Duration, int)","android.hardware.hdmi.HdmiTimerRecordSources.checkDurationValue(int, int)"
"android.hardware.hdmi.HdmiTimerRecordSources.timeOf(int, int)","android.hardware.hdmi.HdmiTimerRecordSources.checkTimeValue(int, int)"
"android.hardware.hdmi.HdmiTimerRecordSources.toByteArray(byte[], int)","android.hardware.hdmi.HdmiTimerRecordSources.TimerRecordSource.getDataSize()"
"android.hardware.hdmi.HdmiTimerRecordSources.toByteArray(byte[], int)","android.hardware.hdmi.HdmiRecordSources.RecordSource.toByteArray(boolean, byte[], int)"
"android.hardware.hdmi.HdmiTimerRecordSources.toByteArray(byte[], int)","android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo.toByteArray(byte[], int)"
"android.hardware.hdmi.HdmiTimerRecordSources.getDataSize()","android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo.getDataSize()"
"android.hardware.hdmi.HdmiTimerRecordSources.getDataSize()","android.hardware.hdmi.HdmiRecordSources.RecordSource.getDataSize(boolean)"
"android.hardware.hdmi.HdmiTimerRecordSources.ofExternalPlug(TimerInfo, ExternalPlugData)","android.hardware.hdmi.HdmiTimerRecordSources.checkTimerRecordSourceInputs(android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo, android.hardware.hdmi.HdmiRecordSources.ExternalPlugData)"
"android.hardware.hdmi.HdmiTimerRecordSources.durationOf(int, int)","android.hardware.hdmi.HdmiTimerRecordSources.checkDurationValue(int, int)"
"android.hardware.hdmi.HdmiTimerRecordSources.ofAnalogueSource(TimerInfo, AnalogueServiceSource)","android.hardware.hdmi.HdmiTimerRecordSources.checkTimerRecordSourceInputs(android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo, android.hardware.hdmi.HdmiRecordSources.AnalogueServiceSource)"
"android.hardware.hdmi.HdmiTimerRecordSources.ofExternalPhysicalAddress(TimerInfo, ExternalPhysicalAddress)","android.hardware.hdmi.HdmiTimerRecordSources.checkTimerRecordSourceInputs(android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo, android.hardware.hdmi.HdmiRecordSources.ExternalPhysicalAddress)"
"android.hardware.hdmi.HdmiTimerRecordSources.ofDigitalSource(TimerInfo, DigitalServiceSource)","android.hardware.hdmi.HdmiTimerRecordSources.checkTimerRecordSourceInputs(android.hardware.hdmi.HdmiTimerRecordSources.TimerInfo, android.hardware.hdmi.HdmiRecordSources.DigitalServiceSource)"
"android.widget.HeaderViewListAdapter.getItemId(int)","android.widget.Adapter.getCount()"
"android.widget.HeaderViewListAdapter.getItemId(int)","android.widget.HeaderViewListAdapter.getHeadersCount()"
"android.widget.HeaderViewListAdapter.getItemId(int)","android.widget.Adapter.getItemId(int)"
"android.widget.HeaderViewListAdapter.registerDataSetObserver(DataSetObserver)","android.widget.Adapter.registerDataSetObserver(android.database.DataSetObserver)"
"android.widget.HeaderViewListAdapter.areAllItemsEnabled()","android.widget.ListAdapter.areAllItemsEnabled()"
"android.widget.HeaderViewListAdapter.getItem(int)","android.widget.Adapter.getCount()"
"android.widget.HeaderViewListAdapter.getItem(int)","android.widget.HeaderViewListAdapter.getHeadersCount()"
"android.widget.HeaderViewListAdapter.getItem(int)","java.util.ArrayList.get(int)"
"android.widget.HeaderViewListAdapter.getItem(int)","android.widget.Adapter.getItem(int)"
"android.widget.HeaderViewListAdapter.getItemViewType(int)","android.widget.Adapter.getCount()"
"android.widget.HeaderViewListAdapter.getItemViewType(int)","android.widget.Adapter.getItemViewType(int)"
"android.widget.HeaderViewListAdapter.getItemViewType(int)","android.widget.HeaderViewListAdapter.getHeadersCount()"
"android.widget.HeaderViewListAdapter.getFilter()","android.widget.Filterable.getFilter()"
"android.widget.HeaderViewListAdapter.unregisterDataSetObserver(DataSetObserver)","android.widget.Adapter.unregisterDataSetObserver(android.database.DataSetObserver)"
"android.widget.HeaderViewListAdapter.hasStableIds()","android.widget.Adapter.hasStableIds()"
"android.widget.HeaderViewListAdapter.removeFooter(View)","java.util.ArrayList.size()"
"android.widget.HeaderViewListAdapter.removeFooter(View)","android.widget.HeaderViewListAdapter.areAllListInfosSelectable(java.util.ArrayList<android.widget.ListView.FixedViewInfo>)"
"android.widget.HeaderViewListAdapter.removeFooter(View)","java.util.ArrayList.remove(int)"
"android.widget.HeaderViewListAdapter.removeFooter(View)","java.util.ArrayList.get(int)"
"android.widget.HeaderViewListAdapter.getView(int, View, ViewGroup)","android.widget.Adapter.getCount()"
"android.widget.HeaderViewListAdapter.getView(int, View, ViewGroup)","android.widget.HeaderViewListAdapter.getHeadersCount()"
"android.widget.HeaderViewListAdapter.getView(int, View, ViewGroup)","android.widget.Adapter.getView(int, android.view.View, android.view.ViewGroup)"
"android.widget.HeaderViewListAdapter.getView(int, View, ViewGroup)","java.util.ArrayList.get(int)"
"android.widget.HeaderViewListAdapter.isEnabled(int)","android.widget.ListAdapter.isEnabled(int)"
"android.widget.HeaderViewListAdapter.isEnabled(int)","android.widget.Adapter.getCount()"
"android.widget.HeaderViewListAdapter.isEnabled(int)","android.widget.HeaderViewListAdapter.getHeadersCount()"
"android.widget.HeaderViewListAdapter.isEnabled(int)","java.util.ArrayList.get(int)"
"android.widget.HeaderViewListAdapter.removeHeader(View)","java.util.ArrayList.size()"
"android.widget.HeaderViewListAdapter.removeHeader(View)","android.widget.HeaderViewListAdapter.areAllListInfosSelectable(java.util.ArrayList<android.widget.ListView.FixedViewInfo>)"
"android.widget.HeaderViewListAdapter.removeHeader(View)","java.util.ArrayList.remove(int)"
"android.widget.HeaderViewListAdapter.removeHeader(View)","java.util.ArrayList.get(int)"
"android.widget.HeaderViewListAdapter.getCount()","android.widget.HeaderViewListAdapter.getFootersCount()"
"android.widget.HeaderViewListAdapter.getCount()","android.widget.Adapter.getCount()"
"android.widget.HeaderViewListAdapter.getCount()","android.widget.HeaderViewListAdapter.getHeadersCount()"
"android.widget.HeaderViewListAdapter.getFootersCount()","java.util.ArrayList.size()"
"android.widget.HeaderViewListAdapter.getViewTypeCount()","android.widget.Adapter.getViewTypeCount()"
"android.widget.HeaderViewListAdapter.getHeadersCount()","java.util.ArrayList.size()"
"android.widget.HeaderViewListAdapter.isEmpty()","android.widget.Adapter.isEmpty()"
"android.bluetooth.le.ResultStorageDescriptor.ReadFromParcel(Parcel)","android.os.Parcel.readInt()"
"android.bluetooth.le.ResultStorageDescriptor.writeToParcel(Parcel, int)","android.os.Parcel.writeInt(int)"
"android.net.NetworkIdentity.buildNetworkIdentity(Context, NetworkState)","android.net.NetworkInfo.getSubtype()"
"android.net.NetworkIdentity.buildNetworkIdentity(Context, NetworkState)","android.net.NetworkInfo.isRoaming()"
"android.net.NetworkIdentity.buildNetworkIdentity(Context, NetworkState)","android.net.NetworkInfo.getType()"
"android.net.NetworkIdentity.buildNetworkIdentity(Context, NetworkState)","android.net.ConnectivityManager.isNetworkTypeMobile(int)"
"android.net.NetworkIdentity.buildNetworkIdentity(Context, NetworkState)","android.content.Context.getSystemService(java.lang.String)"
"android.net.NetworkIdentity.scrubSubscriberId(String[])","android.net.NetworkIdentity.scrubSubscriberId(java.lang.String)"
"android.net.NetworkIdentity.hashCode()","java.util.Objects.hash(int, int, java.lang.String, java.lang.String, boolean)"
"android.net.NetworkIdentity.toString()","java.lang.StringBuilder.append(int)"
"android.net.NetworkIdentity.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.net.NetworkIdentity.toString()","android.net.ConnectivityManager.getNetworkTypeName(int)"
"android.net.NetworkIdentity.toString()","java.lang.StringBuilder.toString()"
"android.net.NetworkIdentity.toString()","android.net.NetworkIdentity.scrubSubscriberId(java.lang.String)"
"android.net.NetworkIdentity.toString()","android.net.ConnectivityManager.isNetworkTypeMobile(int)"
"android.net.NetworkIdentity.equals(Object)","java.util.Objects.equals(java.lang.String, java.lang.String)"
"android.net.NetworkIdentity.compareTo(NetworkIdentity)","java.lang.Boolean.compare(boolean, boolean)"
"android.net.NetworkIdentity.compareTo(NetworkIdentity)","java.lang.Integer.compare(int, int)"
"android.net.NetworkIdentity.compareTo(NetworkIdentity)","java.lang.String.compareTo(java.lang.String)"
"android.net.NetworkIdentity.scrubSubscriberId(String)","java.lang.String.substring(int, int)"
"android.net.NetworkIdentity.scrubSubscriberId(String)","java.lang.String.equals(java.lang.String)"
"android.net.NetworkIdentity.scrubSubscriberId(String)","java.lang.Math.min(int, int)"
"android.net.NetworkIdentity.scrubSubscriberId(String)","java.lang.String.length()"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence)","android.text.method.MetaKeyKeyListener.getActive(java.lang.CharSequence, java.lang.Object, int, int)"
"android.text.method.MetaKeyKeyListener.adjust(Spannable, Object)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.adjust(Spannable, Object)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.text.method.MetaKeyKeyListener.adjust(Spannable, Object)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.onKeyUp(View, Editable, int, KeyEvent)","android.text.method.MetaKeyKeyListener.release(android.text.Editable, java.lang.Object, android.view.KeyEvent)"
"android.text.method.MetaKeyKeyListener.resetMetaState(Spannable)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.stopSelecting(View, Spannable)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.adjustMetaAfterKeypress(Spannable)","android.text.method.MetaKeyKeyListener.adjust(android.text.Spannable, java.lang.Object)"
"android.text.method.MetaKeyKeyListener.press(Editable, Object)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.press(Editable, Object)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.text.method.MetaKeyKeyListener.press(Editable, Object)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.handleKeyDown(long, int, KeyEvent)","android.text.method.MetaKeyKeyListener.press(long, int, long, int, long, long, long)"
"android.text.method.MetaKeyKeyListener.onKeyDown(View, Editable, int, KeyEvent)","android.text.method.MetaKeyKeyListener.press(android.text.Editable, java.lang.Object)"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, int)","android.text.method.MetaKeyKeyListener.getActive(java.lang.CharSequence, java.lang.Object, int, int)"
"android.text.method.MetaKeyKeyListener.release(Editable, Object, KeyEvent)","android.view.KeyEvent.getKeyCharacterMap()"
"android.text.method.MetaKeyKeyListener.release(Editable, Object, KeyEvent)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.release(Editable, Object, KeyEvent)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.text.method.MetaKeyKeyListener.release(Editable, Object, KeyEvent)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.release(Editable, Object, KeyEvent)","android.view.KeyCharacterMap.getModifierBehavior()"
"android.text.method.MetaKeyKeyListener.resetLock(Spannable, Object)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.resetLock(Spannable, Object)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.getActive(CharSequence, Object, int, int)","android.text.Spanned.getSpanFlags(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.release(long, int, long, long, long, long, KeyEvent)","android.view.KeyEvent.getKeyCharacterMap()"
"android.text.method.MetaKeyKeyListener.release(long, int, long, long, long, long, KeyEvent)","android.view.KeyCharacterMap.getModifierBehavior()"
"android.text.method.MetaKeyKeyListener.clearMetaKeyState(Editable, int)","android.text.Spannable.removeSpan(java.lang.Object)"
"android.text.method.MetaKeyKeyListener.startSelecting(View, Spannable)","android.text.Spannable.setSpan(java.lang.Object, int, int, int)"
"android.text.method.MetaKeyKeyListener.clearMetaKeyState(View, Editable, int)","android.text.method.MetaKeyKeyListener.clearMetaKeyState(android.text.Editable, int)"
"android.text.method.MetaKeyKeyListener.handleKeyUp(long, int, KeyEvent)","android.text.method.MetaKeyKeyListener.release(long, int, long, long, long, long, android.view.KeyEvent)"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, int, KeyEvent)","android.view.KeyEvent.getKeyCharacterMap()"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, int, KeyEvent)","android.text.method.MetaKeyKeyListener.getMetaState(java.lang.CharSequence)"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, int, KeyEvent)","android.view.KeyCharacterMap.getModifierBehavior()"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, int, KeyEvent)","android.view.KeyEvent.getMetaState()"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, int, KeyEvent)","android.text.method.MetaKeyKeyListener.getMetaState(int, int)"
"android.text.method.MetaKeyKeyListener.resetLockedMeta(Spannable)","android.text.method.MetaKeyKeyListener.resetLock(android.text.Spannable, java.lang.Object)"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, KeyEvent)","android.view.KeyEvent.getKeyCharacterMap()"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, KeyEvent)","android.text.method.MetaKeyKeyListener.getMetaState(java.lang.CharSequence)"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, KeyEvent)","android.view.KeyCharacterMap.getModifierBehavior()"
"android.text.method.MetaKeyKeyListener.getMetaState(CharSequence, KeyEvent)","android.view.KeyEvent.getMetaState()"
"android.speech.tts.BlockingAudioTrack.blockUntilCompletion(AudioTrack)","java.lang.Thread.sleep(long)"
"android.speech.tts.BlockingAudioTrack.blockUntilCompletion(AudioTrack)","android.speech.tts.BlockingAudioTrack.clip(long, long, long)"
"android.speech.tts.BlockingAudioTrack.createStreamingAudioTrack()","android.speech.tts.BlockingAudioTrack.getChannelConfig(int)"
"android.speech.tts.BlockingAudioTrack.createStreamingAudioTrack()","java.lang.Math.max(int, int)"
"android.speech.tts.BlockingAudioTrack.setupVolume(AudioTrack, float, float)","android.speech.tts.BlockingAudioTrack.clip(float, float, float)"
"android.speech.tts.BlockingAudioTrack.blockUntilEstimatedCompletion()","java.lang.Thread.sleep(long)"
"android.speech.tts.BlockingAudioTrack.blockUntilDone(AudioTrack)","android.speech.tts.BlockingAudioTrack.blockUntilEstimatedCompletion()"
"android.speech.tts.BlockingAudioTrack.init()","android.speech.tts.BlockingAudioTrack.createStreamingAudioTrack()"
"com.android.internal.app.ToolbarActionBar.addOnMenuVisibilityListener(OnMenuVisibilityListener)","java.util.ArrayList.add(android.app.ActionBar.OnMenuVisibilityListener)"
"com.android.internal.app.ToolbarActionBar.setCustomView(int)","android.view.LayoutInflater.from(android.content.Context)"
"com.android.internal.app.ToolbarActionBar.setCustomView(int)","com.android.internal.widget.DecorToolbar.getContext()"
"com.android.internal.app.ToolbarActionBar.setSubtitle(CharSequence)","com.android.internal.widget.DecorToolbar.setSubtitle(java.lang.CharSequence)"
"com.android.internal.app.ToolbarActionBar.setHomeActionContentDescription(int)","com.android.internal.widget.DecorToolbar.setNavigationContentDescription(int)"
"com.android.internal.app.ToolbarActionBar.setSubtitle(int)","android.content.Context.getText(int)"
"com.android.internal.app.ToolbarActionBar.setSubtitle(int)","com.android.internal.widget.DecorToolbar.getContext()"
"com.android.internal.app.ToolbarActionBar.setSubtitle(int)","com.android.internal.widget.DecorToolbar.setSubtitle(java.lang.CharSequence)"
"com.android.internal.app.ToolbarActionBar.removeOnMenuVisibilityListener(OnMenuVisibilityListener)","java.util.ArrayList.remove(android.app.ActionBar.OnMenuVisibilityListener)"
"com.android.internal.app.ToolbarActionBar.setTitle(int)","com.android.internal.widget.DecorToolbar.setTitle(java.lang.CharSequence)"
"com.android.internal.app.ToolbarActionBar.setTitle(int)","android.content.Context.getText(int)"
"com.android.internal.app.ToolbarActionBar.setTitle(int)","com.android.internal.widget.DecorToolbar.getContext()"
"com.android.internal.app.ToolbarActionBar.isTitleTruncated()","android.app.ActionBar.isTitleTruncated()"
"com.android.internal.app.ToolbarActionBar.show()","com.android.internal.widget.DecorToolbar.setVisibility(int)"
"com.android.internal.app.ToolbarActionBar.setDisplayShowTitleEnabled(boolean)","com.android.internal.app.ToolbarActionBar.setDisplayOptions(int, int)"
"com.android.internal.app.ToolbarActionBar.hide()","com.android.internal.widget.DecorToolbar.setVisibility(int)"
"com.android.internal.app.ToolbarActionBar.setSelectedNavigationItem(int)","com.android.internal.widget.DecorToolbar.setDropdownSelectedPosition(int)"
"com.android.internal.app.ToolbarActionBar.setSelectedNavigationItem(int)","com.android.internal.widget.DecorToolbar.getNavigationMode()"
"com.android.internal.app.ToolbarActionBar.setDisplayUseLogoEnabled(boolean)","com.android.internal.app.ToolbarActionBar.setDisplayOptions(int, int)"
"com.android.internal.app.ToolbarActionBar.getThemedContext()","com.android.internal.widget.DecorToolbar.getContext()"
"com.android.internal.app.ToolbarActionBar.setTitle(CharSequence)","com.android.internal.widget.DecorToolbar.setTitle(java.lang.CharSequence)"
"com.android.internal.app.ToolbarActionBar.isShowing()","com.android.internal.widget.DecorToolbar.getVisibility()"
"com.android.internal.app.ToolbarActionBar.setCustomView(View, LayoutParams)","android.view.View.setLayoutParams(android.app.ActionBar.LayoutParams)"
"com.android.internal.app.ToolbarActionBar.setCustomView(View, LayoutParams)","com.android.internal.widget.DecorToolbar.setCustomView(android.view.View)"
"com.android.internal.app.ToolbarActionBar.dispatchMenuVisibilityChanged(boolean)","java.util.ArrayList.size()"
"com.android.internal.app.ToolbarActionBar.dispatchMenuVisibilityChanged(boolean)","android.app.ActionBar.OnMenuVisibilityListener.onMenuVisibilityChanged(boolean)"
"com.android.internal.app.ToolbarActionBar.dispatchMenuVisibilityChanged(boolean)","java.util.ArrayList.get(int)"
"com.android.internal.app.ToolbarActionBar.onMenuKeyEvent(KeyEvent)","com.android.internal.app.ToolbarActionBar.openOptionsMenu()"
"com.android.internal.app.ToolbarActionBar.onMenuKeyEvent(KeyEvent)","android.view.KeyEvent.getAction()"
"com.android.internal.app.ToolbarActionBar.collapseActionView()","com.android.internal.widget.DecorToolbar.hasExpandedActionView()"
"com.android.internal.app.ToolbarActionBar.collapseActionView()","com.android.internal.widget.DecorToolbar.collapseActionView()"
"com.android.internal.app.ToolbarActionBar.onMenuItemClick(MenuItem)","android.view.Window.Callback.onMenuItemSelected(int, android.view.MenuItem)"
"com.android.internal.app.ToolbarActionBar.setWindowTitle(CharSequence)","com.android.internal.widget.DecorToolbar.setWindowTitle(java.lang.CharSequence)"
"com.android.internal.app.ToolbarActionBar.setDisplayOptions(int)","com.android.internal.app.ToolbarActionBar.setDisplayOptions(int, int)"
"com.android.internal.app.ToolbarActionBar.setCustomView(View)","com.android.internal.app.ToolbarActionBar.setCustomView(android.view.View, android.app.ActionBar.LayoutParams)"
"com.android.internal.app.ToolbarActionBar.setDisplayShowHomeEnabled(boolean)","com.android.internal.app.ToolbarActionBar.setDisplayOptions(int, int)"
"com.android.internal.app.ToolbarActionBar.setDisplayHomeAsUpEnabled(boolean)","com.android.internal.app.ToolbarActionBar.setDisplayOptions(int, int)"
"com.android.internal.app.ToolbarActionBar.setNavigationMode(int)","com.android.internal.widget.DecorToolbar.setNavigationMode(int)"
"com.android.internal.app.ToolbarActionBar.populateOptionsMenu()","android.view.Menu.clear()"
"com.android.internal.app.ToolbarActionBar.populateOptionsMenu()","android.view.Window.Callback.onPreparePanel(int, null, android.view.Menu)"
"com.android.internal.app.ToolbarActionBar.populateOptionsMenu()","com.android.internal.widget.DecorToolbar.getMenu()"
"com.android.internal.app.ToolbarActionBar.populateOptionsMenu()","com.android.internal.view.menu.MenuBuilder.startDispatchingItemsChanged()"
"com.android.internal.app.ToolbarActionBar.populateOptionsMenu()","com.android.internal.widget.DecorToolbar.setMenuCallbacks(com.android.internal.app.ToolbarActionBar.ActionMenuPresenterCallback, com.android.internal.app.ToolbarActionBar.MenuBuilderCallback)"
"com.android.internal.app.ToolbarActionBar.populateOptionsMenu()","com.android.internal.view.menu.MenuBuilder.stopDispatchingItemsChanged()"
"com.android.internal.app.ToolbarActionBar.populateOptionsMenu()","android.view.Window.Callback.onCreatePanelMenu(int, android.view.Menu)"
"com.android.internal.app.ToolbarActionBar.setDisplayOptions(int, int)","com.android.internal.widget.DecorToolbar.setDisplayOptions(int)"
"com.android.internal.app.ToolbarActionBar.setDisplayOptions(int, int)","com.android.internal.widget.DecorToolbar.getDisplayOptions()"
"com.android.internal.app.ToolbarActionBar.getTitle()","com.android.internal.widget.DecorToolbar.getTitle()"
"com.android.internal.app.ToolbarActionBar.onOpenSubMenu(MenuBuilder)","android.view.Window.Callback.onMenuOpened(int, com.android.internal.view.menu.MenuBuilder)"
"com.android.internal.app.ToolbarActionBar.getCustomView()","com.android.internal.widget.DecorToolbar.getCustomView()"
"com.android.internal.app.ToolbarActionBar.setHomeActionContentDescription(CharSequence)","com.android.internal.widget.DecorToolbar.setNavigationContentDescription(java.lang.CharSequence)"
"com.android.internal.app.ToolbarActionBar.onCloseMenu(MenuBuilder, boolean)","android.view.Window.Callback.onPanelClosed(int, com.android.internal.view.menu.MenuBuilder)"
"com.android.internal.app.ToolbarActionBar.onCloseMenu(MenuBuilder, boolean)","com.android.internal.widget.DecorToolbar.dismissPopupMenus()"
"com.android.internal.app.ToolbarActionBar.openOptionsMenu()","com.android.internal.widget.DecorToolbar.showOverflowMenu()"
"com.android.internal.app.ToolbarActionBar.run()","com.android.internal.app.ToolbarActionBar.populateOptionsMenu()"
"com.android.internal.app.ToolbarActionBar.onConfigurationChanged(Configuration)","android.app.ActionBar.onConfigurationChanged(android.content.res.Configuration)"
"com.android.internal.app.ToolbarActionBar.onMenuModeChange(MenuBuilder)","android.view.Window.Callback.onPreparePanel(int, null, com.android.internal.view.menu.MenuBuilder)"
"com.android.internal.app.ToolbarActionBar.onMenuModeChange(MenuBuilder)","com.android.internal.widget.DecorToolbar.isOverflowMenuShowing()"
"com.android.internal.app.ToolbarActionBar.onMenuModeChange(MenuBuilder)","android.view.Window.Callback.onPanelClosed(int, com.android.internal.view.menu.MenuBuilder)"
"com.android.internal.app.ToolbarActionBar.onMenuModeChange(MenuBuilder)","android.view.Window.Callback.onMenuOpened(int, com.android.internal.view.menu.MenuBuilder)"
"com.android.internal.app.ToolbarActionBar.setDisplayShowCustomEnabled(boolean)","com.android.internal.app.ToolbarActionBar.setDisplayOptions(int, int)"
"com.android.internal.app.ToolbarActionBar.getHeight()","com.android.internal.widget.DecorToolbar.getHeight()"
"com.android.internal.app.ToolbarActionBar.getSubtitle()","com.android.internal.widget.DecorToolbar.getSubtitle()"
"com.android.internal.app.ToolbarActionBar.onPreparePanel(int, View, Menu)","android.view.WindowCallbackWrapper.onPreparePanel(int, android.view.View, android.view.Menu)"
"com.android.internal.app.ToolbarActionBar.onPreparePanel(int, View, Menu)","com.android.internal.widget.DecorToolbar.setMenuPrepared()"
"com.android.internal.app.ToolbarActionBar.setListNavigationCallbacks(SpinnerAdapter, OnNavigationListener)","com.android.internal.widget.DecorToolbar.setDropdownParams(android.widget.SpinnerAdapter, com.android.internal.app.NavItemSelectedListener)"
"com.android.internal.app.ToolbarActionBar.getDisplayOptions()","com.android.internal.widget.DecorToolbar.getDisplayOptions()"
"android.gesture.GestureLibrary.getSequenceType()","android.gesture.GestureStore.getSequenceType()"
"android.gesture.GestureLibrary.getLearner()","android.gesture.GestureStore.getLearner()"
"android.gesture.GestureLibrary.recognize(Gesture)","android.gesture.GestureStore.recognize(android.gesture.Gesture)"
"android.gesture.GestureLibrary.removeGesture(String, Gesture)","android.gesture.GestureStore.removeGesture(java.lang.String, android.gesture.Gesture)"
"android.gesture.GestureLibrary.addGesture(String, Gesture)","android.gesture.GestureStore.addGesture(java.lang.String, android.gesture.Gesture)"
"android.gesture.GestureLibrary.setSequenceType(int)","android.gesture.GestureStore.setSequenceType(int)"
"android.gesture.GestureLibrary.setOrientationStyle(int)","android.gesture.GestureStore.setOrientationStyle(int)"
"android.gesture.GestureLibrary.removeEntry(String)","android.gesture.GestureStore.removeEntry(java.lang.String)"
"android.gesture.GestureLibrary.getOrientationStyle()","android.gesture.GestureStore.getOrientationStyle()"
"android.gesture.GestureLibrary.getGestureEntries()","android.gesture.GestureStore.getGestureEntries()"
"android.gesture.GestureLibrary.getGestures(String)","android.gesture.GestureStore.getGestures(java.lang.String)"
"android.util.LongSparseArray.put(long, E)","com.android.internal.util.GrowingArrayUtils.insert(long[], int, int, long)"
"android.util.LongSparseArray.put(long, E)","com.android.internal.util.GrowingArrayUtils.insert(java.lang.Object[], int, int, E)"
"android.util.LongSparseArray.put(long, E)","android.util.ContainerHelpers.binarySearch(long[], int, long)"
"android.util.LongSparseArray.put(long, E)","android.util.LongSparseArray.gc()"
"android.util.LongSparseArray.indexOfKey(long)","android.util.LongSparseArray.gc()"
"android.util.LongSparseArray.indexOfKey(long)","android.util.ContainerHelpers.binarySearch(long[], int, long)"
"android.util.LongSparseArray.toString()","android.util.LongSparseArray.keyAt(int)"
"android.util.LongSparseArray.toString()","java.lang.StringBuilder.append(java.lang.Object)"
"android.util.LongSparseArray.toString()","java.lang.StringBuilder.append(java.lang.String)"
"android.util.LongSparseArray.toString()","java.lang.StringBuilder.toString()"
"android.util.LongSparseArray.toString()","java.lang.StringBuilder.append(char)"
"android.util.LongSparseArray.toString()","android.util.LongSparseArray.size()"
"android.util.LongSparseArray.toString()","java.lang.StringBuilder.append(long)"
"android.util.LongSparseArray.toString()","android.util.LongSparseArray.valueAt(int)"
"android.util.LongSparseArray.get(long, E)","android.util.ContainerHelpers.binarySearch(long[], int, long)"
"android.util.LongSparseArray.size()","android.util.LongSparseArray.gc()"
"android.util.LongSparseArray.valueAt(int)","android.util.LongSparseArray.gc()"
"android.util.LongSparseArray.append(long, E)","com.android.internal.util.GrowingArrayUtils.append(java.lang.Object[], int, E)"
"android.util.LongSparseArray.append(long, E)","android.util.LongSparseArray.put(long, E)"
"android.util.LongSparseArray.append(long, E)","android.util.LongSparseArray.gc()"
"android.util.LongSparseArray.append(long, E)","com.android.internal.util.GrowingArrayUtils.append(long[], int, long)"
"android.util.LongSparseArray.remove(long)","android.util.LongSparseArray.delete(long)"
"android.util.LongSparseArray.clone()","java.lang.Object.clone()"
"android.util.LongSparseArray.setValueAt(int, E)","android.util.LongSparseArray.gc()"
"android.util.LongSparseArray.get(long)","android.util.LongSparseArray.get(long, null)"
"android.util.LongSparseArray.delete(long)","android.util.ContainerHelpers.binarySearch(long[], int, long)"
"android.util.LongSparseArray.keyAt(int)","android.util.LongSparseArray.gc()"
"android.util.LongSparseArray.indexOfValue(E)","android.util.LongSparseArray.gc()"
"android.content.pm.VerifierInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeString(java.lang.String)"
"android.content.pm.VerifierInfo.writeToParcel(Parcel, int)","android.os.Parcel.writeSerializable(java.security.PublicKey)"
"android.content.UriMatcher.addURI(String, String, int)","java.lang.String.charAt(int)"
"android.content.UriMatcher.addURI(String, String, int)","java.lang.String.substring(int)"
"android.content.UriMatcher.addURI(String, String, int)","java.util.ArrayList.size()"
"android.content.UriMatcher.addURI(String, String, int)","java.util.ArrayList.add(android.content.UriMatcher)"
"android.content.UriMatcher.addURI(String, String, int)","java.lang.String.equals(java.lang.String)"
"android.content.UriMatcher.addURI(String, String, int)","java.util.regex.Pattern.split(java.lang.String)"
"android.content.UriMatcher.addURI(String, String, int)","java.util.ArrayList.get(int)"
"android.content.UriMatcher.addURI(String, String, int)","java.lang.String.length()"
"android.content.UriMatcher.match(Uri)","java.lang.String.charAt(int)"
"android.content.UriMatcher.match(Uri)","java.util.ArrayList.size()"
"android.content.UriMatcher.match(Uri)","java.util.List.size()"
"android.content.UriMatcher.match(Uri)","android.net.Uri.getPathSegments()"
"android.content.UriMatcher.match(Uri)","java.lang.String.equals(java.lang.String)"
"android.content.UriMatcher.match(Uri)","android.net.Uri.getAuthority()"
"android.content.UriMatcher.match(Uri)","java.util.List.get(int)"
"android.content.UriMatcher.match(Uri)","java.util.ArrayList.get(int)"
"android.content.UriMatcher.match(Uri)","java.lang.String.length()"
"android.widget.ActivityChooserView.setMaxActivityCount(int)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.ActivityChooserView.onGlobalLayout()","android.view.ActionProvider.subUiVisibilityChanged(boolean)"
"android.widget.ActivityChooserView.setDataModel(ActivityChooserModel)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.ActivityChooserView.setDataModel(ActivityChooserModel)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getDataModel()"
"android.widget.ActivityChooserView.setDataModel(ActivityChooserModel)","android.database.Observable.unregisterObserver(android.database.DataSetObserver)"
"android.widget.ActivityChooserView.setDataModel(ActivityChooserModel)","android.database.Observable.registerObserver(android.database.DataSetObserver)"
"android.widget.ActivityChooserView.getDefaultActivity()","android.widget.ActivityChooserModel.getDefaultActivity()"
"android.widget.ActivityChooserView.onDismiss()","android.view.ActionProvider.subUiVisibilityChanged(boolean)"
"android.widget.ActivityChooserView.notifyOnDismissListener()","android.widget.PopupWindow.OnDismissListener.onDismiss()"
"android.widget.ActivityChooserView.getHistorySize()","android.widget.ActivityChooserModel.getHistorySize()"
"android.widget.ActivityChooserView.getItemViewType(int)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getCount()"
"android.widget.ActivityChooserView.onDetachedFromWindow()","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getDataModel()"
"android.widget.ActivityChooserView.onDetachedFromWindow()","android.database.Observable.unregisterObserver(android.database.DataSetObserver)"
"android.widget.ActivityChooserView.onDetachedFromWindow()","android.view.ViewTreeObserver.removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"
"android.widget.ActivityChooserView.onDetachedFromWindow()","android.view.ViewTreeObserver.isAlive()"
"android.widget.ActivityChooserView.measureContentWidth()","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getCount()"
"android.widget.ActivityChooserView.measureContentWidth()","android.view.View.getMeasuredWidth()"
"android.widget.ActivityChooserView.measureContentWidth()","android.view.View.measure(int, int)"
"android.widget.ActivityChooserView.measureContentWidth()","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.ActivityChooserView.measureContentWidth()","java.lang.Math.max(int, int)"
"android.widget.ActivityChooserView.measureContentWidth()","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getView(int, android.view.View, null)"
"android.widget.ActivityChooserView.getCount()","android.widget.ActivityChooserModel.getDefaultActivity()"
"android.widget.ActivityChooserView.getCount()","android.widget.ActivityChooserModel.getActivityCount()"
"android.widget.ActivityChooserView.getCount()","java.lang.Math.min(int, int)"
"android.widget.ActivityChooserView.setShowFooterView(boolean)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.ActivityChooserView.onAttachedToWindow()","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getDataModel()"
"android.widget.ActivityChooserView.onAttachedToWindow()","android.database.Observable.registerObserver(android.database.DataSetObserver)"
"android.widget.ActivityChooserView.onClick(View)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getDefaultActivity()"
"android.widget.ActivityChooserView.onClick(View)","android.widget.ActivityChooserModel.getActivityIndex(android.content.pm.ResolveInfo)"
"android.widget.ActivityChooserView.onClick(View)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getDataModel()"
"android.widget.ActivityChooserView.onClick(View)","android.widget.ActivityChooserModel.chooseActivity(int)"
"android.widget.ActivityChooserView.onClick(View)","android.content.Intent.addFlags(int)"
"android.widget.ActivityChooserView.setShowDefaultActivity(boolean, boolean)","android.widget.BaseAdapter.notifyDataSetChanged()"
"android.widget.ActivityChooserView.onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfo)","android.view.accessibility.AccessibilityNodeInfo.setCanOpenPopup(boolean)"
"android.widget.ActivityChooserView.onInitializeAccessibilityNodeInfo(View, AccessibilityNodeInfo)","android.view.View.AccessibilityDelegate.onInitializeAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo)"
"android.widget.ActivityChooserView.getView(int, View, ViewGroup)","android.view.View.setId(int)"
"android.widget.ActivityChooserView.getView(int, View, ViewGroup)","android.content.Context.getPackageManager()"
"android.widget.ActivityChooserView.getView(int, View, ViewGroup)","android.view.View.setActivated(boolean)"
"android.widget.ActivityChooserView.getView(int, View, ViewGroup)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getItemViewType(int)"
"android.widget.ActivityChooserView.getView(int, View, ViewGroup)","android.view.View.getId()"
"android.widget.ActivityChooserView.getView(int, View, ViewGroup)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getItem(int)"
"android.widget.ActivityChooserView.onInvalidated()","android.widget.BaseAdapter.notifyDataSetInvalidated()"
"android.widget.ActivityChooserView.onInvalidated()","android.database.DataSetObserver.onInvalidated()"
"android.widget.ActivityChooserView.onItemClick(AdapterView, View, int, long)","android.widget.ActivityChooserModel.setDefaultActivity(int)"
"android.widget.ActivityChooserView.onItemClick(AdapterView, View, int, long)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getShowDefaultActivity()"
"android.widget.ActivityChooserView.onItemClick(AdapterView, View, int, long)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getDataModel()"
"android.widget.ActivityChooserView.onItemClick(AdapterView, View, int, long)","android.widget.ActivityChooserModel.getActivity(int)"
"android.widget.ActivityChooserView.onItemClick(AdapterView, View, int, long)","android.widget.ActivityChooserModel.chooseActivity(int)"
"android.widget.ActivityChooserView.onItemClick(AdapterView, View, int, long)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getItemViewType(int)"
"android.widget.ActivityChooserView.onItemClick(AdapterView, View, int, long)","android.content.Intent.addFlags(int)"
"android.widget.ActivityChooserView.onMeasure(int, int)","android.view.View.MeasureSpec.makeMeasureSpec(int, int)"
"android.widget.ActivityChooserView.onMeasure(int, int)","android.view.View.MeasureSpec.getSize(int)"
"android.widget.ActivityChooserView.getListPopupWindow()","android.widget.ListPopupWindow.setOnItemClickListener(android.widget.ActivityChooserView.Callbacks)"
"android.widget.ActivityChooserView.getListPopupWindow()","android.widget.ListPopupWindow.setAdapter(android.widget.ActivityChooserView.ActivityChooserViewAdapter)"
"android.widget.ActivityChooserView.getListPopupWindow()","android.widget.ListPopupWindow.setOnDismissListener(android.widget.ActivityChooserView.Callbacks)"
"android.widget.ActivityChooserView.getListPopupWindow()","android.widget.ListPopupWindow.setModal(boolean)"
"android.widget.ActivityChooserView.setActivityChooserModel(ActivityChooserModel)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.setDataModel(android.widget.ActivityChooserModel)"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.view.ActionProvider.subUiVisibilityChanged(boolean)"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.setShowFooterView(boolean)"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.setMaxActivityCount(int)"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.widget.ListPopupWindow.isShowing()"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.setShowDefaultActivity(boolean, boolean)"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getDataModel()"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getActivityCount()"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.widget.ListPopupWindow.show()"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.widget.ListPopupWindow.setContentWidth(int)"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","java.lang.Math.min(int, int)"
"android.widget.ActivityChooserView.showPopupUnchecked(int)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.measureContentWidth()"
"android.widget.ActivityChooserView.getItem(int)","android.widget.ActivityChooserModel.getDefaultActivity()"
"android.widget.ActivityChooserView.getItem(int)","android.widget.ActivityChooserModel.getActivity(int)"
"android.widget.ActivityChooserView.getItem(int)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getItemViewType(int)"
"android.widget.ActivityChooserView.setExpandActivityOverflowButtonContentDescription(int)","android.content.Context.getString(int)"
"android.widget.ActivityChooserView.getActivityCount()","android.widget.ActivityChooserModel.getActivityCount()"
"android.widget.ActivityChooserView.onLongClick(View)","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getCount()"
"android.widget.ActivityChooserView.startActivity(Intent, ResolveInfo)","android.content.pm.ResolveInfo.loadLabel(android.content.pm.PackageManager)"
"android.widget.ActivityChooserView.startActivity(Intent, ResolveInfo)","android.content.Context.getPackageManager()"
"android.widget.ActivityChooserView.startActivity(Intent, ResolveInfo)","android.widget.Toast.makeText(android.content.Context, java.lang.String, int)"
"android.widget.ActivityChooserView.startActivity(Intent, ResolveInfo)","android.content.Context.startActivity(android.content.Intent)"
"android.widget.ActivityChooserView.startActivity(Intent, ResolveInfo)","android.widget.Toast.show()"
"android.widget.ActivityChooserView.dismissPopup()","android.view.ViewTreeObserver.removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"
"android.widget.ActivityChooserView.dismissPopup()","android.view.ViewTreeObserver.isAlive()"
"android.widget.ActivityChooserView.updateAppearance()","android.content.pm.ResolveInfo.loadLabel(android.content.pm.PackageManager)"
"android.widget.ActivityChooserView.updateAppearance()","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getCount()"
"android.widget.ActivityChooserView.updateAppearance()","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getDefaultActivity()"
"android.widget.ActivityChooserView.updateAppearance()","android.content.Context.getPackageManager()"
"android.widget.ActivityChooserView.updateAppearance()","android.content.Context.getString(int, java.lang.CharSequence)"
"android.widget.ActivityChooserView.updateAppearance()","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getActivityCount()"
"android.widget.ActivityChooserView.updateAppearance()","android.widget.ActivityChooserView.ActivityChooserViewAdapter.getHistorySize()"
"android.widget.ActivityChooserView.onChanged()","android.database.DataSetObserver.onChanged()"
